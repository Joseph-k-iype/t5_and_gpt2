
import pandas as pd

# Create a sample DataFrame with string values
data = {
    'process': ['A', 'A', 'B', 'B', 'C', 'C'],
    'gcon': ['1', '1', '2', '2', '3', '3'],
    'gle': ['1', '0', '2', '2', '3', '3'],
    'glob': ['1', '1', '2', '1', '3', '3'],
    'pcdm': ['1', '1', '2', '2', '3', '0'],
    'ocdm': ['1', '1', '0', '2', '3', '3'],
    'ocon': ['1', '0', '2', '2', '3', '3'],
    'ole': ['1', '1', '2', '2', '3', '3'],
    'olob': ['1', '1', '2', '2', '0', '3']
}

df = pd.DataFrame(data)

# Define pairs for comparison
comparison_pairs = [('gcon', 'ocon'), ('gle', 'ole'), ('glob', 'olob'), ('pcdm', 'ocdm')]

def calculate_correctness(df, comparison_pairs):
    results = {}
    overall_correctness_list = []

    # Add a correctness column for each pair
    for pair in comparison_pairs:
        df[f'{pair[0]}_{pair[1]}_correct'] = df.apply(lambda row: row[pair[0]] == row[pair[1]], axis=1)
    
    # Add a column that checks if all pairs are correct
    df['all_correct'] = df[[f'{pair[0]}_{pair[1]}_correct' for pair in comparison_pairs]].all(axis=1)
    
    # Calculate individual correctness for each pair and overall correctness for the entire DataFrame
    for pair in comparison_pairs:
        overall_correctness_list.extend(df[f'{pair[0]}_{pair[1]}_correct'].tolist())
    
    overall_correctness_df = df['all_correct'].mean() * 100
    
    # Flag each row as fully correct, partially correct, or fully wrong
    df['correctness_flag'] = df.apply(lambda row: 'Fully Correct' if row['all_correct'] else ('Fully Wrong' if all(not row[f'{pair[0]}_{pair[1]}_correct'] for pair in comparison_pairs) else 'Partially Correct'), axis=1)
    
    return df, overall_correctness_df

df, overall_correctness_df = calculate_correctness(df, comparison_pairs)

# Save the DataFrame with correctness flags to CSV
df.to_csv('correctness_results_with_flags.csv', index=False)

# Print results for verification
print("Correctness Results with Flags:")
print(df)

print("\nOverall Correctness for the Entire DataFrame:")
print(f"{overall_correctness_df:.2f}%")


