import requests
import rdflib
from rdflib import ConjunctiveGraph

class SPARQLGraph:
    def __init__(self, endpoint, auth_token):
        self.endpoint = endpoint
        self.auth_token = auth_token
        self.graph = ConjunctiveGraph()

    def query(self, query):
        headers = {
            "Content-Type": "application/sparql-query",
            "Authorization": f"Bearer {self.auth_token}"
        }
        response = requests.post(self.endpoint, data=query, headers=headers)
        if response.status_code == 200:
            return response.text
        else:
            response.raise_for_status()

# Define the SPARQL endpoint and the authorization token
endpoint = "https://abc.com/sparql"
auth_token = "your_token_here"

# Create an instance of SPARQLGraph
rdf = SPARQLGraph(endpoint, auth_token)

# Define your SPARQL query
query = """
PREFIX ex: <http://example.org/>
SELECT ?subject ?predicate ?object
WHERE {
  ?subject ?predicate ?object.
}
"""

# Execute the query using the rdf variable
result = rdf.query(query)

# Parse the result to count the number of statements
g = rdflib.Graph()
g.parse(data=result, format="application/sparql-results+json")
number_of_statements = len(g)

# Print the number of statements
print(f"Number of statements: {number_of_statements}")
