# Redefining the function to ensure it runs correctly within the environment

def split_dataframe_to_excel(writer, df, sheet_name_prefix):
    max_rows_per_sheet = 1048576  # Excel's maximum number of rows per sheet
    num_sheets = (len(df) // max_rows_per_sheet) + 1

    for i in range(num_sheets):
        start_row = i * max_rows_per_sheet
        end_row = min(start_row + max_rows_per_sheet, len(df))
        sheet_name = f"{sheet_name_prefix}_{i+1}"
        df.iloc[start_row:end_row].to_excel(writer, sheet_name=sheet_name, index=False)

def merge_csv_files_to_excel(input_folder, output_file):
    # Get a list of all CSV files in the input folder
    csv_files = [file for file in os.listdir(input_folder) if file.endswith('.csv')]
    
    # Initialize an empty list to hold dataframes
    df_list = []
    
    # Loop through the list of CSV files and read them into dataframes
    for csv_file in csv_files:
        file_path = os.path.join(input_folder, csv_file)
        try:
            df = pd.read_csv(file_path)
            df_list.append(df)
        except Exception as e:
            print(f"Error reading {file_path}: {e}")
    
    # Concatenate all dataframes into one
    if df_list:
        merged_df = pd.concat(df_list, ignore_index=True)
        
        # Write the merged dataframe to an Excel file with multiple sheets if needed
        with pd.ExcelWriter(output_file, engine='openpyxl') as writer:
            if not merged_df.empty:
                split_dataframe_to_excel(writer, merged_df, 'Sheet')
            else:
                # Create at least one visible sheet
                pd.DataFrame().to_excel(writer, sheet_name='Sheet1')
        
        print(f"Merged {len(csv_files)} CSV files into {output_file}")
    else:
        print("No valid CSV files found to merge.")

# Test the function with the sample data
input_folder = '/mnt/data/test_csv_folder'
output_file = '/mnt/data/merged_file.xlsx'
merge_csv_files_to_excel(input_folder, output_file)

# Verify the output file exists and return the path for user
output_file
