def main():
    # Define the input filename (adjust as needed)
    input_filename = "input_data.json"
    
    # Load the input JSON file
    try:
        with open(input_filename, "r") as infile:
            input_data = json.load(infile)
        # If the input is a single dict, convert it to a list
        if isinstance(input_data, dict):
            input_data = [input_data]
        # Validate that each item has the required keys
        elif isinstance(input_data, list):
            for item in input_data:
                if "name" not in item or "definition" not in item:
                    raise ValueError("Each object in the JSON list must contain 'name' and 'definition' keys.")
        else:
            raise ValueError("Input JSON must be an object or a list of objects.")
    except Exception as e:
        logger.error(f"Error reading input file: {e}")
        sys.exit(1)
    
    # Initialize the chatbot and classification workflow
    bot = AzureChatbot(CONFIG_PATH, CREDS_PATH, CERT_PATH)
    
    # Process classification for each data asset and store results
    results = []
    for item in input_data:
        classification_result = bot.classify_data(item)
        results.append(classification_result)
    
    # Save the results as a JSON file
    output_json_file = "isr_results.json"
    try:
        with open(output_json_file, "w") as outfile:
            json.dump(results, outfile, indent=2)
        logger.info(f"Classification results saved to {output_json_file}")
    except Exception as e:
        logger.error(f"Error saving JSON result: {e}")
    
    # Convert the JSON result to CSV using pandas
    try:
        df = pd.json_normalize(results)
        output_csv_file = "isr_results.csv"
        df.to_csv(output_csv_file, index=False)
        logger.info(f"Classification results converted and saved to {output_csv_file}")
    except Exception as e:
        logger.error(f"Error converting result to CSV: {e}")

if __name__ == "__main__":
    main()
