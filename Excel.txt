import os
import sys
import uuid
import json
import logging
import chardet
import pandas as pd
import networkx as nx
from typing import Optional, Dict, Any, List, Union
from pathlib import Path

from dotenv import dotenv_values
from azure.identity import ClientSecretCredential, DefaultAzureCredential, get_bearer_token_provider
from openai import AzureOpenAI
from pydantic import BaseModel

# LangChain + Chroma
from langchain.chat_models import AzureChatOpenAI
from langchain.memory import ConversationBufferMemory
from langchain.chains import ConversationChain, LLMChain
from langchain.docstore.document import Document as LC_Document
from langchain.embeddings.base import Embeddings
from langchain.vectorstores import Chroma
from langchain.prompts import PromptTemplate
from chromadb.config import Settings
from chromadb.utils import embedding_functions

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

# ... [Keep all the constants and OSEnv class identical] ...

###############################################################################
# QualityCheckChain (with enhanced key normalization)
###############################################################################
class QualityCheckChain:
    """
    Uses an LLM to produce strictly { "rating": "...", "reason": "..." } as JSON.
    rating âˆˆ {Green, Amber, Red}.
    """
    def __init__(self, llm):
        self.llm = llm

        template = """[Identical template content]"""
        self.prompt = PromptTemplate(
            input_variables=["user_input", "candidate_doc"],
            template=template
        )
        self.chain = LLMChain(llm=self.llm, prompt=self.prompt)

    def _normalize_keys(self, data: dict) -> dict:
        """
        Enhanced normalization to handle various JSON formatting issues:
        1. Remove all quotes and apostrophes
        2. Remove any whitespace characters (including newlines and tabs)
        3. Convert to lowercase
        """
        normalized = {}
        for k, v in data.items():
            # Remove quotes and apostrophes
            new_k = k.replace('"', '').replace("'", "")
            # Remove all whitespace characters
            new_k = ''.join(new_k.split())
            # Convert to lowercase
            new_k = new_k.lower()
            normalized[new_k] = v
        return normalized

    def check_quality(self, user_input: str, candidate_doc: str) -> Dict[str, str]:
        """[Identical method body]"""

###############################################################################
# AzureChatbot (with explicit cosine similarity configuration)
###############################################################################
class AzureChatbot:
    def __init__(self, config_file: str, creds_file: str, cert_file: str, csv_path: str):
        """[Identical initialization]"""

    def _setup_vectorstore(self):
        """Modified to explicitly set cosine similarity"""
        try:
            azure_embeddings_model = self.env.get("EMBEDDINGS_MODEL", "text-embedding-3-large")
            azure_api_version = self.env.get("EMBEDDINGS_API_VERSION", "2023-05-15")

            embedding = AzureOpenAIEmbeddings(
                azure_api_version=azure_api_version,
                embeddings_model=azure_embeddings_model
            )
            
            # Explicit cosine similarity configuration
            chroma_settings = Settings(
                anonymized_telemetry=False,
                persist_directory="chromadb-data",
            )
            
            # Create collection with cosine similarity explicitly specified
            self.vs = Chroma.from_documents(
                documents=self.kb.docs,
                embedding=embedding,
                collection_name="kb_collection",
                client_settings=chroma_settings,
                collection_metadata={"hnsw:space": "cosine"}  # Explicit cosine
            )
            logger.info("Chroma vector store created with cosine similarity")
        except Exception as e:
            logger.error(f"Failed to set up vector store: {str(e)}")
            raise

    # ... [Keep all other methods identical] ...

# ... [Keep all remaining code identical: run_tests, process_input_json_with_quality, main] ...

if __name__ == "__main__":
    main()
