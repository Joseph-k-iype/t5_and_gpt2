def save_results(self, matches_df: pd.DataFrame, output_path: str | Path) -> None:
    """Save matches to CSV and JSON formats.
    
    Args:
        matches_df: DataFrame containing match results
        output_path: Path to save the CSV file (JSON will be saved alongside)
    """
    try:
        # Convert to Path object if it isn't already
        output_path = Path(output_path)
        
        # Create parent directory if it doesn't exist
        output_path.parent.mkdir(parents=True, exist_ok=True)
        
        # Save CSV
        matches_df.to_csv(output_path, index=False)
        logger.info(f"Results saved to CSV: {output_path}")
        
        # Create JSON path by changing extension
        json_path = output_path.with_suffix('.json')
        
        # Save JSON
        matches_dict = matches_df.to_dict(orient='records')
        with open(json_path, 'w', encoding='utf-8') as f:
            json.dump(matches_dict, f, indent=2, ensure_ascii=False)
        logger.info(f"Results saved to JSON: {json_path}")
            
    except Exception as e:
        logger.error(f"Error saving results: {str(e)}")
        raise

def main():
    """Main function to run the semantic matching process."""
    try:
        # Setup paths
        base_dir = Path(__file__).parent.parent
        env_dir = base_dir / 'env'
        data_dir = base_dir / 'data'
        output_dir = base_dir / 'output'
        
        # Create directories if they don't exist
        for directory in [data_dir, output_dir]:
            directory.mkdir(exist_ok=True)
        
        # Initialize environment
        env_setup = OSEnv(
            config_file=str(env_dir / 'config.env'),
            creds_file=str(env_dir / 'credentials.env'),
            certificate_path=str(env_dir / 'cacert.pem')
        )
        
        # Load source and target CSVs
        source_csv = data_dir / 'source.csv'
        target_csv = data_dir / 'target.csv'
        output_file = output_dir / 'semantic_matches.csv'
        
        logger.info("Loading CSV files...")
        source_df = pd.read_csv(source_csv, dtype={
            'name': str,
            'description': str
        })
        target_df = pd.read_csv(target_csv, dtype={
            'pbt-name': str,
            'pbt-definition': str
        })
        
        # Initialize matcher and process matches
        matcher = SemanticMatcherLance(env_setup)
        results = matcher.find_top_k_matches(source_df, target_df)
        
        # Save results
        matcher.save_results(results, output_file)
        logger.info("Processing completed successfully")
        
    except Exception as e:
        logger.error(f"Process failed: {str(e)}")
        raise

if __name__ == "__main__":
    main()
