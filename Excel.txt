def process_input_json_with_quality(chatbot: AzureChatbot, json_file: str):
    """
    Robust JSON processing with proper key handling
    """
    if not os.path.isfile(json_file):
        print(f"Input JSON file not found: {json_file}")
        return []

    try:
        with open(json_file, "r", encoding="utf-8") as f:
            data = json.load(f)
    except Exception as e:
        print(f"Error loading JSON: {str(e)}")
        return []

    # Handle both single object and array formats
    items = [data] if isinstance(data, dict) else data if isinstance(data, list) else []
    
    results = []
    for idx, item in enumerate(items):
        try:
            # Validate input structure with safe getters
            name = str(item.get("name", "")).strip()
            definition = str(item.get("definition", "")).strip()
            
            if not name or not definition:
                print(f"Skipping item {idx+1} - missing name/definition")
                continue

            # Get full analysis
            result = chatbot.rag_quality_check_item(name=name, definition=definition)
            
            # Safe key access with fallbacks
            final_rating = result.get("final_rating", "Red")
            final_reason = result.get("final_reason", "No analysis performed")
            best_match = result.get("best_match") or {}
            
            # Format output
            formatted = {
                "input": {"name": name, "definition": definition},
                "rating": final_rating,
                "reason": final_reason,
                "best_match": {
                    "name": best_match.get("name"),
                    "definition": best_match.get("definition"),
                    "confidence": best_match.get("confidence", 0.0)
                } if best_match else None,
                "all_matches": result.get("matches", [])
            }
            
            results.append(formatted)

        except Exception as e:
            print(f"Error processing item {idx+1}: {str(e)}")
            results.append({
                "error": str(e),
                "input": item
            })

    # Print formatted results
    print("\n=== Quality Check Results ===")
    print(json.dumps(results, indent=2, ensure_ascii=False))
    return results
