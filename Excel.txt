class ClassificationWorkflow:
    def __init__(self, classifier, validator):
        self.classifier = classifier
        self.validator = validator
        self.workflow = self._build_workflow()

    def _build_workflow(self):
        workflow = StateGraph(ClassificationState)

        workflow.add_node("classify", self.classify_node)
        workflow.add_node("validate", self.validate_node)
        workflow.add_node("review", self.review_node)

        workflow.add_edge("classify", "validate")
        workflow.add_conditional_edges(
            "validate",
            self.decide_review,
            {"review": "review", "final": END}
        )
        workflow.add_edge("review", "classify")
        
        workflow.set_entry_point("classify")
        return workflow.compile()

    def classify_node(self, state: ClassificationState):
        data = state.get("data")
        result = self.classifier.classify(data)
        return {"classification": result}

    def validate_node(self, state: ClassificationState):
        data = state.get("data")
        classification = state.get("classification")
        validation = self.validator.validate(data, classification)
        return {"validation": validation}

    def review_node(self, state: ClassificationState):
        # Add any manual review logic here
        return {"data": state["data"]}

    def decide_review(self, state: ClassificationState):
        if state["validation"].is_valid:
            return "final"
        return "review"

class ClassificationState(TypedDict):
    data: DataInput
    classification: Optional[ClassificationResult]
    validation: Optional[ValidatedClassification]


class AzureChatbot:
    def __init__(self, config_file=str, creds_file=str, cert_file=str):
        # Existing initialization
        self.classifier = ClassificationAgent(self.llm)
        self.validator = ValidationAgent(self.llm)
        self.workflow = ClassificationWorkflow(self.classifier, self.validator)

    def classify_data(self, input_json: dict) -> dict:
        try:
            data = DataInput(**input_json)
            result = self.workflow.invoke({"data": data})
            return result.get("validation", {}).dict()
        except ValidationError as e:
            logger.error(f"Validation error: {e}")
            return {"error": str(e)}
        except Exception as e:
            logger.error(f"Classification failed: {e}")
            return {"error": "Classification failed"}

# Initialize the chatbot
bot = AzureChatbot(CONFIG_PATH, CREDS_PATH, CERT_PATH)

# Sample input
input_data = {
    "name": "Employee Health Records",
    "definition": "Contains sensitive employee medical information and insurance details"
}

# Process classification
result = bot.classify_data(input_data)
print(json.dumps(result, indent=2))
