# ... (keep all existing imports and code above)

### Add New Components Below ###
from langgraph.graph import END, StateGraph

class AgentState(BaseModel):
    name: str
    possible_values: List[str] = []
    regex_pattern: str = ""
    validation_result: str = ""
    evaluation_status: str = ""
    metadata: Dict[str, str] = {}

class ResearcherAgent:
    def __init__(self, llm):
        self.llm = llm
        self.prompt = PromptTemplate.from_template(
            """Analyze the following field name and generate possible value patterns:
            Name: {name}
            Definition: {definition}
            Related Terms: {related_terms}
            
            Consider all possible formats, including:
            - Numeric ranges and formats
            - Text patterns
            - Special characters
            - Date/time formats
            - Common abbreviations
            
            Return ONLY a comma-separated list of possible value patterns, nothing else."""
        )
        self.chain = self.prompt | self.llm

    def get_possible_values(self, state: AgentState) -> AgentState:
        try:
            related_terms = ", ".join([state.metadata.get("related_term_name", "")])
            response = self.chain.invoke({
                "name": state.name,
                "definition": state.metadata.get("definition", ""),
                "related_terms": related_terms
            })
            state.possible_values = [v.strip() for v in response.content.split(",") if v.strip()]
            return state
        except Exception as e:
            logger.error(f"ResearcherAgent error: {e}")
            return state

class RegexCreatorAgent:
    def __init__(self, llm):
        self.llm = llm
        self.prompt = PromptTemplate.from_template(
            """Create a regex pattern matching these value patterns:
            {possible_values}
            
            Requirements:
            1. Must match at least 80% of common formats
            2. Use non-capturing groups where possible
            3. Include boundary checks (^ and $)
            4. Handle case insensitivity if needed
            5. Use regex flags appropriately
            
            Return ONLY the regex pattern without any explanation."""
        )
        self.chain = self.prompt | self.llm

    def create_regex(self, state: AgentState) -> AgentState:
        try:
            if not state.possible_values:
                state.regex_pattern = r'^.*$'  # Fallback pattern
                return state

            response = self.chain.invoke({
                "possible_values": "\n- ".join(state.possible_values)
            })
            state.regex_pattern = response.content.strip().strip('`')
            return state
        except Exception as e:
            logger.error(f"RegexCreatorAgent error: {e}")
            state.regex_pattern = r'^.*$'
            return state

class RegexValidatorAgent:
    def validate_regex(self, state: AgentState) -> AgentState:
        try:
            re.compile(state.regex_pattern)
            state.validation_result = "VALID"
        except re.error as e:
            state.validation_result = f"INVALID: {str(e)}"
        return state

class EvaluationAgent:
    def __init__(self, llm):
        self.llm = llm
        self.prompt = PromptTemplate.from_template(
            """Evaluate regex coverage for {name}:
            - Expected Patterns: {possible_values}
            - Generated Regex: {regex_pattern}
            
            Return status:
            GREEN = Covers all patterns with proper boundaries
            AMBER = Partial coverage or missing boundaries
            RED = Invalid regex or no pattern matching
            
            Return ONLY the status word (GREEN/AMBER/RED)."""
        )
        self.chain = self.prompt | self.llm

    def evaluate(self, state: AgentState) -> AgentState:
        try:
            if "INVALID" in state.validation_result:
                state.evaluation_status = "RED"
                return state

            response = self.chain.invoke({
                "name": state.name,
                "possible_values": state.possible_values,
                "regex_pattern": state.regex_pattern
            })
            state.evaluation_status = response.content.strip().upper()
            return state
        except Exception as e:
            logger.error(f"EvaluationAgent error: {e}")
            state.evaluation_status = "RED"
            return state

class RegexWorkflow:
    def __init__(self, chatbot: AzureChatbot):
        self.chatbot = chatbot
        self.workflow = self._build_workflow()

    def _build_workflow(self):
        workflow = StateGraph(AgentState)

        # Add nodes
        workflow.add_node("researcher", self._run_researcher)
        workflow.add_node("regex_creator", self._run_regex_creator)
        workflow.add_node("validator", self._run_validator)
        workflow.add_node("evaluator", self._run_evaluator)

        # Set edges
        workflow.set_entry_point("researcher")
        workflow.add_edge("researcher", "regex_creator")
        workflow.add_edge("regex_creator", "validator")
        workflow.add_edge("validator", "evaluator")
        workflow.add_edge("evaluator", END)

        return workflow

    def _run_researcher(self, state: AgentState):
        researcher = ResearcherAgent(self.chatbot.llm)
        return researcher.get_possible_values(state)

    def _run_regex_creator(self, state: AgentState):
        creator = RegexCreatorAgent(self.chatbot.llm)
        return creator.create_regex(state)

    def _run_validator(self, state: AgentState):
        validator = RegexValidatorAgent()
        return validator.validate_regex(state)

    def _run_evaluator(self, state: AgentState):
        evaluator = EvaluationAgent(self.chatbot.llm)
        return evaluator.evaluate(state)

    def process_row(self, row: Dict) -> Dict:
        initial_state = AgentState(
            name=row["name"],
            metadata={
                "definition": row.get("definition", ""),
                "related_term_name": row.get("related term name", ""),
                "related_term_definition": row.get("related term definition", "")
            }
        )

        try:
            result = self.workflow.invoke(initial_state)
            return {
                "Field Name": result.name,
                "Generated Regex": result.regex_pattern,
                "Validation": result.validation_result,
                "Status": result.evaluation_status,
                "Possible Values": ";".join(result.possible_values)
            }
        except Exception as e:
            logger.error(f"Workflow failed for {row['name']}: {e}")
            return {
                "Field Name": row["name"],
                "Generated Regex": "ERROR",
                "Validation": "PROCESSING_ERROR",
                "Status": "RED",
                "Possible Values": ""
            }

class RegexGenerator:
    def __init__(self, input_csv: str, output_csv: str):
        self.input_csv = input_csv
        self.output_csv = output_csv
        self.chatbot = AzureChatbot(CONFIG_PATH, CREDS_PATH, CERT_PATH)
        self.workflow = RegexWorkflow(self.chatbot)

    def _safe_read_csv(self):
        try:
            with open(self.input_csv, 'rb') as f:
                encoding = chardet.detect(f.read())['encoding']
            return pd.read_csv(self.input_csv, encoding=encoding)
        except Exception as e:
            logger.error(f"CSV read error: {e}")
            raise

    def generate(self):
        df = self._safe_read_csv()
        results = []
        
        for _, row in df.iterrows():
            results.append(self.workflow.process_row(row.to_dict()))
        
        output_df = pd.DataFrame(results)
        output_df.to_csv(self.output_csv, index=False, escapechar='\\')
        logger.info(f"Generated {len(output_df)} regex patterns to {self.output_csv}")

# Example usage
if __name__ == "__main__":
    generator = RegexGenerator(
        input_csv="input_fields.csv",
        output_csv="generated_regexes.csv"
    )
    generator.generate()
