// frontend/src/components/Research/ResearchPanel.jsx
import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Search, FileText, Clock, CheckCircle, AlertCircle, Download, Share } from 'lucide-react';
import ResearchReport from './ResearchReport';
import ResearchProgress from './ResearchProgress';
import { useResearch } from '../../hooks/useResearch';
import { useChat } from '../../hooks/useChat';
import { formatRelativeTime, formatConfidence } from '../../utils/formatters';
import LoadingSpinner from '../Common/LoadingSpinner';

const ResearchPanel = () => {
  const { 
    currentResearch, 
    researchHistory, 
    isResearching, 
    progress, 
    error,
    startResearch,
    clearCurrentResearch 
  } = useResearch();
  
  const { messages } = useChat();
  const [activeTab, setActiveTab] = useState('current');

  // Start research when user requests it via chat
  useEffect(() => {
    const lastMessage = messages[messages.length - 1];
    if (lastMessage?.metadata?.type === 'research_start' && !isResearching && !currentResearch) {
      const researchQuery = messages[messages.length - 2]?.content;
      if (researchQuery) {
        startResearch(researchQuery);
      }
    }
  }, [messages, isResearching, currentResearch, startResearch]);

  const getConfidenceIcon = (confidence) => {
    const level = formatConfidence(confidence);
    switch (level) {
      case 'high':
        return <CheckCircle size={16} className="text-green-600" />;
      case 'medium':
        return <Clock size={16} className="text-yellow-600" />;
      case 'low':
        return <AlertCircle size={16} className="text-red-600" />;
      default:
        return null;
    }
  };

  const getConfidenceColor = (confidence) => {
    const level = formatConfidence(confidence);
    switch (level) {
      case 'high':
        return 'text-green-600';
      case 'medium':
        return 'text-yellow-600';
      case 'low':
        return 'text-red-600';
      default:
        return 'text-newyorker-muted';
    }
  };

  return (
    <div className="h-full flex flex-col">
      {/* Header */}
      <div className="p-4 border-b border-newyorker-gray-200 bg-newyorker-cream">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-2">
            <Search size={20} className="text-newyorker-muted" />
            <h3 className="text-lg font-medium text-newyorker-black font-sans">
              Research
            </h3>
          </div>
          
          {currentResearch && (
            <div className="flex space-x-2">
              <button
                onClick={() => {/* Handle download */}}
                className="p-2 text-newyorker-muted hover:text-newyorker-black transition-colors"
                title="Download Report"
              >
                <Download size={16} />
              </button>
              <button
                onClick={() => {/* Handle share */}}
                className="p-2 text-newyorker-muted hover:text-newyorker-black transition-colors"
                title="Share Report"
              >
                <Share size={16} />
              </button>
            </div>
          )}
        </div>

        {/* Tabs */}
        <div className="flex space-x-4 mt-3">
          <button
            onClick={() => setActiveTab('current')}
            className={`pb-2 text-sm font-medium transition-colors ${
              activeTab === 'current'
                ? 'text-newyorker-black border-b-2 border-newyorker-accent'
                : 'text-newyorker-muted hover:text-newyorker-black'
            }`}
          >
            Current Research
          </button>
          <button
            onClick={() => setActiveTab('history')}
            className={`pb-2 text-sm font-medium transition-colors ${
              activeTab === 'history'
                ? 'text-newyorker-black border-b-2 border-newyorker-accent'
                : 'text-newyorker-muted hover:text-newyorker-black'
            }`}
          >
            History ({researchHistory.length})
          </button>
        </div>
      </div>

      {/* Content */}
      <div className="flex-1 overflow-hidden">
        <AnimatePresence mode="wait">
          <motion.div
            key={activeTab}
            initial={{ opacity: 0, x: 20 }}
            animate={{ opacity: 1, x: 0 }}
            exit={{ opacity: 0, x: -20 }}
            transition={{ duration: 0.2 }}
            className="h-full"
          >
            {activeTab === 'current' ? (
              <CurrentResearchTab
                currentResearch={currentResearch}
                isResearching={isResearching}
                progress={progress}
                error={error}
                onClear={clearCurrentResearch}
              />
            ) : (
              <ResearchHistoryTab history={researchHistory} />
            )}
          </motion.div>
        </AnimatePresence>
      </div>
    </div>
  );
};

const CurrentResearchTab = ({ currentResearch, isResearching, progress, error, onClear }) => {
  if (error) {
    return (
      <div className="p-6 text-center">
        <AlertCircle size={48} className="text-red-500 mx-auto mb-4" />
        <h4 className="text-lg font-medium text-newyorker-black mb-2">
          Research Failed
        </h4>
        <p className="text-newyorker-muted text-sm mb-4">
          {error}
        </p>
        <button
          onClick={onClear}
          className="btn btn-primary"
        >
          Try Again
        </button>
      </div>
    );
  }

  if (isResearching) {
    return (
      <div className="p-6">
        <ResearchProgress progress={progress} />
      </div>
    );
  }

  if (currentResearch) {
    return (
      <div className="h-full">
        <ResearchReport research={currentResearch} />
      </div>
    );
  }

  return (
    <div className="p-6 text-center">
      <Search size={48} className="text-newyorker-gray-300 mx-auto mb-4" />
      <h4 className="text-lg font-medium text-newyorker-black mb-2">
        No Active Research
      </h4>
      <p className="text-newyorker-muted text-sm">
        Start a conversation in the chat to begin research, or use the "Deep Research" mode for comprehensive analysis.
      </p>
    </div>
  );
};

const ResearchHistoryTab = ({ history }) => {
  if (history.length === 0) {
    return (
      <div className="p-6 text-center">
        <FileText size={48} className="text-newyorker-gray-300 mx-auto mb-4" />
        <h4 className="text-lg font-medium text-newyorker-black mb-2">
          No Research History
        </h4>
        <p className="text-newyorker-muted text-sm">
          Your completed research sessions will appear here.
        </p>
      </div>
    );
  }

  return (
    <div className="p-4 space-y-4 overflow-y-auto">
      {history.map((item, index) => (
        <motion.div
          key={item.id}
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: index * 0.1 }}
          className="border border-newyorker-gray-200 rounded-lg p-4 hover:shadow-md transition-shadow cursor-pointer"
          onClick={() => {/* Handle view research */}}
        >
          <div className="flex items-start justify-between">
            <div className="flex-1">
              <h5 className="font-medium text-newyorker-black mb-1 line-clamp-1">
                {item.topic}
              </h5>
              <p className="text-sm text-newyorker-muted mb-2 line-clamp-2">
                {item.summary}
              </p>
              
              <div className="flex items-center space-x-3 text-xs text-newyorker-muted">
                <span>{formatRelativeTime(item.timestamp)}</span>
                <div className="flex items-center space-x-1">
                  {getConfidenceIcon(item.confidence)}
                  <span className={getConfidenceColor(item.confidence)}>
                    {formatConfidence(item.confidence)} confidence
                  </span>
                </div>
              </div>
            </div>
            
            <FileText size={16} className="text-newyorker-muted ml-3" />
          </div>
        </motion.div>
      ))}
    </div>
  );
};

export default ResearchPanel;

// frontend/src/components/Research/ResearchProgress.jsx
import React from 'react';
import { motion } from 'framer-motion';
import { Clock, CheckCircle, AlertCircle, Search, FileText, Zap } from 'lucide-react';
import { RESEARCH_STAGES } from '../../utils/constants';

const ResearchProgress = ({ progress }) => {
  const stages = [
    {
      id: RESEARCH_STAGES.INITIALIZATION,
      label: 'Initialization',
      icon: Zap,
      description: 'Setting up research environment',
    },
    {
      id: RESEARCH_STAGES.PLANNING,
      label: 'Planning',
      icon: FileText,
      description: 'Creating research strategy',
    },
    {
      id: RESEARCH_STAGES.RESEARCH,
      label: 'Research',
      icon: Search,
      description: 'Conducting deep analysis',
    },
    {
      id: RESEARCH_STAGES.SYNTHESIS,
      label: 'Synthesis',
      icon: FileText,
      description: 'Compiling findings',
    },
    {
      id: RESEARCH_STAGES.COMPLETION,
      label: 'Completion',
      icon: CheckCircle,
      description: 'Finalizing report',
    },
  ];

  const getStageStatus = (stageId) => {
    if (!progress) return 'pending';
    
    const currentStageIndex = stages.findIndex(s => s.id === progress.stage);
    const thisStageIndex = stages.findIndex(s => s.id === stageId);
    
    if (progress.error && progress.stage === stageId) return 'error';
    if (thisStageIndex < currentStageIndex) return 'completed';
    if (thisStageIndex === currentStageIndex) return 'active';
    return 'pending';
  };

  const getStatusIcon = (status, StageIcon) => {
    switch (status) {
      case 'completed':
        return <CheckCircle size={20} className="text-green-600" />;
      case 'active':
        return <StageIcon size={20} className="text-newyorker-accent animate-pulse" />;
      case 'error':
        return <AlertCircle size={20} className="text-red-600" />;
      default:
        return <Clock size={20} className="text-newyorker-gray-400" />;
    }
  };

  const getStatusColor = (status) => {
    switch (status) {
      case 'completed':
        return 'text-green-600';
      case 'active':
        return 'text-newyorker-accent';
      case 'error':
        return 'text-red-600';
      default:
        return 'text-newyorker-gray-400';
    }
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="text-center">
        <h4 className="text-lg font-medium text-newyorker-black mb-2">
          Research in Progress
        </h4>
        <p className="text-newyorker-muted text-sm">
          AI agents are conducting comprehensive research
        </p>
        
        {progress && (
          <div className="mt-4">
            <div className="w-full bg-newyorker-gray-200 rounded-full h-2">
              <motion.div
                className="bg-newyorker-accent h-2 rounded-full"
                initial={{ width: 0 }}
                animate={{ width: `${progress.progress || 0}%` }}
                transition={{ duration: 0.5 }}
              />
            </div>
            <p className="text-xs text-newyorker-muted mt-2">
              {progress.progress || 0}% complete
            </p>
          </div>
        )}
      </div>

      {/* Progress Steps */}
      <div className="space-y-4">
        {stages.map((stage, index) => {
          const status = getStageStatus(stage.id);
          const isActive = status === 'active';
          
          return (
            <motion.div
              key={stage.id}
              initial={{ opacity: 0, x: -20 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ delay: index * 0.1 }}
              className={`flex items-start space-x-4 p-4 rounded-lg transition-all ${
                isActive 
                  ? 'bg-newyorker-accent/5 border border-newyorker-accent/20' 
                  : 'bg-white border border-newyorker-gray-200'
              }`}
            >
              <div className="flex-shrink-0 pt-1">
                {getStatusIcon(status, stage.icon)}
              </div>
              
              <div className="flex-1 min-w-0">
                <h5 className={`font-medium ${getStatusColor(status)}`}>
                  {stage.label}
                </h5>
                <p className="text-sm text-newyorker-muted mt-1">
                  {isActive && progress?.message ? progress.message : stage.description}
                </p>
                
                {isActive && progress?.details && (
                  <div className="mt-2 text-xs text-newyorker-muted">
                    <pre className="whitespace-pre-wrap">
                      {JSON.stringify(progress.details, null, 2)}
                    </pre>
                  </div>
                )}
              </div>
              
              {/* Progress indicator line */}
              {index < stages.length - 1 && (
                <div className="absolute left-6 top-14 w-px h-8 bg-newyorker-gray-200" />
              )}
            </motion.div>
          );
        })}
      </div>

      {/* Current Message */}
      {progress?.message && (
        <motion.div
          initial={{ opacity: 0, y: 10 }}
          animate={{ opacity: 1, y: 0 }}
          className="bg-newyorker-gray-50 rounded-lg p-4 text-center"
        >
          <p className="text-sm text-newyorker-black">
            {progress.message}
          </p>
          {progress.error && (
            <p className="text-xs text-red-600 mt-2">
              Error: {progress.message}
            </p>
          )}
        </motion.div>
      )}

      {/* Tips */}
      <div className="bg-newyorker-cream rounded-lg p-4 text-center">
        <p className="text-xs text-newyorker-muted">
          Deep research typically takes 2-5 minutes. You can continue chatting while research is in progress.
        </p>
      </div>
    </div>
  );
};

export default ResearchProgress;

// frontend/src/components/Research/ResearchReport.jsx
import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { 
  FileText, Clock, Users, CheckCircle, AlertCircle, 
  Download, Share, Expand, ChevronDown, ChevronRight 
} from 'lucide-react';
import ReactMarkdown from 'react-markdown';
import { formatRelativeTime, formatConfidence, formatDuration } from '../../utils/formatters';
import Accordion from '../Common/Accordion';

const ResearchReport = ({ research }) => {
  if (!research) return null;

  const {
    final_synthesis,
    overall_confidence,
    agents_used = [],
    iterations_completed = 0,
    timestamp,
    processing_time,
    session_id,
  } = research;

  return (
    <div className="h-full overflow-y-auto">
      {/* Report Header */}
      <div className="p-6 border-b border-newyorker-gray-200 bg-newyorker-cream">
        <div className="flex items-start justify-between">
          <div className="flex-1">
            <h3 className="text-xl font-display font-normal text-newyorker-black mb-2">
              Research Report
            </h3>
            
            <div className="flex flex-wrap items-center gap-4 text-sm text-newyorker-muted">
              <div className="flex items-center space-x-1">
                <Clock size={14} />
                <span>{formatRelativeTime(timestamp)}</span>
              </div>
              
              <div className="flex items-center space-x-1">
                {overall_confidence >= 0.8 ? (
                  <CheckCircle size={14} className="text-green-600" />
                ) : (
                  <AlertCircle size={14} className="text-yellow-600" />
                )}
                <span className={
                  overall_confidence >= 0.8 ? 'text-green-600' : 'text-yellow-600'
                }>
                  {Math.round(overall_confidence * 100)}% confidence
                </span>
              </div>
              
              {agents_used.length > 0 && (
                <div className="flex items-center space-x-1">
                  <Users size={14} />
                  <span>{agents_used.length} agents</span>
                </div>
              )}
              
              {iterations_completed > 0 && (
                <div className="flex items-center space-x-1">
                  <FileText size={14} />
                  <span>{iterations_completed} iterations</span>
                </div>
              )}
            </div>
          </div>
          
          <div className="flex space-x-2 ml-4">
            <button
              onClick={() => {/* Handle expand */}}
              className="p-2 text-newyorker-muted hover:text-newyorker-black transition-colors"
              title="Expand"
            >
              <Expand size={16} />
            </button>
            <button
              onClick={() => {/* Handle download */}}
              className="p-2 text-newyorker-muted hover:text-newyorker-black transition-colors"
              title="Download"
            >
              <Download size={16} />
            </button>
            <button
              onClick={() => {/* Handle share */}}
              className="p-2 text-newyorker-muted hover:text-newyorker-black transition-colors"
              title="Share"
            >
              <Share size={16} />
            </button>
          </div>
        </div>
      </div>

      {/* Report Content */}
      <div className="p-6 space-y-6">
        {/* Main Synthesis */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="prose prose-lg prose-newyorker max-w-none"
        >
          <ReactMarkdown
            components={{
              h1: ({ children }) => (
                <h1 className="headline text-newyorker-black mb-4">{children}</h1>
              ),
              h2: ({ children }) => (
                <h2 className="text-2xl font-display font-normal text-newyorker-black mb-3 mt-8">
                  {children}
                </h2>
              ),
              h3: ({ children }) => (
                <h3 className="text-xl font-display font-normal text-newyorker-black mb-2 mt-6">
                  {children}
                </h3>
              ),
              p: ({ children }) => (
                <p className="body-text text-newyorker-black mb-4 leading-relaxed-plus">
                  {children}
                </p>
              ),
              ul: ({ children }) => (
                <ul className="editorial-list mb-6">{children}</ul>
              ),
              ol: ({ children }) => (
                <ol className="editorial-list mb-6">{children}</ol>
              ),
              li: ({ children }) => (
                <li className="mb-2">{children}</li>
              ),
              strong: ({ children }) => (
                <strong className="font-semibold text-newyorker-black">{children}</strong>
              ),
              em: ({ children }) => (
                <em className="italic text-newyorker-black">{children}</em>
              ),
              blockquote: ({ children }) => (
                <blockquote className="pull-quote">{children}</blockquote>
              ),
              code: ({ children }) => (
                <code className="bg-newyorker-gray-100 px-2 py-1 rounded text-sm font-mono">
                  {children}
                </code>
              ),
              pre: ({ children }) => (
                <pre className="bg-newyorker-gray-50 p-4 rounded border overflow-x-auto">
                  {children}
                </pre>
              ),
            }}
          >
            {final_synthesis}
          </ReactMarkdown>
        </motion.div>

        {/* Research Metadata */}
        <Accordion title="Research Details" defaultOpen={false}>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {/* Agents Used */}
            {agents_used.length > 0 && (
              <div>
                <h4 className="font-medium text-newyorker-black mb-3">
                  Research Agents
                </h4>
                <div className="space-y-2">
                  {agents_used.map((agent, index) => (
                    <div
                      key={index}
                      className="flex items-center space-x-2 text-sm"
                    >
                      <div className="w-2 h-2 bg-newyorker-accent rounded-full" />
                      <span className="text-newyorker-black capitalize">
                        {agent.replace('_', ' ')}
                      </span>
                    </div>
                  ))}
                </div>
              </div>
            )}

            {/* Research Statistics */}
            <div>
              <h4 className="font-medium text-newyorker-black mb-3">
                Statistics
              </h4>
              <div className="space-y-2 text-sm">
                <div className="flex justify-between">
                  <span className="text-newyorker-muted">Confidence:</span>
                  <span className="text-newyorker-black">
                    {Math.round(overall_confidence * 100)}%
                  </span>
                </div>
                <div className="flex justify-between">
                  <span className="text-newyorker-muted">Iterations:</span>
                  <span className="text-newyorker-black">{iterations_completed}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-newyorker-muted">Processing:</span>
                  <span className="text-newyorker-black capitalize">
                    {processing_time || 'Extended'}
                  </span>
                </div>
                <div className="flex justify-between">
                  <span className="text-newyorker-muted">Session:</span>
                  <span className="text-newyorker-black font-mono text-xs">
                    {session_id?.slice(-8)}
                  </span>
                </div>
              </div>
            </div>
          </div>
        </Accordion>
      </div>
    </div>
  );
};

export default ResearchReport;
