# backend/app/core/research_engine.py
import asyncio
import logging
import sys
import os
from typing import Dict, Any, Optional
from datetime import datetime

# Add the parent directory to path to import the original chatbot
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(__file__))))

from enhanced_chatbot import EnhancedChatbotInterface

logger = logging.getLogger(__name__)

class ResearchEngineWrapper:
    """
    Wrapper for the enhanced chatbot research engine
    Provides async interface and session management
    """
    
    def __init__(self):
        self.chatbot_interface = None
        self.is_initialized = False
        self._initialization_lock = asyncio.Lock()
    
    async def initialize(self):
        """Initialize the research engine"""
        async with self._initialization_lock:
            if self.is_initialized:
                return True
            
            try:
                logger.info("Initializing Enhanced Chatbot Research Engine...")
                self.chatbot_interface = EnhancedChatbotInterface()
                
                # Initialize the chatbot - it's already an async method
                success = await self.chatbot_interface.initialize()
                
                if success:
                    self.is_initialized = True
                    logger.info("✅ Research engine initialized successfully")
                    return True
                else:
                    logger.error("❌ Research engine initialization returned False")
                    return False
                    
            except Exception as e:
                logger.error(f"❌ Failed to initialize research engine: {e}")
                raise e
    
    async def quick_chat(self, question: str, user_id: str, session_id: str) -> Dict[str, Any]:
        """
        Handle quick chat queries
        """
        if not self.is_initialized:
            await self.initialize()
        
        try:
            logger.info(f"Processing quick chat: {question[:100]}...")
            
            # The ask_question method is already async
            result = await self.chatbot_interface.ask_question(
                question, 
                user_id=user_id, 
                thread_id=session_id
            )
            
            # Enhance result with metadata
            enhanced_result = {
                **result,
                "session_id": session_id,
                "user_id": user_id,
                "timestamp": datetime.utcnow().isoformat(),
                "query_type": "quick_chat",
                "processing_time": "fast"
            }
            
            logger.info(f"Quick chat completed with confidence: {result.get('confidence', 'unknown')}")
            return enhanced_result
            
        except Exception as e:
            logger.error(f"Error in quick chat: {e}")
            return {
                "answer": f"I encountered an error processing your question: {str(e)}",
                "confidence": "low",
                "approach": "error",
                "session_id": session_id,
                "user_id": user_id,
                "timestamp": datetime.utcnow().isoformat(),
                "error": str(e)
            }
    
    async def deep_research(self, topic: str, user_id: str, session_id: str, 
                          progress_callback=None) -> Dict[str, Any]:
        """
        Handle deep research queries with progress updates
        """
        if not self.is_initialized:
            await self.initialize()
        
        try:
            logger.info(f"Starting deep research: {topic[:100]}...")
            
            if progress_callback:
                await progress_callback({
                    "stage": "initialization",
                    "message": "Initializing multi-agent research system...",
                    "progress": 0
                })
            
            # Progress tracking wrapper
            async def research_with_progress():
                if progress_callback:
                    await progress_callback({
                        "stage": "planning",
                        "message": "Creating research plan and assigning agents...",
                        "progress": 20
                    })
                
                # The conduct_deep_research method is already async
                result = await self.chatbot_interface.conduct_deep_research(
                    topic, 
                    user_id=user_id
                )
                
                if progress_callback:
                    await progress_callback({
                        "stage": "research",
                        "message": "Agents conducting specialized research...",
                        "progress": 60
                    })
                
                await asyncio.sleep(1)
                
                if progress_callback:
                    await progress_callback({
                        "stage": "synthesis",
                        "message": "Synthesizing findings and generating report...",
                        "progress": 80
                    })
                
                await asyncio.sleep(1)
                
                if progress_callback:
                    await progress_callback({
                        "stage": "completion",
                        "message": "Research completed successfully!",
                        "progress": 100
                    })
                
                return result
            
            result = await research_with_progress()
            
            # Enhance result with metadata
            enhanced_result = {
                **result,
                "session_id": session_id,
                "user_id": user_id,
                "timestamp": datetime.utcnow().isoformat(),
                "query_type": "deep_research",
                "processing_time": "extended"
            }
            
            logger.info(f"Deep research completed with confidence: {result.get('overall_confidence', 'unknown')}")
            return enhanced_result
            
        except Exception as e:
            logger.error(f"Error in deep research: {e}")
            if progress_callback:
                await progress_callback({
                    "stage": "error",
                    "message": f"Research failed: {str(e)}",
                    "progress": 0,
                    "error": True
                })
            
            return {
                "final_synthesis": f"Research failed due to error: {str(e)}",
                "overall_confidence": 0.0,
                "session_id": session_id,
                "user_id": user_id,
                "timestamp": datetime.utcnow().isoformat(),
                "error": str(e)
            }
    
    async def get_engine_status(self) -> Dict[str, Any]:
        """Get the status of the research engine"""
        return {
            "initialized": self.is_initialized,
            "engine_type": "EnhancedChatbotInterface",
            "capabilities": [
                "Quick Chat",
                "Deep Multi-Agent Research",
                "Knowledge Synthesis",
                "Domain Filtering",
                "Session Management"
            ],
            "timestamp": datetime.utcnow().isoformat()
        }
    
    async def cleanup(self):
        """Clean up resources"""
        try:
            if self.chatbot_interface and hasattr(self.chatbot_interface, 'cleanup'):
                await self.chatbot_interface.cleanup()
            
            self.is_initialized = False
            logger.info("Research engine cleanup completed")
            
        except Exception as e:
            logger.error(f"Error during research engine cleanup: {e}")
