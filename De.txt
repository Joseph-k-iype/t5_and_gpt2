# Multi-stage build for Data Element Enhancement API
# Stage 1: Build dependencies
FROM python:3.10-slim AS builder

# Set work directory
WORKDIR /app

# Prevent Python from writing bytecode files
ENV PYTHONDONTWRITEBYTECODE=1
# Prevent Python from buffering stdout and stderr
ENV PYTHONUNBUFFERED=1
# Set timezone
ENV TZ=UTC

# Install necessary build dependencies
RUN apt-get update \
    && apt-get install -y --no-install-recommends \
        build-essential \
        gcc \
        python3-dev \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Install pipenv
RUN pip install --upgrade pip \
    && pip install pipenv wheel

# Copy Pipfile and Pipfile.lock (if you're using Pipenv)
# If you're using requirements.txt, copy that instead
COPY requirements.txt .

# Install dependencies
RUN pip wheel --no-cache-dir --no-deps --wheel-dir /app/wheels -r requirements.txt

# Stage 2: Runtime environment
FROM python:3.10-slim AS runtime

# Set work directory
WORKDIR /app

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
ENV TZ=UTC
ENV PORT=8000
ENV HOST=0.0.0.0
# Set to 'production' for production mode
ENV APP_ENV=production

# Create a non-root user to run the application
RUN addgroup --system appgroup && adduser --system --group appuser

# Install runtime dependencies
RUN apt-get update \
    && apt-get install -y --no-install-recommends \
        libpq5 \
        curl \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Copy wheels from builder stage
COPY --from=builder /app/wheels /wheels
# Install dependencies from wheels
RUN pip install --no-cache /wheels/*

# Copy project files
COPY . .

# Create necessary directories with proper permissions
RUN mkdir -p /app/data/chroma_db \
    && mkdir -p /app/logs \
    && mkdir -p /app/static \
    && mkdir -p /app/templates \
    && chown -R appuser:appgroup /app/data \
    && chown -R appuser:appgroup /app/logs \
    && chown -R appuser:appgroup /app/static \
    && chown -R appuser:appgroup /app/templates

# Change to non-root user
USER appuser

# Expose application port
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Create empty requirements.txt if it doesn't exist
RUN if [ ! -f requirements.txt ]; then touch requirements.txt; fi

# Create entrypoint script
COPY ./docker-entrypoint.sh /docker-entrypoint.sh
RUN chmod +x /docker-entrypoint.sh

# Set entrypoint
ENTRYPOINT ["/docker-entrypoint.sh"]

# Default command
CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000"]
