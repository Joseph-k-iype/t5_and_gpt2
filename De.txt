// frontend/src/components/Research/ResearchPanel.jsx
import React, { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  FileText, 
  Network, 
  ChevronDown, 
  ChevronUp, 
  Download, 
  Share,
  Bookmark,
  Clock,
  Users,
  Target
} from 'lucide-react';
import ResearchReport from './ResearchReport';
import ResearchProgress from './ResearchProgress';
import Accordion from '../Common/Accordion';
import { useResearchStore } from '../../hooks/useResearch';

const ResearchPanel = ({ onToggleKnowledgeGraph, showKnowledgeGraph }) => {
  const { 
    currentResearch, 
    researchHistory, 
    isResearching,
    researchProgress 
  } = useResearchStore();

  const [activeSection, setActiveSection] = useState('current');

  if (!currentResearch && !isResearching && researchHistory.length === 0) {
    return (
      <motion.div 
        className="h-full flex items-center justify-center bg-newyorker-paper p-8"
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
      >
        <div className="text-center max-w-md">
          <div className="w-16 h-16 bg-newyorker-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
            <FileText className="w-8 h-8 text-newyorker-muted" />
          </div>
          <h3 className="text-xl font-display text-newyorker-black mb-2">
            No Research Yet
          </h3>
          <p className="text-newyorker-muted font-sans text-sm leading-relaxed">
            Switch to Research mode and ask a detailed question to begin comprehensive analysis 
            with knowledge graph generation.
          </p>
        </div>
      </motion.div>
    );
  }

  return (
    <div className="h-full flex flex-col bg-newyorker-paper">
      {/* Panel Header */}
      <motion.div 
        className="border-b border-newyorker-gray-200 p-6"
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
      >
        <div className="flex items-center justify-between mb-4">
          <h2 className="text-2xl font-display text-newyorker-black">
            Research Insights
          </h2>
          
          {/* Action Buttons */}
          <div className="flex items-center space-x-2">
            <ActionButton
              icon={Network}
              label="Knowledge Graph"
              onClick={onToggleKnowledgeGraph}
              active={showKnowledgeGraph}
              disabled={!currentResearch}
            />
            {currentResearch && (
              <>
                <ActionButton icon={Download} label="Export" />
                <ActionButton icon={Share} label="Share" />
                <ActionButton icon={Bookmark} label="Save" />
              </>
            )}
          </div>
        </div>

        {/* Section Tabs */}
        <div className="flex space-x-1 bg-newyorker-gray-100 rounded-lg p-1">
          <TabButton
            active={activeSection === 'current'}
            onClick={() => setActiveSection('current')}
            label="Current Research"
            count={currentResearch ? 1 : 0}
          />
          <TabButton
            active={activeSection === 'history'}
            onClick={() => setActiveSection('history')}
            label="History"
            count={researchHistory.length}
          />
        </div>
      </motion.div>

      {/* Content Area */}
      <div className="flex-1 overflow-y-auto">
        <AnimatePresence mode="wait">
          {activeSection === 'current' && (
            <motion.div
              key="current"
              initial={{ opacity: 0, x: 20 }}
              animate={{ opacity: 1, x: 0 }}
              exit={{ opacity: 0, x: -20 }}
              className="h-full"
            >
              {isResearching ? (
                <ResearchProgress progress={researchProgress} />
              ) : currentResearch ? (
                <CurrentResearchView research={currentResearch} />
              ) : (
                <EmptyCurrentResearch />
              )}
            </motion.div>
          )}

          {activeSection === 'history' && (
            <motion.div
              key="history"
              initial={{ opacity: 0, x: 20 }}
              animate={{ opacity: 1, x: 0 }}
              exit={{ opacity: 0, x: -20 }}
              className="p-6"
            >
              <ResearchHistory history={researchHistory} />
            </motion.div>
          )}
        </AnimatePresence>
      </div>
    </div>
  );
};

const ActionButton = ({ icon: Icon, label, onClick, active = false, disabled = false }) => (
  <motion.button
    className={`p-2 rounded-md text-xs font-sans transition-colors ${
      disabled
        ? 'text-newyorker-muted cursor-not-allowed'
        : active
        ? 'bg-newyorker-black text-newyorker-cream'
        : 'text-newyorker-muted hover:text-newyorker-black hover:bg-newyorker-gray-100'
    }`}
    onClick={onClick}
    disabled={disabled}
    whileHover={!disabled ? { scale: 1.05 } : {}}
    whileTap={!disabled ? { scale: 0.95 } : {}}
    title={label}
  >
    <Icon className="w-4 h-4" />
  </motion.button>
);

const TabButton = ({ active, onClick, label, count }) => (
  <button
    className={`flex-1 px-3 py-2 rounded-md text-sm font-sans transition-colors ${
      active
        ? 'bg-newyorker-cream text-newyorker-black shadow-sm'
        : 'text-newyorker-muted hover:text-newyorker-black'
    }`}
    onClick={onClick}
  >
    {label} {count > 0 && <span className="ml-1">({count})</span>}
  </button>
);

const CurrentResearchView = ({ research }) => (
  <div className="p-6 space-y-6">
    {/* Research Metadata */}
    <div className="bg-newyorker-gray-50 p-4 rounded-lg">
      <h3 className="font-display text-lg text-newyorker-black mb-3">
        Research Overview
      </h3>
      <div className="grid grid-cols-2 gap-4 text-sm">
        <div className="flex items-center space-x-2">
          <Clock className="w-4 h-4 text-newyorker-muted" />
          <span className="text-newyorker-muted">Completed:</span>
          <span className="font-medium">{new Date(research.timestamp).toLocaleDateString()}</span>
        </div>
        <div className="flex items-center space-x-2">
          <Target className="w-4 h-4 text-newyorker-muted" />
          <span className="text-newyorker-muted">Confidence:</span>
          <span className="font-medium">{(research.overall_confidence * 100).toFixed(0)}%</span>
        </div>
        <div className="flex items-center space-x-2">
          <Users className="w-4 h-4 text-newyorker-muted" />
          <span className="text-newyorker-muted">Agents:</span>
          <span className="font-medium">{research.agents_used?.length || 0}</span>
        </div>
        <div className="flex items-center space-x-2">
          <FileText className="w-4 h-4 text-newyorker-muted" />
          <span className="text-newyorker-muted">Iterations:</span>
          <span className="font-medium">{research.iterations_completed || 0}</span>
        </div>
      </div>
    </div>

    {/* Research Report */}
    <ResearchReport research={research} />
  </div>
);

const EmptyCurrentResearch = () => (
  <div className="h-full flex items-center justify-center p-8">
    <div className="text-center max-w-md">
      <div className="w-16 h-16 bg-newyorker-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
        <Search className="w-8 h-8 text-newyorker-muted" />
      </div>
      <h3 className="text-xl font-display text-newyorker-black mb-2">
        Start Research
      </h3>
      <p className="text-newyorker-muted font-sans text-sm leading-relaxed">
        Ask a research question in the chat to begin comprehensive analysis.
      </p>
    </div>
  </div>
);

const ResearchHistory = ({ history }) => {
  if (history.length === 0) {
    return (
      <div className="text-center py-12">
        <Clock className="w-12 h-12 text-newyorker-muted mx-auto mb-4" />
        <h3 className="text-lg font-display text-newyorker-black mb-2">
          No Research History
        </h3>
        <p className="text-newyorker-muted font-sans text-sm">
          Your completed research sessions will appear here.
        </p>
      </div>
    );
  }

  return (
    <div className="space-y-4">
      <h3 className="text-lg font-display text-newyorker-black mb-4">
        Previous Research
      </h3>
      {history.map((research, index) => (
        <motion.div
          key={research.session_id || index}
          className="border border-newyorker-gray-200 rounded-lg p-4 hover:bg-newyorker-gray-50 cursor-pointer"
          whileHover={{ scale: 1.02 }}
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: index * 0.1 }}
        >
          <div className="flex justify-between items-start mb-2">
            <h4 className="font-medium text-newyorker-black line-clamp-2">
              {research.query || 'Untitled Research'}
            </h4>
            <span className="text-xs text-newyorker-muted ml-2">
              {new Date(research.timestamp).toLocaleDateString()}
            </span>
          </div>
          <div className="flex items-center space-x-4 text-xs text-newyorker-muted">
            <span>Confidence: {(research.overall_confidence * 100).toFixed(0)}%</span>
            <span>Agents: {research.agents_used?.length || 0}</span>
            <span>Duration: {research.processing_time || 'Unknown'}</span>
          </div>
        </motion.div>
      ))}
    </div>
  );
};

export default ResearchPanel;

// frontend/src/components/Research/ResearchReport.jsx
import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { ChevronDown, ChevronUp, Copy, ExternalLink } from 'lucide-react';
import ReactMarkdown from 'react-markdown';
import Accordion from '../Common/Accordion';

const ResearchReport = ({ research }) => {
  const [copiedSection, setCopiedSection] = useState(null);

  const copyToClipboard = async (text, sectionName) => {
    try {
      await navigator.clipboard.writeText(text);
      setCopiedSection(sectionName);
      setTimeout(() => setCopiedSection(null), 2000);
    } catch (err) {
      console.error('Failed to copy text:', err);
    }
  };

  const sections = parseResearchSections(research.final_synthesis);

  return (
    <motion.div
      className="space-y-6"
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ duration: 0.6 }}
    >
      {/* Executive Summary */}
      {sections.executive && (
        <ReportSection
          title="Executive Summary"
          content={sections.executive}
          onCopy={(content) => copyToClipboard(content, 'executive')}
          copied={copiedSection === 'executive'}
          defaultOpen={true}
        />
      )}

      {/* Key Findings */}
      {sections.findings && (
        <ReportSection
          title="Key Findings"
          content={sections.findings}
          onCopy={(content) => copyToClipboard(content, 'findings')}
          copied={copiedSection === 'findings'}
          defaultOpen={true}
        />
      )}

      {/* Detailed Analysis */}
      {sections.analysis && (
        <ReportSection
          title="Detailed Analysis"
          content={sections.analysis}
          onCopy={(content) => copyToClipboard(content, 'analysis')}
          copied={copiedSection === 'analysis'}
        />
      )}

      {/* Recommendations */}
      {sections.recommendations && (
        <ReportSection
          title="Recommendations"
          content={sections.recommendations}
          onCopy={(content) => copyToClipboard(content, 'recommendations')}
          copied={copiedSection === 'recommendations'}
        />
      )}

      {/* Raw Content (if sections parsing failed) */}
      {!sections.executive && !sections.findings && (
        <ReportSection
          title="Research Results"
          content={research.final_synthesis}
          onCopy={(content) => copyToClipboard(content, 'raw')}
          copied={copiedSection === 'raw'}
          defaultOpen={true}
        />
      )}

      {/* Research Metadata */}
      <div className="border-t border-newyorker-gray-200 pt-6">
        <Accordion
          title="Research Details"
          icon={<ExternalLink className="w-4 h-4" />}
        >
          <div className="space-y-4 text-sm">
            <div className="grid grid-cols-2 gap-4">
              <div>
                <span className="text-newyorker-muted">Session ID:</span>
                <p className="font-mono text-xs mt-1">{research.session_id}</p>
              </div>
              <div>
                <span className="text-newyorker-muted">User ID:</span>
                <p className="font-mono text-xs mt-1">{research.user_id}</p>
              </div>
              <div>
                <span className="text-newyorker-muted">Processing Time:</span>
                <p className="mt-1">{research.processing_time || 'Unknown'}</p>
              </div>
              <div>
                <span className="text-newyorker-muted">Query Type:</span>
                <p className="mt-1">{research.query_type || 'Deep Research'}</p>
              </div>
            </div>
            
            {research.agents_used && research.agents_used.length > 0 && (
              <div>
                <span className="text-newyorker-muted">Research Agents Used:</span>
                <div className="flex flex-wrap gap-2 mt-2">
                  {research.agents_used.map((agent, index) => (
                    <span
                      key={index}
                      className="px-2 py-1 bg-newyorker-gray-100 text-newyorker-black rounded text-xs"
                    >
                      {agent}
                    </span>
                  ))}
                </div>
              </div>
            )}

            {research.metadata && (
              <div>
                <span className="text-newyorker-muted">Additional Metadata:</span>
                <pre className="mt-2 p-3 bg-newyorker-gray-50 rounded text-xs font-mono overflow-x-auto">
                  {JSON.stringify(research.metadata, null, 2)}
                </pre>
              </div>
            )}
          </div>
        </Accordion>
      </div>
    </motion.div>
  );
};

const ReportSection = ({ title, content, onCopy, copied, defaultOpen = false }) => {
  return (
    <Accordion title={title} defaultOpen={defaultOpen}>
      <div className="prose prose-sm max-w-none">
        <div className="flex justify-end mb-4">
          <motion.button
            className={`flex items-center space-x-1 px-3 py-1 rounded-md text-xs transition-colors ${
              copied
                ? 'bg-green-100 text-green-800'
                : 'bg-newyorker-gray-100 text-newyorker-muted hover:text-newyorker-black'
            }`}
            onClick={() => onCopy(content)}
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
          >
            <Copy className="w-3 h-3" />
            <span>{copied ? 'Copied!' : 'Copy'}</span>
          </motion.button>
        </div>

        <ReactMarkdown
          components={{
            p: ({ children }) => <p className="mb-4 leading-relaxed">{children}</p>,
            h1: ({ children }) => <h1 className="text-xl font-display mb-4 text-newyorker-black">{children}</h1>,
            h2: ({ children }) => <h2 className="text-lg font-display mb-3 text-newyorker-black">{children}</h2>,
            h3: ({ children }) => <h3 className="text-base font-display mb-2 text-newyorker-black">{children}</h3>,
            ul: ({ children }) => <ul className="editorial-list mb-4">{children}</ul>,
            ol: ({ children }) => <ol className="editorial-list mb-4">{children}</ol>,
            li: ({ children }) => <li className="mb-1">{children}</li>,
            blockquote: ({ children }) => (
              <blockquote className="border-l-4 border-newyorker-accent pl-4 italic my-4 text-newyorker-muted">
                {children}
              </blockquote>
            ),
            code: ({ children }) => (
              <code className="bg-newyorker-gray-100 px-1 py-0.5 rounded text-xs font-mono">
                {children}
              </code>
            ),
            pre: ({ children }) => (
              <pre className="bg-newyorker-gray-100 p-4 rounded overflow-x-auto text-xs">
                {children}
              </pre>
            ),
          }}
        >
          {content}
        </ReactMarkdown>
      </div>
    </Accordion>
  );
};

// Helper function to parse research sections
const parseResearchSections = (synthesis) => {
  const sections = {};
  
  // Try to parse common section headers
  const sectionPatterns = [
    { key: 'executive', patterns: ['executive summary', 'summary', 'overview'] },
    { key: 'findings', patterns: ['key findings', 'findings', 'results'] },
    { key: 'analysis', patterns: ['detailed analysis', 'analysis', 'detailed findings'] },
    { key: 'recommendations', patterns: ['recommendations', 'conclusion', 'next steps'] },
  ];

  sectionPatterns.forEach(({ key, patterns }) => {
    for (const pattern of patterns) {
      const regex = new RegExp(`\\*\\*${pattern}\\*\\*([\\s\\S]*?)(?=\\*\\*|$)`, 'i');
      const match = synthesis.match(regex);
      if (match) {
        sections[key] = match[1].trim();
        break;
      }
    }
  });

  return sections;
};

export default ResearchReport;
