# ODRL Output.json - Complete Structure Explanation

## Overview

The `output.json` file contains **ODRL 2.2** (Open Digital Rights Language) compliant policies that represent machine-readable data governance rules. Each policy is a self-contained JSON-LD object that expresses permissions, prohibitions, and constraints about how data can be used.

---

## üèóÔ∏è Top-Level Policy Structure

### Example Policy
```json
{
  "@context": "http://www.w3.org/ns/odrl.jsonld",
  "@type": "Policy",
  "uid": "urn:policy:rule_001",
  "profile": "urn:profile:dss",
  "dc:title": "Data Minimization",
  "dc:description": "DSS restriction: Data Minimization",
  "dc:created": "2025-01-15T10:30:00.000000",
  "dc:identifier": "rule_001",
  "permission": [...],
  "prohibition": [...],
  "dc:subject": ["Personal Data"],
  "dc:coverage": ["EU", "United States"],
  "dc:purpose": "Compliance with data protection regulations",
  "custom:framework": "DSS",
  "custom:type": "restriction",
  "custom:confidenceScore": 0.85,
  "custom:dataCategoryUUIDs": {...},
  "custom:originalData": {...}
}
```

---

## üìã Key Explanations

### **Core ODRL Keys**

#### `@context` 
**Type:** String (URL)  
**Value:** `"http://www.w3.org/ns/odrl.jsonld"`  
**Meaning:** Links to the ODRL JSON-LD context that defines the vocabulary  
**Purpose:** Enables semantic understanding and interoperability with other ODRL systems

#### `@type`
**Type:** String  
**Value:** `"Policy"`, `"Set"`, `"Offer"`, or `"Agreement"`  
**Meaning:** Defines what type of ODRL entity this is  
**Common Value:** `"Policy"` - A complete policy with rules  
**Purpose:** Classifies the ODRL document type

#### `uid`
**Type:** String (URN/URI)  
**Format:** `"urn:policy:{policy_id}"`  
**Example:** `"urn:policy:rule_001"`  
**Meaning:** **U**nique **Id**entifier for this specific policy  
**Purpose:** Allows referencing this policy from other systems or policies  
**Uniqueness:** Must be globally unique across your entire system

#### `profile`
**Type:** String (URN/URI)  
**Format:** `"urn:profile:{framework_type}"`  
**Example:** `"urn:profile:dss"` or `"urn:profile:datavisa"`  
**Meaning:** Links this policy to a specific framework or profile  
**Purpose:** Groups policies by their regulatory framework or domain

---

### **Dublin Core Metadata Keys** (prefix: `dc:`)

These keys use the Dublin Core metadata standard for describing documents.

#### `dc:title`
**Type:** String  
**Example:** `"Data Minimization"`  
**Meaning:** Human-readable name of the policy  
**Purpose:** Display name for UIs and reports

#### `dc:description`
**Type:** String  
**Example:** `"DSS restriction: Organizations must limit data collection"`  
**Meaning:** Full description of what this policy enforces  
**Purpose:** Provides context for humans reading the policy

#### `dc:created`
**Type:** String (ISO 8601 datetime)  
**Example:** `"2025-01-15T10:30:00.000000"`  
**Meaning:** When this policy was created/generated  
**Purpose:** Audit trail and version tracking

#### `dc:identifier`
**Type:** String  
**Example:** `"rule_001"`  
**Meaning:** Original identifier from the source CSV  
**Purpose:** Links back to source data for traceability

#### `dc:subject`
**Type:** Array of strings  
**Example:** `["Personal Data", "Health Data", "Financial Data"]`  
**Meaning:** The data categories this policy applies to  
**Purpose:** Enables filtering policies by data type  
**Relationship:** Maps to extracted data categories from guidance text

#### `dc:coverage`
**Type:** Array of strings  
**Example:** `["EU", "United States", "California"]`  
**Meaning:** Geographic scope where this policy applies  
**Purpose:** Jurisdiction-specific policy enforcement  
**Relationship:** Derived from geographic constraints in guidance

#### `dc:purpose`
**Type:** String  
**Example:** `"Research and development"`  
**Meaning:** The stated purpose for data processing  
**Purpose:** Purpose limitation - ensures data is only used for specified reasons

---

### **Rule Components**

The actual permissions and prohibitions that define what can/cannot be done.

## üü¢ Permissions (`permission`)

**Type:** Array of permission objects  
**Meaning:** Actions that **ARE ALLOWED** under specific conditions

### Permission Structure
```json
{
  "action": "http://www.w3.org/ns/odrl/2/use",
  "target": "urn:asset:personal_data",
  "assigner": {
    "uid": "urn:party:data_controller",
    "role": "assigner"
  },
  "assignee": {
    "uid": "urn:party:processor",
    "role": "assignee"
  },
  "constraint": [
    {
      "leftOperand": "http://www.w3.org/ns/odrl/2/purpose",
      "operator": "http://www.w3.org/ns/odrl/2/eq",
      "rightOperand": "research",
      "rdfs:comment": "Data usage restricted to research purposes only"
    }
  ],
  "duty": [
    {
      "action": "http://www.w3.org/ns/odrl/2/delete",
      "rdfs:comment": "Must delete data after 30 days"
    }
  ],
  "rdfs:comment": "Permission to use personal data for research with constraints"
}
```

### Permission Keys Explained

#### `action`
**Type:** String (URI)  
**Example:** `"http://www.w3.org/ns/odrl/2/use"`  
**Meaning:** The action being permitted  
**Standard Actions:**
- `use` - General usage
- `transfer` - Move data between systems
- `distribute` - Share with third parties
- `reproduce` - Make copies
- `modify` - Change or transform data
- `delete` - Remove data
- `read` - Access data
- `write` - Create or update data
- `store` - Persist data

**Custom Actions:** If guidance mentions actions not in ODRL standard, custom URIs are created:
- `"http://www.w3.org/ns/odrl/2/encrypt"`
- `"http://www.w3.org/ns/odrl/2/anonymize"`

#### `target`
**Type:** String (URI)  
**Example:** `"urn:asset:personal_data"` or `"urn:asset:health_records"`  
**Meaning:** What the permission applies to (the asset/data)  
**Purpose:** Specifies which data or resource this rule governs

#### `assigner`
**Type:** Object with `uid` and `role`  
**Example:**
```json
{
  "uid": "urn:party:data_controller",
  "role": "assigner"
}
```
**Meaning:** Who **grants** the permission (the authority)  
**Common Values:**
- `data_controller` - Entity determining purposes and means
- `regulatory_authority` - Government or regulatory body
- `organization` - The company/organization

#### `assignee`
**Type:** Object with `uid` and `role`  
**Example:**
```json
{
  "uid": "urn:party:processor",
  "role": "assignee"
}
```
**Meaning:** Who **receives** the permission (who can do the action)  
**Common Values:**
- `processor` - Entity processing data on behalf of controller
- `joint_controller` - Co-controller of data
- `third_party` - External entity
- `data_subject` - Individual whose data it is

#### `constraint`
**Type:** Array of constraint objects  
**Meaning:** **Conditions that MUST be met** for the permission to be valid  
**Purpose:** Restricts when/how/where the permission applies

**Constraint Structure:**
```json
{
  "leftOperand": "http://www.w3.org/ns/odrl/2/spatial",
  "operator": "http://www.w3.org/ns/odrl/2/isPartOf",
  "rightOperand": "EU",
  "rdfs:comment": "Processing limited to EU territories"
}
```

**Constraint Components:**

- **`leftOperand`** (What is being constrained):
  - `dateTime` - Specific date/time
  - `elapsedTime` - Time since event (e.g., "30 days after collection")
  - `delayPeriod` - Delay before action
  - `spatial` - Geographic location
  - `purpose` - Processing purpose
  - `recipient` - Type of recipient
  - `count` - Number of times
  - `percentage` - Percentage limit
  
- **`operator`** (Comparison type):
  - `eq` - Equals
  - `neq` - Not equals
  - `gt` - Greater than
  - `lt` - Less than
  - `gteq` - Greater than or equal
  - `lteq` - Less than or equal
  - `isPartOf` - Is within set/region
  - `isAllOf` - Matches all of
  - `isAnyOf` - Matches any of
  - `isNoneOf` - Matches none of
  
- **`rightOperand`** (The value to compare against):
  - String: `"EU"`, `"research"`
  - Number: `30`, `100`
  - Date: `"2025-12-31T23:59:59Z"`
  - Duration: `"P30D"` (30 days), `"PT2H"` (2 hours)
  - Array: `["US", "Canada", "Mexico"]`

#### `duty`
**Type:** Array of duty objects  
**Meaning:** **Obligations that MUST be fulfilled** to exercise the permission  
**Example:**
```json
{
  "action": "http://www.w3.org/ns/odrl/2/delete",
  "rdfs:comment": "Must delete data after completion"
}
```
**Purpose:** Defines what the assignee must do in return for the permission

#### `rdfs:comment`
**Type:** String  
**Meaning:** Human-readable description of the permission  
**Purpose:** Explains the rule in plain English for non-technical users

---

## üî¥ Prohibitions (`prohibition`)

**Type:** Array of prohibition objects  
**Meaning:** Actions that **ARE FORBIDDEN**

### Prohibition Structure
```json
{
  "action": "http://www.w3.org/ns/odrl/2/transfer",
  "target": "urn:asset:sensitive_data",
  "assigner": {
    "uid": "urn:party:regulatory_authority",
    "role": "assigner"
  },
  "assignee": {
    "uid": "urn:party:any_entity",
    "role": "assignee"
  },
  "constraint": [
    {
      "leftOperand": "http://www.w3.org/ns/odrl/2/recipient",
      "operator": "http://www.w3.org/ns/odrl/2/isNoneOf",
      "rightOperand": ["countries_without_adequacy"],
      "rdfs:comment": "Transfer forbidden to non-adequate jurisdictions"
    }
  ],
  "rdfs:comment": "Prohibition on transferring sensitive data to unsafe countries"
}
```

### Prohibition Keys

Same structure as permissions, but the meaning is inverted:
- **`action`** - The action that is **prohibited**
- **`target`** - What asset the prohibition applies to
- **`assigner`** - Who sets the prohibition
- **`assignee`** - Who is subject to the prohibition
- **`constraint`** - Conditions under which it's prohibited
- **`rdfs:comment`** - Description of the prohibition

**Key Difference:** Prohibitions define what **CANNOT** be done, while permissions define what **CAN** be done.

---

### **Custom Metadata Keys** (prefix: `custom:`)

These are non-standard extensions specific to your implementation.

#### `custom:framework`
**Type:** String  
**Values:** `"DSS"` or `"DataVISA"`  
**Meaning:** Which framework this rule belongs to  
**Purpose:** Categorizes rules by regulatory framework

#### `custom:type`
**Type:** String  
**Values:** `"restriction"` or `"condition"`  
**Meaning:** Type of rule from source CSV  
**Purpose:** Distinguishes between hard restrictions vs conditional requirements

#### `custom:confidenceScore`
**Type:** Number (0.0 to 1.0)  
**Example:** `0.85`  
**Meaning:** How confident the extraction was  
**Scale:**
- `0.9-1.0` - High confidence (explicit in guidance)
- `0.7-0.9` - Medium confidence (clear implication)
- `0.5-0.7` - Low confidence (inference)
- `< 0.5` - Very uncertain

**Purpose:** Quality metric for extracted rules

#### `custom:dataCategoryUUIDs`
**Type:** Object (key-value pairs)  
**Example:**
```json
{
  "Personal Data": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
  "Health Data": "b2c3d4e5-f6a7-8901-bcde-f12345678901"
}
```
**Meaning:** Maps data category names to their UUID in the category manager  
**Purpose:** Links policies to the centralized data category registry

#### `custom:originalData`
**Type:** Object  
**Example:**
```json
{
  "id": "rule_001",
  "rule_name": "Data Minimization",
  "framework": "DSS",
  "type": "restriction",
  "guidance_preview": "Organizations must only collect and process..."
}
```
**Meaning:** Original data from the source CSV  
**Purpose:** Traceability back to source data for auditing

---

## üîó Key Relationships Diagram

```
POLICY (Top Level)
‚îú‚îÄ @context ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñ∫ Links to ODRL vocabulary
‚îú‚îÄ uid ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñ∫ Unique policy identifier
‚îú‚îÄ profile ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñ∫ Framework classification
‚îÇ
‚îú‚îÄ dc:subject ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñ∫ Lists applicable data categories
‚îÇ   ‚îî‚îÄ Maps to: custom:dataCategoryUUIDs
‚îÇ
‚îú‚îÄ PERMISSIONS (Array)
‚îÇ   ‚îú‚îÄ action ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñ∫ What CAN be done
‚îÇ   ‚îú‚îÄ target ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñ∫ To what asset/data
‚îÇ   ‚îú‚îÄ assigner ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñ∫ Who grants permission
‚îÇ   ‚îú‚îÄ assignee ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñ∫ Who receives permission
‚îÇ   ‚îú‚îÄ constraint (Array)
‚îÇ   ‚îÇ   ‚îú‚îÄ leftOperand ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñ∫ What to check
‚îÇ   ‚îÇ   ‚îú‚îÄ operator ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñ∫ How to compare
‚îÇ   ‚îÇ   ‚îî‚îÄ rightOperand ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñ∫ Value to compare with
‚îÇ   ‚îî‚îÄ duty (Array) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñ∫ What MUST be done in return
‚îÇ
‚îî‚îÄ PROHIBITIONS (Array)
    ‚îú‚îÄ action ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñ∫ What CANNOT be done
    ‚îú‚îÄ target ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñ∫ To what asset/data
    ‚îú‚îÄ assigner ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñ∫ Who sets prohibition
    ‚îú‚îÄ assignee ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñ∫ Who is prohibited
    ‚îî‚îÄ constraint (Array) ‚îÄ‚îÄ‚îÄ‚îÄ‚ñ∫ When it's prohibited
```

---

## üìä Real-World Example Explained

### Input Guidance (CSV)
```
id: gdpr_art_32
framework: DSS
type: restriction
rule_name: "Security Measures"
guidance: "Controllers must implement encryption of personal data and ensure ongoing confidentiality. Data must be processed only within the EU and deleted after retention period."
```

### Output Policy (Explained)
```json
{
  // ODRL Standard Context - enables semantic understanding
  "@context": "http://www.w3.org/ns/odrl.jsonld",
  
  // This is a Policy (not an Offer or Agreement)
  "@type": "Policy",
  
  // Unique identifier for THIS policy
  "uid": "urn:policy:gdpr_art_32",
  
  // Belongs to DSS framework
  "profile": "urn:profile:dss",
  
  // METADATA: Human-readable information
  "dc:title": "Security Measures",
  "dc:description": "DSS restriction: Security Measures",
  "dc:created": "2025-01-15T10:30:00Z",
  "dc:identifier": "gdpr_art_32",
  
  // WHAT DATA: This policy applies to Personal Data
  "dc:subject": ["Personal Data"],
  
  // WHERE: Geographic scope is EU
  "dc:coverage": ["EU"],
  
  // WHY: Purpose is security compliance
  "dc:purpose": "Data security and protection",
  
  // PERMISSIONS: What IS allowed
  "permission": [
    {
      // CAN: Process personal data
      "action": "http://www.w3.org/ns/odrl/2/use",
      
      // ON: Personal data assets
      "target": "urn:asset:personal_data",
      
      // GRANTED BY: Data Controller
      "assigner": {
        "uid": "urn:party:controller",
        "role": "assigner"
      },
      
      // GRANTED TO: Data Processor
      "assignee": {
        "uid": "urn:party:processor",
        "role": "assignee"
      },
      
      // BUT ONLY IF: These conditions are met
      "constraint": [
        {
          // CONDITION 1: Must be in EU
          "leftOperand": "http://www.w3.org/ns/odrl/2/spatial",
          "operator": "http://www.w3.org/ns/odrl/2/isPartOf",
          "rightOperand": "EU",
          "rdfs:comment": "Processing limited to EU territories"
        },
        {
          // CONDITION 2: Data must be encrypted
          "leftOperand": "http://www.w3.org/ns/odrl/2/securityLevel",
          "operator": "http://www.w3.org/ns/odrl/2/eq",
          "rightOperand": "encrypted",
          "rdfs:comment": "Data must be encrypted"
        }
      ],
      
      // AND MUST: Fulfill these duties
      "duty": [
        {
          "action": "http://www.w3.org/ns/odrl/2/delete",
          "rdfs:comment": "Must delete after retention period"
        }
      ],
      
      "rdfs:comment": "Permission to process personal data with security measures"
    }
  ],
  
  // PROHIBITIONS: What is NOT allowed
  "prohibition": [
    {
      // CANNOT: Transfer data
      "action": "http://www.w3.org/ns/odrl/2/transfer",
      
      // FROM: Personal data
      "target": "urn:asset:personal_data",
      
      // SET BY: Regulatory authority
      "assigner": {
        "uid": "urn:party:regulator",
        "role": "assigner"
      },
      
      // APPLIES TO: All entities
      "assignee": {
        "uid": "urn:party:any",
        "role": "assignee"
      },
      
      // WHEN: Outside EU
      "constraint": [
        {
          "leftOperand": "http://www.w3.org/ns/odrl/2/spatial",
          "operator": "http://www.w3.org/ns/odrl/2/isNoneOf",
          "rightOperand": ["EU"],
          "rdfs:comment": "Transfer forbidden outside EU"
        }
      ],
      
      "rdfs:comment": "Prohibition on transferring data outside EU"
    }
  ],
  
  // CUSTOM: Implementation-specific metadata
  "custom:framework": "DSS",
  "custom:type": "restriction",
  "custom:confidenceScore": 0.9,
  
  // TRACEABILITY: Back to source CSV
  "custom:originalData": {
    "id": "gdpr_art_32",
    "rule_name": "Security Measures",
    "framework": "DSS",
    "type": "restriction",
    "guidance_preview": "Controllers must implement encryption..."
  }
}
```

---

## üéØ How to Use This Output

### 1. **Policy Engine Integration**
```python
# Load policies
with open('output.json') as f:
    policies = json.load(f)

# Find policies for specific data category
health_policies = [
    p for p in policies 
    if 'Health Data' in p.get('dc:subject', [])
]

# Check if action is permitted
def is_permitted(action, data_category, location):
    for policy in policies:
        if data_category in policy.get('dc:subject', []):
            for perm in policy.get('permission', []):
                if action in perm['action']:
                    # Check constraints
                    for constraint in perm.get('constraint', []):
                        # Evaluate constraint...
                        pass
```

### 2. **Compliance Checking**
```python
# Verify if an operation complies with policies
operation = {
    'action': 'transfer',
    'data': 'Personal Data',
    'from': 'EU',
    'to': 'US'
}

# Check prohibitions
for policy in policies:
    for prohibition in policy.get('prohibition', []):
        if 'transfer' in prohibition['action']:
            # Check if operation violates prohibition
            pass
```

### 3. **Audit Trail**
```python
# Track which policies apply to an action
def get_applicable_policies(action, data_category):
    return [
        {
            'policy_id': p['uid'],
            'rule_name': p['dc:title'],
            'confidence': p['custom:confidenceScore'],
            'framework': p['custom:framework']
        }
        for p in policies
        if data_category in p.get('dc:subject', [])
    ]
```

---

## üìù Key Takeaways

1. **Structure**: Each policy is a self-contained, machine-readable rule
2. **Standard**: Follows W3C ODRL 2.2 specification for interoperability
3. **Semantic**: Uses URIs/URNs for unambiguous identification
4. **Flexible**: Supports custom extensions via `custom:` prefix
5. **Traceable**: Links back to source data via `custom:originalData`
6. **Actionable**: Can be directly used by policy engines for enforcement

The output.json is designed to be both human-readable (with descriptions) and machine-processable (with URIs and structured constraints), making it suitable for automated compliance systems, audit tools, and governance platforms.
