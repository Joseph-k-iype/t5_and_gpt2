import React, { useState, useRef, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import MessageBubble from './MessageBubble';
import ThoughtBubble from './ThoughtBubble';
import LoadingAnimation from './LoadingAnimation';
import GlassCard from './GlassCard';
import { cn } from '../utils/lib';
import type { Message, ChatSession, ThoughtProcess, ResearchState } from '../types';

interface ChatInterfaceProps {
  session: ChatSession | null;
  messages: Message[];
  isProcessing: boolean;
  currentThoughts: ThoughtProcess[];
  researchState: ResearchState | null;
  onSendMessage: (message: string) => Promise<void>;
  onStartResearch: (topic: string, maxIterations?: number) => Promise<void>;
  onShowGraph: (message: any) => void;
  onHideGraph: () => void;
}

const ChatInterface: React.FC<ChatInterfaceProps> = ({
  session,
  messages,
  isProcessing,
  currentThoughts,
  researchState,
  onSendMessage,
  onStartResearch,
  onShowGraph,
  onHideGraph
}) => {
  const [inputText, setInputText] = useState('');
  const [researchTopic, setResearchTopic] = useState('');
  const [showResearchModal, setShowResearchModal] = useState(false);
  const [maxIterations, setMaxIterations] = useState(3);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const inputRef = useRef<HTMLTextAreaElement>(null);

  // Auto-scroll to bottom when new messages arrive
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages, currentThoughts]);

  // Focus input on mount
  useEffect(() => {
    inputRef.current?.focus();
  }, []);

  // Auto-resize textarea
  useEffect(() => {
    if (inputRef.current) {
      inputRef.current.style.height = 'auto';
      inputRef.current.style.height = Math.min(inputRef.current.scrollHeight, 120) + 'px';
    }
  }, [inputText]);

  const handleSendMessage = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!inputText.trim() || isProcessing) return;
    
    const message = inputText.trim();
    setInputText('');
    
    try {
      await onSendMessage(message);
    } catch (error) {
      console.error('Failed to send message:', error);
      // Re-populate input on error
      setInputText(message);
    }
  };

  const handleStartResearch = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!researchTopic.trim() || isProcessing) return;
    
    try {
      await onStartResearch(researchTopic, maxIterations);
      setShowResearchModal(false);
      setResearchTopic('');
    } catch (error) {
      console.error('Failed to start research:', error);
    }
  };

  const handleKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage(e as any);
    }
  };

  const suggestedQuestions = [
    "What are the key differences between GDPR and CCPA consent requirements?",
    "How do data breach notification laws vary across jurisdictions?",
    "What constitutes personal data under different privacy frameworks?",
    "Compare data subject rights across EU, California, and Brazil",
    "What are the compliance requirements for international data transfers?",
    "How do cross-border data transfer mechanisms compare globally?"
  ];

  const handleSuggestedQuestion = (question: string) => {
    setInputText(question);
    inputRef.current?.focus();
  };

  return (
    <div className="h-full flex flex-col">
      {/* Header */}
      <motion.div
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.6 }}
        className="text-center mb-6"
      >
        <h1 className="text-3xl sm:text-4xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent mb-4">
          Privacy Q&A Expert
        </h1>
        <p className="text-gray-600 text-base max-w-3xl mx-auto leading-relaxed">
          Ask questions about data privacy regulations worldwide. Get expert guidance 
          on GDPR, CCPA, LGPD, and other privacy frameworks with deep research capabilities.
        </p>
      </motion.div>

      {/* Main Chat Container */}
      <GlassCard className="flex-1 flex flex-col min-h-0">
        {/* Chat Header */}
        <div className="flex items-center justify-between p-4 border-b border-white/20 flex-shrink-0">
          <div className="flex items-center gap-3">
            <motion.div 
              className="w-3 h-3 bg-green-400 rounded-full"
              animate={{
                scale: session ? [1, 1.2, 1] : 1,
                opacity: session ? [0.7, 1, 0.7] : 0.5
              }}
              transition={{
                duration: 2,
                repeat: Infinity,
                ease: "easeInOut"
              }}
            />
            <span className="text-sm font-medium text-gray-700">
              {session ? 'Connected & Ready' : 'Connecting...'}
            </span>
          </div>
          
          <div className="flex items-center gap-2">
            {/* Messages Count */}
            <motion.div
              whileHover={{ scale: 1.05 }}
              className="text-xs text-gray-500 bg-gray-100/50 px-3 py-1.5 rounded-full border border-gray-200/50"
            >
              Messages: <span className="font-medium">{messages.length}</span>
            </motion.div>

            {/* Processing Indicator */}
            {isProcessing && (
              <motion.div
                initial={{ opacity: 0, scale: 0.8 }}
                animate={{ opacity: 1, scale: 1 }}
                className="flex items-center gap-2 text-xs text-blue-600 bg-blue-100/50 px-3 py-1.5 rounded-full border border-blue-200/50"
              >
                <LoadingAnimation size="sm" type="dots" />
                <span>Processing</span>
              </motion.div>
            )}
          </div>
        </div>

        {/* Messages Area */}
        <div className="flex-1 overflow-y-auto p-4 space-y-4 glass-scrollbar min-h-0">
          {messages.length === 0 && !isProcessing && (
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              className="text-center py-12"
            >
              <motion.div 
                className="text-6xl mb-4"
                animate={{
                  rotate: [0, 5, -5, 0],
                  scale: [1, 1.1, 1]
                }}
                transition={{
                  duration: 4,
                  repeat: Infinity,
                  ease: "easeInOut"
                }}
              >
                ðŸ§ 
              </motion.div>
              <h3 className="text-xl font-semibold text-gray-800 mb-2">
                Ready to Help with Privacy Questions
              </h3>
              <p className="text-gray-600 mb-6 max-w-2xl mx-auto">
                Start by asking a question or try one of the suggested topics below.
              </p>
              
              {/* Suggested Questions */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-3 max-w-4xl mx-auto">
                {suggestedQuestions.map((question, index) => (
                  <motion.button
                    key={index}
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ delay: index * 0.1 }}
                    whileHover={{ scale: 1.02, y: -2 }}
                    whileTap={{ scale: 0.98 }}
                    onClick={() => handleSuggestedQuestion(question)}
                    className="text-left p-4 bg-gradient-to-br from-blue-50/50 to-purple-50/50 hover:from-blue-50/80 hover:to-purple-50/80 rounded-xl text-sm text-gray-700 transition-all duration-200 border border-blue-100/50 shadow-sm hover:shadow-md"
                  >
                    <div className="flex items-start gap-3">
                      <span className="text-blue-500 text-lg flex-shrink-0 mt-0.5">ðŸ’­</span>
                      <span className="leading-relaxed">{question}</span>
                    </div>
                  </motion.button>
                ))}
              </div>
            </motion.div>
          )}

          <AnimatePresence mode="popLayout">
            {messages.map((message) => (
              <MessageBubble
                key={message.id}
                message={message}
                onShowGraph={onShowGraph}
              />
            ))}
          </AnimatePresence>

          {/* Thinking Bubbles */}
          <AnimatePresence>
            {currentThoughts.map((thought, index) => (
              <ThoughtBubble
                key={`${thought.timestamp}-${index}`}
                thought={thought}
              />
            ))}
          </AnimatePresence>

          {/* Processing Indicator */}
          {isProcessing && (
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -20 }}
              className="flex items-center space-x-3 px-4 py-3"
            >
              <LoadingAnimation size="md" type="brain" />
              <div className="flex flex-col">
                <span className="text-gray-700 font-medium">
                  AI is analyzing your question...
                </span>
                <span className="text-gray-500 text-xs">
                  Generating response with insights
                </span>
              </div>
            </motion.div>
          )}

          <div ref={messagesEndRef} />
        </div>

        {/* Input Area */}
        <div className="border-t border-white/20 p-4 flex-shrink-0">
          <form onSubmit={handleSendMessage} className="flex gap-3">
            <div className="flex-1 relative">
              <textarea
                ref={inputRef}
                value={inputText}
                onChange={(e) => setInputText(e.target.value)}
                onKeyDown={handleKeyDown}
                placeholder="Ask about data privacy regulations..."
                disabled={isProcessing}
                className={cn(
                  "w-full min-h-[50px] max-h-[120px] px-4 py-3 resize-none",
                  "bg-white/50 backdrop-blur-sm border border-white/30 rounded-xl",
                  "focus:outline-none focus:ring-2 focus:ring-blue-500/50 focus:border-transparent",
                  "disabled:opacity-50 disabled:cursor-not-allowed",
                  "transition-all duration-200",
                  "placeholder:text-gray-500"
                )}
                rows={1}
              />
              
              {/* Character Counter */}
              {inputText.length > 200 && (
                <div className="absolute bottom-2 left-2 text-xs text-gray-500 bg-white/80 px-2 py-1 rounded">
                  {inputText.length}/1000
                </div>
              )}
            </div>
            
            <div className="flex gap-2">
              {/* Deep Research Button */}
              <motion.button
                type="button"
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                onClick={() => setShowResearchModal(true)}
                disabled={isProcessing}
                className="flex items-center gap-2 px-4 py-3 bg-purple-100/50 hover:bg-purple-100/80 rounded-xl font-medium text-purple-700 disabled:opacity-50 transition-all duration-200 border border-purple-200/50"
                title="Start Deep Research"
              >
                <span>ðŸ”¬</span>
                <span className="hidden sm:inline">Research</span>
              </motion.button>

              {/* Send Button */}
              <motion.button
                type="submit"
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                disabled={!inputText.trim() || isProcessing}
                className={cn(
                  "px-6 py-3 rounded-xl font-medium transition-all duration-200",
                  "bg-gradient-to-r from-blue-500 to-purple-500 text-white",
                  "hover:from-blue-600 hover:to-purple-600 shadow-lg hover:shadow-xl",
                  "disabled:opacity-50 disabled:cursor-not-allowed disabled:shadow-none",
                  "flex items-center justify-center gap-2"
                )}
              >
                {isProcessing ? (
                  <LoadingAnimation size="sm" />
                ) : (
                  <>
                    <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8" />
                    </svg>
                    <span>Send</span>
                  </>
                )}
              </motion.button>
            </div>
          </form>
          
          <div className="mt-2 text-xs text-gray-500 text-center">
            Press Enter to send â€¢ Shift+Enter for new line â€¢ ðŸ”¬ for deep research â€¢ ðŸ“Š for visual graphs
          </div>
        </div>
      </GlassCard>

      {/* Deep Research Modal */}
      <AnimatePresence>
        {showResearchModal && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center p-4 z-50"
            onClick={() => setShowResearchModal(false)}
          >
            <motion.div
              initial={{ opacity: 0, scale: 0.9, y: 20 }}
              animate={{ opacity: 1, scale: 1, y: 0 }}
              exit={{ opacity: 0, scale: 0.9, y: 20 }}
              onClick={(e) => e.stopPropagation()}
              className="w-full max-w-md"
            >
              <GlassCard variant="modal" className="p-6">
                <h3 className="text-xl font-semibold text-gray-800 mb-4 flex items-center gap-2">
                  <span>ðŸ”¬</span>
                  <span>Start Deep Research</span>
                </h3>
                
                <form onSubmit={handleStartResearch} className="space-y-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Research Topic
                    </label>
                    <textarea
                      value={researchTopic}
                      onChange={(e) => setResearchTopic(e.target.value)}
                      placeholder="Enter a complex topic for comprehensive analysis..."
                      className="w-full h-24 px-3 py-2 bg-white/50 backdrop-blur-sm border border-white/30 rounded-lg resize-none focus:outline-none focus:ring-2 focus:ring-purple-500/50 text-sm"
                      required
                    />
                    <div className="text-xs text-gray-500 mt-1">
                      Example: "Compare consent mechanisms across GDPR, CCPA, and LGPD frameworks"
                    </div>
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Research Depth
                    </label>
                    <select
                      value={maxIterations}
                      onChange={(e) => setMaxIterations(Number(e.target.value))}
                      className="w-full px-3 py-2 bg-white/50 backdrop-blur-sm border border-white/30 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500/50 text-sm"
                    >
                      <option value={1}>1 - Quick Research (2-3 minutes)</option>
                      <option value={2}>2 - Standard Research (3-4 minutes)</option>
                      <option value={3}>3 - Comprehensive Research (4-5 minutes)</option>
                      <option value={4}>4 - Deep Analysis (5-6 minutes)</option>
                      <option value={5}>5 - Maximum Depth (6-7 minutes)</option>
                    </select>
                  </div>
                  
                  <div className="bg-blue-50/50 p-3 rounded-lg text-sm text-blue-700">
                    <div className="font-medium mb-1">ðŸ”¬ Deep Research includes:</div>
                    <ul className="text-xs space-y-1">
                      <li>â€¢ Multi-iteration analysis</li>
                      <li>â€¢ Knowledge gap identification</li>
                      <li>â€¢ Cross-jurisdictional comparison</li>
                      <li>â€¢ Comprehensive report synthesis</li>
                    </ul>
                  </div>
                  
                  <div className="flex flex-col sm:flex-row gap-3 pt-4">
                    <motion.button
                      type="button"
                      whileHover={{ scale: 1.02 }}
                      whileTap={{ scale: 0.98 }}
                      onClick={() => setShowResearchModal(false)}
                      className="flex-1 px-4 py-2 bg-gray-100/50 text-gray-700 rounded-lg font-medium hover:bg-gray-100/80 transition-all duration-200"
                    >
                      Cancel
                    </motion.button>
                    <motion.button
                      type="submit"
                      whileHover={{ scale: 1.02 }}
                      whileTap={{ scale: 0.98 }}
                      disabled={!researchTopic.trim() || isProcessing}
                      className="flex-1 px-4 py-2 bg-gradient-to-r from-purple-500 to-blue-500 text-white rounded-lg font-medium disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200 shadow-lg hover:shadow-xl"
                    >
                      Start Research
                    </motion.button>
                  </div>
                </form>
              </GlassCard>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
};

export default ChatInterface;
