"""
ODRL to Rego Conversion Prompting Strategies
FIXED: Uses f-strings to avoid .format() KeyError issues
ENHANCED: Instructs agents to extract and use ACTUAL values from ODRL JSON
"""

# ============================================================================
# ODRL CONTEXT AND STRUCTURE GUIDE
# ============================================================================

ODRL_STRUCTURE_CONTEXT = """
# ODRL JSON-LD Structure Context

ODRL policies follow the W3C ODRL 2.2 specification and use JSON-LD format.

## Core Components

1. **Policy Container**:
   - `@context`: JSON-LD context
   - `@type` or `policytype`: Policy type
   - `uid` or `@id` or `policyid`: Unique policy identifier

2. **Rules** (permissions, prohibitions, obligations):
   - `action`: The action being permitted/prohibited
   - `target`: Asset(s) the rule applies to
   - `assignee`: Party granted permission
   - `assigner`: Party granting permission
   - `constraint`: Conditions (array) - **THIS CONTAINS THE ACTUAL VALUES**
   - `duty`: Obligations tied to permissions

3. **Constraints** (THIS IS WHERE ACTUAL VALUES ARE):
   - `leftOperand`: Property being constrained (e.g., "purpose", "role", "department")
   - `operator`: Comparison operator (eq, neq, lt, gt, isAnyOf, etc.)
   - `rightOperand`: **THE ACTUAL VALUE TO EXTRACT AND USE** (e.g., "research", ["admin", "user"], "2025-12-31")
   - `unit`: Unit of measurement (optional)
   - `dataType`: Explicit type declaration (optional)

## CRITICAL: Extracting Actual Values

When you see a constraint like:
```json
{
  "leftOperand": "role",
  "operator": "isAnyOf",
  "rightOperand": ["data_controller", "dpo"]
}
```

You MUST extract and use the ACTUAL values ["data_controller", "dpo"] in the Rego code:
```rego
input.role in {"data_controller", "dpo"}  # CORRECT - uses actual values from JSON
```

NOT placeholders like:
```rego
input.role in {actual_values_from_constraint}  # WRONG - this is just placeholder text
```
"""

# ============================================================================
# ReAct AGENT PROMPTS
# ============================================================================

ODRL_PARSER_REACT_PROMPT = f"""You are an expert ODRL policy analyst. Your job is to extract ACTUAL values from the ODRL JSON.

## Your Task

Parse the ODRL JSON and extract:
1. Policy metadata (ID, type)
2. ALL permissions with their ACTUAL actions and constraints
3. ALL prohibitions with their ACTUAL actions and constraints
4. RDFS comments for context

## CRITICAL: Extract Actual Values

Use your tools to extract the REAL values:
- `extract_policy_metadata` - Get policy ID and type
- `extract_permissions_with_values` - Get permissions with ACTUAL constraint values
- `extract_prohibitions_with_values` - Get prohibitions with ACTUAL constraint values
- `extract_all_constraint_values` - Get comprehensive list of all actual values
- `analyze_rdfs_comments` - Get semantic context

## ODRL Structure

{ODRL_STRUCTURE_CONTEXT}

## Output Format

Provide a detailed analysis including:
- Policy ID: <actual_id_from_json>
- Permissions found: <count>
- For each permission:
  * Action: <actual_action_value>
  * Constraints: <list_of_actual_constraint_values>
- Prohibitions found: <count>
- For each prohibition:
  * Action: <actual_action_value>
  * Constraints: <list_of_actual_constraint_values>

Remember: Extract and report the ACTUAL values you find in the JSON, not placeholders!
"""

TYPE_INFERENCE_REACT_PROMPT = f"""You are an expert in type inference and Rego pattern generation.

## Your Task

For each constraint in the ODRL policy, determine:
1. The data type of the rightOperand value
2. The appropriate Rego built-in function
3. The complete Rego pattern using the ACTUAL value

## Tools Available

- `generate_rego_pattern_from_constraint` - Creates Rego code with ACTUAL values
- `analyze_operator` - Maps ODRL operator to Rego operator
- `analyze_rightOperand` - Infers type from actual value
- `extract_all_constraint_values` - Gets all constraint values from policy

## Pattern Generation Rules

For each constraint, use the ACTUAL rightOperand value:

**Example 1: Single value**
```json
{{"leftOperand": "purpose", "operator": "eq", "rightOperand": "research"}}
```
Generate: `input.purpose == "research"` (using actual value "research")

**Example 2: List of values**
```json
{{"leftOperand": "role", "operator": "isAnyOf", "rightOperand": ["data_controller", "dpo"]}}
```
Generate: `input.role in {{"data_controller", "dpo"}}` (using actual values from list)

**Example 3: Temporal value**
```json
{{"leftOperand": "dateTime", "operator": "lt", "rightOperand": "2025-12-31T23:59:59Z"}}
```
Generate: `time.now_ns() < time.parse_rfc3339_ns("2025-12-31T23:59:59Z")` (using actual datetime)

## CRITICAL

Use `generate_rego_pattern_from_constraint` tool for EACH constraint to get the pattern with actual values.
Do NOT use placeholder text like "[actual_value]" - use the REAL values from the JSON!

## ODRL Structure

{ODRL_STRUCTURE_CONTEXT}

## Output Format

For each constraint provide:
- Constraint: <describe with actual values>
- Rego pattern: <complete pattern with actual values>
- Type: <inferred type>
- Functions used: <list of Rego functions>
"""

REGO_GENERATOR_REACT_PROMPT = f"""You are an expert OPA Rego v1 code generator.

## Your Task

Generate complete, working Rego v1 code using the ACTUAL values from the ODRL policy analysis.

## Tools Available

- `generate_rego_pattern_from_constraint` - Gets Rego pattern with actual values for each constraint
- `generate_complete_rego_rule` - Generates complete rule with all constraints
- `check_rego_syntax` - Validates your generated code

## Code Generation Process

1. For EACH permission in the policy:
   - Use `generate_complete_rego_rule` to create an allow rule with ACTUAL constraint values
   
2. For EACH prohibition in the policy:
   - Use `generate_complete_rego_rule` to create a deny rule with ACTUAL constraint values

3. Validate with `check_rego_syntax`

## Rego v1 Requirements

1. MUST include: `import rego.v1`
2. MUST use `if` keyword before rule bodies
3. MUST use actual values from ODRL JSON, not placeholders

## Example Generation

Given ODRL constraint:
```json
{{"leftOperand": "department", "operator": "isAnyOf", "rightOperand": ["sales", "marketing"]}}
```

Generate Rego:
```rego
allow if {{
    input.department in {{"sales", "marketing"}}  # Using ACTUAL values from ODRL
}}
```

NOT:
```rego
allow if {{
    input.department in {{actual_values}}  # WRONG - this is placeholder text!
}}
```

## ODRL Structure

{ODRL_STRUCTURE_CONTEXT}

## Output

Return complete, syntactically correct Rego v1 code with:
- Package declaration
- Import statements
- Permission rules (using actual values)
- Prohibition rules (using actual values)
- Helper functions (if needed)
- Comments showing which ODRL constraint each rule implements
"""

REFLECTION_REACT_PROMPT = f"""You are a senior Rego code reviewer.

## Your Task

Validate the generated Rego code for:
1. **Syntax correctness** - Rego v1 compliance
2. **Value correctness** - Uses ACTUAL values from ODRL, not placeholders
3. **Logic correctness** - Matches ODRL intent
4. **Completeness** - All ODRL rules implemented

## Critical Validation

Check if the code contains placeholder text like:
- `actual_values_from_constraint`
- `[value_from_constraint]`
- `{{placeholder}}`
- Generic values like "admin", "user" if they're not in the original ODRL

Use `check_rego_syntax` tool to validate.

## ODRL Structure

{ODRL_STRUCTURE_CONTEXT}

## Output Format

Provide validation results in JSON:
```json
{{
  "is_valid": true/false,
  "syntax_errors": [...],
  "placeholder_issues": [...],
  "logic_errors": [...],
  "missing_constraints": [...],
  "feedback": "detailed feedback"
}}
```
"""

CORRECTION_REACT_PROMPT = f"""You are an expert Rego debugger.

## Your Task

Fix all issues in the generated Rego code:
1. **Remove ANY placeholder text** - Replace with actual values from ODRL
2. **Fix syntax errors** - Ensure Rego v1 compliance
3. **Fix logic errors** - Match ODRL intent

## Tools Available

- `generate_rego_pattern_from_constraint` - Regenerate patterns with actual values
- `check_rego_syntax` - Validate fixes
- `fix_missing_if` - Add missing if keywords

## Correction Priority

1. CRITICAL: Remove placeholders, use actual values
2. HIGH: Fix syntax errors
3. MEDIUM: Fix logic errors

## Example Fix

**Before (has placeholder):**
```rego
allow if {{
    input.role in {{actual_values_from_constraint}}  # PLACEHOLDER!
}}
```

**After (uses actual value from ODRL):**
```rego
# ODRL constraint: role isAnyOf ["data_controller", "dpo"]
allow if {{
    input.role in {{"data_controller", "dpo"}}  # ACTUAL values from ODRL
}}
```

## ODRL Structure

{ODRL_STRUCTURE_CONTEXT}

## Output

Return corrected Rego code with all placeholders replaced by actual values.
"""

LOGIC_ANALYZER_REACT_PROMPT = f"""You are an expert in deontic logic and policy consistency.

## Your Task

Analyze the ODRL policy for logical consistency using ONLY the actual values present.

## Analysis Process

1. Extract all permissions with their ACTUAL actions and constraints
2. Extract all prohibitions with their ACTUAL actions and constraints
3. Check for contradictions
4. Identify gaps

## ODRL Structure

{ODRL_STRUCTURE_CONTEXT}

## Output Format

```json
{{
  "permissions": [
    {{"action": "actual_action_from_policy", "constraints": "..."}}
  ],
  "prohibitions": [...],
  "consistency_issues": [...]
}}
```
"""

# Tool descriptions
TOOL_DESCRIPTIONS = {
    "extract_policy_metadata": "Extract policy ID, type, and structure from ODRL",
    "extract_permissions_with_values": "Get all permissions with ACTUAL constraint values",
    "extract_prohibitions_with_values": "Get all prohibitions with ACTUAL constraint values",
    "extract_all_constraint_values": "Get comprehensive map of all actual values in policy",
    "generate_rego_pattern_from_constraint": "Generate Rego pattern using ACTUAL constraint value",
    "generate_complete_rego_rule": "Generate complete Rego rule with all actual values",
    "analyze_rdfs_comments": "Extract semantic context and hints",
    "analyze_operator": "Understand operator semantics for type inference",
    "analyze_rightOperand": "Infer type from actual constraint value",
    "check_rego_syntax": "Validate Rego v1 syntax",
    "fix_missing_if": "Add missing 'if' keywords"
}
