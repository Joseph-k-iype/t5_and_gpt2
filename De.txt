export interface RuleConditionOperator {
  fact: string;
  operator: string;
  value: any;
  path?: string;
}

export interface RuleConditionGroup {
  all?: RuleCondition[];
  any?: RuleCondition[];
  not?: RuleCondition;
}

export type RuleCondition = RuleConditionOperator | RuleConditionGroup;

export interface RuleEvent {
  type: string;
  params?: Record<string, any>;
}

export interface JsonRule {
  rule_id?: string;
  rule_text?: string;
  applies_to_countries?: string[];
  adequacy_countries?: string[];
  conditions: {
    all?: RuleCondition[];
    any?: RuleCondition[];
  };
  event: RuleEvent;
  priority?: number;
}

export interface RuleNodeData {
  rule: JsonRule;
  label: string;
  conditions: RuleCondition[];
  event: RuleEvent;
  priority: number;
  countries: string[];
  adequacyCountries: string[];
}

export interface ParsedRuleNode {
  id: string;
  type: 'rule';
  position: { x: number; y: number };
  data: RuleNodeData;
  dragging?: boolean;
  selected?: boolean;
}

export interface RuleEdge {
  id: string;
  source: string;
  target: string;
  type?: string;
  animated?: boolean;
  style?: Record<string, any>;
}

export interface RuleGraph {
  nodes: ParsedRuleNode[];
  edges: RuleEdge[];
}

export interface ConditionDisplay {
  fact: string;
  operator: string;
  value: any;
  readable: string;
}

export interface RuleAnalytics {
  totalRules: number;
  conditionTypes: Record<string, number>;
  eventTypes: Record<string, number>;
  priorityDistribution: Record<string, number>;
  countryDistribution: Record<string, number>;
}
