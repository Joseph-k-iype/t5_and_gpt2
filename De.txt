from fastapi import APIRouter, HTTPException, Depends, BackgroundTasks
from typing import List, Optional
import logging

from app.models.chat import (
    QuickChatRequest, QuickChatResponse, 
    ConversationHistory, ChatMessage
)
from app.core.session_manager import SessionManager, SessionData
from app.core.research_engine import ResearchEngineWrapper

logger = logging.getLogger(__name__)
router = APIRouter()

# Import global instances
from main import session_manager, research_engine_wrapper

def get_session_manager() -> SessionManager:
    """Dependency to get session manager"""
    return session_manager

def get_research_engine() -> ResearchEngineWrapper:
    """Dependency to get research engine"""
    return research_engine_wrapper

@router.post("/quick", response_model=QuickChatResponse)
async def quick_chat(
    request: QuickChatRequest,
    background_tasks: BackgroundTasks,
    session_mgr: SessionManager = Depends(get_session_manager),
    research_engine: ResearchEngineWrapper = Depends(get_research_engine)
):
    """
    Quick chat endpoint for fast AI responses
    """
    try:
        logger.info(f"Received quick chat request: {request}")
        
        # Handle session initialization request
        if request.message == "__session_init__":
            session = await session_mgr.create_session(request.user_id)
            return QuickChatResponse(
                answer="Session initialized",
                confidence="high",
                approach="session_init",
                session_id=session.session_id,
                user_id=session.user_id,
                timestamp=session.last_activity,
                metadata={"session_created": True}
            )
        
        # Get or create session
        if request.session_id:
            session = await session_mgr.get_session(request.session_id)
            if not session:
                # Create new session if the provided one doesn't exist
                session = await session_mgr.create_session(request.user_id)
                logger.warning(f"Session {request.session_id} not found, created new session {session.session_id}")
        else:
            session = await session_mgr.create_session(request.user_id)
        
        # Add user message to conversation history
        user_message = {
            "role": "user",
            "content": request.message,
            "timestamp": session.last_activity.isoformat()
        }
        await session_mgr.add_conversation_message(session.session_id, user_message)
        
        # Process with research engine
        result = await research_engine.quick_chat(
            question=request.message,
            user_id=session.user_id,
            session_id=session.session_id
        )
        
        # Add assistant response to conversation history
        assistant_message = {
            "role": "assistant", 
            "content": result.get("answer", ""),
            "metadata": {
                "confidence": result.get("confidence"),
                "approach": result.get("approach")
            }
        }
        background_tasks.add_task(
            session_mgr.add_conversation_message,
            session.session_id,
            assistant_message
        )
        
        # Return structured response
        return QuickChatResponse(
            answer=result.get("answer", "No response generated"),
            confidence=result.get("confidence", "unknown"),
            approach=result.get("approach", "unknown"),
            session_id=session.session_id,
            user_id=session.user_id,
            timestamp=session.last_activity,
            metadata=result.get("metadata", {})
        )
        
    except Exception as e:
        logger.error(f"Error in quick chat: {e}", exc_info=True)
        raise HTTPException(status_code=500, detail=f"Internal server error: {str(e)}")

@router.get("/conversation/{session_id}", response_model=ConversationHistory)
async def get_conversation_history(
    session_id: str,
    session_mgr: SessionManager = Depends(get_session_manager)
):
    """
    Get conversation history for a session
    """
    try:
        session = await session_mgr.get_session(session_id)
        if not session:
            raise HTTPException(status_code=404, detail="Session not found")
        
        messages = [
            ChatMessage(
                role=msg.get("role", "unknown"),
                content=msg.get("content", ""),
                timestamp=msg.get("timestamp"),
                metadata=msg.get("metadata", {})
            )
            for msg in session.conversation_history
        ]
        
        return ConversationHistory(
            messages=messages,
            session_id=session_id,
            total_messages=len(messages)
        )
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error getting conversation history: {e}", exc_info=True)
        raise HTTPException(status_code=500, detail="Internal server error")

@router.delete("/session/{session_id}")
async def delete_session(
    session_id: str,
    session_mgr: SessionManager = Depends(get_session_manager)
):
    """
    Delete a chat session
    """
    try:
        success = await session_mgr.delete_session(session_id)
        if not success:
            raise HTTPException(status_code=404, detail="Session not found")
        
        return {"message": "Session deleted successfully", "session_id": session_id}
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error deleting session: {e}", exc_info=True)
        raise HTTPException(status_code=500, detail="Internal server error")
