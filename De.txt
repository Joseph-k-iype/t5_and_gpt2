“””
ODRL to Excel Converter
Converts ODRL JSON/JSON-LD output to business-friendly Excel format for stakeholder review
“””

import json
import pandas as pd
from openpyxl import load_workbook
from openpyxl.styles import Font, PatternFill, Alignment, Border, Side
from openpyxl.utils import get_column_letter
from typing import Dict, List, Any, Optional
from datetime import datetime
import os

class ODRLToExcelConverter:
“”“Converts ODRL policies to formatted Excel spreadsheets”””

```
def __init__(self, input_file: str, output_file: Optional[str] = None):
    """
    Initialize the converter
    
    Args:
        input_file: Path to ODRL JSON/JSON-LD file
        output_file: Path for output Excel file (optional)
    """
    self.input_file = input_file
    self.output_file = output_file or self._generate_output_filename()
    self.data = None
    
def _generate_output_filename(self) -> str:
    """Generate output filename based on input"""
    base_name = os.path.splitext(os.path.basename(self.input_file))[0]
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    return f"{base_name}_review_{timestamp}.xlsx"

def load_odrl_data(self) -> Dict:
    """Load and parse ODRL JSON data"""
    try:
        with open(self.input_file, 'r', encoding='utf-8') as f:
            self.data = json.load(f)
        print(f"✓ Loaded ODRL data from {self.input_file}")
        return self.data
    except Exception as e:
        raise Exception(f"Error loading ODRL file: {str(e)}")

def _extract_value(self, obj: Any, default: str = "Not specified") -> str:
    """Extract value from ODRL object (handles @id, @value, direct values)"""
    if obj is None:
        return default
    if isinstance(obj, dict):
        if '@value' in obj:
            return str(obj['@value'])
        if '@id' in obj:
            return str(obj['@id'])
        if 'uid' in obj:
            return str(obj['uid'])
        return str(obj)
    if isinstance(obj, list):
        if len(obj) == 0:
            return default
        return ', '.join([self._extract_value(item, default) for item in obj])
    return str(obj)

def _parse_constraint(self, constraint: Any) -> str:
    """Parse constraint object into readable string"""
    if not constraint:
        return "None"
    
    if isinstance(constraint, dict):
        left_operand = self._extract_value(constraint.get('leftOperand', ''))
        operator = self._extract_value(constraint.get('operator', ''))
        right_operand = self._extract_value(constraint.get('rightOperand', ''))
        
        # Clean up operator for readability
        operator = operator.replace('odrl:', '').replace('http://www.w3.org/ns/odrl/2/', '')
        
        return f"{left_operand} {operator} {right_operand}"
    elif isinstance(constraint, list):
        return '; '.join([self._parse_constraint(c) for c in constraint])
    
    return str(constraint)

def extract_policy_overview(self) -> pd.DataFrame:
    """Extract high-level policy information"""
    policies = []
    
    # Handle both single policy and array of policies
    policy_list = self.data if isinstance(self.data, list) else [self.data]
    
    for policy in policy_list:
        if not isinstance(policy, dict):
            continue
            
        policy_info = {
            'Policy ID': self._extract_value(policy.get('@id') or policy.get('uid')),
            'Policy Type': self._extract_value(policy.get('@type') or policy.get('type')),
            'Profile': self._extract_value(policy.get('profile')),
            'Jurisdiction': self._extract_value(policy.get('jurisdiction')),
            'Creator': self._extract_value(policy.get('creator')),
            'Created Date': self._extract_value(policy.get('created')),
            'Description': self._extract_value(policy.get('description')),
            'Target Asset': self._extract_value(policy.get('target')),
            'Assigner': self._extract_value(policy.get('assigner')),
            'Assignee': self._extract_value(policy.get('assignee')),
        }
        policies.append(policy_info)
    
    return pd.DataFrame(policies)

def extract_permissions(self) -> pd.DataFrame:
    """Extract all permissions from policies"""
    permissions = []
    
    policy_list = self.data if isinstance(self.data, list) else [self.data]
    
    for policy in policy_list:
        if not isinstance(policy, dict):
            continue
            
        policy_id = self._extract_value(policy.get('@id') or policy.get('uid'))
        permission_list = policy.get('permission', [])
        
        if not isinstance(permission_list, list):
            permission_list = [permission_list]
        
        for idx, perm in enumerate(permission_list, 1):
            if not isinstance(perm, dict):
                continue
                
            perm_info = {
                'Policy ID': policy_id,
                'Permission #': idx,
                'Action': self._extract_value(perm.get('action')),
                'Target': self._extract_value(perm.get('target')),
                'Assigner': self._extract_value(perm.get('assigner')),
                'Assignee': self._extract_value(perm.get('assignee')),
                'Constraint': self._parse_constraint(perm.get('constraint')),
                'Duty': self._extract_value(perm.get('duty')),
                'Notes': self._extract_value(perm.get('comment')),
            }
            permissions.append(perm_info)
    
    return pd.DataFrame(permissions)

def extract_prohibitions(self) -> pd.DataFrame:
    """Extract all prohibitions from policies"""
    prohibitions = []
    
    policy_list = self.data if isinstance(self.data, list) else [self.data]
    
    for policy in policy_list:
        if not isinstance(policy, dict):
            continue
            
        policy_id = self._extract_value(policy.get('@id') or policy.get('uid'))
        prohibition_list = policy.get('prohibition', [])
        
        if not isinstance(prohibition_list, list):
            prohibition_list = [prohibition_list]
        
        for idx, prohib in enumerate(prohibition_list, 1):
            if not isinstance(prohib, dict):
                continue
                
            prohib_info = {
                'Policy ID': policy_id,
                'Prohibition #': idx,
                'Action': self._extract_value(prohib.get('action')),
                'Target': self._extract_value(prohib.get('target')),
                'Assigner': self._extract_value(prohib.get('assigner')),
                'Assignee': self._extract_value(prohib.get('assignee')),
                'Constraint': self._parse_constraint(prohib.get('constraint')),
                'Remedy': self._extract_value(prohib.get('remedy')),
                'Notes': self._extract_value(prohib.get('comment')),
            }
            prohibitions.append(prohib_info)
    
    return pd.DataFrame(prohibitions)

def extract_obligations(self) -> pd.DataFrame:
    """Extract all obligations/duties from policies"""
    obligations = []
    
    policy_list = self.data if isinstance(self.data, list) else [self.data]
    
    for policy in policy_list:
        if not isinstance(policy, dict):
            continue
            
        policy_id = self._extract_value(policy.get('@id') or policy.get('uid'))
        obligation_list = policy.get('obligation', [])
        
        if not isinstance(obligation_list, list):
            obligation_list = [obligation_list]
        
        for idx, obl in enumerate(obligation_list, 1):
            if not isinstance(obl, dict):
                continue
                
            obl_info = {
                'Policy ID': policy_id,
                'Obligation #': idx,
                'Action': self._extract_value(obl.get('action')),
                'Target': self._extract_value(obl.get('target')),
                'Assigner': self._extract_value(obl.get('assigner')),
                'Assignee': self._extract_value(obl.get('assignee')),
                'Constraint': self._parse_constraint(obl.get('constraint')),
                'Consequence': self._extract_value(obl.get('consequence')),
                'Notes': self._extract_value(obl.get('comment')),
            }
            obligations.append(obl_info)
    
    return pd.DataFrame(obligations)

def extract_summary(self, df_permissions: pd.DataFrame, 
                    df_prohibitions: pd.DataFrame, 
                    df_obligations: pd.DataFrame) -> pd.DataFrame:
    """Create summary statistics"""
    summary_data = {
        'Metric': [
            'Total Policies',
            'Total Permissions',
            'Total Prohibitions',
            'Total Obligations',
            'Unique Actions (Permissions)',
            'Unique Actions (Prohibitions)',
            'Most Common Permission',
            'Most Common Prohibition',
        ],
        'Count': [
            1 if not isinstance(self.data, list) else len(self.data),
            len(df_permissions),
            len(df_prohibitions),
            len(df_obligations),
            df_permissions['Action'].nunique() if not df_permissions.empty else 0,
            df_prohibitions['Action'].nunique() if not df_prohibitions.empty else 0,
            df_permissions['Action'].mode()[0] if not df_permissions.empty and len(df_permissions['Action'].mode()) > 0 else 'N/A',
            df_prohibitions['Action'].mode()[0] if not df_prohibitions.empty and len(df_prohibitions['Action'].mode()) > 0 else 'N/A',
        ]
    }
    
    return pd.DataFrame(summary_data)

def format_excel(self, writer: pd.ExcelWriter):
    """Apply formatting to Excel workbook"""
    workbook = writer.book
    
    # Define styles
    header_fill = PatternFill(start_color="366092", end_color="366092", fill_type="solid")
    header_font = Font(name='Calibri', size=11, bold=True, color="FFFFFF")
    
    summary_fill = PatternFill(start_color="E7E6E6", end_color="E7E6E6", fill_type="solid")
    summary_font = Font(name='Calibri', size=11, bold=True)
    
    cell_border = Border(
        left=Side(style='thin', color='000000'),
        right=Side(style='thin', color='000000'),
        top=Side(style='thin', color='000000'),
        bottom=Side(style='thin', color='000000')
    )
    
    # Format each worksheet
    for sheet_name in workbook.sheetnames:
        worksheet = workbook[sheet_name]
        
        # Format headers
        for cell in worksheet[1]:
            cell.fill = header_fill
            cell.font = header_font
            cell.alignment = Alignment(horizontal='center', vertical='center', wrap_text=True)
            cell.border = cell_border
        
        # Auto-adjust column widths and apply borders
        for column in worksheet.columns:
            max_length = 0
            column_letter = get_column_letter(column[0].column)
            
            for cell in column:
                cell.border = cell_border
                cell.alignment = Alignment(vertical='top', wrap_text=True)
                
                if cell.row > 1:  # Data rows
                    cell.font = Font(name='Calibri', size=10)
                
                try:
                    if len(str(cell.value)) > max_length:
                        max_length = len(str(cell.value))
                except:
                    pass
            
            # Set column width (with limits)
            adjusted_width = min(max(max_length + 2, 12), 60)
            worksheet.column_dimensions[column_letter].width = adjusted_width
        
        # Freeze top row
        worksheet.freeze_panes = 'A2'
        
        # Add autofilter
        if worksheet.max_row > 1:
            worksheet.auto_filter.ref = worksheet.dimensions
        
        # Special formatting for Summary sheet
        if sheet_name == 'Summary':
            for cell in worksheet['A']:
                if cell.row > 1:
                    cell.fill = summary_fill
                    cell.font = summary_font

def convert(self):
    """Main conversion process"""
    print("\n" + "="*60)
    print("ODRL to Excel Converter - Stakeholder Review Format")
    print("="*60 + "\n")
    
    # Load data
    self.load_odrl_data()
    
    # Extract data
    print("Extracting policy data...")
    df_overview = self.extract_policy_overview()
    df_permissions = self.extract_permissions()
    df_prohibitions = self.extract_prohibitions()
    df_obligations = self.extract_obligations()
    df_summary = self.extract_summary(df_permissions, df_prohibitions, df_obligations)
    
    # Create Excel writer
    print(f"Creating Excel file: {self.output_file}")
    with pd.ExcelWriter(self.output_file, engine='openpyxl') as writer:
        
        # Write each sheet
        if not df_summary.empty:
            df_summary.to_excel(writer, sheet_name='Summary', index=False)
            print("  ✓ Summary sheet created")
        
        if not df_overview.empty:
            df_overview.to_excel(writer, sheet_name='Policy Overview', index=False)
            print("  ✓ Policy Overview sheet created")
        
        if not df_permissions.empty:
            df_permissions.to_excel(writer, sheet_name='Permissions', index=False)
            print("  ✓ Permissions sheet created")
        else:
            pd.DataFrame({'Message': ['No permissions found']}).to_excel(
                writer, sheet_name='Permissions', index=False)
        
        if not df_prohibitions.empty:
            df_prohibitions.to_excel(writer, sheet_name='Prohibitions', index=False)
            print("  ✓ Prohibitions sheet created")
        else:
            pd.DataFrame({'Message': ['No prohibitions found']}).to_excel(
                writer, sheet_name='Prohibitions', index=False)
        
        if not df_obligations.empty:
            df_obligations.to_excel(writer, sheet_name='Obligations', index=False)
            print("  ✓ Obligations sheet created")
        else:
            pd.DataFrame({'Message': ['No obligations found']}).to_excel(
                writer, sheet_name='Obligations', index=False)
        
        # Apply formatting
        print("\nApplying formatting...")
        self.format_excel(writer)
    
    print(f"\n{'='*60}")
    print(f"✓ Conversion complete!")
    print(f"✓ Output file: {self.output_file}")
    print(f"{'='*60}\n")
    
    return self.output_file
```

def main():
“”“Main entry point”””
import sys

```
if len(sys.argv) < 2:
    print("Usage: python odrl_to_excel_converter.py <input_odrl_file.json> [output_file.xlsx]")
    print("\nExample:")
    print("  python odrl_to_excel_converter.py sample_result.jsonld")
    print("  python odrl_to_excel_converter.py policy.json output.xlsx")
    sys.exit(1)

input_file = sys.argv[1]
output_file = sys.argv[2] if len(sys.argv) > 2 else None

try:
    converter = ODRLToExcelConverter(input_file, output_file)
    converter.convert()
except Exception as e:
    print(f"\n❌ Error: {str(e)}")
    sys.exit(1)
```

if **name** == “**main**”:
main()
