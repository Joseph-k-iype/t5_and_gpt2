from pptx.util import Inches, Pt
from pptx.oxml import parse_xml
from pptx.oxml.ns import nsdecls

# Helper function to trim the URL to show only the part after "ISO"
def trim_url(url):
    iso_index = url.find("ISO")
    return url[iso_index:] if iso_index != -1 else url

# Function to add a hyperlink to a substring within a cell
def add_hyperlink_to_cell_text(slide, cell, url):
    # Set trimmed text in cell
    trimmed_text = trim_url(url)
    cell.text = trimmed_text

    # Add hyperlink relationship to the slide part
    r_id = slide.part.relate_to(url, "http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink", is_external=True)

    # Modify the XML to add hyperlink to the text in the cell
    p = cell.text_frame.paragraphs[0]
    run = p.runs[0]
    r = run._r  # Access the XML element for the run
    rPr = r.get_or_add_rPr()
    hlinkClick = parse_xml(f'<a:hlinkClick {nsdecls("a")} r:id="{r_id}"/>')
    rPr.append(hlinkClick)

    # Set font style (optional, for hyperlink appearance)
    run.font.size = Pt(10)
    run.font.color.rgb = RGBColor(0, 0, 255)  # Blue color to indicate a hyperlink

# Updated populate_slide_10 function with hyperlinks in the "Issues (URL)" column
def populate_slide_10(slide, df_slide10):
    delete_existing_tables(slide)
    headers = ["Issue", "Summary", "Issues (URL)"]
    table = create_table(slide, headers, num_rows=1 + len(df_slide10), top_position=Inches(1))

    # Populate the table with data and add hyperlinks to the "Issues (URL)" column
    for row_idx, row_data in enumerate(df_slide10.itertuples(index=False), start=1):
        # Set Issue and Summary cells
        table.cell(row_idx, 0).text = str(row_data.Issue)
        table.cell(row_idx, 1).text = str(row_data.Summary)
        
        # Set Issues (URL) cell with hyperlink
        add_hyperlink_to_cell_text(slide, table.cell(row_idx, 2), str(row_data.Issue))

# Example usage within create_report function
def create_report(template_path, output_folder, report_value):
    try:
        prs = Presentation(template_path)
        # Generate data for Slide 10
        df_slide10 = generate_slide10_data(report_value)
        
        # Create folder for report
        report_name = "example_report"  # Replace with actual logic to get report name
        report_folder = os.path.join(output_folder, report_name)
        os.makedirs(report_folder, exist_ok=True)

        # Populate Slide 10 with trimmed URL as clickable hyperlinks
        if len(prs.slides) > 9:
            populate_slide_10(prs.slides[9], df_slide10)

        # Save the PowerPoint
        pptx_path = os.path.join(report_folder, f"{report_name}.pptx")
        prs.save(pptx_path)
        print(f"PowerPoint saved as {pptx_path}")

    except Exception as e:
        print(f"Error processing report URL {report_value}: {e}")
