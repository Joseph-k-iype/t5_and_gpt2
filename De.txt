import React, { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import GlassCard from './GlassCard';

interface NavigationProps {
  currentView: 'chat' | 'research' | 'diagnostics';
  onViewChange: (view: 'chat' | 'research' | 'diagnostics') => void;
  isConnected: boolean;
  systemStatus: {
    chatbot_ready: boolean;
    active_sessions: number;
  } | null;
  onDiagnostics: () => void;
}

const Navigation: React.FC<NavigationProps> = ({
  currentView,
  onViewChange,
  isConnected,
  systemStatus,
  onDiagnostics
}) => {
  const [showMobileMenu, setShowMobileMenu] = useState(false);

  const navigationItems = [
    {
      id: 'chat',
      label: 'Chat',
      icon: 'üí¨',
      description: 'Ask privacy questions'
    },
    {
      id: 'research',
      label: 'Research',
      icon: 'üî¨',
      description: 'Deep analysis mode'
    },
    {
      id: 'diagnostics',
      label: 'System',
      icon: 'üîß',
      description: 'System status'
    }
  ] as const;

  const statusIndicator = (
    <motion.div
      className="flex items-center space-x-2"
      initial={{ opacity: 0, x: 20 }}
      animate={{ opacity: 1, x: 0 }}
      transition={{ delay: 0.3 }}
    >
      {/* Connection Status */}
      <motion.div
        className={`w-2 h-2 rounded-full ${
          isConnected ? 'bg-green-400' : 'bg-red-400'
        }`}
        animate={{
          scale: isConnected ? [1, 1.2, 1] : [1, 0.8, 1],
          opacity: [0.7, 1, 0.7]
        }}
        transition={{
          duration: 2,
          repeat: Infinity,
          ease: "easeInOut"
        }}
      />
      
      {/* Status Text */}
      <span className="text-xs text-gray-600 hidden sm:block">
        {isConnected ? 'Connected' : 'Disconnected'}
      </span>

      {/* System Ready Indicator */}
      {systemStatus?.chatbot_ready && (
        <motion.div
          className="flex items-center space-x-1 px-2 py-1 bg-green-100/50 rounded-full"
          initial={{ scale: 0 }}
          animate={{ scale: 1 }}
          transition={{ delay: 0.5, type: "spring", stiffness: 300 }}
        >
          <span className="text-xs text-green-700 font-medium">üß† AI Ready</span>
        </motion.div>
      )}
    </motion.div>
  );

  return (
    <>
      {/* Desktop Navigation */}
      <motion.nav
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.6 }}
        className="sticky top-4 z-40 mx-4 mb-8"
      >
        <GlassCard variant="nav" className="p-4">
          <div className="flex items-center justify-between">
            {/* Logo/Brand */}
            <motion.div
              className="flex items-center space-x-3"
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
            >
              <motion.div
                className="w-10 h-10 bg-gradient-to-br from-blue-500 to-purple-500 rounded-xl flex items-center justify-center text-white text-xl font-bold shadow-lg"
                animate={{
                  rotate: [0, 5, -5, 0]
                }}
                transition={{
                  duration: 4,
                  repeat: Infinity,
                  ease: "easeInOut"
                }}
              >
                üõ°Ô∏è
              </motion.div>
              <div className="hidden sm:block">
                <h1 className="text-lg font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
                  Privacy Expert
                </h1>
                <p className="text-xs text-gray-500">
                  AI-Powered Global Compliance
                </p>
              </div>
            </motion.div>

            {/* Navigation Items */}
            <div className="hidden md:flex items-center space-x-2">
              {navigationItems.map((item, index) => (
                <motion.button
                  key={item.id}
                  onClick={() => onViewChange(item.id as typeof currentView)}
                  className={`relative px-4 py-2 rounded-xl font-medium transition-all duration-200 ${
                    currentView === item.id
                      ? 'text-blue-700'
                      : 'text-gray-600 hover:text-blue-600'
                  }`}
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                  initial={{ opacity: 0, y: -10 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: index * 0.1 }}
                >
                  {/* Active indicator */}
                  {currentView === item.id && (
                    <motion.div
                      className="absolute inset-0 bg-blue-100/50 rounded-xl"
                      layoutId="activeTab"
                      transition={{ type: "spring", stiffness: 300, damping: 25 }}
                    />
                  )}
                  
                  <div className="relative flex items-center space-x-2">
                    <span className="text-lg">{item.icon}</span>
                    <span>{item.label}</span>
                  </div>

                  {/* Tooltip */}
                  <motion.div
                    className="absolute top-full mt-2 left-1/2 transform -translate-x-1/2 px-2 py-1 bg-gray-800 text-white text-xs rounded-lg opacity-0 pointer-events-none"
                    whileHover={{ opacity: 1 }}
                    transition={{ delay: 0.5 }}
                  >
                    {item.description}
                    <div className="absolute bottom-full left-1/2 transform -translate-x-1/2 border-4 border-transparent border-b-gray-800" />
                  </motion.div>
                </motion.button>
              ))}
            </div>

            {/* Status & Actions */}
            <div className="flex items-center space-x-4">
              {statusIndicator}

              {/* Diagnostics Button */}
              <motion.button
                onClick={onDiagnostics}
                className="hidden sm:flex items-center space-x-1 px-3 py-1.5 bg-gray-100/50 hover:bg-gray-100/80 rounded-lg text-sm font-medium text-gray-700 transition-all duration-200"
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
              >
                <span>üìä</span>
                <span className="hidden lg:block">Diagnostics</span>
              </motion.button>

              {/* Mobile Menu Button */}
              <motion.button
                onClick={() => setShowMobileMenu(!showMobileMenu)}
                className="md:hidden p-2 text-gray-600 hover:text-gray-800"
                whileHover={{ scale: 1.1 }}
                whileTap={{ scale: 0.9 }}
              >
                <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d={showMobileMenu ? "M6 18L18 6M6 6l12 12" : "M4 6h16M4 12h16M4 18h16"}
                  />
                </svg>
              </motion.button>
            </div>
          </div>
        </GlassCard>
      </motion.nav>

      {/* Mobile Menu */}
      <AnimatePresence>
        {showMobileMenu && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 md:hidden"
            onClick={() => setShowMobileMenu(false)}
          >
            <motion.div
              initial={{ opacity: 0, scale: 0.9, y: -20 }}
              animate={{ opacity: 1, scale: 1, y: 0 }}
              exit={{ opacity: 0, scale: 0.9, y: -20 }}
              onClick={(e) => e.stopPropagation()}
              className="absolute top-20 left-4 right-4"
            >
              <GlassCard variant="modal" className="p-6">
                <div className="space-y-4">
                  <div className="flex items-center justify-between mb-6">
                    <h2 className="text-lg font-semibold text-gray-800">
                      Navigation
                    </h2>
                    <motion.button
                      onClick={() => setShowMobileMenu(false)}
                      className="p-1 text-gray-500 hover:text-gray-700"
                      whileHover={{ scale: 1.1 }}
                      whileTap={{ scale: 0.9 }}
                    >
                      <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                      </svg>
                    </motion.button>
                  </div>

                  {/* Mobile Navigation Items */}
                  <div className="space-y-2">
                    {navigationItems.map((item, index) => (
                      <motion.button
                        key={item.id}
                        onClick={() => {
                          onViewChange(item.id as typeof currentView);
                          setShowMobileMenu(false);
                        }}
                        className={`w-full flex items-center space-x-3 p-4 rounded-xl transition-all duration-200 ${
                          currentView === item.id
                            ? 'bg-blue-100/50 text-blue-700'
                            : 'text-gray-600 hover:bg-gray-100/50'
                        }`}
                        initial={{ opacity: 0, x: -20 }}
                        animate={{ opacity: 1, x: 0 }}
                        transition={{ delay: index * 0.1 }}
                        whileHover={{ scale: 1.02 }}
                        whileTap={{ scale: 0.98 }}
                      >
                        <span className="text-2xl">{item.icon}</span>
                        <div className="text-left">
                          <div className="font-medium">{item.label}</div>
                          <div className="text-sm text-gray-500">{item.description}</div>
                        </div>
                        {currentView === item.id && (
                          <motion.div
                            className="ml-auto w-2 h-2 bg-blue-500 rounded-full"
                            initial={{ scale: 0 }}
                            animate={{ scale: 1 }}
                            transition={{ type: "spring", stiffness: 300 }}
                          />
                        )}
                      </motion.button>
                    ))}
                  </div>

                  {/* Mobile Status */}
                  <div className="pt-4 border-t border-white/20">
                    <div className="flex items-center justify-between">
                      <span className="text-sm font-medium text-gray-700">
                        System Status
                      </span>
                      {statusIndicator}
                    </div>
                    
                    {/* Mobile Diagnostics */}
                    <motion.button
                      onClick={() => {
                        onDiagnostics();
                        setShowMobileMenu(false);
                      }}
                      className="w-full mt-3 flex items-center justify-center space-x-2 p-3 bg-gray-100/50 hover:bg-gray-100/80 rounded-lg text-sm font-medium text-gray-700 transition-all duration-200"
                      whileHover={{ scale: 1.02 }}
                      whileTap={{ scale: 0.98 }}
                    >
                      <span>üìä</span>
                      <span>View Diagnostics</span>
                    </motion.button>
                  </div>
                </div>
              </GlassCard>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>
    </>
  );
};

export default Navigation;
