# GDPR Rules Visualizer - TypeScript React Flow Project

## Package.json
```json
{
  "name": "gdpr-rules-visualizer-ts",
  "version": "1.0.0",
  "description": "Interactive TypeScript React Flow visualizer for GDPR compliance rules",
  "main": "src/index.tsx",
  "scripts": {
    "dev": "vite",
    "build": "tsc && vite build",
    "preview": "vite preview",
    "lint": "eslint src --ext ts,tsx --report-unused-disable-directives --max-warnings 0",
    "type-check": "tsc --noEmit"
  },
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "@xyflow/react": "^12.8.2"
  },
  "devDependencies": {
    "@types/react": "^18.2.66",
    "@types/react-dom": "^18.2.22",
    "@typescript-eslint/eslint-plugin": "^7.2.0",
    "@typescript-eslint/parser": "^7.2.0",
    "@vitejs/plugin-react": "^4.2.1",
    "autoprefixer": "^10.4.19",
    "eslint": "^8.57.0",
    "eslint-plugin-react-hooks": "^4.6.0",
    "eslint-plugin-react-refresh": "^0.4.6",
    "postcss": "^8.4.38",
    "tailwindcss": "^3.4.3",
    "typescript": "^5.2.2",
    "vite": "^5.2.0"
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}
```

## Project Structure
```
gdpr-rules-visualizer-ts/
├── public/
│   ├── index.html
│   ├── favicon.ico
│   └── vite.svg
├── src/
│   ├── components/
│   │   ├── nodes/
│   │   │   ├── RuleNode.tsx
│   │   │   ├── DetailNode.tsx
│   │   │   ├── CountryNode.tsx
│   │   │   ├── ConditionNode.tsx
│   │   │   └── RoleNode.tsx
│   │   ├── ui/
│   │   │   └── ContextMenu.tsx
│   │   └── GDPRRulesVisualizer.tsx
│   ├── types/
│   │   ├── gdpr.types.ts
│   │   └── node.types.ts
│   ├── data/
│   │   └── gdprRules.ts
│   ├── utils/
│   │   ├── nodeUtils.ts
│   │   └── layoutUtils.ts
│   ├── hooks/
│   │   └── useContextMenu.ts
│   ├── styles/
│   │   └── index.css
│   ├── App.tsx
│   ├── main.tsx
│   └── vite-env.d.ts
├── .eslintrc.json
├── tsconfig.json
├── tsconfig.node.json
├── vite.config.ts
├── tailwind.config.js
├── postcss.config.js
└── README.md
```

## Configuration Files

### tsconfig.json
```json
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx",
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "baseUrl": ".",
    "paths": {
      "@/*": ["src/*"],
      "@/components/*": ["src/components/*"],
      "@/types/*": ["src/types/*"],
      "@/utils/*": ["src/utils/*"],
      "@/data/*": ["src/data/*"],
      "@/hooks/*": ["src/hooks/*"]
    }
  },
  "include": ["src"],
  "references": [{ "path": "./tsconfig.node.json" }]
}
```

### tsconfig.node.json
```json
{
  "compilerOptions": {
    "composite": true,
    "skipLibCheck": true,
    "module": "ESNext",
    "moduleResolution": "bundler",
    "allowSyntheticDefaultImports": true
  },
  "include": ["vite.config.ts"]
}
```

### vite.config.ts
```typescript
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import path from 'path'

export default defineConfig({
  plugins: [react()],
  resolve: {
    alias: {
      "@": path.resolve(__dirname, "./src"),
    },
  },
  server: {
    port: 3000,
    open: true
  },
  build: {
    outDir: 'dist',
    sourcemap: true
  }
})
```

### .eslintrc.json
```json
{
  "env": {
    "browser": true,
    "es2020": true
  },
  "extends": [
    "eslint:recommended",
    "@typescript-eslint/recommended",
    "plugin:react-hooks/recommended"
  ],
  "ignorePatterns": ["dist", ".eslintrc.cjs"],
  "parser": "@typescript-eslint/parser",
  "plugins": ["react-refresh"],
  "rules": {
    "react-refresh/only-export-components": [
      "warn",
      { "allowConstantExport": true }
    ],
    "@typescript-eslint/no-unused-vars": ["error", { "argsIgnorePattern": "^_" }],
    "@typescript-eslint/no-explicit-any": "warn"
  }
}
```

## Source Files

### src/types/gdpr.types.ts
```typescript
export interface GDPRCondition {
  condition_id: string;
  condition_definition: string;
  fact: string;
  operator: string;
  value: string | string[] | boolean | number;
  role: string;
  if_condition: string;
  else_condition: string;
}

export interface GDPRRule {
  rule_id: string;
  rule_definition: string;
  rule_type: string;
  applicable_countries: string[];
  adequacy_countries: string[];
  conditions: GDPRCondition[];
  aggregated_roles: string[];
  data_category: string;
  domain: string;
  action: string;
  consequence: string;
  reference: string;
  priority: 'high' | 'medium' | 'low';
  event_type: string;
  params: Record<string, any>;
}

export interface GDPRData {
  engine_version: string;
  rules: GDPRRule[];
  metadata: {
    generated_by: string;
    generation_date: string;
    total_rules: number;
    methodology: string;
    supervisor_validated: boolean;
    simple_english_rules: boolean;
  };
}
```

### src/types/node.types.ts
```typescript
import { Node } from '@xyflow/react';
import { GDPRRule, GDPRCondition } from './gdpr.types';

export interface RuleNodeData {
  rule: GDPRRule;
}

export interface DetailNodeData {
  label: string;
  content: string;
  type: 'action' | 'consequence' | 'general';
}

export interface CountryNodeData {
  label: string;
  countries: string[];
  type: 'applicable' | 'adequacy';
}

export interface ConditionNodeData {
  condition: GDPRCondition;
  index: number;
}

export interface RoleNodeData {
  roles: string[];
}

export type RuleNode = Node<RuleNodeData, 'ruleNode'>;
export type DetailNode = Node<DetailNodeData, 'detailNode'>;
export type CountryNode = Node<CountryNodeData, 'countryNode'>;
export type ConditionNode = Node<ConditionNodeData, 'conditionNode'>;
export type RoleNode = Node<RoleNodeData, 'roleNode'>;

export type CustomNode = RuleNode | DetailNode | CountryNode | ConditionNode | RoleNode;

export interface ContextMenuOption {
  key: string;
  label: string;
  icon: string;
  available: boolean;
}

export interface ContextMenuState {
  x: number;
  y: number;
  nodeId: string;
  options: ContextMenuOption[];
}
```

### src/main.tsx
```typescript
import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App.tsx'
import './styles/index.css'

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
)
```

### src/App.tsx
```typescript
import React from 'react';
import { ReactFlowProvider } from '@xyflow/react';
import GDPRRulesVisualizer from '@/components/GDPRRulesVisualizer';
import '@xyflow/react/dist/style.css';

const App: React.FC = () => {
  return (
    <ReactFlowProvider>
      <GDPRRulesVisualizer />
    </ReactFlowProvider>
  );
};

export default App;
```

### src/data/gdprRules.ts
```typescript
import { GDPRData } from '@/types/gdpr.types';

export const gdprData: GDPRData = {
  "engine_version": "1.0",
  "rules": [
    // Your GDPR rules data goes here - copy from your paste.txt file
    // Example structure:
    {
      "rule_id": "a1b2c3d4_access_right_001",
      "rule_definition": "Data subjects have the right to obtain confirmation from the controller about whether their personal data is being processed",
      "rule_type": "access_right",
      "applicable_countries": ["DE", "FR", "IT", "ES"],
      "adequacy_countries": ["CA", "CH", "JP"],
      "conditions": [
        {
          "condition_id": "cond_12345678",
          "condition_definition": "When a data subject submits a valid access request",
          "fact": "request.type",
          "operator": "equal",
          "value": "subject_access_request",
          "role": "data_subject",
          "if_condition": "IF the request is a valid access request",
          "else_condition": "ELSE reject the invalid request"
        }
      ],
      "aggregated_roles": ["data_subject", "data_controller"],
      "data_category": "personal_data",
      "domain": "data_subject_rights",
      "action": "Provide confirmation and copy of personal data being processed",
      "consequence": "Administrative fine up to 4% of annual worldwide turnover",
      "reference": "GDPR Article 15(1)",
      "priority": "high",
      "event_type": "rule_evaluation",
      "params": {}
    }
    // Add all your other rules here...
  ],
  "metadata": {
    "generated_by": "Multi-Agent Legal Rule Extraction System with Supervisor",
    "generation_date": "2025-01-27T10:30:00.000Z",
    "total_rules": 12,
    "methodology": "Mixture of Experts with Supervisor Agent and Chain of Thought",
    "supervisor_validated": true,
    "simple_english_rules": true
  }
};
```

### src/utils/nodeUtils.ts
```typescript
import { CustomNode, RuleNode } from '@/types/node.types';
import { GDPRRule } from '@/types/gdpr.types';

export const priorityStyles = {
  high: 'bg-red-50 border-red-300 text-red-900',
  medium: 'bg-yellow-50 border-yellow-300 text-yellow-900',
  low: 'bg-green-50 border-green-300 text-green-900'
} as const;

export const priorityBadgeStyles = {
  high: 'bg-red-100 text-red-800',
  medium: 'bg-yellow-100 text-yellow-800',
  low: 'bg-green-100 text-green-800'
} as const;

export const getNodePosition = (index: number, columns = 2, spacing = { x: 500, y: 350 }) => {
  return {
    x: (index % columns) * spacing.x,
    y: Math.floor(index / columns) * spacing.y
  };
};

export const generateNodeId = (prefix: string, suffix: string): string => {
  return `${prefix}-${suffix}`;
};

export const createInitialNodes = (rules: GDPRRule[]): RuleNode[] => {
  return rules.map((rule, index): RuleNode => ({
    id: rule.rule_id,
    type: 'ruleNode',
    position: getNodePosition(index),
    data: { rule },
  }));
};
```

### src/utils/layoutUtils.ts
```typescript
import { XYPosition } from '@xyflow/react';

export const calculateNodeLayout = (
  parentPosition: XYPosition, 
  type: string, 
  index = 0
): XYPosition => {
  const baseX = parentPosition.x;
  const baseY = parentPosition.y + 250;
  
  const layouts: Record<string, XYPosition> = {
    countries: { x: baseX - 100, y: baseY },
    adequacy: { x: baseX + 250, y: baseY },
    conditions: { x: baseX - 150 + (index * 250), y: baseY + 150 },
    roles: { x: baseX + 200, y: baseY + 80 },
    action: { x: baseX - 250, y: baseY - 50 },
    consequence: { x: baseX + 350, y: baseY - 50 }
  };
  
  return layouts[type] || { x: baseX, y: baseY };
};

export const getEdgeStyle = (type: string) => {
  const styles: Record<string, { stroke: string; strokeWidth: number }> = {
    countries: { stroke: '#10b981', strokeWidth: 2 },
    adequacy: { stroke: '#059669', strokeWidth: 2 },
    conditions: { stroke: '#8b5cf6', strokeWidth: 2 },
    roles: { stroke: '#f97316', strokeWidth: 2 },
    action: { stroke: '#3b82f6', strokeWidth: 2 },
    consequence: { stroke: '#ef4444', strokeWidth: 2 }
  };
  
  return styles[type] || { stroke: '#6b7280', strokeWidth: 2 };
};
```

### src/hooks/useContextMenu.ts
```typescript
import { useState, useCallback } from 'react';
import { ContextMenuState } from '@/types/node.types';

export const useContextMenu = () => {
  const [contextMenu, setContextMenu] = useState<ContextMenuState | null>(null);

  const openContextMenu = useCallback((menu: ContextMenuState) => {
    setContextMenu(menu);
  }, []);

  const closeContextMenu = useCallback(() => {
    setContextMenu(null);
  }, []);

  return {
    contextMenu,
    openContextMenu,
    closeContextMenu
  };
};
```

### public/index.html
```html
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>GDPR Rules Visualizer</title>
    <meta name="description" content="Interactive TypeScript React Flow visualizer for GDPR compliance rules" />
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>
```

### src/vite-env.d.ts
```typescript
/// <reference types="vite/client" />
```

### tailwind.config.js
```javascript
/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {
      animation: {
        'fade-in': 'fadeIn 0.2s ease-in-out',
        'slide-up': 'slideUp 0.3s ease-out',
      },
      keyframes: {
        fadeIn: {
          '0%': { opacity: '0' },
          '100%': { opacity: '1' },
        },
        slideUp: {
          '0%': { transform: 'translateY(10px)', opacity: '0' },
          '100%': { transform: 'translateY(0)', opacity: '1' },
        },
      },
    },
  },
  plugins: [],
}
```

### postcss.config.js
```javascript
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
```

### src/styles/index.css
```css
@tailwind base;
@tailwind components;
@tailwind utilities;

/* Custom styles for React Flow */
.react-flow__node {
  @apply cursor-pointer;
}

.react-flow__node.selected {
  @apply ring-2 ring-blue-500;
}

.react-flow__edge {
  @apply transition-all duration-200;
}

.react-flow__edge:hover {
  @apply drop-shadow-lg;
}

.react-flow__controls {
  @apply bg-white/90 backdrop-blur-sm border border-gray-200 rounded-lg shadow-lg;
}

.react-flow__controls button {
  @apply bg-white border-gray-300 text-gray-700 hover:bg-gray-50 transition-colors;
}

.react-flow__minimap {
  @apply bg-white/90 backdrop-blur-sm border border-gray-200 rounded-lg;
}

/* Custom animations */
@keyframes nodeAppear {
  from {
    opacity: 0;
    transform: scale(0.8);
  }
  to {
    opacity: 1;
    transform: scale(1);
  }
}

.react-flow__node {
  animation: nodeAppear 0.3s ease-out;
}

/* Context menu styles */
.context-menu {
  @apply animate-fade-in;
}

.context-menu-item {
  @apply transition-all duration-150 ease-in-out;
}

.context-menu-item:hover {
  @apply bg-gray-100 translate-x-1;
}
```

## Installation & Setup Instructions

1. **Create the project:**
   ```bash
   mkdir gdpr-rules-visualizer-ts
   cd gdpr-rules-visualizer-ts
   ```

2. **Initialize with package.json:**
   ```bash
   npm init -y
   # Then copy the package.json content above
   ```

3. **Install dependencies:**
   ```bash
   npm install
   ```

4. **Add your GDPR data:**
   - Copy your JSON data from `paste.txt`
   - Paste it into `src/data/gdprRules.ts`

5. **Start development server:**
   ```bash
   npm run dev
   ```

## Features

✨ **Full TypeScript Support**: Strongly typed throughout with proper React Flow v12 types
🎨 **Modern UI**: Clean, responsive design with Tailwind CSS
⚡ **Vite Build System**: Fast development and optimized production builds
🔧 **ESLint Configuration**: Code quality and consistency
📦 **Modular Architecture**: Well-organized components and utilities
🎯 **Type-Safe Context Menus**: Fully typed context menu interactions
🚀 **Performance Optimized**: Efficient rendering and state management

## TypeScript Benefits

- **Type Safety**: Catch errors at compile time
- **IntelliSense**: Better IDE support and autocomplete
- **Refactoring**: Safe code refactoring with confidence
- **Documentation**: Types serve as living documentation
- **React Flow Integration**: Full type support for nodes, edges, and events

This is a production-ready TypeScript implementation that leverages the latest React Flow v12 features with proper typing throughout the entire application.
