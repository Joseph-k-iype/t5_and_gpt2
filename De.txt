// frontend/src/services/api.js
import axios from 'axios';

// Create API instance
const api = axios.create({
  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8000/api/v1',
  timeout: 30000,
  headers: {
    'Content-Type': 'application/json',
  },
});

// Request interceptor
api.interceptors.request.use(
  (config) => {
    // Add any auth headers or other common headers here
    const sessionId = localStorage.getItem('research_session_id');
    if (sessionId) {
      config.headers['X-Session-Id'] = sessionId;
    }
    
    console.log(`ðŸ”„ ${config.method?.toUpperCase()} ${config.url}`, config.data);
    return config;
  },
  (error) => {
    console.error('Request error:', error);
    return Promise.reject(error);
  }
);

// Response interceptor
api.interceptors.response.use(
  (response) => {
    console.log(`âœ… ${response.config.method?.toUpperCase()} ${response.config.url}`, response.data);
    return response;
  },
  (error) => {
    console.error('Response error:', error);
    
    // Handle common errors
    if (error.response?.status === 401) {
      // Handle unauthorized
      localStorage.removeItem('research_session_id');
      localStorage.removeItem('research_user_id');
      window.location.reload();
    }
    
    return Promise.reject(error);
  }
);

export default api;

// frontend/src/services/sessionService.js
import api from './api';

export const sessionService = {
  async createSession(userId = null) {
    const response = await api.post('/chat/quick', {
      message: '__session_init__', // Special message to initialize session
      user_id: userId,
    });
    
    return {
      sessionId: response.data.session_id,
      userId: response.data.user_id,
    };
  },

  async validateSession(sessionId) {
    try {
      const response = await api.get(`/chat/conversation/${sessionId}`);
      return response.status === 200;
    } catch (error) {
      return false;
    }
  },

  async deleteSession(sessionId) {
    const response = await api.delete(`/chat/session/${sessionId}`);
    return response.data;
  },

  async getSessionStats(sessionId) {
    const response = await api.get(`/chat/conversation/${sessionId}`);
    return {
      messageCount: response.data.total_messages,
      messages: response.data.messages,
    };
  },
};

// frontend/src/services/chatService.js
import api from './api';

export const chatService = {
  async sendQuickMessage(data) {
    const response = await api.post('/chat/quick', data);
    return response.data;
  },

  async getConversationHistory(sessionId) {
    const response = await api.get(`/chat/conversation/${sessionId}`);
    return response.data;
  },

  async deleteSession(sessionId) {
    const response = await api.delete(`/chat/session/${sessionId}`);
    return response.data;
  },
};

// frontend/src/services/researchService.js
import api from './api';

export const researchService = {
  async startDeepResearch(data) {
    const response = await api.post('/research/deep', data);
    return response.data;
  },

  async getResearchStatus(sessionId) {
    const response = await api.get(`/research/status/${sessionId}`);
    return response.data;
  },

  async streamResearchProgress(sessionId, onProgress) {
    const eventSource = new EventSource(
      `${process.env.REACT_APP_API_URL || 'http://localhost:8000/api/v1'}/research/stream/${sessionId}`
    );

    eventSource.onmessage = (event) => {
      try {
        const data = JSON.parse(event.data);
        onProgress(data);
      } catch (error) {
        console.error('Error parsing progress data:', error);
      }
    };

    eventSource.onerror = (error) => {
      console.error('EventSource error:', error);
      eventSource.close();
    };

    return eventSource;
  },
};

// frontend/src/services/knowledgeGraphService.js
import api from './api';

export const knowledgeGraphService = {
  async generateKnowledgeGraph(data) {
    const response = await api.post('/knowledge-graph/generate', data);
    return response.data;
  },

  async getSessionKnowledgeGraph(sessionId) {
    const response = await api.get(`/knowledge-graph/session/${sessionId}`);
    return response.data;
  },
};

// frontend/src/utils/constants.js
export const API_ENDPOINTS = {
  CHAT: {
    QUICK: '/chat/quick',
    CONVERSATION: '/chat/conversation',
    SESSION: '/chat/session',
  },
  RESEARCH: {
    DEEP: '/research/deep',
    STATUS: '/research/status',
    STREAM: '/research/stream',
  },
  KNOWLEDGE_GRAPH: {
    GENERATE: '/knowledge-graph/generate',
    SESSION: '/knowledge-graph/session',
  },
};

export const RESEARCH_STAGES = {
  INITIALIZATION: 'initialization',
  PLANNING: 'planning',
  RESEARCH: 'research',
  SYNTHESIS: 'synthesis',
  COMPLETION: 'completion',
  ERROR: 'error',
};

export const CONFIDENCE_LEVELS = {
  HIGH: 'high',
  MEDIUM: 'medium',
  LOW: 'low',
};

export const MESSAGE_TYPES = {
  USER: 'user',
  ASSISTANT: 'assistant',
  SYSTEM: 'system',
};

// frontend/src/utils/formatters.js
import { format, formatDistanceToNow, isToday, isYesterday } from 'date-fns';

export const formatTimestamp = (timestamp) => {
  if (!timestamp) return '';
  
  const date = new Date(timestamp);
  
  if (isToday(date)) {
    return format(date, 'HH:mm');
  } else if (isYesterday(date)) {
    return `Yesterday ${format(date, 'HH:mm')}`;
  } else {
    return format(date, 'MMM d, HH:mm');
  }
};

export const formatRelativeTime = (timestamp) => {
  if (!timestamp) return '';
  
  return formatDistanceToNow(new Date(timestamp), { addSuffix: true });
};

export const formatConfidence = (confidence) => {
  if (typeof confidence === 'number') {
    if (confidence >= 0.8) return 'high';
    if (confidence >= 0.5) return 'medium';
    return 'low';
  }
  return confidence || 'unknown';
};

export const formatDuration = (milliseconds) => {
  const seconds = Math.floor(milliseconds / 1000);
  const minutes = Math.floor(seconds / 60);
  
  if (minutes > 0) {
    const remainingSeconds = seconds % 60;
    return `${minutes}m ${remainingSeconds}s`;
  }
  
  return `${seconds}s`;
};

export const truncateText = (text, maxLength = 100) => {
  if (!text || text.length <= maxLength) return text;
  return text.slice(0, maxLength).trim() + '...';
};

export const formatFileSize = (bytes) => {
  if (bytes === 0) return '0 Bytes';
  
  const k = 1024;
  const sizes = ['Bytes', 'KB', 'MB', 'GB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
};

// frontend/src/utils/storage.js
export const storage = {
  get(key, defaultValue = null) {
    try {
      const item = localStorage.getItem(key);
      return item ? JSON.parse(item) : defaultValue;
    } catch (error) {
      console.error('Error reading from localStorage:', error);
      return defaultValue;
    }
  },

  set(key, value) {
    try {
      localStorage.setItem(key, JSON.stringify(value));
    } catch (error) {
      console.error('Error writing to localStorage:', error);
    }
  },

  remove(key) {
    try {
      localStorage.removeItem(key);
    } catch (error) {
      console.error('Error removing from localStorage:', error);
    }
  },

  clear() {
    try {
      localStorage.clear();
    } catch (error) {
      console.error('Error clearing localStorage:', error);
    }
  },
};

// Session-specific storage helpers
export const sessionStorage = {
  getSessionId() {
    return storage.get('research_session_id');
  },

  setSessionId(sessionId) {
    storage.set('research_session_id', sessionId);
  },

  getUserId() {
    return storage.get('research_user_id');
  },

  setUserId(userId) {
    storage.set('research_user_id', userId);
  },

  clearSession() {
    storage.remove('research_session_id');
    storage.remove('research_user_id');
  },

  getPreferences() {
    return storage.get('research_preferences', {});
  },

  setPreferences(preferences) {
    storage.set('research_preferences', preferences);
  },
};
