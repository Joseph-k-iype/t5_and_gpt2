version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      # Database settings
      - PG_HOST=postgres
      - PG_PORT=5432
      - PG_USER=postgres
      - PG_PASSWORD=postgres
      - PG_DB=metadata_db
      - PG_SCHEMA=ai_stitching_platform
      
      # Vector database settings
      - VECTOR_DB_TYPE=chroma
      - CHROMA_PERSIST_DIR=/app/data/chroma_db
      - CHROMA_COLLECTION=business_terms
      
      # Azure OpenAI settings (these need to be provided)
      - AZURE_TENANT_ID=${AZURE_TENANT_ID}
      - AZURE_CLIENT_ID=${AZURE_CLIENT_ID}
      - AZURE_CLIENT_SECRET=${AZURE_CLIENT_SECRET}
      - AZURE_ENDPOINT=${AZURE_ENDPOINT}
      
      # Model settings
      - EMBEDDING_MODEL=text-embedding-3-small
      - MODEL_NAME=gpt-4o
      - API_VERSION=2023-05-15
      
      # App settings
      - MONITORING_INTERVAL=300
      - TOKEN_CACHING_ENABLED=True
      - TOKEN_REFRESH_INTERVAL=300
      
      # Proxy settings (disabled by default)
      - PROXY_ENABLED=False
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      - postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 15s
    restart: unless-stopped

  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=metadata_db
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      # You can add initialization scripts if needed
      - ./init-db:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

volumes:
  postgres-data:
    driver: local
