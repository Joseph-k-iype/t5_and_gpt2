import dagre from '@dagrejs/dagre';
import { Node, Edge, Position } from '@xyflow/react';

const dagreGraph = new dagre.graphlib.Graph();
dagreGraph.setDefaultEdgeLabel(() => ({}));

export interface LayoutOptions {
  direction: 'TB' | 'BT' | 'LR' | 'RL';
  nodeWidth: number;
  nodeHeight: number;
  ranksep: number;
  nodesep: number;
}

export const getLayoutedElements = (
  nodes: Node[],
  edges: Edge[],
  options: LayoutOptions = {
    direction: 'TB',
    nodeWidth: 300,
    nodeHeight: 200,
    ranksep: 50,
    nodesep: 50
  }
) => {
  const { direction, nodeWidth, nodeHeight, ranksep, nodesep } = options;
  const isHorizontal = direction === 'LR' || direction === 'RL';

  dagreGraph.setGraph({ 
    rankdir: direction,
    ranksep,
    nodesep,
    marginx: 50,
    marginy: 50
  });

  nodes.forEach((node) => {
    dagreGraph.setNode(node.id, { width: nodeWidth, height: nodeHeight });
  });

  edges.forEach((edge) => {
    dagreGraph.setEdge(edge.source, edge.target);
  });

  dagre.layout(dagreGraph);

  const layoutedNodes = nodes.map((node) => {
    const nodeWithPosition = dagreGraph.node(node.id);

    return {
      ...node,
      targetPosition: isHorizontal ? Position.Left : Position.Top,
      sourcePosition: isHorizontal ? Position.Right : Position.Bottom,
      position: {
        x: nodeWithPosition.x - nodeWidth / 2,
        y: nodeWithPosition.y - nodeHeight / 2,
      },
    };
  });

  return { nodes: layoutedNodes, edges };
};

export const calculateOptimalLayout = (nodeCount: number): LayoutOptions => {
  // Adjust layout based on number of nodes
  if (nodeCount <= 5) {
    return {
      direction: 'TB',
      nodeWidth: 350,
      nodeHeight: 250,
      ranksep: 80,
      nodesep: 60
    };
  } else if (nodeCount <= 15) {
    return {
      direction: 'TB',
      nodeWidth: 300,
      nodeHeight: 200,
      ranksep: 60,
      nodesep: 50
    };
  } else {
    return {
      direction: 'LR',
      nodeWidth: 280,
      nodeHeight: 180,
      ranksep: 50,
      nodesep: 40
    };
  }
};

export const fitViewOptions = {
  padding: 50,
  duration: 800,
  maxZoom: 1.2
};
