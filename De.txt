def populate_slide_8(slide, df, csv_data):
    delete_existing_tables(slide)
    headers = [
        "Process", "Consumed or Produced", "Total BDEs", "Total BDEs Agreed to Monitor", "% BDE Monitored",
        "BDEs at Boundary Level", "Boundary BDEs Agreed to Monitor", "% Boundary BDE Monitored",
        "Pass Through BDEs", "Pass Through BDEs Agreed to Monitor", "% Pass Through BDE Monitored",
        "Total Metrics", "Total Metrics Agreed to Monitor", "% Metrics Monitored",
        "Pass Through Metrics", "Pass Through Metrics Agreed to Monitor", "% Pass Through Metrics Monitored"
    ]
    
    # Ensure headers and data rows match in length
    num_columns = len(headers)
    table = create_table(slide, headers, num_rows=1 + 2 * df['Process'].nunique(), top_position=Inches(1))

    row_data = []
    for process in df['Process'].unique():
        process_data = df[df['Process'] == process]

        # Mapper for consumed calculations
        consumed_calculations = {
            "total_bdes": process_data['Consumed BDE'].loc[process_data['Consumed BDE'] != ''].nunique(),
            "total_bdes_monitored": process_data[(process_data['Consumed BDE'] != '') & (process_data['Monitored'] != '')]['Consumed BDE'].nunique(),
            "boundary_bdes": process_data[
                (process_data['Consumed BDE'] != '') &
                (
                    process_data['Flow Type'].str.contains('Inbound Element', case=False, na=False) |
                    process_data['Flow Type'].str.contains('In-bound Element', case=False, na=False) |
                    process_data['Flow Type'].str.contains('Pass-Through', case=False, na=False) |
                    process_data['Flow Type'].str.contains('Pass Through', case=False, na=False)
                ) &
                (~process_data['Flow Type'].str.match(r'^Intra[ -]?Process$', case=False, na=False)) &
                (~process_data['Flow Type'].str.contains(r'^Intra[ -]?Process to', case=False, na=False))
            ]['Consumed BDE'].nunique(),
            "boundary_bdes_monitored": process_data[
                (process_data['Consumed BDE'] != '') &
                (
                    process_data['Flow Type'].str.contains('Inbound Element', case=False, na=False) |
                    process_data['Flow Type'].str.contains('In-bound Element', case=False, na=False) |
                    process_data['Flow Type'].str.contains('Pass-Through', case=False, na=False) |
                    process_data['Flow Type'].str.contains('Pass Through', case=False, na=False)
                ) &
                (~process_data['Flow Type'].str.match(r'^Intra[ -]?Process$', case=False, na=False)) &
                (~process_data['Flow Type'].str.contains(r'^Intra[ -]?Process to', case=False, na=False)) &
                (process_data['Monitored'] != '')
            ]['Consumed BDE'].nunique(),
            "pass_through_bdes": process_data[
                (process_data['Consumed BDE'] != '') &
                (
                    process_data['Flow Type'].str.contains('Pass Through', case=False, na=False) |
                    process_data['Flow Type'].str.contains('Pass-Through', case=False, na=False)
                ) &
                (~process_data['Flow Type'].str.match(r'^Intra[ -]?Process$', case=False, na=False)) &
                (~process_data['Flow Type'].str.contains(r'^Intra[ -]?Process to', case=False, na=False))
            ]['Consumed BDE'].nunique(),
            "pass_through_bdes_monitored": process_data[
                (process_data['Consumed BDE'] != '') &
                (
                    process_data['Flow Type'].str.contains('Pass Through', case=False, na=False) |
                    process_data['Flow Type'].str.contains('Pass-Through', case=False, na=False)
                ) &
                (~process_data['Flow Type'].str.match(r'^Intra[ -]?Process$', case=False, na=False)) &
                (~process_data['Flow Type'].str.contains(r'^Intra[ -]?Process to', case=False, na=False)) &
                (process_data['Monitored'] != '')
            ]['Consumed BDE'].nunique()
        }

        # Print counts for consumed calculations
        print_counts(process, 'Consumed', consumed_calculations)

        row_data.append([
            process, 'Consumed', consumed_calculations["total_bdes"], consumed_calculations["total_bdes_monitored"],
            f"{(consumed_calculations['total_bdes_monitored'] / consumed_calculations['total_bdes'] * 100) if consumed_calculations['total_bdes'] else 0:.2f}%",
            consumed_calculations["boundary_bdes"], consumed_calculations["boundary_bdes_monitored"],
            f"{(consumed_calculations['boundary_bdes_monitored'] / consumed_calculations['boundary_bdes'] * 100) if consumed_calculations['boundary_bdes'] else 0:.2f}%",
            consumed_calculations["pass_through_bdes"], consumed_calculations["pass_through_bdes_monitored"],
            f"{(consumed_calculations['pass_through_bdes_monitored'] / consumed_calculations['pass_through_bdes'] * 100) if consumed_calculations['pass_through_bdes'] else 0:.2f}%",
            '', '', ''  # Add placeholders for Total Metrics and Pass Through Metrics in Consumed section
        ])

        # Mapper for produced calculations
        produced_calculations = {
            "total_bdes": process_data['Produced BDE'].loc[process_data['Produced BDE'] != ''].nunique(),
            "total_bdes_monitored": process_data[(process_data['Produced BDE'] != '') & (process_data['Monitored'] != '')]['Produced BDE'].nunique(),
            "boundary_bdes": process_data[
                (process_data['Produced BDE'] != '') &
                (
                    process_data['Flow Type'].str.contains('Process Output', case=False, na=False) |
                    process_data['Flow Type'].str.contains('Process-Output', case=False, na=False) |
                    process_data['Flow Type'].str.contains('Pass-Through', case=False, na=False) |
                    process_data['Flow Type'].str.contains('Pass Through', case=False, na=False)
                ) &
                (~process_data['Flow Type'].str.match(r'^Intra[ -]?Process$', case=False, na=False)) &
                (~process_data['Flow Type'].str.contains(r'to Intra[ -]?Process$', case=False, na=False))
            ]['Produced BDE'].nunique(),
            "boundary_bdes_monitored": process_data[
                (process_data['Produced BDE'] != '') &
                (
                    process_data['Flow Type'].str.contains('Process Output', case=False, na=False) |
                    process_data['Flow Type'].str.contains('Process-Output', case=False, na=False) |
                    process_data['Flow Type'].str.contains('Pass-Through', case=False, na=False) |
                    process_data['Flow Type'].str.contains('Pass Through', case=False, na=False)
                ) &
                (~process_data['Flow Type'].str.match(r'^Intra[ -]?Process$', case=False, na=False)) &
                (~process_data['Flow Type'].str.contains(r'to Intra[ -]?Process$', case=False, na=False)) &
                (process_data['Monitored'] != '')
            ]['Produced BDE'].nunique(),
            "pass_through_bdes": process_data[
                (process_data['Produced BDE'] != '') &
                (
                    process_data['Flow Type'].str.contains('Pass Through', case=False, na=False) |
                    process_data['Flow Type'].str.contains('Pass-Through', case=False, na=False)
                ) &
                (~process_data['Flow Type'].str.match(r'^Intra[ -]?Process$', case=False, na=False)) &
                (~process_data['Flow Type'].str.contains(r'to Intra[ -]?Process$', case=False, na=False))
            ]['Produced BDE'].nunique(),
            "pass_through_bdes_monitored": process_data[
                (process_data['Produced BDE'] != '') &
                (
                    process_data['Flow Type'].str.contains('Pass Through', case=False, na=False) |
                    process_data['Flow Type'].str.contains('Pass-Through', case=False, na=False)
                ) &
                (~process_data['Flow Type'].str.match(r'^Intra[ -]?Process$', case=False, na=False)) &
                (~process_data['Flow Type'].str.contains(r'to Intra[ -]?Process$', case=False, na=False)) &
                (process_data['Monitored'] != '')
            ]['Produced BDE'].nunique()
        }

        # Print counts for produced calculations
        print_counts(process, 'Produced', produced_calculations)

        row_data.append([
            process, 'Produced', produced_calculations["total_bdes"], produced_calculations["total_bdes_monitored"],
            f"{(produced_calculations['total_bdes_monitored'] / produced_calculations['total_bdes'] * 100) if produced_calculations['total_bdes'] else 0:.2f}%",
            produced_calculations["boundary_bdes"], produced_calculations["boundary_bdes_monitored"],
            f"{(produced_calculations['boundary_bdes_monitored'] / produced_calculations['boundary_bdes'] * 100) if produced_calculations['boundary_bdes'] else 0:.2f}%",
            produced_calculations["pass_through_bdes"], produced_calculations["pass_through_bdes_monitored"],
            f"{(produced_calculations['pass_through_bdes_monitored'] / produced_calculations['pass_through_bdes'] * 100) if produced_calculations['pass_through_bdes'] else 0:.2f}%"
        ])

    populate_table(table, row_data)
    csv_data.extend(row_data)
