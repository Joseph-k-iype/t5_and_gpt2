import axios from 'axios';

// Create API instance with extended timeouts
const apiInstance = axios.create({
  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8000/api/v1',
  timeout: 300000, // 5 minutes for research operations (was 30 seconds)
  headers: {
    'Content-Type': 'application/json',
  },
});

// Request interceptor
apiInstance.interceptors.request.use(
  (config) => {
    // Add any auth headers or other common headers here
    const sessionId = localStorage.getItem('research_session_id');
    if (sessionId) {
      config.headers['X-Session-Id'] = sessionId;
    }
    
    console.log(`üîÑ ${config.method?.toUpperCase()} ${config.url}`);
    
    // Extend timeout for research endpoints specifically
    if (config.url?.includes('/research/') || config.url?.includes('/chat/quick')) {
      config.timeout = 600000; // 10 minutes for research operations
      console.log('‚è∞ Extended timeout for research operation');
    }
    
    return config;
  },
  (error) => {
    console.error('Request error:', error);
    return Promise.reject(error);
  }
);

// Response interceptor with better error handling
apiInstance.interceptors.response.use(
  (response) => {
    console.log(`‚úÖ ${response.config.method?.toUpperCase()} ${response.config.url}`);
    return response;
  },
  (error) => {
    console.error('Response error:', error);
    
    // Better error handling for different scenarios
    if (error.code === 'ECONNABORTED') {
      console.error('üïê Request timed out - this usually means the operation is taking longer than expected');
      // Don't treat timeout as a connection failure for research operations
      if (error.config?.url?.includes('/research/') || error.config?.url?.includes('/chat/quick')) {
        error.isResearchTimeout = true;
      }
    } else if (!error.response) {
      console.error('‚ùå Network error - backend may be down');
    } else if (error.response?.status === 401) {
      // Handle unauthorized
      localStorage.removeItem('research_session_id');
      localStorage.removeItem('research_user_id');
    }
    
    return Promise.reject(error);
  }
);

export default apiInstance;
