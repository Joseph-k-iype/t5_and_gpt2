import React, { useState, useRef, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import MessageBubble from './MessageBubble';
import ThoughtBubble from './ThoughtBubble';
import LoadingAnimation from './LoadingAnimation';
import GlassCard from './GlassCard';
import { cn } from '../utils/lib';
import type { Message, ChatSession, ThoughtProcess, ResearchState } from '../types';

interface ChatInterfaceProps {
  session: ChatSession | null;
  messages: Message[];
  isProcessing: boolean;
  currentThoughts: ThoughtProcess[];
  researchState: ResearchState | null;
  onSendMessage: (message: string) => Promise<void>;
  onStartResearch: (topic: string, maxIterations?: number) => Promise<void>;
}

const ChatInterface: React.FC<ChatInterfaceProps> = ({
  session,
  messages,
  isProcessing,
  currentThoughts,
  researchState,
  onSendMessage,
  onStartResearch
}) => {
  const [inputText, setInputText] = useState('');
  const [researchTopic, setResearchTopic] = useState('');
  const [showResearchModal, setShowResearchModal] = useState(false);
  const [maxIterations, setMaxIterations] = useState(3);
  const [sidebarCollapsed, setSidebarCollapsed] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const inputRef = useRef<HTMLTextAreaElement>(null);

  // Auto-scroll to bottom when new messages arrive
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages, currentThoughts]);

  // Focus input on mount
  useEffect(() => {
    inputRef.current?.focus();
  }, []);

  // Auto-resize textarea
  useEffect(() => {
    if (inputRef.current) {
      inputRef.current.style.height = 'auto';
      inputRef.current.style.height = Math.min(inputRef.current.scrollHeight, 120) + 'px';
    }
  }, [inputText]);

  const handleSendMessage = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!inputText.trim() || isProcessing) return;
    
    const message = inputText.trim();
    setInputText('');
    
    try {
      await onSendMessage(message);
    } catch (error) {
      console.error('Failed to send message:', error);
      // Re-populate input on error
      setInputText(message);
    }
  };

  const handleStartResearch = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!researchTopic.trim() || isProcessing) return;
    
    try {
      await onStartResearch(researchTopic, maxIterations);
      setShowResearchModal(false);
      setResearchTopic('');
    } catch (error) {
      console.error('Failed to start research:', error);
    }
  };

  const handleKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage(e as any);
    }
  };

  const suggestedQuestions = [
    "What are the key differences between GDPR and CCPA consent requirements?",
    "How do data breach notification laws vary across jurisdictions?",
    "What constitutes personal data under different privacy frameworks?",
    "Compare data subject rights across EU, California, and Brazil",
    "What are the compliance requirements for international data transfers?",
    "How do cross-border data transfer mechanisms compare globally?",
    "What are the penalties for non-compliance in major privacy frameworks?",
    "Explain the concept of privacy by design across different regulations",
    "What are the differences between controllers and processors under GDPR?",
    "How do legitimate interests assessments work in practice?",
    "What are the requirements for children's data protection globally?",
    "Compare privacy impact assessment requirements across frameworks"
  ];

  const handleSuggestedQuestion = (question: string) => {
    setInputText(question);
    inputRef.current?.focus();
  };

  const quickActions = [
    {
      id: 'research',
      label: 'Deep Research',
      icon: '🔬',
      action: () => setShowResearchModal(true),
      description: 'Start comprehensive research'
    },
    {
      id: 'random',
      label: 'Random Question',
      icon: '💭',
      action: () => {
        const randomQuestion = suggestedQuestions[Math.floor(Math.random() * suggestedQuestions.length)];
        handleSuggestedQuestion(randomQuestion);
      },
      description: 'Get a random privacy question'
    },
    {
      id: 'clear',
      label: 'Clear Chat',
      icon: '🗑️',
      action: () => {
        if (window.confirm('Are you sure you want to clear the chat?')) {
          // This would need to be implemented in the parent component
          console.log('Clear chat requested');
        }
      },
      description: 'Clear conversation history'
    }
  ];

  return (
    <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      {/* Header */}
      <motion.div
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.6 }}
        className="text-center mb-6 lg:mb-8"
      >
        <h1 className="text-3xl sm:text-4xl lg:text-5xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent mb-4">
          Privacy Q&A Expert
        </h1>
        <p className="text-gray-600 text-base sm:text-lg max-w-4xl mx-auto leading-relaxed">
          Ask questions about data privacy regulations worldwide. Get expert guidance 
          on GDPR, CCPA, LGPD, and other privacy frameworks with deep research capabilities and interactive visual insights.
        </p>
      </motion.div>

      {/* Main Content */}
      <div className="grid grid-cols-1 xl:grid-cols-4 gap-4 lg:gap-6 chat-interface-grid">
        {/* Chat Messages - Full width on mobile, 3 columns on desktop */}
        <div className="xl:col-span-3">
          <GlassCard className="h-[70vh] sm:h-[75vh] lg:h-[600px] flex flex-col">
            {/* Chat Header */}
            <div className="flex items-center justify-between p-3 sm:p-4 border-b border-white/20">
              <div className="flex items-center gap-3">
                <motion.div 
                  className="w-3 h-3 bg-green-400 rounded-full"
                  animate={{
                    scale: session ? [1, 1.2, 1] : 1,
                    opacity: session ? [0.7, 1, 0.7] : 0.5
                  }}
                  transition={{
                    duration: 2,
                    repeat: Infinity,
                    ease: "easeInOut"
                  }}
                />
                <span className="text-sm font-medium text-gray-700">
                  {session ? 'Connected & Ready' : 'Connecting...'}
                </span>
              </div>
              
              <div className="flex items-center gap-2">
                {/* Messages Count */}
                <motion.div
                  whileHover={{ scale: 1.05 }}
                  className="text-xs text-gray-500 bg-gray-100/50 px-3 py-1.5 rounded-full border border-gray-200/50"
                >
                  <span className="hidden sm:inline">Messages: </span>
                  <span className="font-medium">{messages.length}</span>
                </motion.div>

                {/* Processing Indicator */}
                {isProcessing && (
                  <motion.div
                    initial={{ opacity: 0, scale: 0.8 }}
                    animate={{ opacity: 1, scale: 1 }}
                    className="flex items-center gap-2 text-xs text-blue-600 bg-blue-100/50 px-3 py-1.5 rounded-full border border-blue-200/50"
                  >
                    <LoadingAnimation size="sm" type="dots" />
                    <span className="hidden sm:inline">Processing</span>
                  </motion.div>
                )}
              </div>
            </div>

            {/* Messages Area */}
            <div className="flex-1 overflow-y-auto p-3 sm:p-4 lg:p-6 space-y-4 glass-scrollbar">
              {messages.length === 0 && !isProcessing && (
                <motion.div
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  className="text-center py-8 lg:py-12"
                >
                  <motion.div 
                    className="text-4xl sm:text-6xl mb-4"
                    animate={{
                      rotate: [0, 5, -5, 0],
                      scale: [1, 1.1, 1]
                    }}
                    transition={{
                      duration: 4,
                      repeat: Infinity,
                      ease: "easeInOut"
                    }}
                  >
                    🧠
                  </motion.div>
                  <h3 className="text-lg sm:text-xl font-semibold text-gray-800 mb-2">
                    Ready to Help with Privacy Questions
                  </h3>
                  <p className="text-gray-600 mb-6 text-sm sm:text-base max-w-2xl mx-auto">
                    Start by asking a question or try one of the suggested topics below. 
                    Each response can be visualized as an interactive knowledge graph.
                  </p>
                  
                  {/* Suggested Questions - Responsive Grid */}
                  <div className="grid grid-cols-1 sm:grid-cols-2 gap-3 max-w-4xl mx-auto">
                    {suggestedQuestions.slice(0, 6).map((question, index) => (
                      <motion.button
                        key={index}
                        initial={{ opacity: 0, y: 20 }}
                        animate={{ opacity: 1, y: 0 }}
                        transition={{ delay: index * 0.1 }}
                        whileHover={{ scale: 1.02, y: -2 }}
                        whileTap={{ scale: 0.98 }}
                        onClick={() => handleSuggestedQuestion(question)}
                        className="text-left p-4 bg-gradient-to-br from-blue-50/50 to-purple-50/50 hover:from-blue-50/80 hover:to-purple-50/80 rounded-xl text-sm text-gray-700 transition-all duration-200 border border-blue-100/50 shadow-sm hover:shadow-md"
                      >
                        <div className="flex items-start gap-3">
                          <span className="text-blue-500 text-lg flex-shrink-0 mt-0.5">💭</span>
                          <span className="leading-relaxed">{question}</span>
                        </div>
                      </motion.button>
                    ))}
                  </div>
                  
                  {/* Show more suggestions on larger screens */}
                  <motion.details
                    className="mt-6 max-w-4xl mx-auto hidden lg:block"
                    whileHover={{ scale: 1.01 }}
                  >
                    <summary className="cursor-pointer text-sm text-blue-600 hover:text-blue-700 font-medium py-2 px-4 bg-blue-50/50 rounded-lg inline-block">
                      Show more privacy law questions...
                    </summary>
                    <div className="grid grid-cols-1 sm:grid-cols-2 gap-3 mt-4">
                      {suggestedQuestions.slice(6).map((question, index) => (
                        <motion.button
                          key={index + 6}
                          initial={{ opacity: 0, y: 10 }}
                          animate={{ opacity: 1, y: 0 }}
                          transition={{ delay: index * 0.1 }}
                          whileHover={{ scale: 1.02, y: -2 }}
                          whileTap={{ scale: 0.98 }}
                          onClick={() => handleSuggestedQuestion(question)}
                          className="text-left p-4 bg-gradient-to-br from-purple-50/50 to-indigo-50/50 hover:from-purple-50/80 hover:to-indigo-50/80 rounded-xl text-sm text-gray-700 transition-all duration-200 border border-purple-100/50 shadow-sm hover:shadow-md"
                        >
                          <div className="flex items-start gap-3">
                            <span className="text-purple-500 text-lg flex-shrink-0 mt-0.5">🔍</span>
                            <span className="leading-relaxed">{question}</span>
                          </div>
                        </motion.button>
                      ))}
                    </div>
                  </motion.details>
                </motion.div>
              )}

              <AnimatePresence mode="popLayout">
                {messages.map((message) => (
                  <MessageBubble
                    key={message.id}
                    message={message}
                  />
                ))}
              </AnimatePresence>

              {/* Thinking Bubbles */}
              <AnimatePresence>
                {currentThoughts.map((thought, index) => (
                  <ThoughtBubble
                    key={`${thought.timestamp}-${index}`}
                    thought={thought}
                  />
                ))}
              </AnimatePresence>

              {/* Processing Indicator */}
              {isProcessing && (
                <motion.div
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  exit={{ opacity: 0, y: -20 }}
                  className="flex items-center space-x-3 px-4 py-3"
                >
                  <LoadingAnimation size="md" type="brain" />
                  <div className="flex flex-col">
                    <span className="text-gray-700 font-medium text-sm sm:text-base">
                      AI is analyzing your question...
                    </span>
                    <span className="text-gray-500 text-xs">
                      Generating response with visual insights
                    </span>
                  </div>
                </motion.div>
              )}

              <div ref={messagesEndRef} />
            </div>

            {/* Input Area */}
            <div className="border-t border-white/20 p-3 sm:p-4">
              <form onSubmit={handleSendMessage} className="flex flex-col sm:flex-row gap-3">
                <div className="flex-1 relative">
                  <textarea
                    ref={inputRef}
                    value={inputText}
                    onChange={(e) => setInputText(e.target.value)}
                    onKeyDown={handleKeyDown}
                    placeholder="Ask about data privacy regulations..."
                    disabled={isProcessing}
                    className={cn(
                      "w-full min-h-[50px] max-h-[120px] px-4 py-3 resize-none",
                      "bg-white/50 backdrop-blur-sm border border-white/30 rounded-xl",
                      "focus:outline-none focus:ring-2 focus:ring-blue-500/50 focus:border-transparent",
                      "disabled:opacity-50 disabled:cursor-not-allowed",
                      "transition-all duration-200 text-sm sm:text-base",
                      "placeholder:text-gray-500"
                    )}
                    rows={1}
                  />
                  
                  {/* Character Counter */}
                  {inputText.length > 200 && (
                    <div className="absolute bottom-2 left-2 text-xs text-gray-500 bg-white/80 px-2 py-1 rounded">
                      {inputText.length}/1000
                    </div>
                  )}
                </div>
                
                <div className="flex gap-2">
                  {/* Deep Research Button - Desktop */}
                  <motion.button
                    type="button"
                    whileHover={{ scale: 1.05 }}
                    whileTap={{ scale: 0.95 }}
                    onClick={() => setShowResearchModal(true)}
                    disabled={isProcessing}
                    className="hidden sm:flex items-center gap-2 px-4 py-3 bg-purple-100/50 hover:bg-purple-100/80 rounded-xl font-medium text-purple-700 disabled:opacity-50 transition-all duration-200 border border-purple-200/50"
                    title="Start Deep Research"
                  >
                    <span>🔬</span>
                    <span className="hidden lg:inline">Research</span>
                  </motion.button>

                  {/* Send Button */}
                  <motion.button
                    type="submit"
                    whileHover={{ scale: 1.05 }}
                    whileTap={{ scale: 0.95 }}
                    disabled={!inputText.trim() || isProcessing}
                    className={cn(
                      "px-4 sm:px-6 py-3 rounded-xl font-medium transition-all duration-200",
                      "bg-gradient-to-r from-blue-500 to-purple-500 text-white",
                      "hover:from-blue-600 hover:to-purple-600 shadow-lg hover:shadow-xl",
                      "disabled:opacity-50 disabled:cursor-not-allowed disabled:shadow-none",
                      "flex items-center justify-center gap-2"
                    )}
                  >
                    {isProcessing ? (
                      <LoadingAnimation size="sm" />
                    ) : (
                      <>
                        <svg className="w-4 h-4 sm:w-5 sm:h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8" />
                        </svg>
                        <span className="hidden sm:inline">Send</span>
                      </>
                    )}
                  </motion.button>
                </div>
              </form>
              
              {/* Mobile Research Button */}
              <div className="sm:hidden mt-3">
                <motion.button
                  whileHover={{ scale: 1.02 }}
                  whileTap={{ scale: 0.98 }}
                  onClick={() => setShowResearchModal(true)}
                  disabled={isProcessing}
                  className="w-full flex items-center justify-center gap-2 p-3 bg-purple-100/50 hover:bg-purple-100/80 rounded-xl font-medium text-purple-700 disabled:opacity-50 transition-all duration-200 border border-purple-200/50"
                >
                  <span>🔬</span>
                  <span>Start Deep Research</span>
                </motion.button>
              </div>
              
              <div className="mt-2 text-xs text-gray-500 text-center">
                <span className="hidden sm:inline">Press Enter to send • Shift+Enter for new line • </span>
                <span>🔬 for deep research • 📊 for visual graphs</span>
              </div>
            </div>
          </GlassCard>
        </div>

        {/* Sidebar - Collapsible on mobile */}
        <div className={cn(
          "xl:col-span-1 space-y-4",
          sidebarCollapsed && "hidden xl:block"
        )}>
          {/* Mobile Sidebar Toggle */}
          <div className="xl:hidden">
            <motion.button
              whileHover={{ scale: 1.02 }}
              whileTap={{ scale: 0.98 }}
              onClick={() => setSidebarCollapsed(!sidebarCollapsed)}
              className="w-full flex items-center justify-center gap-2 p-3 bg-white/50 backdrop-blur-sm border border-white/30 rounded-xl transition-all duration-200"
            >
              <span>{sidebarCollapsed ? '👆' : '👇'}</span>
              <span className="font-medium text-gray-700">
                {sidebarCollapsed ? 'Show Session Details' : 'Hide Session Details'}
              </span>
            </motion.button>
          </div>

          <div className={cn("space-y-4", sidebarCollapsed && "hidden xl:block")}>
            {/* Session Info */}
            <GlassCard className="p-4">
              <h3 className="font-semibold text-gray-800 mb-3 flex items-center gap-2">
                <span>📊</span>
                <span>Session Info</span>
              </h3>
              <div className="space-y-3 text-sm">
                <div className="flex justify-between items-center">
                  <span className="text-gray-600">Status:</span>
                  <span className={cn(
                    "px-2 py-1 rounded-full text-xs font-medium",
                    session ? 'bg-green-100 text-green-700' : 'bg-gray-100 text-gray-600'
                  )}>
                    {session ? 'Active' : 'Not Started'}
                  </span>
                </div>
                <div className="flex justify-between items-center">
                  <span className="text-gray-600">Messages:</span>
                  <span className="font-medium">{messages.length}</span>
                </div>
                {currentThoughts.length > 0 && (
                  <div className="flex justify-between items-center">
                    <span className="text-gray-600">AI Thoughts:</span>
                    <span className="font-medium">{currentThoughts.length}</span>
                  </div>
                )}
                {session?.session_id && (
                  <div className="pt-2 border-t border-gray-200/50">
                    <span className="text-gray-600 text-xs">Session ID:</span>
                    <div className="font-mono text-xs text-gray-800 bg-gray-100/50 p-2 rounded mt-1 break-all">
                      {session.session_id}
                    </div>
                  </div>
                )}
              </div>
            </GlassCard>

            {/* Research State */}
            {researchState && (
              <motion.div
                initial={{ opacity: 0, scale: 0.9 }}
                animate={{ opacity: 1, scale: 1 }}
                transition={{ duration: 0.3 }}
              >
                <GlassCard className="p-4">
                  <h3 className="font-semibold text-gray-800 mb-3 flex items-center gap-2">
                    <span>🔬</span>
                    <span>Research State</span>
                  </h3>
                  <div className="space-y-3 text-sm">
                    <div>
                      <span className="text-gray-600">Topic:</span>
                      <p className="font-medium text-gray-800 mt-1 text-xs leading-relaxed">
                        {researchState.query}
                      </p>
                    </div>
                    <div className="grid grid-cols-2 gap-3">
                      <div className="text-center p-2 bg-blue-50/50 rounded-lg">
                        <div className="font-semibold text-blue-700">{researchState.iterations_completed}</div>
                        <div className="text-xs text-blue-600">Iterations</div>
                      </div>
                      <div className="text-center p-2 bg-green-50/50 rounded-lg">
                        <div className={cn(
                          "font-semibold capitalize",
                          researchState.confidence === 'high' ? 'text-green-700' :
                          researchState.confidence === 'medium' ? 'text-yellow-700' :
                          'text-red-700'
                        )}>
                          {researchState.confidence || 'Unknown'}
                        </div>
                        <div className="text-xs text-gray-600">Confidence</div>
                      </div>
                    </div>
                    {researchState.accumulated_knowledge && (
                      <div>
                        <span className="text-gray-600">Knowledge Areas:</span>
                        <div className="mt-2 flex flex-wrap gap-1">
                          {Object.keys(researchState.accumulated_knowledge).map((area) => (
                            <span
                              key={area}
                              className="px-2 py-1 bg-blue-100/50 text-blue-700 rounded text-xs font-medium"
                            >
                              {area}
                            </span>
                          ))}
                        </div>
                      </div>
                    )}
                  </div>
                </GlassCard>
              </motion.div>
            )}

            {/* Quick Actions */}
            <GlassCard className="p-4">
              <h3 className="font-semibold text-gray-800 mb-3 flex items-center gap-2">
                <span>⚡</span>
                <span>Quick Actions</span>
              </h3>
              <div className="space-y-2">
                {quickActions.map((action) => (
                  <motion.button
                    key={action.id}
                    whileHover={{ scale: 1.02 }}
                    whileTap={{ scale: 0.98 }}
                    onClick={action.action}
                    disabled={isProcessing && action.id !== 'clear'}
                    className="w-full text-left p-3 bg-gradient-to-r from-gray-50/50 to-gray-100/50 hover:from-gray-100/50 hover:to-gray-200/50 rounded-lg text-sm font-medium text-gray-700 disabled:opacity-50 transition-all duration-200 border border-gray-200/30"
                    title={action.description}
                  >
                    <div className="flex items-center gap-3">
                      <span className="text-lg">{action.icon}</span>
                      <div>
                        <div>{action.label}</div>
                        <div className="text-xs text-gray-500">{action.description}</div>
                      </div>
                    </div>
                  </motion.button>
                ))}
              </div>
            </GlassCard>

            {/* Tips & Features */}
            <GlassCard className="p-4">
              <h3 className="font-semibold text-gray-800 mb-3 flex items-center gap-2">
                <span>💡</span>
                <span>Features</span>
              </h3>
              <div className="space-y-3 text-sm">
                <div className="flex items-start gap-2">
                  <span className="text-blue-500">📊</span>
                  <div>
                    <div className="font-medium text-gray-700">Visual Graphs</div>
                    <div className="text-xs text-gray-500">Interactive knowledge graphs for complex responses</div>
                  </div>
                </div>
                <div className="flex items-start gap-2">
                  <span className="text-purple-500">🔬</span>
                  <div>
                    <div className="font-medium text-gray-700">Deep Research</div>
                    <div className="text-xs text-gray-500">Multi-iteration analysis for comprehensive answers</div>
                  </div>
                </div>
                <div className="flex items-start gap-2">
                  <span className="text-green-500">🌍</span>
                  <div>
                    <div className="font-medium text-gray-700">Global Coverage</div>
                    <div className="text-xs text-gray-500">GDPR, CCPA, LGPD, PIPEDA, and more</div>
                  </div>
                </div>
              </div>
            </GlassCard>
          </div>
        </div>
      </div>

      {/* Deep Research Modal */}
      <AnimatePresence>
        {showResearchModal && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center p-4 z-50"
            onClick={() => setShowResearchModal(false)}
          >
            <motion.div
              initial={{ opacity: 0, scale: 0.9, y: 20 }}
              animate={{ opacity: 1, scale: 1, y: 0 }}
              exit={{ opacity: 0, scale: 0.9, y: 20 }}
              onClick={(e) => e.stopPropagation()}
              className="w-full max-w-md"
            >
              <GlassCard variant="modal" className="p-6">
                <h3 className="text-xl font-semibold text-gray-800 mb-4 flex items-center gap-2">
                  <span>🔬</span>
                  <span>Start Deep Research</span>
                </h3>
                
                <form onSubmit={handleStartResearch} className="space-y-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Research Topic
                    </label>
                    <textarea
                      value={researchTopic}
                      onChange={(e) => setResearchTopic(e.target.value)}
                      placeholder="Enter a complex topic for comprehensive analysis..."
                      className="w-full h-24 px-3 py-2 bg-white/50 backdrop-blur-sm border border-white/30 rounded-lg resize-none focus:outline-none focus:ring-2 focus:ring-purple-500/50 text-sm"
                      required
                    />
                    <div className="text-xs text-gray-500 mt-1">
                      Example: "Compare consent mechanisms across GDPR, CCPA, and LGPD frameworks"
                    </div>
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Research Depth
                    </label>
                    <select
                      value={maxIterations}
                      onChange={(e) => setMaxIterations(Number(e.target.value))}
                      className="w-full px-3 py-2 bg-white/50 backdrop-blur-sm border border-white/30 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500/50 text-sm"
                    >
                      <option value={1}>1 - Quick Research (2-3 minutes)</option>
                      <option value={2}>2 - Standard Research (3-4 minutes)</option>
                      <option value={3}>3 - Comprehensive Research (4-5 minutes)</option>
                      <option value={4}>4 - Deep Analysis (5-6 minutes)</option>
                      <option value={5}>5 - Maximum Depth (6-7 minutes)</option>
                    </select>
                  </div>
                  
                  <div className="bg-blue-50/50 p-3 rounded-lg text-sm text-blue-700">
                    <div className="font-medium mb-1">🔬 Deep Research includes:</div>
                    <ul className="text-xs space-y-1">
                      <li>• Multi-iteration analysis</li>
                      <li>• Knowledge gap identification</li>
                      <li>• Cross-jurisdictional comparison</li>
                      <li>• Comprehensive report synthesis</li>
                    </ul>
                  </div>
                  
                  <div className="flex flex-col sm:flex-row gap-3 pt-4">
                    <motion.button
                      type="button"
                      whileHover={{ scale: 1.02 }}
                      whileTap={{ scale: 0.98 }}
                      onClick={() => setShowResearchModal(false)}
                      className="flex-1 px-4 py-2 bg-gray-100/50 text-gray-700 rounded-lg font-medium hover:bg-gray-100/80 transition-all duration-200"
                    >
                      Cancel
                    </motion.button>
                    <motion.button
                      type="submit"
                      whileHover={{ scale: 1.02 }}
                      whileTap={{ scale: 0.98 }}
                      disabled={!researchTopic.trim() || isProcessing}
                      className="flex-1 px-4 py-2 bg-gradient-to-r from-purple-500 to-blue-500 text-white rounded-lg font-medium disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200 shadow-lg hover:shadow-xl"
                    >
                      Start Research
                    </motion.button>
                  </div>
                </form>
              </GlassCard>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
};

export default ChatInterface;
