// frontend/src/App.jsx
import React, { useState, useEffect } from 'react';
import { QueryClient, QueryClientProvider } from 'react-query';
import { motion, AnimatePresence } from 'framer-motion';
import MainLayout from './components/Layout/MainLayout';
import ChatContainer from './components/Chat/ChatContainer';
import ResearchPanel from './components/Research/ResearchPanel';
import KnowledgeGraph from './components/KnowledgeGraph/KnowledgeGraph';
import Header from './components/Layout/Header';
import { useChatStore } from './hooks/useChat';
import { useResearchStore } from './hooks/useResearch';
import './styles/newyorker-theme.css';

// Create a client for React Query
const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      refetchOnWindowFocus: false,
      retry: 1,
      staleTime: 5 * 60 * 1000, // 5 minutes
    },
  },
});

function App() {
  const [activeMode, setActiveMode] = useState('chat'); // 'chat' or 'research'
  const [showKnowledgeGraph, setShowKnowledgeGraph] = useState(false);
  const { sessionId, isConnected } = useChatStore();
  const { isResearching, currentResearch } = useResearchStore();

  useEffect(() => {
    // Initialize session on app start
    if (!sessionId) {
      // Session will be created on first message
    }
  }, [sessionId]);

  const handleModeChange = (mode) => {
    setActiveMode(mode);
    if (mode === 'research') {
      setShowKnowledgeGraph(true);
    }
  };

  const toggleKnowledgeGraph = () => {
    setShowKnowledgeGraph(!showKnowledgeGraph);
  };

  return (
    <QueryClientProvider client={queryClient}>
      <div className="min-h-screen bg-newyorker-paper font-serif">
        {/* Header */}
        <Header 
          activeMode={activeMode}
          onModeChange={handleModeChange}
          isConnected={isConnected}
          isResearching={isResearching}
        />

        {/* Main Content */}
        <MainLayout>
          {/* Left Column - Chat */}
          <motion.div 
            className="flex-1 flex flex-col"
            initial={{ opacity: 0, x: -20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ duration: 0.6 }}
          >
            <ChatContainer 
              mode={activeMode}
              onModeChange={handleModeChange}
            />
          </motion.div>

          {/* Right Column - Research Panel */}
          <AnimatePresence mode="wait">
            {(activeMode === 'research' || currentResearch) && (
              <motion.div 
                className="w-1/2 border-l border-newyorker-gray-200"
                initial={{ opacity: 0, x: 20 }}
                animate={{ opacity: 1, x: 0 }}
                exit={{ opacity: 0, x: 20 }}
                transition={{ duration: 0.6 }}
              >
                <ResearchPanel 
                  onToggleKnowledgeGraph={toggleKnowledgeGraph}
                  showKnowledgeGraph={showKnowledgeGraph}
                />
              </motion.div>
            )}
          </AnimatePresence>

          {/* Knowledge Graph Overlay */}
          <AnimatePresence>
            {showKnowledgeGraph && (
              <motion.div
                className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-8"
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                exit={{ opacity: 0 }}
                onClick={() => setShowKnowledgeGraph(false)}
              >
                <motion.div
                  className="bg-newyorker-cream rounded-lg shadow-2xl max-w-6xl w-full h-5/6 overflow-hidden"
                  initial={{ scale: 0.9, opacity: 0 }}
                  animate={{ scale: 1, opacity: 1 }}
                  exit={{ scale: 0.9, opacity: 0 }}
                  onClick={(e) => e.stopPropagation()}
                >
                  <KnowledgeGraph onClose={() => setShowKnowledgeGraph(false)} />
                </motion.div>
              </motion.div>
            )}
          </AnimatePresence>
        </MainLayout>
      </div>
    </QueryClientProvider>
  );
}

export default App;

// frontend/src/components/Layout/MainLayout.jsx
import React from 'react';
import { motion } from 'framer-motion';

const MainLayout = ({ children }) => {
  return (
    <motion.main 
      className="magazine-layout min-h-screen pt-20"
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ duration: 0.8 }}
    >
      <div className="flex h-screen overflow-hidden">
        {children}
      </div>
    </motion.main>
  );
};

export default MainLayout;

// frontend/src/components/Layout/Header.jsx
import React from 'react';
import { motion } from 'framer-motion';
import { MessageCircle, Search, Brain, Wifi, WifiOff } from 'lucide-react';

const Header = ({ activeMode, onModeChange, isConnected, isResearching }) => {
  return (
    <motion.header 
      className="fixed top-0 left-0 right-0 z-40 bg-newyorker-cream border-b border-newyorker-gray-200 backdrop-blur-sm"
      initial={{ y: -100 }}
      animate={{ y: 0 }}
      transition={{ duration: 0.6, ease: "easeOut" }}
    >
      <div className="magazine-layout">
        <div className="flex items-center justify-between py-4">
          {/* Logo/Title */}
          <motion.div 
            className="flex items-center space-x-2"
            whileHover={{ scale: 1.02 }}
          >
            <Brain className="w-8 h-8 text-newyorker-accent" />
            <div>
              <h1 className="text-2xl font-display font-bold text-newyorker-black">
                Deep Research
              </h1>
              <p className="text-xs font-sans uppercase tracking-wide text-newyorker-muted">
                Intelligent Assistant
              </p>
            </div>
          </motion.div>

          {/* Mode Selector */}
          <div className="flex items-center space-x-1 bg-newyorker-gray-100 rounded-lg p-1">
            <ModeButton
              active={activeMode === 'chat'}
              onClick={() => onModeChange('chat')}
              icon={MessageCircle}
              label="Quick Chat"
            />
            <ModeButton
              active={activeMode === 'research'}
              onClick={() => onModeChange('research')}
              icon={Search}
              label="Deep Research"
              loading={isResearching}
            />
          </div>

          {/* Status Indicator */}
          <div className="flex items-center space-x-2">
            <motion.div
              className={`flex items-center space-x-2 px-3 py-1 rounded-full text-xs font-sans ${
                isConnected 
                  ? 'bg-green-100 text-green-800' 
                  : 'bg-red-100 text-red-800'
              }`}
              initial={{ scale: 0 }}
              animate={{ scale: 1 }}
              transition={{ delay: 0.3 }}
            >
              {isConnected ? (
                <Wifi className="w-3 h-3" />
              ) : (
                <WifiOff className="w-3 h-3" />
              )}
              <span>{isConnected ? 'Connected' : 'Disconnected'}</span>
            </motion.div>
          </div>
        </div>
      </div>
    </motion.header>
  );
};

const ModeButton = ({ active, onClick, icon: Icon, label, loading = false }) => {
  return (
    <motion.button
      className={`flex items-center space-x-2 px-4 py-2 rounded-md font-sans text-sm transition-all ${
        active
          ? 'bg-newyorker-black text-newyorker-cream shadow-md'
          : 'text-newyorker-muted hover:text-newyorker-black hover:bg-newyorker-gray-50'
      }`}
      onClick={onClick}
      whileHover={{ scale: 1.02 }}
      whileTap={{ scale: 0.98 }}
      disabled={loading}
    >
      <motion.div
        animate={loading ? { rotate: 360 } : { rotate: 0 }}
        transition={loading ? { duration: 1, repeat: Infinity, ease: "linear" } : {}}
      >
        <Icon className="w-4 h-4" />
      </motion.div>
      <span>{label}</span>
    </motion.button>
  );
};

export default Header;
