// frontend/src/components/Research/ResearchProgress.jsx
import React, { useEffect, useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  Search, 
  Brain, 
  Users, 
  FileText, 
  CheckCircle2, 
  Clock,
  AlertCircle,
  Loader2
} from 'lucide-react';

const ResearchProgress = ({ progress }) => {
  const [currentStage, setCurrentStage] = useState(0);
  const [animationKey, setAnimationKey] = useState(0);

  const stages = [
    {
      key: 'initialization',
      title: 'Initialization',
      description: 'Setting up multi-agent research system',
      icon: Brain,
      color: 'text-blue-600',
      bgColor: 'bg-blue-100',
    },
    {
      key: 'planning',
      title: 'Research Planning',
      description: 'Creating comprehensive research strategy',
      icon: Search,
      color: 'text-purple-600',
      bgColor: 'bg-purple-100',
    },
    {
      key: 'research',
      title: 'Active Research',
      description: 'Specialized agents conducting analysis',
      icon: Users,
      color: 'text-orange-600',
      bgColor: 'bg-orange-100',
    },
    {
      key: 'synthesis',
      title: 'Synthesis',
      description: 'Combining findings into comprehensive report',
      icon: FileText,
      color: 'text-green-600',
      bgColor: 'bg-green-100',
    },
    {
      key: 'completion',
      title: 'Completion',
      description: 'Research completed successfully',
      icon: CheckCircle2,
      color: 'text-green-600',
      bgColor: 'bg-green-100',
    },
  ];

  useEffect(() => {
    if (progress) {
      const stageIndex = stages.findIndex(stage => stage.key === progress.stage);
      if (stageIndex !== -1) {
        setCurrentStage(stageIndex);
        setAnimationKey(prev => prev + 1);
      }
    }
  }, [progress?.stage]);

  const progressPercentage = progress?.progress || 0;
  const isError = progress?.error || false;

  return (
    <motion.div
      className="p-6 h-full flex flex-col"
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
    >
      {/* Header */}
      <div className="mb-8">
        <h3 className="text-xl font-display text-newyorker-black mb-2">
          Research in Progress
        </h3>
        <p className="text-newyorker-muted font-sans text-sm">
          Multi-agent system conducting comprehensive analysis
        </p>
      </div>

      {/* Progress Bar */}
      <div className="mb-8">
        <div className="flex justify-between items-center mb-2">
          <span className="text-sm font-sans text-newyorker-muted">
            Overall Progress
          </span>
          <span className="text-sm font-medium text-newyorker-black">
            {progressPercentage}%
          </span>
        </div>
        <div className="w-full bg-newyorker-gray-200 rounded-full h-3">
          <motion.div
            className={`h-3 rounded-full ${
              isError ? 'bg-red-500' : 'bg-newyorker-accent'
            }`}
            initial={{ width: 0 }}
            animate={{ width: `${progressPercentage}%` }}
            transition={{ duration: 0.8, ease: "easeOut" }}
          />
        </div>
      </div>

      {/* Current Status */}
      {progress && (
        <motion.div
          key={animationKey}
          className="mb-8 p-4 bg-newyorker-gray-50 rounded-lg border-l-4 border-newyorker-accent"
          initial={{ opacity: 0, x: -20 }}
          animate={{ opacity: 1, x: 0 }}
        >
          <div className="flex items-center space-x-3">
            {isError ? (
              <AlertCircle className="w-5 h-5 text-red-600" />
            ) : (
              <Loader2 className="w-5 h-5 text-newyorker-accent animate-spin" />
            )}
            <div>
              <p className="font-medium text-newyorker-black">
                {progress.message}
              </p>
              {progress.details && (
                <p className="text-sm text-newyorker-muted mt-1">
                  {progress.details.agents_active && 
                    `${progress.details.agents_active} agents active`}
                </p>
              )}
            </div>
          </div>
        </motion.div>
      )}

      {/* Stages */}
      <div className="flex-1 space-y-4">
        {stages.map((stage, index) => (
          <StageItem
            key={stage.key}
            stage={stage}
            isActive={index === currentStage}
            isCompleted={index < currentStage}
            isError={isError && index === currentStage}
          />
        ))}
      </div>

      {/* Research Agents Activity */}
      <motion.div
        className="mt-8 p-4 bg-newyorker-cream rounded-lg"
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.5 }}
      >
        <h4 className="font-display text-newyorker-black mb-3 flex items-center">
          <Users className="w-4 h-4 mr-2" />
          Research Agents
        </h4>
        <div className="grid grid-cols-2 gap-3 text-sm">
          <AgentStatus name="Domain Expert" active={currentStage >= 2} />
          <AgentStatus name="Concept Analyst" active={currentStage >= 2} />
          <AgentStatus name="Synthesis Agent" active={currentStage >= 3} />
          <AgentStatus name="Knowledge Extractor" active={currentStage >= 3} />
        </div>
      </motion.div>
    </motion.div>
  );
};

const StageItem = ({ stage, isActive, isCompleted, isError }) => {
  const Icon = stage.icon;
  
  return (
    <motion.div
      className={`flex items-center space-x-4 p-3 rounded-lg transition-colors ${
        isActive
          ? isError
            ? 'bg-red-50 border border-red-200'
            : 'bg-blue-50 border border-blue-200'
          : isCompleted
          ? 'bg-green-50 border border-green-200'
          : 'bg-newyorker-gray-50 border border-newyorker-gray-200'
      }`}
      initial={{ opacity: 0, x: -20 }}
      animate={{ opacity: 1, x: 0 }}
      transition={{ delay: 0.1 }}
    >
      {/* Icon */}
      <div className={`w-10 h-10 rounded-full flex items-center justify-center ${
        isActive
          ? isError
            ? 'bg-red-100 text-red-600'
            : 'bg-blue-100 text-blue-600'
          : isCompleted
          ? 'bg-green-100 text-green-600'
          : 'bg-newyorker-gray-100 text-newyorker-muted'
      }`}>
        {isActive && !isError ? (
          <motion.div
            animate={{ rotate: 360 }}
            transition={{ duration: 2, repeat: Infinity, ease: "linear" }}
          >
            <Icon className="w-5 h-5" />
          </motion.div>
        ) : (
          <Icon className="w-5 h-5" />
        )}
      </div>

      {/* Content */}
      <div className="flex-1">
        <h4 className={`font-medium ${
          isActive || isCompleted ? 'text-newyorker-black' : 'text-newyorker-muted'
        }`}>
          {stage.title}
        </h4>
        <p className="text-sm text-newyorker-muted">
          {stage.description}
        </p>
      </div>

      {/* Status */}
      <div>
        {isCompleted ? (
          <CheckCircle2 className="w-5 h-5 text-green-600" />
        ) : isActive ? (
          isError ? (
            <AlertCircle className="w-5 h-5 text-red-600" />
          ) : (
            <Clock className="w-5 h-5 text-blue-600" />
          )
        ) : (
          <div className="w-5 h-5 rounded-full border-2 border-newyorker-gray-300" />
        )}
      </div>
    </motion.div>
  );
};

const AgentStatus = ({ name, active }) => (
  <div className="flex items-center space-x-2">
    <div className={`w-2 h-2 rounded-full ${
      active ? 'bg-green-500' : 'bg-newyorker-gray-300'
    }`} />
    <span className={`text-xs ${
      active ? 'text-newyorker-black' : 'text-newyorker-muted'
    }`}>
      {name}
    </span>
  </div>
);

export default ResearchProgress;

// frontend/src/components/KnowledgeGraph/KnowledgeGraph.jsx
import React, { useCallback, useEffect, useState } from 'react';
import ReactFlow, {
  MiniMap,
  Controls,
  Background,
  useNodesState,
  useEdgesState,
  addEdge,
  Panel,
} from 'reactflow';
import { motion } from 'framer-motion';
import { 
  X, 
  Download, 
  ZoomIn, 
  ZoomOut, 
  Maximize, 
  RotateCcw,
  Info,
  Filter,
  Search
} from 'lucide-react';
import 'reactflow/dist/style.css';
import GraphNode from './GraphNode';
import { useKnowledgeGraph } from '../../hooks/useKnowledgeGraph';
import { useResearchStore } from '../../hooks/useResearch';

const nodeTypes = {
  customNode: GraphNode,
};

const KnowledgeGraph = ({ onClose }) => {
  const [nodes, setNodes, onNodesChange] = useNodesState([]);
  const [edges, setEdges, onEdgesChange] = useEdgesState([]);
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedNodeType, setSelectedNodeType] = useState('all');
  const [showMiniMap, setShowMiniMap] = useState(true);
  const [isLoading, setIsLoading] = useState(true);
  
  const { currentResearch } = useResearchStore();
  const { generateKnowledgeGraph, isGenerating } = useKnowledgeGraph();

  useEffect(() => {
    if (currentResearch) {
      loadKnowledgeGraph();
    }
  }, [currentResearch]);

  const loadKnowledgeGraph = async () => {
    setIsLoading(true);
    try {
      const graphData = await generateKnowledgeGraph({
        content: currentResearch.final_synthesis,
        session_id: currentResearch.session_id,
        max_nodes: 30,
        max_edges: 50,
      });

      if (graphData) {
        const formattedNodes = graphData.nodes.map((node, index) => ({
          id: node.id,
          type: 'customNode',
          position: generateNodePosition(index, graphData.nodes.length),
          data: {
            label: node.label,
            nodeType: node.type,
            properties: node.properties,
            size: node.size,
            color: node.color,
          },
          style: {
            background: node.color,
            border: `2px solid ${node.color}`,
            borderRadius: '8px',
            fontSize: '12px',
            fontFamily: 'Inter, sans-serif',
          },
        }));

        const formattedEdges = graphData.edges.map((edge) => ({
          id: edge.id,
          source: edge.source,
          target: edge.target,
          label: edge.label,
          type: 'smoothstep',
          style: {
            stroke: '#64748b',
            strokeWidth: Math.max(1, edge.weight * 3),
          },
          labelStyle: {
            fontSize: '10px',
            fontFamily: 'Inter, sans-serif',
          },
        }));

        setNodes(formattedNodes);
        setEdges(formattedEdges);
      }
    } catch (error) {
      console.error('Error loading knowledge graph:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const generateNodePosition = (index, total) => {
    // Arrange nodes in a circle
    const radius = Math.min(300, total * 20);
    const angle = (index / total) * 2 * Math.PI;
    return {
      x: 400 + radius * Math.cos(angle),
      y: 300 + radius * Math.sin(angle),
    };
  };

  const onConnect = useCallback(
    (params) => setEdges((eds) => addEdge(params, eds)),
    [setEdges]
  );

  const handleNodeClick = useCallback((event, node) => {
    console.log('Node clicked:', node);
    // Could show node details in a modal or sidebar
  }, []);

  const filterNodes = useCallback(() => {
    let filtered = nodes;
    
    if (searchTerm) {
      filtered = filtered.filter(node =>
        node.data.label.toLowerCase().includes(searchTerm.toLowerCase())
      );
    }
    
    if (selectedNodeType !== 'all') {
      filtered = filtered.filter(node =>
        node.data.nodeType === selectedNodeType
      );
    }
    
    return filtered;
  }, [nodes, searchTerm, selectedNodeType]);

  const exportGraph = () => {
    const graphData = {
      nodes: nodes.map(node => ({
        id: node.id,
        label: node.data.label,
        type: node.data.nodeType,
        position: node.position,
      })),
      edges: edges.map(edge => ({
        id: edge.id,
        source: edge.source,
        target: edge.target,
        label: edge.label,
      })),
    };
    
    const dataStr = JSON.stringify(graphData, null, 2);
    const dataBlob = new Blob([dataStr], { type: 'application/json' });
    const url = URL.createObjectURL(dataBlob);
    const link = document.createElement('a');
    link.href = url;
    link.download = 'knowledge-graph.json';
    link.click();
  };

  const nodeTypes = ['all', ...new Set(nodes.map(node => node.data.nodeType))];
  const filteredNodes = filterNodes();
  const filteredEdges = edges.filter(edge =>
    filteredNodes.some(node => node.id === edge.source) &&
    filteredNodes.some(node => node.id === edge.target)
  );

  return (
    <motion.div
      className="w-full h-full flex flex-col bg-white"
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
    >
      {/* Header */}
      <div className="flex items-center justify-between p-4 border-b border-gray-200">
        <div>
          <h2 className="text-xl font-display text-newyorker-black">
            Knowledge Graph
          </h2>
          <p className="text-sm text-newyorker-muted font-sans">
            Interactive visualization of research concepts and relationships
          </p>
        </div>
        
        <div className="flex items-center space-x-2">
          <button
            onClick={exportGraph}
            className="p-2 text-newyorker-muted hover:text-newyorker-black transition-colors"
            title="Export Graph"
          >
            <Download className="w-4 h-4" />
          </button>
          <button
            onClick={() => setShowMiniMap(!showMiniMap)}
            className="p-2 text-newyorker-muted hover:text-newyorker-black transition-colors"
            title="Toggle Minimap"
          >
            <Maximize className="w-4 h-4" />
          </button>
          <button
            onClick={onClose}
            className="p-2 text-newyorker-muted hover:text-newyorker-black transition-colors"
          >
            <X className="w-4 h-4" />
          </button>
        </div>
      </div>

      {/* Controls */}
      <div className="flex items-center justify-between p-4 border-b border-gray-200 bg-gray-50">
        <div className="flex items-center space-x-4">
          {/* Search */}
          <div className="relative">
            <Search className="w-4 h-4 absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
            <input
              type="text"
              placeholder="Search nodes..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="pl-10 pr-4 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>

          {/* Filter */}
          <div className="flex items-center space-x-2">
            <Filter className="w-4 h-4 text-gray-400" />
            <select
              value={selectedNodeType}
              onChange={(e) => setSelectedNodeType(e.target.value)}
              className="border border-gray-300 rounded-md px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              {nodeTypes.map(type => (
                <option key={type} value={type}>
                  {type === 'all' ? 'All Types' : type.replace('_', ' ').toUpperCase()}
                </option>
              ))}
            </select>
          </div>
        </div>

        {/* Stats */}
        <div className="flex items-center space-x-4 text-sm text-gray-600">
          <span>{filteredNodes.length} nodes</span>
          <span>{filteredEdges.length} edges</span>
        </div>
      </div>

      {/* Graph Container */}
      <div className="flex-1 relative">
        {isLoading || isGenerating ? (
          <div className="absolute inset-0 flex items-center justify-center bg-gray-50">
            <div className="text-center">
              <motion.div
                className="w-8 h-8 border-2 border-newyorker-accent border-t-transparent rounded-full mx-auto mb-4"
                animate={{ rotate: 360 }}
                transition={{ duration: 1, repeat: Infinity, ease: "linear" }}
              />
              <p className="text-newyorker-muted font-sans">
                Generating knowledge graph...
              </p>
            </div>
          </div>
        ) : filteredNodes.length === 0 ? (
          <div className="absolute inset-0 flex items-center justify-center">
            <div className="text-center">
              <Info className="w-12 h-12 text-gray-400 mx-auto mb-4" />
              <p className="text-gray-600 font-sans">
                No knowledge graph data available
              </p>
            </div>
          </div>
        ) : (
          <ReactFlow
            nodes={filteredNodes}
            edges={filteredEdges}
            onNodesChange={onNodesChange}
            onEdgesChange={onEdgesChange}
            onConnect={onConnect}
            onNodeClick={handleNodeClick}
            nodeTypes={nodeTypes}
            fitView
            attributionPosition="bottom-left"
          >
            <Panel position="top-left">
              <div className="bg-white p-3 rounded-lg shadow-lg border text-sm">
                <div className="font-medium mb-2">Legend</div>
                <div className="space-y-1">
                  <div className="flex items-center space-x-2">
                    <div className="w-3 h-3 bg-red-500 rounded"></div>
                    <span>Domain Terms</span>
                  </div>
                  <div className="flex items-center space-x-2">
                    <div className="w-3 h-3 bg-blue-500 rounded"></div>
                    <span>Proper Nouns</span>
                  </div>
                  <div className="flex items-center space-x-2">
                    <div className="w-3 h-3 bg-purple-500 rounded"></div>
                    <span>Acronyms</span>
                  </div>
                  <div className="flex items-center space-x-2">
                    <div className="w-3 h-3 bg-green-500 rounded"></div>
                    <span>Concepts</span>
                  </div>
                </div>
              </div>
            </Panel>

            <Controls />
            <Background />
            {showMiniMap && (
              <MiniMap
                nodeColor={(node) => node.style?.background || '#64748b'}
                nodeStrokeWidth={3}
                zoomable
                pannable
              />
            )}
          </ReactFlow>
        )}
      </div>
    </motion.div>
  );
};

export default KnowledgeGraph;

// frontend/src/components/KnowledgeGraph/GraphNode.jsx
import React, { memo } from 'react';
import { Handle, Position } from 'reactflow';

const GraphNode = ({ data, isConnectable }) => {
  const { label, nodeType, properties, size = 20, color } = data;

  const getNodeIcon = (type) => {
    switch (type) {
      case 'domain_term':
        return '📋';
      case 'proper_noun':
        return '🏢';
      case 'acronym':
        return '🔤';
      case 'quoted_term':
        return '💬';
      default:
        return '💡';
    }
  };

  return (
    <div
      className="px-3 py-2 shadow-md rounded-md border-2 bg-white min-w-[60px] text-center"
      style={{
        borderColor: color,
        minWidth: `${size + 40}px`,
      }}
    >
      <Handle
        type="target"
        position={Position.Top}
        isConnectable={isConnectable}
        style={{ background: color }}
      />
      
      <div className="flex flex-col items-center">
        <div className="text-lg mb-1">
          {getNodeIcon(nodeType)}
        </div>
        <div 
          className="text-xs font-medium text-gray-900 text-center leading-tight"
          style={{ fontSize: Math.max(10, size / 3) }}
        >
          {label}
        </div>
        {properties?.score && (
          <div className="text-xs text-gray-500 mt-1">
            {Math.round(properties.score * 100)}%
          </div>
        )}
      </div>

      <Handle
        type="source"
        position={Position.Bottom}
        isConnectable={isConnectable}
        style={{ background: color }}
      />
    </div>
  );
};

export default memo(GraphNode);
