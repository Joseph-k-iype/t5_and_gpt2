import os
import pandas as pd
import numpy as np
from typing import List, Dict, Tuple
import logging
from dotenv import load_dotenv
from pathlib import Path
from azure.identity import ClientSecretCredential
from tqdm import tqdm
import json
import faiss
from tenacity import retry, stop_after_attempt, wait_exponential
import openai
from sklearn.preprocessing import normalize
import requests

# Set up logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def is_file_readable(filepath: str) -> bool:
    """Check if a file exists and is readable."""
    if not os.path.isfile(filepath) or not os.access(filepath, os.R_OK):
        raise FileNotFoundError(f"The file '{filepath}' does not exist or is not readable")
    return True

def str_to_bool(s: str) -> bool:
    """Convert string to boolean."""
    if s == 'True':
        return True
    elif s == 'False':
        return False
    else:
        raise ValueError(f"Invalid boolean string: {s}")

class OSEnv:
    """Environment and certificate management class."""
    
    def __init__(self, config_file: str, creds_file: str, certificate_path: str):
        """Initialize with configuration files and certificate path."""
        self.var_list = []  # hold vars that were set via this class
        
        # Load main configuration
        self.bulk_set(config_file, True)
        logger.info(f"Loaded main configuration from {config_file}")
        
        # Load credentials
        self.bulk_set(creds_file, False)
        logger.info(f"Loaded credentials from {creds_file}")
        
        # Set up certificates
        self.set_certificate_path(certificate_path)
        logger.info("Certificate path configured")
        
        # Configure proxy if enabled
        if str_to_bool(self.get("PROXY_ENABLED", "False")):
            self.set_proxy()
            logger.info("Proxy configured")
        
        # Set up Azure token if secure endpoints enabled
        if str_to_bool(self.get("SECURED_ENDPOINTS", "False")):
            logger.info("Securing endpoints")
            self.token = self.get_azure_token()
        else:
            self.token = None

    def set_certificate_path(self, certificate_path: str) -> None:
        """Set up the certificate path for SSL verification."""
        try:
            if is_file_readable(certificate_path):
                cert_path = str(Path(certificate_path))
                self.set("REQUESTS_CA_BUNDLE", cert_path)
                self.set("SSL_CERT_FILE", cert_path)
                self.set("CURL_CA_BUNDLE", cert_path)
                logger.info(f"Certificate path set to: {cert_path}")
        except Exception as e:
            logger.error(f"Certificate configuration failed: {str(e)}")
            raise

    def bulk_set(self, dotenvfile: str, print_val: bool = False) -> None:
        """Read and set environment variables from a dotenv file."""
        try:
            if is_file_readable(dotenvfile):
                logger.info(f"Loading environment variables from {dotenvfile}")
                # Read the env file
                with open(dotenvfile) as f:
                    lines = f.readlines()
                
                # Process each line
                for line in lines:
                    line = line.strip()
                    # Skip empty lines and comments
                    if line and not line.startswith('#'):
                        try:
                            key, value = line.split('=', 1)
                            key = key.strip()
                            value = value.strip().strip("'").strip('"')
                            self.set(key, value, print_val)
                        except ValueError:
                            continue
                            
                logger.info(f"Successfully loaded variables from {dotenvfile}")
                
        except Exception as e:
            logger.error(f"Failed to load environment file {dotenvfile}: {str(e)}")
            raise

    def set(self, var_name: str, val: str, print_val: bool = True) -> None:
        """Set an environment variable."""
        try:
            os.environ[var_name] = val
            if var_name not in self.var_list:
                self.var_list.append(var_name)
            if print_val and var_name not in ['AZURE_CLIENT_SECRET', 'AD_USER_PW']:
                logger.info(f"Set {var_name}={val}")
        except Exception as e:
            logger.error(f"Failed to set environment variable {var_name}: {str(e)}")
            raise

    def get(self, var_name: str, default: Optional[str] = None) -> Optional[str]:
        """Get an environment variable value."""
        return os.getenv(var_name, default)

    def set_proxy(self) -> None:
        """Set up proxy configuration with authentication."""
        try:
            ad_username = self.get("AD_USERNAME")
            ad_password = self.get("AD_USER_PW")
            proxy_domain = self.get("HTTPS_PROXY_DOMAIN")
            
            if not all([ad_username, ad_password, proxy_domain]):
                raise ValueError("Missing proxy credentials")
            
            proxy_url = f"http://{ad_username}:{ad_password}@{proxy_domain}"
            self.set("HTTP_PROXY", proxy_url, print_val=False)
            self.set("HTTPS_PROXY", proxy_url, print_val=False)
            
            # Set no_proxy for Azure services
            no_proxy_domains = [
                'cognitiveservices.azure.com',
                'search.windows.net',
                'openai.azure.com',
                'core.windows.net',
                'azurewebsites.net'
            ]
            self.set("NO_PROXY", ",".join(no_proxy_domains))
            
            logger.info("Proxy configuration completed")
            
        except Exception as e:
            logger.error(f"Proxy configuration failed: {str(e)}")
            raise

    def get_azure_token(self) -> str:
        """Get Azure authentication token."""
        try:
            credential = ClientSecretCredential(
                tenant_id=self.get("AZURE_TENANT_ID"),
                client_id=self.get("AZURE_CLIENT_ID"),
                client_secret=self.get("AZURE_CLIENT_SECRET")
            )
            token = credential.get_token("https://cognitiveservices.azure.com/.default")
            self.set("AZURE_TOKEN", token.token, print_val=False)
            logger.info("Azure token acquired successfully")
            return token.token
            
        except Exception as e:
            logger.error(f"Failed to get Azure token: {str(e)}")
            raise

class SemanticMatcher:
    """Handles semantic matching between CSV entries using embeddings."""
    
    def __init__(self, env_setup: OSEnv):
        """Initialize with environment setup."""
        self.env = env_setup
        self._setup_openai_client()
        
    def _setup_openai_client(self):
        """Configure OpenAI client with Azure settings."""
        openai.api_type = "azure"
        openai.api_base = self.env.get("AZURE_OPENAI_ENDPOINT")
        openai.api_version = self.env.get("API_VERSION", "2024-02-01")
        openai.api_key = self.env.token
        
    @retry(stop=stop_after_attempt(3), wait=wait_exponential(multiplier=1, min=4, max=10))
    def get_embedding(self, text: str) -> List[float]:
        """Get embedding for a text using Azure OpenAI."""
        try:
            response = openai.Embedding.create(
                input=text,
                engine="text-embedding-ada-002"
            )
            return response['data'][0]['embedding']
        except Exception as e:
            logger.error(f"Failed to get embedding: {str(e)}")
            raise

    def _prepare_text(self, name: str, description: str) -> str:
        """Combine name and description for embedding."""
        return f"{name}: {description}".strip()

    def load_csv_data(self, source_csv: str, target_csv: str) -> Tuple[pd.DataFrame, pd.DataFrame]:
        """Load and validate CSV files."""
        try:
            source_df = pd.read_csv(source_csv)
            target_df = pd.read_csv(target_csv)
            
            # Validate columns
            if not {'name', 'description'}.issubset(source_df.columns):
                raise ValueError("Source CSV must have 'name' and 'description' columns")
            if not {'pbt-name', 'pbt-description'}.issubset(target_df.columns):
                raise ValueError("Target CSV must have 'pbt-name' and 'pbt-description' columns")
            
            # Clean data
            for df in [source_df, target_df]:
                for col in df.columns:
                    df[col] = df[col].fillna('').astype(str).str.strip()
            
            logger.info(f"Loaded {len(source_df)} source entries and {len(target_df)} target entries")
            return source_df, target_df
            
        except Exception as e:
            logger.error(f"Failed to load CSV data: {str(e)}")
            raise

    def build_index(self, texts: List[str]) -> Tuple[faiss.IndexFlatIP, np.ndarray]:
        """Build FAISS index from text embeddings."""
        logger.info("Generating embeddings for target texts...")
        embeddings = []
        for text in tqdm(texts):
            embedding = self.get_embedding(text)
            embeddings.append(embedding)
        
        # Convert to numpy array and normalize
        embeddings_array = np.array(embeddings).astype('float32')
        embeddings_array = normalize(embeddings_array)
        
        # Build FAISS index
        dimension = len(embeddings[0])
        index = faiss.IndexFlatIP(dimension)
        index.add(embeddings_array)
        
        return index, embeddings_array

    def process_matches(self, source_df: pd.DataFrame, target_df: pd.DataFrame, 
                       similarity_threshold: float = 0.75) -> List[Dict]:
        """Process and find matches between dataframes."""
        try:
            matches = []
            
            # Prepare target texts and build index
            logger.info("Preparing target data...")
            target_texts = [
                self._prepare_text(row['pbt-name'], row['pbt-description'])
                for _, row in target_df.iterrows()
            ]
            index, target_embeddings = self.build_index(target_texts)
            
            # Process each source entry
            logger.info("Finding matches for source entries...")
            for idx, source_row in tqdm(source_df.iterrows(), total=len(source_df)):
                source_text = self._prepare_text(
                    source_row['name'], 
                    source_row['description']
                )
                
                # Get embedding for source text
                source_embedding = self.get_embedding(source_text)
                query_embedding = normalize(
                    np.array([source_embedding]).astype('float32')
                )
                
                # Search in FAISS index
                k = 3  # Number of nearest neighbors to retrieve
                similarities, indices = index.search(query_embedding, k)
                
                # Process results
                for similarity, target_idx in zip(similarities[0], indices[0]):
                    if similarity >= similarity_threshold:
                        matches.append({
                            'source_name': source_row['name'],
                            'source_description': source_row['description'],
                            'target_name': target_df.iloc[target_idx]['pbt-name'],
                            'target_description': target_df.iloc[target_idx]['pbt-description'],
                            'similarity_score': float(similarity)
                        })
            
            # Sort matches by similarity score
            matches.sort(key=lambda x: x['similarity_score'], reverse=True)
            logger.info(f"Found {len(matches)} matches above threshold")
            return matches
            
        except Exception as e:
            logger.error(f"Failed to process matches: {str(e)}")
            raise

    def save_results(self, matches: List[Dict], output_file: str) -> None:
        """Save matches to output files."""
        try:
            # Convert to DataFrame for easier viewing
            results_df = pd.DataFrame(matches)
            
            # Save as CSV
            results_df.to_csv(output_file, index=False)
            
            # Also save detailed JSON
            json_file = output_file.rsplit('.', 1)[0] + '.json'
            with open(json_file, 'w', encoding='utf-8') as f:
                json.dump(matches, f, indent=2)
            
            logger.info(f"Results saved to {output_file} and {json_file}")
            
            # Print summary statistics
            print("\nSummary Statistics:")
            print(f"Total matches found: {len(matches)}")
            if matches:
                scores = [m['similarity_score'] for m in matches]
                print(f"Average similarity score: {sum(scores)/len(scores):.4f}")
                print(f"Highest similarity score: {max(scores):.4f}")
                print(f"Lowest similarity score: {min(scores):.4f}")
            
        except Exception as e:
            logger.error(f"Failed to save results: {str(e)}")
            raise

def main():
    """Main function to run the semantic matching process."""
    try:
        # Setup paths
        base_dir = Path(__file__).parent.parent
        env_dir = base_dir / 'env'
        data_dir = base_dir / 'data'
        output_dir = base_dir / 'output'
        
        # Create directories if they don't exist
        for directory in [data_dir, output_dir]:
            directory.mkdir(exist_ok=True)
        
        # Initialize environment
        env_setup = OSEnv(
            config_file=str(env_dir / 'config.env'),
            creds_file=str(env_dir / 'credentials.env'),
            certificate_path=str(env_dir / 'cacert.pem')
        )
        
        # Initialize matcher
        matcher = SemanticMatcher(env_setup)
        
        # Process files
        source_csv = str(data_dir / 'source.csv')
        target_csv = str(data_dir / 'target.csv')
        output_file = str(output_dir / 'matches.csv')
        
        # Load data
        print("\nLoading CSV files...")
        source_df, target_df = matcher.load_csv_data(source_csv, target_csv)
        
        # Process matches
        print("\nProcessing semantic matches...")
        matches = matcher.process_matches(source_df, target_df)
        
        # Save results
        print("\nSaving results...")
        matcher.save_results(matches, output_file)
        
        print(f"\nProcess completed successfully!")
        
    except FileNotFoundError as e:
        print(f"\nFile Error: {str(e)}")
        print("Please check your file paths and try again.")
    except ValueError as e:
        print(f"\nValidation Error: {str(e)}")
        print("Please check your CSV files and try again.")
    except Exception as e:
        print(f"\nUnexpected Error: {str(e)}")
        print("Please check the logs for more details.")
        logger.exception("Unexpected error occurred")

if __name__ == "__main__":
    main()
