import json
import csv

def convert_json_to_csv(json_data):
    """
    Converts a complex legal JSON structure into three separate CSV files.
    Handles 'unified_simplified_table' and 'unified_decision_tables' keys.

    Args:
        json_data (dict): The dictionary loaded from the JSON data.
    """
    # --- 1. Process 'unified_simplified_table' ---
    # MODIFIED: Changed "simplified_rules" to "unified_simplified_table"
    simplified_rules = json_data.get("unified_simplified_table", [])
    if simplified_rules:
        # Use a consistent output filename
        output_filename = 'simplified_rules.csv'
        with open(output_filename, 'w', newline='', encoding='utf-8') as f:
            fieldnames = [key for key in simplified_rules[0].keys() if key != 'conditions']
            fieldnames.append('conditions')
            
            writer = csv.DictWriter(f, fieldnames=fieldnames)
            writer.writeheader()
            for rule in simplified_rules:
                rule['conditions'] = "; ".join(rule.get('conditions', []))
                writer.writerow(rule)
        print(f"✅ Successfully created {output_filename}")

    # --- 2. & 3. Process 'unified_decision_tables' and their nested rules ---
    # MODIFIED: Changed "decision_tables" to "unified_decision_tables"
    decision_tables_data = json_data.get("unified_decision_tables", {}).get("decision_tables", [])
    if decision_tables_data:
        tables_metadata_rows = []
        table_rules_rows = []

        for table in decision_tables_data:
            tables_metadata_rows.append({
                "table_id": table.get("table_id"),
                "name": table.get("name"),
                "description": table.get("description"),
            })

            for rule in table.get("rules", []):
                conditions_str = "; ".join([f"{k}:{v}" for k, v in rule.get("conditions", {}).items()])
                actions_str = "; ".join(rule.get("actions", []))
                reference = rule.get("references", [{}])[0]

                table_rules_rows.append({
                    "table_id": table.get("table_id"),
                    "rule_id": rule.get("rule_id"),
                    "priority": rule.get("priority"),
                    "source_rule": rule.get("source_rule"),
                    "conditions": conditions_str,
                    "actions": actions_str,
                    "ref_document": reference.get("document"),
                    "ref_section": reference.get("section"),
                    "ref_document_title": reference.get("document_title"),
                    "ref_jurisdiction": reference.get("jurisdiction"),
                    "ref_confidence": reference.get("confidence"),
                })
        
        # Write decision_tables.csv
        with open('decision_tables.csv', 'w', newline='', encoding='utf-8') as f:
            fieldnames = ["table_id", "name", "description"]
            writer = csv.DictWriter(f, fieldnames=fieldnames)
            writer.writeheader()
            writer.writerows(tables_metadata_rows)
        print("✅ Successfully created decision_tables.csv")
        
        # Write decision_table_rules.csv
        with open('decision_table_rules.csv', 'w', newline='', encoding='utf-8') as f:
            if table_rules_rows:
                fieldnames = table_rules_rows[0].keys()
                writer = csv.DictWriter(f, fieldnames=fieldnames)
                writer.writeheader()
                writer.writerows(table_rules_rows)
        print("✅ Successfully created decision_table_rules.csv")

# --- Main Execution ---
if __name__ == "__main__":
    input_filename = 'input.json'
    try:
        with open(input_filename, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        convert_json_to_csv(data)

    except FileNotFoundError:
        print(f"❌ Error: The file '{input_filename}' was not found.")
    except json.JSONDecodeError:
        print(f"❌ Error: The file '{input_filename}' is not a valid JSON file.")
