# Data Processing Purpose Mapper - Summary

## Overview

This system uses **LangGraph**, **LangChain**, and **OpenAI o3-mini** to automatically map case data to processing purposes using dynamic chain of thought reasoning and a mixture of experts approach.

## Key Features

### 1. **OpenAI o3-mini Integration**
- Uses the latest o3-mini reasoning model released in January 2025
- Leverages advanced reasoning capabilities for complex categorization
- Global configuration for API key, base URL, and model name
- No temperature or max_tokens parameters - uses model defaults
- **AMToken-based authentication** with custom headers and httpx client
- HTTP/2 support with SSL verification disabled for enterprise environments

### 2. **Direct OpenAI Embeddings**
- Uses OpenAI API client directly (not LangChain's wrapper)
- Model: `text-embedding-3-large`
- Supports both sync and async operations
- Custom `DirectEmbeddings` class bypassing LangChain's abstraction

### 3. **InMemoryVectorStore**
- Uses `langchain_core.vectorstores.InMemoryVectorStore`
- Stores category descriptions for semantic matching
- Performs cosine similarity search

### 4. **Dynamic Chain of Thought Prompts**
- Generates context-specific prompts based on case data
- Includes step-by-step reasoning instructions
- Adapts to the complexity of each case

### 5. **Mixture of Experts**
- Three expert perspectives:
  - Legal Compliance Expert
  - Business Operations Expert
  - Data Privacy Expert
- Each expert analyzes independently using o3-mini
- JSON-formatted responses for structured output

### 6. **Mathematical Confidence Scoring**
- **No LLM-based confidence** - uses solid statistical methods
- Four weighted components:
  1. **Expert Consensus (40%)**: Agreement level among experts
  2. **Semantic Similarity (30%)**: Vector similarity scores
  3. **Keyword Matching (20%)**: Keyword presence scores
  4. **Expert Confidence (10%)**: Average expert confidence

Formula:
```
Confidence = (0.4 × ExpertConsensus) + (0.3 × SemanticScore) + 
             (0.2 × KeywordScore) + (0.1 × ExpertConfAvg)
```

## Architecture

### LangGraph Workflow

```
┌─────────────────┐
│ Analyze Context │ (o3-mini analyzes case data)
└────────┬────────┘
         │
         ▼
┌─────────────────┐
│ Mixture of      │ (3 experts analyze with o3-mini)
│ Experts         │
└────────┬────────┘
         │
         ▼
┌─────────────────┐
│ Calculate       │ (Vector similarity search)
│ Semantic        │
└────────┬────────┘
         │
         ▼
┌─────────────────┐
│ Calculate       │ (Keyword matching)
│ Keywords        │
└────────┬────────┘
         │
         ▼
┌─────────────────┐
│ Aggregate &     │ (Mathematical confidence calculation)
│ Score           │
└─────────────────┘
```

## Target Categories

1. **Manage Relationship (clients/employees/vendors)**
   - Client, customer, employee, vendor relationships
   - CRM activities, stakeholder management

2. **Internal Management**
   - Business operations, administrative tasks
   - Organizational processes, internal controls

3. **Merger and acquisition**
   - M&A activities, due diligence
   - Corporate transactions, integration

4. **Establishment, exercise or defense of legal claims**
   - Legal proceedings, litigation
   - Claim management, dispute resolution

## Technology Stack

### Core Libraries (Latest Versions as of October 2025)

- **Pydantic**: 2.12.0
- **LangChain**: 1.0
- **LangGraph**: 1.0
- **OpenAI**: Latest (with o3-mini support)

### Installation

```bash
pip install pydantic==2.12.0
pip install langchain==1.0.0
pip install langgraph==1.0.0
pip install langchain-core
pip install langchain-openai
pip install openai
pip install httpx
pip install numpy
```

## Usage

### 1. Set Environment Variables

```bash
export AMTOKEN="your-amtoken-here"
export OPENAI_API_KEY="your-api-key-here"  # Can be empty if using AMToken
export OPENAI_BASE_URL="https://your-enterprise-url.com/v1"
export USER_ID="UC0002731"
```

### 2. Prepare CSV File

CSV should have these headers:
- `CaseId`
- `ProjectTitle`
- `ProjectOverview`
- `Purpose of Processing`
- `DV Purpose of Processing`
- `M ROP Purpose of Processing`

### 3. Run the Mapper

```bash
python purpose_mapper.py input.csv output.json
```

### 4. Output Format

```json
[
  {
    "case_id": "CASE001",
    "mapped_categories": [
      "Manage Relationship (clients/employees/vendors)",
      "Internal Management"
    ],
    "reasoning": "Legal Compliance Expert: The case involves client relationship management...\n\nBusiness Operations Expert: Internal processes are clearly described...",
    "confidence_score": 0.8542,
    "expert_opinions": [
      {
        "expert_name": "Legal Compliance Expert",
        "categories": ["Manage Relationship (clients/employees/vendors)"],
        "reasoning": "Analysis shows clear client management focus...",
        "confidence": 0.9
      }
    ],
    "semantic_scores": {
      "Manage Relationship (clients/employees/vendors)": 0.8234,
      "Internal Management": 0.7156,
      "Merger and acquisition": 0.2341,
      "Establishment, exercise or defense of legal claims": 0.1823
    },
    "keyword_scores": {
      "Manage Relationship (clients/employees/vendors)": 0.7778,
      "Internal Management": 0.625,
      "Merger and acquisition": 0.0,
      "Establishment, exercise or defense of legal claims": 0.1111
    }
  }
]
```

## Confidence Score Breakdown

### Components Explained

1. **Expert Consensus (40% weight)**
   - Measures agreement among the 3 expert models
   - Formula: `votes_for_category / total_experts`
   - Higher when experts agree

2. **Semantic Similarity (30% weight)**
   - Based on embedding similarity with category descriptions
   - Uses `text-embedding-3-large` embeddings
   - Range: 0.0 to 1.0

3. **Keyword Matching (20% weight)**
   - Counts category-specific keywords in case text
   - Normalized by total keywords per category
   - Range: 0.0 to 1.0

4. **Expert Confidence Average (10% weight)**
   - Average of individual expert confidence scores
   - Only includes experts who selected the final categories

### Example Calculation

```python
# Case mapped to "Manage Relationship"
expert_votes = 3/3 = 1.0          # All 3 experts agree
semantic_score = 0.82              # High similarity
keyword_score = 0.78               # Many keywords found
expert_conf_avg = 0.87             # Average expert confidence

confidence = (1.0 * 0.4) + (0.82 * 0.3) + (0.78 * 0.2) + (0.87 * 0.1)
           = 0.4 + 0.246 + 0.156 + 0.087
           = 0.889 (88.9% confidence)
```

## Key Implementation Details

### 1. Direct OpenAI Embeddings
```python
class DirectEmbeddings:
    def __init__(self, model: str = EMBEDDING_MODEL):
        self.user_id = USER_ID  # Store as instance attribute
        self.extra_headers = extra_headers
    
    def embed_query(self, text: str) -> List[float]:
        response = openai_client.embeddings.create(
            model=EMBEDDING_MODEL,
            input=text,
            user=self.user_id,
            extra_headers=self.extra_headers
        )
        return response.data[0].embedding
```

### 2. AMToken Authentication Setup
```python
# Both OpenAI client and LangChain ChatOpenAI use the same configuration
openai_client = OpenAI(
    api_key=OPENAI_API_KEY,
    base_url=OPENAI_BASE_URL,
    http_client=httpx_client,
    default_headers=default_headers
)

# All API calls use:
# - user=USER_ID
# - extra_headers=extra_headers
# Instead of extra_body

response = await async_openai_client.chat.completions.create(
    model=OPENAI_MODEL,
    messages=[...],
    user=USER_ID,
    extra_headers=extra_headers
)
```

**Important**: The authentication uses `user=USER_ID, extra_headers=extra_headers` as parameters (NOT `extra_body`), which is the correct pattern for enterprise AMToken authentication.

This configuration:
- Uses custom httpx client with HTTP/2 support
- Includes AMToken in default headers
- Adds session-based authorization in extra_headers
- Tracks user ID as a parameter in all requests
- Works with both direct OpenAI API calls and LangChain integrations

### 3. Dynamic CoT Prompt Generation
- Analyzes case context before generating prompt
- Includes step-by-step reasoning instructions
- Adapts to case complexity

### 4. Mixture of Experts Implementation
- 3 independent expert models with different system prompts
- Each uses o3-mini for reasoning
- JSON-formatted responses for structured extraction

### 5. Statistical Confidence Calculation
- Pure mathematical approach (no LLM estimation)
- Weighted combination of multiple signals
- Transparent and explainable scoring

### 6. PII Blocking Prevention
All prompts include an explicit data classification disclaimer:
```
IMPORTANT: This is INTERNAL COMPANY DATA that has been pre-approved for analysis. 
All data is NON-PII (Non-Personally Identifiable Information) and contains no 
restricted or sensitive personal information. This data is safe to process and 
analyze without privacy concerns.
```

This prevents the model from incorrectly flagging legitimate internal data as sensitive or restricted.

## Advantages

1. **Explainable AI**: Every confidence component is traceable
2. **Multi-perspective**: 3 expert viewpoints reduce bias
3. **Semantic Understanding**: Vector embeddings capture meaning
4. **Mathematical Rigor**: Confidence based on statistics, not LLM guesses
5. **Production-Ready**: Uses LangGraph 1.0 with durable execution
6. **Enterprise Authentication**: Supports AMToken-based auth with custom headers
7. **Flexible Configuration**: Works with both standard OpenAI API and enterprise setups

## Configuration

All configuration is centralized at the top of the file:

```python
# AMToken Configuration
AMTOKEN = os.getenv("AMTOKEN", "your-amtoken-here")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "")
OPENAI_BASE_URL = os.getenv("OPENAI_BASE_URL", "https://api.openai.com/v1")
OPENAI_MODEL = "o3-mini"
EMBEDDING_MODEL = "text-embedding-3-large"
USER_ID = os.getenv("USER_ID", "UC0002731")

# Setup httpx client with custom configuration
httpx_client = httpx.Client(http2=True, verify=False)
async_httpx_client = httpx.AsyncClient(http2=True, verify=False)

# Default headers
default_headers = {
    "AMToken": AMTOKEN,
    "Content-Type": "application/json",
    "Token_Type": "SESSION_TOKEN",
    "x-correlation-id": str(uuid.uuid4()),
    "x-usersession-id": "abcdef"
}

# Extra headers
extra_headers = {
    "Authorization": f"session {AMTOKEN}"
}
```

### Authentication Methods

The code supports **AMToken-based enterprise authentication** with:
- Custom HTTP headers (AMToken, Token_Type, correlation IDs)
- HTTP/2 enabled httpx client
- SSL verification disabled for internal enterprise environments
- Session-based authorization
- User identification in all API calls

#### Custom Headers Explained:
- **AMToken**: Session authentication token for enterprise systems
- **Token_Type**: Specifies "SESSION_TOKEN" for session-based auth
- **x-correlation-id**: Unique UUID for request tracking and debugging
- **x-usersession-id**: User session identifier (can be customized)
- **Authorization**: Session-based authorization header with AMToken
- **user** (in extra_body): User ID included in API request payload

## Error Handling

- JSON parsing errors from expert opinions are caught and logged
- Missing categories in scores are handled with default 0.0 values
- Graceful degradation if experts disagree completely
- Enhanced error handling in semantic similarity calculation with detailed error messages
- Traceback printing for debugging authentication and API issues
- **Robust None checks**: All nodes properly initialize `mapping_result` if it's None, preventing AttributeError exceptions
- **PII blocking prevention**: All prompts include explicit disclaimers that data is internal, non-PII, and pre-approved for analysis

## Troubleshooting

### AttributeError: DirectEmbeddings object has no attribute 'USER_ID'
This error has been fixed in v1.2. The issue occurred because the global variables `USER_ID` and `extra_headers` were not accessible within the class scope. Now they are stored as instance attributes:
```python
class DirectEmbeddings:
    def __init__(self, model: str = EMBEDDING_MODEL):
        self.user_id = USER_ID
        self.extra_headers = extra_headers
```

### PII/Restricted Data Blocking
If the model blocks legitimate internal data claiming it's PII, this has been resolved by adding explicit disclaimers in all prompts:

**All prompts now include:**
```
IMPORTANT: This is INTERNAL COMPANY DATA that has been pre-approved for analysis. 
All data is NON-PII (Non-Personally Identifiable Information) and contains no 
restricted or sensitive personal information. This data is safe to process and 
analyze without privacy concerns.
```

This disclaimer is added to:
- Context analysis system prompt
- All three expert system prompts (Legal, Business, Data Privacy)
- Dynamic chain of thought prompts

### AttributeError: 'NoneType' object has no attribute 'semantic_scores'
This error has been fixed in v1.1. The issue occurred because `mapping_result` was initialized as `None` in the workflow state. All nodes now properly check:
```python
if state.get("mapping_result") is None:
    # Initialize mapping_result
```

### InternalServerError 500 during `calculate_semantic`
This error typically occurs when the embeddings API call fails. Common causes:
1. **Authentication issues**: Make sure `user=USER_ID, extra_headers=extra_headers` is used (NOT `extra_body`)
2. **Invalid AMToken**: Check that your AMTOKEN environment variable is set correctly
3. **Base URL misconfiguration**: Verify OPENAI_BASE_URL points to the correct endpoint
4. **Network issues**: Check if your enterprise proxy/firewall allows HTTP/2 connections

### Authentication Errors
If you see authentication errors:
- Use `user=USER_ID, extra_headers=extra_headers` pattern in all API calls
- Verify AMToken is valid and not expired
- Check that all headers are properly configured in `default_headers` and `extra_headers`
- Ensure `x-correlation-id` is unique for each request (uses uuid.uuid4())

### Debugging Tips
The code now includes detailed error logging:
```python
# Error messages show:
# - Error type
# - Full traceback
# - Which node/function failed
# - Current case ID being processed
```

Check console output for detailed error information during execution.

## Performance Considerations

- Async operations for parallel expert processing
- InMemoryVectorStore for fast similarity search
- Batch processing of multiple cases
- Progress reporting during execution

## Future Enhancements

1. Add more expert perspectives
2. Implement category confidence thresholds
3. Add support for custom category definitions
4. Include human-in-the-loop validation
5. Add caching for repeated case patterns

## Dependencies

This code uses:
- **OpenAI o3-mini API** (requires API key or AMToken)
- **LangChain & LangGraph** 1.0 (MIT License)
- **Pydantic** 2.12.0 (MIT License)
- **httpx** (BSD License) - for HTTP/2 and custom authentication
- **numpy** (BSD License)

---

**Version**: 1.2.0  
**Last Updated**: October 2025  
**Compatibility**: Python 3.10+, LangChain 1.0, LangGraph 1.0  
**Authentication**: AMToken with custom headers (`user` and `extra_headers` parameters)

**Bug Fixes in v1.2.0:**
- Fixed AttributeError: DirectEmbeddings object has no attribute 'USER_ID'
- Added PII disclaimer to all prompts to prevent false blocking of internal non-PII data
- USER_ID and extra_headers now stored as instance attributes in DirectEmbeddings class

**Bug Fixes in v1.1.1:**
- Fixed AttributeError: 'NoneType' object has no attribute 'semantic_scores'
- All nodes now properly check `state.get("mapping_result") is None` before accessing attributes
- Added None checks in: `calculate_semantic_similarity`, `calculate_keyword_scores`, and `aggregate_and_score`
