// frontend/src/hooks/useChat.js
import { create } from 'zustand';
import { persist } from 'zustand/middleware';
import { chatService } from '../services/chatService';

export const useChatStore = create(
  persist(
    (set, get) => ({
      // State
      sessionId: null,
      messages: [],
      isLoading: false,
      isConnected: false,
      error: null,
      
      // Actions
      setSessionId: (sessionId) => set({ sessionId }),
      
      setConnected: (isConnected) => set({ isConnected }),
      
      addMessage: (message) => set(state => ({
        messages: [...state.messages, {
          ...message,
          timestamp: message.timestamp || new Date().toISOString()
        }]
      })),
      
      clearMessages: () => set({ messages: [] }),
      
      setError: (error) => set({ error }),
      
      sendMessage: async (content) => {
        const state = get();
        
        // Add user message immediately
        const userMessage = {
          role: 'user',
          content,
          timestamp: new Date().toISOString()
        };
        
        set(prev => ({
          messages: [...prev.messages, userMessage],
          isLoading: true,
          error: null
        }));
        
        try {
          const response = await chatService.sendQuickMessage({
            message: content,
            session_id: state.sessionId,
            user_id: state.userId
          });
          
          // Update session ID if received
          if (response.session_id && response.session_id !== state.sessionId) {
            set({ sessionId: response.session_id });
          }
          
          // Add assistant response
          const assistantMessage = {
            role: 'assistant',
            content: response.answer,
            timestamp: response.timestamp,
            confidence: response.confidence,
            metadata: {
              approach: response.approach,
              session_id: response.session_id
            }
          };
          
          set(prev => ({
            messages: [...prev.messages, assistantMessage],
            isLoading: false
          }));
          
          return response;
          
        } catch (error) {
          console.error('Error sending message:', error);
          
          // Add error message
          const errorMessage = {
            role: 'assistant',
            content: 'I apologize, but I encountered an error processing your message. Please try again.',
            timestamp: new Date().toISOString(),
            confidence: 'low',
            error: true
          };
          
          set(prev => ({
            messages: [...prev.messages, errorMessage],
            isLoading: false,
            error: error.message
          }));
          
          throw error;
        }
      },
      
      loadConversationHistory: async () => {
        const state = get();
        if (!state.sessionId) return;
        
        try {
          const history = await chatService.getConversationHistory(state.sessionId);
          set({ messages: history.messages });
        } catch (error) {
          console.error('Error loading conversation history:', error);
          set({ error: error.message });
        }
      },
      
      deleteSession: async () => {
        const state = get();
        if (!state.sessionId) return;
        
        try {
          await chatService.deleteSession(state.sessionId);
          set({
            sessionId: null,
            messages: [],
            error: null
          });
        } catch (error) {
          console.error('Error deleting session:', error);
          set({ error: error.message });
        }
      }
    }),
    {
      name: 'chat-store',
      partialize: (state) => ({
        sessionId: state.sessionId,
        messages: state.messages.slice(-50) // Keep only last 50 messages
      })
    }
  )
);

// frontend/src/hooks/useResearch.js
import { create } from 'zustand';
import { researchService } from '../services/researchService';

export const useResearchStore = create((set, get) => ({
  // State
  currentResearch: null,
  researchHistory: [],
  isResearching: false,
  researchProgress: null,
  error: null,
  
  // Actions
  setCurrentResearch: (research) => set({ currentResearch: research }),
  
  addToHistory: (research) => set(state => ({
    researchHistory: [research, ...state.researchHistory.slice(0, 9)] // Keep only 10 items
  })),
  
  setResearchProgress: (progress) => set({ researchProgress: progress }),
  
  setError: (error) => set({ error }),
  
  startResearch: async (topic, options = {}) => {
    set({ 
      isResearching: true, 
      error: null,
      researchProgress: {
        stage: 'initialization',
        message: 'Starting research...',
        progress: 0
      }
    });
    
    try {
      const response = await researchService.startDeepResearch({
        topic,
        session_id: options.sessionId,
        user_id: options.userId,
        focus_areas: options.focusAreas || [],
        max_duration_minutes: options.maxDuration || 10
      });
      
      set({
        currentResearch: response,
        isResearching: false,
        researchProgress: {
          stage: 'completion',
          message: 'Research completed!',
          progress: 100
        }
      });
      
      // Add to history
      get().addToHistory(response);
      
      return response;
      
    } catch (error) {
      console.error('Error starting research:', error);
      
      set({
        isResearching: false,
        error: error.message,
        researchProgress: {
          stage: 'error',
          message: `Research failed: ${error.message}`,
          progress: 0,
          error: true
        }
      });
      
      throw error;
    }
  },
  
  getResearchStatus: async (sessionId) => {
    try {
      const status = await researchService.getResearchStatus(sessionId);
      return status;
    } catch (error) {
      console.error('Error getting research status:', error);
      return null;
    }
  },
  
  clearCurrentResearch: () => set({ 
    currentResearch: null,
    researchProgress: null 
  }),
  
  clearError: () => set({ error: null })
}));

// frontend/src/hooks/useKnowledgeGraph.js
import { create } from 'zustand';
import { knowledgeGraphService } from '../services/api';

export const useKnowledgeGraphStore = create((set, get) => ({
  // State
  currentGraph: null,
  isGenerating: false,
  error: null,
  
  // Actions
  setCurrentGraph: (graph) => set({ currentGraph: graph }),
  
  setError: (error) => set({ error }),
  
  generateKnowledgeGraph: async (params) => {
    set({ isGenerating: true, error: null });
    
    try {
      const graph = await knowledgeGraphService.generateKnowledgeGraph(params);
      set({ 
        currentGraph: graph,
        isGenerating: false 
      });
      return graph;
    } catch (error) {
      console.error('Error generating knowledge graph:', error);
      set({ 
        isGenerating: false,
        error: error.message 
      });
      throw error;
    }
  },
  
  getSessionGraph: async (sessionId) => {
    set({ isGenerating: true, error: null });
    
    try {
      const graph = await knowledgeGraphService.getSessionKnowledgeGraph(sessionId);
      set({ 
        currentGraph: graph,
        isGenerating: false 
      });
      return graph;
    } catch (error) {
      console.error('Error getting session graph:', error);
      set({ 
        isGenerating: false,
        error: error.message 
      });
      throw error;
    }
  },
  
  clearGraph: () => set({ currentGraph: null, error: null })
}));

export const useKnowledgeGraph = () => {
  const store = useKnowledgeGraphStore();
  return {
    currentGraph: store.currentGraph,
    isGenerating: store.isGenerating,
    error: store.error,
    generateKnowledgeGraph: store.generateKnowledgeGraph,
    getSessionGraph: store.getSessionGraph,
    clearGraph: store.clearGraph
  };
};

// frontend/src/hooks/useWebSocket.js
import { useEffect, useRef, useState } from 'react';
import { useChatStore } from './useChat';

export const useWebSocket = (sessionId) => {
  const [isConnected, setIsConnected] = useState(false);
  const [lastMessage, setLastMessage] = useState(null);
  const ws = useRef(null);
  const reconnectTimeoutRef = useRef(null);
  const { setConnected } = useChatStore();
  
  const connect = () => {
    if (!sessionId) return;
    
    try {
      const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
      const wsUrl = `${protocol}//${window.location.host}/ws/${sessionId}`;
      
      ws.current = new WebSocket(wsUrl);
      
      ws.current.onopen = () => {
        console.log('WebSocket connected');
        setIsConnected(true);
        setConnected(true);
        
        // Clear any pending reconnection
        if (reconnectTimeoutRef.current) {
          clearTimeout(reconnectTimeoutRef.current);
          reconnectTimeoutRef.current = null;
        }
      };
      
      ws.current.onmessage = (event) => {
        try {
          const data = JSON.parse(event.data);
          setLastMessage(data);
        } catch (error) {
          console.error('Error parsing WebSocket message:', error);
        }
      };
      
      ws.current.onclose = () => {
        console.log('WebSocket disconnected');
        setIsConnected(false);
        setConnected(false);
        
        // Attempt to reconnect after 3 seconds
        reconnectTimeoutRef.current = setTimeout(() => {
          console.log('Attempting to reconnect...');
          connect();
        }, 3000);
      };
      
      ws.current.onerror = (error) => {
        console.error('WebSocket error:', error);
        setIsConnected(false);
        setConnected(false);
      };
      
    } catch (error) {
      console.error('Error creating WebSocket connection:', error);
    }
  };
  
  const disconnect = () => {
    if (reconnectTimeoutRef.current) {
      clearTimeout(reconnectTimeoutRef.current);
      reconnectTimeoutRef.current = null;
    }
    
    if (ws.current) {
      ws.current.close();
      ws.current = null;
    }
    
    setIsConnected(false);
    setConnected(false);
  };
  
  const sendMessage = (message) => {
    if (ws.current && ws.current.readyState === WebSocket.OPEN) {
      ws.current.send(JSON.stringify(message));
    }
  };
  
  useEffect(() => {
    if (sessionId) {
      connect();
    }
    
    return () => {
      disconnect();
    };
  }, [sessionId]);
  
  useEffect(() => {
    return () => {
      disconnect();
    };
  }, []);
  
  return {
    isConnected,
    lastMessage,
    sendMessage,
    connect,
    disconnect
  };
};

// frontend/src/services/api.js
import axios from 'axios';

// Create axios instance with default config
const api = axios.create({
  baseURL: process.env.REACT_APP_API_BASE_URL || 'http://localhost:8000/api/v1',
  timeout: 30000,
  headers: {
    'Content-Type': 'application/json',
  },
});

// Request interceptor
api.interceptors.request.use(
  (config) => {
    // Add auth token if available
    const token = localStorage.getItem('auth_token');
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

// Response interceptor
api.interceptors.response.use(
  (response) => {
    return response.data;
  },
  (error) => {
    if (error.response) {
      // Server responded with error status
      const errorMessage = error.response.data?.detail || error.response.data?.message || 'An error occurred';
      throw new Error(errorMessage);
    } else if (error.request) {
      // Request was made but no response received
      throw new Error('No response from server. Please check your connection.');
    } else {
      // Something else happened
      throw new Error(error.message || 'An unexpected error occurred');
    }
  }
);

// API service functions
export const chatService = {
  sendQuickMessage: (data) => api.post('/chat/quick', data),
  getConversationHistory: (sessionId) => api.get(`/chat/conversation/${sessionId}`),
  deleteSession: (sessionId) => api.delete(`/chat/session/${sessionId}`),
};

export const researchService = {
  startDeepResearch: (data) => api.post('/research/deep', data),
  getResearchStatus: (sessionId) => api.get(`/research/status/${sessionId}`),
  streamResearchProgress: (sessionId) => `/research/stream/${sessionId}`, // Returns URL for EventSource
};

export const knowledgeGraphService = {
  generateKnowledgeGraph: (data) => api.post('/knowledge-graph/generate', data),
  getSessionKnowledgeGraph: (sessionId) => api.get(`/knowledge-graph/session/${sessionId}`),
};

export const healthService = {
  checkHealth: () => api.get('/health'),
  getStatus: () => api.get('/'),
};

export default api;

// frontend/src/services/chatService.js
import { chatService as apiChatService } from './api';

class ChatService {
  async sendQuickMessage(data) {
    try {
      const response = await apiChatService.sendQuickMessage(data);
      return response;
    } catch (error) {
      console.error('Chat service error:', error);
      throw error;
    }
  }
  
  async getConversationHistory(sessionId) {
    try {
      const response = await apiChatService.getConversationHistory(sessionId);
      return response;
    } catch (error) {
      console.error('Error loading conversation history:', error);
      throw error;
    }
  }
  
  async deleteSession(sessionId) {
    try {
      const response = await apiChatService.deleteSession(sessionId);
      return response;
    } catch (error) {
      console.error('Error deleting session:', error);
      throw error;
    }
  }
}

export const chatService = new ChatService();

// frontend/src/services/researchService.js
import { researchService as apiResearchService } from './api';

class ResearchService {
  async startDeepResearch(data) {
    try {
      const response = await apiResearchService.startDeepResearch(data);
      return response;
    } catch (error) {
      console.error('Research service error:', error);
      throw error;
    }
  }
  
  async getResearchStatus(sessionId) {
    try {
      const response = await apiResearchService.getResearchStatus(sessionId);
      return response;
    } catch (error) {
      console.error('Error getting research status:', error);
      throw error;
    }
  }
  
  // Create EventSource for streaming research progress
  createProgressStream(sessionId, onMessage, onError) {
    const url = `${process.env.REACT_APP_API_BASE_URL || 'http://localhost:8000/api/v1'}${apiResearchService.streamResearchProgress(sessionId)}`;
    
    const eventSource = new EventSource(url);
    
    eventSource.onmessage = (event) => {
      try {
        const data = JSON.parse(event.data);
        onMessage(data);
      } catch (error) {
        console.error('Error parsing progress data:', error);
      }
    };
    
    eventSource.onerror = (error) => {
      console.error('EventSource error:', error);
      onError(error);
      eventSource.close();
    };
    
    return eventSource;
  }
}

export const researchService = new ResearchService();
