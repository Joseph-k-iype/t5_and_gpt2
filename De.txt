import { useCallback, useMemo } from 'react';
import { Node, Edge, useReactFlow } from '@xyflow/react';
import { getLayoutedElements, calculateOptimalLayout, LayoutOptions } from '../utils/layoutUtils';

interface UseAutoLayoutReturn {
  layoutNodes: (nodes: Node[], edges: Edge[], options?: Partial<LayoutOptions>) => void;
  getOptimalLayoutOptions: (nodeCount: number) => LayoutOptions;
  isLayouting: boolean;
}

export const useAutoLayout = (): UseAutoLayoutReturn => {
  const { setNodes, setEdges, fitView } = useReactFlow();

  const layoutNodes = useCallback((
    nodes: Node[], 
    edges: Edge[], 
    customOptions?: Partial<LayoutOptions>
  ) => {
    const optimalOptions = calculateOptimalLayout(nodes.length);
    const layoutOptions = { ...optimalOptions, ...customOptions };
    
    const { nodes: layoutedNodes, edges: layoutedEdges } = getLayoutedElements(
      nodes,
      edges,
      layoutOptions
    );

    setNodes(layoutedNodes);
    setEdges(layoutedEdges);

    // Fit view after layout with a small delay to ensure nodes are positioned
    setTimeout(() => {
      fitView({ 
        padding: 50, 
        duration: 800,
        maxZoom: 1.2
      });
    }, 100);
  }, [setNodes, setEdges, fitView]);

  const getOptimalLayoutOptions = useCallback((nodeCount: number): LayoutOptions => {
    return calculateOptimalLayout(nodeCount);
  }, []);

  // For now, we'll assume layouting is not async
  const isLayouting = false;

  return {
    layoutNodes,
    getOptimalLayoutOptions,
    isLayouting
  };
};
