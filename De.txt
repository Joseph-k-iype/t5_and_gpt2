import json
import sys
from typing import Any, Dict, List, Union
from collections import defaultdict, Counter
import argparse

class JSONSchemaAnalyzer:
    def __init__(self):
        self.schema = {}
        self.type_counts = defaultdict(Counter)
        self.max_depth = 0
        
    def analyze_value(self, value: Any, path: str = "", depth: int = 0) -> Dict:
        """Recursively analyze a JSON value to determine its schema."""
        self.max_depth = max(self.max_depth, depth)
        
        if value is None:
            return {"type": "null"}
        elif isinstance(value, bool):
            return {"type": "boolean"}
        elif isinstance(value, int):
            return {"type": "integer"}
        elif isinstance(value, float):
            return {"type": "number"}
        elif isinstance(value, str):
            return {"type": "string", "max_length": len(value)}
        elif isinstance(value, list):
            return self._analyze_array(value, path, depth)
        elif isinstance(value, dict):
            return self._analyze_object(value, path, depth)
        else:
            return {"type": f"unknown_{type(value).__name__}"}
    
    def _analyze_array(self, arr: List, path: str, depth: int) -> Dict:
        """Analyze an array and its elements."""
        if not arr:
            return {"type": "array", "items": {"type": "unknown"}, "length": 0}
        
        # Analyze each item in the array
        item_schemas = []
        for i, item in enumerate(arr[:100]):  # Sample first 100 items for performance
            item_schema = self.analyze_value(item, f"{path}[{i}]", depth + 1)
            item_schemas.append(item_schema)
        
        # Determine the most common item type
        item_types = [schema.get("type", "unknown") for schema in item_schemas]
        most_common_type = Counter(item_types).most_common(1)[0][0]
        
        # Create representative item schema
        representative_schema = next(
            (schema for schema in item_schemas if schema.get("type") == most_common_type),
            {"type": "mixed"}
        )
        
        return {
            "type": "array",
            "items": representative_schema,
            "length": len(arr),
            "item_types_distribution": dict(Counter(item_types))
        }
    
    def _analyze_object(self, obj: Dict, path: str, depth: int) -> Dict:
        """Analyze an object and its properties."""
        properties = {}
        required_fields = list(obj.keys())
        
        for key, value in obj.items():
            field_path = f"{path}.{key}" if path else key
            properties[key] = self.analyze_value(value, field_path, depth + 1)
        
        return {
            "type": "object",
            "properties": properties,
            "required": required_fields,
            "property_count": len(properties)
        }
    
    def analyze_file(self, file_path: str) -> Dict:
        """Analyze a JSON file and return its schema."""
        try:
            with open(file_path, 'r', encoding='utf-8') as file:
                data = json.load(file)
            
            print(f"Successfully loaded JSON file: {file_path}")
            schema = self.analyze_value(data)
            schema["_metadata"] = {
                "max_depth": self.max_depth,
                "file_path": file_path
            }
            
            return schema
            
        except json.JSONDecodeError as e:
            print(f"Error: Invalid JSON in file {file_path}")
            print(f"JSONDecodeError: {e}")
            return {}
        except FileNotFoundError:
            print(f"Error: File {file_path} not found")
            return {}
        except Exception as e:
            print(f"Error reading file {file_path}: {e}")
            return {}
    
    def create_empty_structure(self, schema: Dict) -> Any:
        """Create an empty structure based on the schema."""
        schema_type = schema.get("type", "unknown")
        
        if schema_type == "null":
            return None
        elif schema_type == "boolean":
            return False
        elif schema_type == "integer":
            return 0
        elif schema_type == "number":
            return 0.0
        elif schema_type == "string":
            return ""
        elif schema_type == "array":
            # Return empty array or array with one empty item as example
            items_schema = schema.get("items", {})
            return [self.create_empty_structure(items_schema)] if items_schema.get("type") != "unknown" else []
        elif schema_type == "object":
            properties = schema.get("properties", {})
            empty_obj = {}
            for prop_name, prop_schema in properties.items():
                empty_obj[prop_name] = self.create_empty_structure(prop_schema)
            return empty_obj
        else:
            return None
    
    def print_schema_summary(self, schema: Dict, indent: int = 0) -> None:
        """Print a human-readable summary of the schema."""
        prefix = "  " * indent
        schema_type = schema.get("type", "unknown")
        
        print(f"{prefix}Type: {schema_type}")
        
        if schema_type == "object":
            properties = schema.get("properties", {})
            print(f"{prefix}Properties ({len(properties)}):")
            for prop_name, prop_schema in properties.items():
                print(f"{prefix}  - {prop_name}:")
                self.print_schema_summary(prop_schema, indent + 2)
                
        elif schema_type == "array":
            length = schema.get("length", 0)
            print(f"{prefix}Array length: {length}")
            item_types = schema.get("item_types_distribution", {})
            if item_types:
                print(f"{prefix}Item types: {item_types}")
            print(f"{prefix}Item schema:")
            self.print_schema_summary(schema.get("items", {}), indent + 1)
            
        elif schema_type == "string":
            max_length = schema.get("max_length", 0)
            if max_length:
                print(f"{prefix}Max length observed: {max_length}")

def main():
    parser = argparse.ArgumentParser(description="Analyze JSON file schema and create stripped version")
    parser.add_argument("input_file", help="Path to input JSON file")
    parser.add_argument("--output-schema", "-s", help="Output file for schema (JSON format)")
    parser.add_argument("--output-stripped", "-o", help="Output file for stripped data structure")
    parser.add_argument("--pretty", "-p", action="store_true", help="Pretty print output")
    
    args = parser.parse_args()
    
    analyzer = JSONSchemaAnalyzer()
    
    print("Analyzing JSON file...")
    schema = analyzer.analyze_file(args.input_file)
    
    if not schema:
        print("Failed to analyze file. Exiting.")
        sys.exit(1)
    
    print("\n" + "="*50)
    print("SCHEMA SUMMARY")
    print("="*50)
    analyzer.print_schema_summary(schema)
    
    # Save schema if requested
    if args.output_schema:
        with open(args.output_schema, 'w', encoding='utf-8') as f:
            if args.pretty:
                json.dump(schema, f, indent=2, ensure_ascii=False)
            else:
                json.dump(schema, f, ensure_ascii=False)
        print(f"\nSchema saved to: {args.output_schema}")
    
    # Create and save stripped structure if requested
    if args.output_stripped:
        print("\nCreating stripped data structure...")
        stripped_data = analyzer.create_empty_structure(schema)
        
        with open(args.output_stripped, 'w', encoding='utf-8') as f:
            if args.pretty:
                json.dump(stripped_data, f, indent=2, ensure_ascii=False)
            else:
                json.dump(stripped_data, f, ensure_ascii=False)
        print(f"Stripped structure saved to: {args.output_stripped}")
    
    print(f"\nMax nesting depth: {schema.get('_metadata', {}).get('max_depth', 0)}")

if __name__ == "__main__":
    # Example usage if run without arguments
    if len(sys.argv) == 1:
        print("JSON Schema Analyzer")
        print("Usage examples:")
        print("  python json_analyzer.py data.json")
        print("  python json_analyzer.py data.json -s schema.json -o stripped.json -p")
        print("  python json_analyzer.py data.json --output-schema schema.json --pretty")
        sys.exit(0)
    
    main()
