"""
Vector Store Interface - Abstract base class for vector database implementations.

This module provides an abstract base class that defines the interface for
vector database implementations. Both ChromaDB and PostgreSQL implementations
should conform to this interface.
"""

import logging
from abc import ABC, abstractmethod
from typing import List, Dict, Any, Optional

logger = logging.getLogger(__name__)

class VectorStore(ABC):
    """Abstract base class for vector database implementations."""
    
    @abstractmethod
    def store_vector(self, id: str, name: str, description: str, embedding: List[float], metadata: Dict = None) -> bool:
        """
        Store a vector in the database.
        
        Args:
            id: Unique identifier
            name: Name of the term
            description: Description of the term
            embedding: Vector embedding
            metadata: Additional metadata
            
        Returns:
            True if successful
        """
        pass
    
    @abstractmethod
    def batch_store_vectors(self, items: List[Dict[str, Any]]) -> int:
        """
        Store multiple vectors in the database.
        
        Args:
            items: List of dictionaries with id, name, description, embedding, and metadata
            
        Returns:
            Number of successfully stored items
        """
        pass
    
    @abstractmethod
    def update_term_metadata(self, term_id: str, name: str, description: str, metadata: Dict) -> bool:
        """
        Update a term's metadata while preserving its embedding.
        
        Args:
            term_id: ID of the term to update
            name: Name of the term
            description: Description of the term
            metadata: Updated metadata
            
        Returns:
            True if successful
        """
        pass
    
    @abstractmethod
    def find_similar_vectors(self, query_vector: List[float], top_k: int = 5, threshold: float = 0.5) -> List[Dict[str, Any]]:
        """
        Find similar vectors in the database.
        
        Args:
            query_vector: Query vector
            top_k: Number of results to return
            threshold: Minimum similarity threshold
            
        Returns:
            List of dictionaries with id, name, description, similarity, and metadata
        """
        pass
    
    @abstractmethod
    def get_term_by_id(self, term_id: str) -> Optional[Dict[str, Any]]:
        """
        Get a term by ID.
        
        Args:
            term_id: ID of the term
            
        Returns:
            Dictionary with term details or None if not found
        """
        pass
    
    @abstractmethod
    def get_all_terms(self) -> List[Dict[str, Any]]:
        """
        Get all terms from the database.
        
        Returns:
            List of dictionaries with term details
        """
        pass
    
    @abstractmethod
    def delete_term(self, term_id: str) -> bool:
        """
        Delete a term from the database.
        
        Args:
            term_id: ID of the term to delete
            
        Returns:
            True if successful
        """
        pass
    
    @abstractmethod
    def delete_all_terms(self) -> int:
        """
        Delete all terms from the database.
        
        Returns:
            Number of deleted terms
        """
        pass
    
    @abstractmethod
    def search_terms(self, query: str, limit: int = 20) -> List[Dict[str, Any]]:
        """
        Search for terms by text query.
        
        Args:
            query: Text query
            limit: Maximum number of results
            
        Returns:
            List of dictionaries with term details
        """
        pass
    
    @abstractmethod
    def compute_cosine_similarity(self, vector1: List[float], vector2: List[float]) -> float:
        """
        Compute cosine similarity between two vectors.
        
        Args:
            vector1: First vector
            vector2: Second vector
            
        Returns:
            Cosine similarity between 0 and 1
        """
        pass
    
    @abstractmethod
    def health_check(self) -> Dict[str, Any]:
        """
        Check the health of the database connection.
        
        Returns:
            Dictionary with health status
        """
        pass
