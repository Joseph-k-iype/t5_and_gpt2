import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from typing import List, Dict
import io

def load_excel_file(uploaded_file) -> pd.DataFrame:
    """Load an Excel file and return as DataFrame."""
    return pd.read_excel(uploaded_file)

def get_common_columns(dataframes: List[pd.DataFrame]) -> List[str]:
    """Find common columns across all DataFrames."""
    if not dataframes:
        return []
    common_cols = set(dataframes[0].columns)
    for df in dataframes[1:]:
        common_cols = common_cols.intersection(df.columns)
    return list(common_cols)

def merge_dataframes(dataframes: List[pd.DataFrame], keys: List[str], how: str = 'left') -> pd.DataFrame:
    """Merge multiple DataFrames based on selected keys."""
    if not dataframes:
        return pd.DataFrame()
    
    result = dataframes[0]
    for i, df in enumerate(dataframes[1:], 1):
        result = result.merge(df, on=keys, how=how, suffixes=(f'_{i-1}', f'_{i}'))
    return result

def create_pivot_table(df: pd.DataFrame, index: List[str], values: List[str], 
                      aggfunc: str, filters: Dict = None) -> pd.DataFrame:
    """Create a pivot table based on selected columns and aggregation function."""
    if filters:
        for col, val in filters.items():
            if val:
                df = df[df[col].isin(val)]
    
    return pd.pivot_table(df, index=index, values=values, 
                         aggfunc=aggfunc, fill_value=0)

def main():
    st.title("Excel File Merger and Analysis Dashboard")
    st.write("Upload multiple Excel files, merge them, and create dynamic pivot tables")

    # File upload section
    uploaded_files = st.file_uploader("Upload Excel files", 
                                    type=['xlsx', 'xls'], 
                                    accept_multiple_files=True)
    
    if not uploaded_files:
        st.warning("Please upload at least one Excel file to begin.")
        return

    # Load all DataFrames
    dataframes = []
    for file in uploaded_files:
        try:
            df = load_excel_file(file)
            dataframes.append(df)
            st.success(f"Successfully loaded {file.name}")
        except Exception as e:
            st.error(f"Error loading {file.name}: {str(e)}")
    
    if not dataframes:
        return

    # Get common columns
    common_columns = get_common_columns(dataframes)
    
    # Merge settings
    st.subheader("Merge Settings")
    merge_keys = st.multiselect("Select columns to merge on:", 
                               common_columns,
                               help="Select one or more columns to use as merge keys")
    
    merge_type = st.selectbox("Select merge type:", 
                             ['left', 'right', 'inner', 'outer'])

    if merge_keys:
        try:
            merged_df = merge_dataframes(dataframes, merge_keys, merge_type)
            st.success("Files merged successfully!")
            
            # Analysis section
            st.subheader("Create Pivot Tables")
            
            # Select columns for pivot table
            pivot_indices = st.multiselect("Select Index Columns:", 
                                         merged_df.columns)
            
            numeric_columns = merged_df.select_dtypes(include=['float64', 'int64']).columns
            pivot_values = st.multiselect("Select Values to Aggregate:", 
                                        numeric_columns)
            
            agg_function = st.selectbox("Select Aggregation Function:",
                                      ['sum', 'mean', 'count', 'max', 'min'])
            
            # Filters
            st.subheader("Filters")
            filters = {}
            for col in pivot_indices:
                unique_values = merged_df[col].unique()
                selected_values = st.multiselect(f"Filter {col}:", 
                                               unique_values)
                if selected_values:
                    filters[col] = selected_values

            if pivot_indices and pivot_values:
                pivot_table = create_pivot_table(merged_df, 
                                               pivot_indices, 
                                               pivot_values,
                                               agg_function,
                                               filters)
                
                # Display pivot table
                st.subheader("Pivot Table Results")
                st.dataframe(pivot_table)
                
                # Create visualizations
                st.subheader("Visualizations")
                chart_type = st.selectbox("Select Chart Type:",
                                        ['Bar', 'Line', 'Scatter'])
                
                fig = None
                if chart_type == 'Bar':
                    fig = px.bar(pivot_table.reset_index(), 
                               x=pivot_indices[0],
                               y=pivot_values[0])
                elif chart_type == 'Line':
                    fig = px.line(pivot_table.reset_index(),
                                x=pivot_indices[0],
                                y=pivot_values[0])
                elif chart_type == 'Scatter':
                    fig = px.scatter(pivot_table.reset_index(),
                                   x=pivot_indices[0],
                                   y=pivot_values[0])
                
                if fig:
                    st.plotly_chart(fig)

                # Download results
                st.subheader("Download Results")
                
                # Convert pivot table to Excel
                output = io.BytesIO()
                with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
                    pivot_table.to_excel(writer, sheet_name='Pivot Table')
                    merged_df.to_excel(writer, sheet_name='Merged Data')
                
                st.download_button(
                    label="Download Excel file",
                    data=output.getvalue(),
                    file_name="analysis_results.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                )

        except Exception as e:
            st.error(f"Error during analysis: {str(e)}")

if __name__ == "__main__":
    main()
