import os
import time
import logging
import ssl
from typing import Optional
from dotenv import load_dotenv
from azure.identity import (
    DefaultAzureCredential,
    EnvironmentCredential,
    ClientSecretCredential
)
from azure.core.exceptions import ClientAuthenticationError
from langchain.chat_models import AzureChatOpenAI
from langchain.schema import AIMessage, HumanMessage, SystemMessage
from langchain.memory import ConversationBufferMemory
from langchain.chains import ConversationChain

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Load environment variables
load_dotenv()

def setup_ssl_cert():
    """Configure SSL certificate settings."""
    ssl_cert_path = os.getenv('SSL_CERT_PATH')
    if ssl_cert_path:
        if os.path.exists(ssl_cert_path):
            os.environ['SSL_CERT_FILE'] = ssl_cert_path
            os.environ['REQUESTS_CA_BUNDLE'] = ssl_cert_path
            os.environ['CURL_CA_BUNDLE'] = ssl_cert_path
            logger.info(f"SSL certificate path set to: {ssl_cert_path}")
        else:
            logger.error(f"SSL certificate file not found at: {ssl_cert_path}")
            raise FileNotFoundError(f"SSL certificate file not found at: {ssl_cert_path}")

class AzureAuthenticator:
    """Handles Azure authentication and token management."""
    
    def __init__(self):
        self._validate_environment()
        self._setup_credentials()

    def _validate_environment(self):
        """Validate required environment variables."""
        required_vars = {
            "AZURE_OPENAI_ENDPOINT": os.getenv("AZURE_OPENAI_ENDPOINT"),
            "AZURE_TENANT_ID": os.getenv("AZURE_TENANT_ID"),
            "AZURE_CLIENT_ID": os.getenv("AZURE_CLIENT_ID"),
            "AZURE_CLIENT_SECRET": os.getenv("AZURE_CLIENT_SECRET"),
            "SSL_CERT_PATH": os.getenv("SSL_CERT_PATH")
        }

        missing_vars = [k for k, v in required_vars.items() if not v]
        if missing_vars:
            raise ValueError(
                f"Missing required environment variables: {', '.join(missing_vars)}\n"
                "Please check your .env file."
            )

        self.endpoint = required_vars["AZURE_OPENAI_ENDPOINT"]
        self.tenant_id = required_vars["AZURE_TENANT_ID"]
        self.client_id = required_vars["AZURE_CLIENT_ID"]
        self.client_secret = required_vars["AZURE_CLIENT_SECRET"]

    def _setup_credentials(self):
        """Set up Azure credentials."""
        try:
            self.credential = ClientSecretCredential(
                tenant_id=self.tenant_id,
                client_id=self.client_id,
                client_secret=self.client_secret
            )
            logger.info("Successfully initialized ClientSecretCredential")
        except Exception as e:
            logger.error(f"Failed to initialize credentials: {str(e)}")
            raise

    def get_token(self) -> str:
        """
        Get Azure AD token for cognitive services.
        
        Returns:
            str: The access token
        """
        try:
            token = self.credential.get_token("https://cognitiveservices.azure.com/.default")
            logger.info("Successfully acquired token")
            return token.token
        except Exception as e:
            logger.error(f"Failed to get token: {str(e)}")
            raise

class ChatbotConfig:
    """Configuration settings for the chatbot."""
    
    def __init__(self):
        self.model_name = "gpt-35-turbo"
        self.temperature = 0.7
        self.max_tokens = 800
        self.api_version = "2024-02-01"

class AzureChatBot:
    """Azure OpenAI-powered chatbot using LangChain."""
    
    def __init__(self, config: Optional[ChatbotConfig] = None):
        self.config = config or ChatbotConfig()
        setup_ssl_cert()  # Set up SSL certificate
        self._setup_authentication()
        self._initialize_chat_model()
        self._setup_conversation()

    def _setup_authentication(self):
        """Set up Azure authentication."""
        try:
            self.authenticator = AzureAuthenticator()
            self.access_token = self.authenticator.get_token()
            self.token_refresh_time = time.time()
        except Exception as e:
            logger.error(f"Authentication setup failed: {str(e)}")
            raise

    def _initialize_chat_model(self):
        """Initialize the Azure OpenAI chat model."""
        try:
            self.llm = AzureChatOpenAI(
                model_name=self.config.model_name,
                temperature=self.config.temperature,
                max_tokens=self.config.max_tokens,
                openai_api_version=self.config.api_version,
                azure_endpoint=self.authenticator.endpoint,
                azure_ad_token=self.access_token
            )
        except Exception as e:
            logger.error(f"Failed to initialize chat model: {str(e)}")
            raise

    def _setup_conversation(self):
        """Set up conversation memory and chain."""
        try:
            self.memory = ConversationBufferMemory()
            self.conversation = ConversationChain(
                llm=self.llm,
                memory=self.memory,
                verbose=True
            )
        except Exception as e:
            logger.error(f"Failed to setup conversation: {str(e)}")
            raise

    def chat(self, user_input: str) -> str:
        """Process user input and return response."""
        if not user_input.strip():
            return "Please provide a non-empty message."
            
        try:
            # Refresh token if needed
            current_time = time.time()
            if current_time - self.token_refresh_time > 3300:
                self.access_token = self.authenticator.get_token()
                self.token_refresh_time = current_time
                self.llm.azure_ad_token = self.access_token
            
            response = self.conversation.predict(input=user_input)
            return response
            
        except Exception as e:
            error_msg = f"Error processing message: {str(e)}"
            logger.error(error_msg)
            return error_msg

def main():
    """Main function to run the chatbot."""
    try:
        # Create .env file template if it doesn't exist
        if not os.path.exists('.env'):
            with open('.env', 'w') as f:
                f.write("""
# Azure OpenAI Configuration
AZURE_OPENAI_ENDPOINT=your_endpoint_here
AZURE_TENANT_ID=your_tenant_id_here
AZURE_CLIENT_ID=your_client_id_here
AZURE_CLIENT_SECRET=your_client_secret_here

# SSL Certificate Configuration
SSL_CERT_PATH=path/to/your/cert.pem
""")
            print("Created .env template file. Please fill in your credentials.")
            return

        print("Initializing chatbot...")
        chatbot = AzureChatBot()
        
        print("\nChatbot initialized successfully!")
        print("Type 'quit' or 'exit' to end the conversation")
        print("-" * 50)

        while True:
            user_input = input("\nYou: ").strip()
            
            if user_input.lower() in ['quit', 'exit', 'bye']:
                print("Goodbye!")
                break

            response = chatbot.chat(user_input)
            print(f"\nBot: {response}")

    except FileNotFoundError as e:
        print(f"\nSSL Certificate Error: {str(e)}")
        print("Please check your SSL_CERT_PATH in the .env file.")
    except ValueError as e:
        print(f"\nConfiguration Error: {str(e)}")
        print("Please check your .env file and ensure all required variables are set.")
    except Exception as e:
        print(f"\nUnexpected Error: {str(e)}")
        print("Please check the logs for more details.")

if __name__ == "__main__":
    main()
