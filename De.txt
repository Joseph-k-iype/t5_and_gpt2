<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Data Element Enhancement Platform</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --primary: #0070f3;
            --primary-light: #339af0;
            --secondary: #6c757d;
            --success: #2ecc71;
            --danger: #e74c3c;
            --warning: #f39c12;
            --bg-main: #f8f9fa;
            --bg-light: #ffffff;
            --text-primary: #212529;
            --text-secondary: #6c757d;
            --text-light: #f8f9fa;
            --text-dark: #212529;
            --border-radius: 12px;
            --card-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
            --glass-bg: rgba(255, 255, 255, 0.7);
            --glass-bg-dark: rgba(255, 255, 255, 0.5);
            --glass-border: 1px solid rgba(255, 255, 255, 0.5);
            --blur-effect: blur(8px);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Inter', sans-serif;
        }

        body {
            background: linear-gradient(135deg, #f5f7fa 0%, #e4e8f0 100%);
            color: var(--text-primary);
            min-height: 100vh;
            padding: 2rem;
            overflow-x: hidden;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
        }

        /* Glassmorphism Card Styles */
        .glass-card {
            background: var(--glass-bg);
            backdrop-filter: var(--blur-effect);
            -webkit-backdrop-filter: var(--blur-effect);
            border-radius: var(--border-radius);
            border: var(--glass-border);
            box-shadow: var(--card-shadow);
            padding: 1.5rem;
            margin-bottom: 2rem;
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }

        .glass-card-dark {
            background: var(--glass-bg-dark);
            color: var(--text-dark);
        }

        .glass-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 12px 40px rgba(0, 0, 0, 0.12);
        }

        .card-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
            border-bottom: 1px solid rgba(0, 0, 0, 0.08);
            padding-bottom: 1rem;
        }

        .card-title {
            font-size: 1.25rem;
            font-weight: 600;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            color: var(--text-primary);
        }

        .card-icon {
            width: 2.5rem;
            height: 2.5rem;
            display: flex;
            align-items: center;
            justify-content: center;
            background: var(--primary-light);
            color: white;
            border-radius: 50%;
        }

        /* Form Styles */
        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 500;
            color: var(--text-primary);
        }

        .form-control {
            width: 100%;
            padding: 0.75rem 1rem;
            background: rgba(255, 255, 255, 0.8);
            border: 1px solid rgba(0, 0, 0, 0.1);
            border-radius: 0.5rem;
            color: var(--text-primary);
            font-size: 1rem;
            transition: all 0.3s ease;
        }

        .form-control:focus {
            outline: none;
            background: rgba(255, 255, 255, 1);
            border-color: var(--primary);
            box-shadow: 0 0 0 2px rgba(0, 112, 243, 0.2);
        }

        textarea.form-control {
            min-height: 100px;
            resize: vertical;
        }

        /* Button Styles */
        .btn {
            padding: 0.75rem 1.5rem;
            border-radius: 0.5rem;
            border: none;
            font-weight: 500;
            font-size: 1rem;
            cursor: pointer;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
        }

        .btn-primary {
            background: var(--primary);
            color: white;
        }

        .btn-primary:hover {
            background: var(--primary-light);
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0, 112, 243, 0.2);
        }

        .btn-secondary {
            background: rgba(255, 255, 255, 0.8);
            color: var(--text-primary);
            border: 1px solid rgba(0, 0, 0, 0.1);
        }

        .btn-secondary:hover {
            background: rgba(255, 255, 255, 1);
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
        }

        .btn-outline {
            background: transparent;
            border: 1px solid rgba(255, 255, 255, 0.5);
            color: var(--text-light);
        }

        .btn-outline:hover {
            background: rgba(255, 255, 255, 0.1);
        }

        .btn-group {
            display: flex;
            gap: 1rem;
            margin-top: 1rem;
        }

        /* Grid Layout */
        .grid {
            display: grid;
            gap: 1.5rem;
        }

        .grid-2 {
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        }

        /* Tabs */
        .tabs {
            display: flex;
            gap: 0.5rem;
            margin-bottom: 1.5rem;
            border-bottom: 1px solid rgba(255, 255, 255, 0.2);
            padding-bottom: 0.5rem;
        }

        .tab-btn {
            padding: 0.5rem 1rem;
            background: transparent;
            border: none;
            color: rgba(255, 255, 255, 0.7);
            cursor: pointer;
            font-weight: 500;
            border-radius: 0.5rem;
            transition: all 0.3s ease;
        }

        .tab-btn.active {
            background: rgba(255, 255, 255, 0.2);
            color: white;
        }

        .tab-content {
            display: none;
        }

        .tab-content.active {
            display: block;
        }

        /* Status Indicators */
        .status {
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.25rem 0.75rem;
            border-radius: 9999px;
            font-size: 0.875rem;
            font-weight: 500;
        }

        .status-success {
            background: rgba(46, 204, 113, 0.15);
            color: var(--success);
        }

        .status-warning {
            background: rgba(243, 156, 18, 0.15);
            color: var(--warning);
        }

        .status-danger {
            background: rgba(231, 76, 60, 0.15);
            color: var(--danger);
        }

        /* Results Section */
        .result-card {
            background: rgba(255, 255, 255, 0.7);
            border-radius: var(--border-radius);
            padding: 1.25rem;
            margin-bottom: 1rem;
            transition: all 0.3s ease;
            border: 1px solid rgba(0, 0, 0, 0.05);
        }

        .result-card:hover {
            background: rgba(255, 255, 255, 0.9);
            border-color: rgba(0, 0, 0, 0.1);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
        }

        .result-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 0.75rem;
            padding-bottom: 0.75rem;
            border-bottom: 1px solid rgba(0, 0, 0, 0.05);
        }

        .result-title {
            font-weight: 600;
            color: var(--text-primary);
        }

        .result-content {
            font-size: 0.95rem;
            line-height: 1.5;
            color: var(--text-primary);
        }

        /* Before/After Comparison */
        .comparison {
            display: flex;
            gap: 1.5rem;
            margin-top: 1rem;
        }

        .comparison-card {
            flex: 1;
            background: rgba(255, 255, 255, 0.7);
            border-radius: var(--border-radius);
            padding: 1.25rem;
            border: 1px solid rgba(0, 0, 0, 0.05);
            transition: all 0.3s ease;
        }
        
        .comparison-card:hover {
            background: rgba(255, 255, 255, 0.9);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
        }

        .comparison-card-header {
            font-weight: 600;
            color: var(--text-primary);
            margin-bottom: 0.75rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .comparison-card-content {
            color: var(--text-primary);
            font-size: 0.95rem;
        }

        /* Progress Steps */
        .progress-steps {
            display: flex;
            gap: 0.5rem;
            margin: 2rem 0;
            position: relative;
        }

        .progress-steps::before {
            content: '';
            position: absolute;
            top: 1.5rem;
            left: 0;
            width: 100%;
            height: 2px;
            background: rgba(0, 0, 0, 0.1);
            z-index: 0;
        }

        .step {
            flex: 1;
            text-align: center;
            position: relative;
            z-index: 1;
        }

        .step-number {
            width: 3rem;
            height: 3rem;
            border-radius: 50%;
            background: rgba(255, 255, 255, 0.8);
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 0.75rem;
            font-weight: 600;
            color: var(--text-secondary);
            border: 2px solid rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease;
        }

        .step.active .step-number {
            background: var(--primary);
            border-color: var(--primary-light);
            color: white;
            box-shadow: 0 0 0 5px rgba(0, 112, 243, 0.2);
        }

        .step.completed .step-number {
            background: var(--success);
            border-color: var(--success);
            color: white;
        }

        .step-label {
            color: var(--text-secondary);
            font-size: 0.875rem;
            font-weight: 500;
        }

        .step.active .step-label {
            color: var(--text-primary);
            font-weight: 600;
        }

        /* Confidence Meter */
        .confidence-meter {
            position: relative;
            height: 0.75rem;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 9999px;
            overflow: hidden;
            margin: 1rem 0;
        }

        .confidence-fill {
            position: absolute;
            top: 0;
            left: 0;
            height: 100%;
            background: linear-gradient(90deg, var(--danger), var(--warning), var(--success));
            border-radius: 9999px;
            transition: width 0.5s ease;
        }

        .confidence-value {
            text-align: center;
            font-weight: 600;
            color: white;
            margin-top: 0.5rem;
        }

        /* Feedback Section */
        .feedback-list {
            list-style: none;
        }

        .feedback-item {
            padding: 0.75rem 0;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
            display: flex;
            gap: 0.75rem;
            font-size: 0.95rem;
        }

        .feedback-item:last-child {
            border-bottom: none;
        }

        .feedback-icon {
            color: var(--primary-light);
            flex-shrink: 0;
            margin-top: 0.25rem;
        }

        /* Animations */
        @keyframes fadeIn {
            0% { opacity: 0; transform: translateY(10px); }
            100% { opacity: 1; transform: translateY(0); }
        }

        .fade-in {
            animation: fadeIn 0.5s ease forwards;
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .grid-2 {
                grid-template-columns: 1fr;
            }

            .comparison {
                flex-direction: column;
            }

            .progress-steps {
                flex-direction: column;
                gap: 1rem;
            }

            .progress-steps::before {
                width: 2px;
                height: 100%;
                left: calc(1.5rem - 1px);
                top: 0;
            }

            .step {
                display: flex;
                align-items: center;
                gap: 1rem;
                text-align: left;
            }

            .step-number {
                margin: 0;
            }
        }

        /* Toast Notifications */
        .toast-container {
            position: fixed;
            top: 1rem;
            right: 1rem;
            z-index: 1000;
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }

        .toast {
            background: var(--glass-bg-dark);
            backdrop-filter: var(--blur-effect);
            border-radius: var(--border-radius);
            padding: 1rem 1.5rem;
            display: flex;
            align-items: center;
            gap: 0.75rem;
            color: white;
            box-shadow: var(--card-shadow);
            animation: fadeIn 0.3s ease;
            border-left: 4px solid;
            min-width: 300px;
        }

        .toast-success {
            border-left-color: var(--success);
        }

        .toast-warning {
            border-left-color: var(--warning);
        }

        .toast-error {
            border-left-color: var(--danger);
        }

        .toast-info {
            border-left-color: var(--primary-light);
        }

        .toast-icon {
            flex-shrink: 0;
        }

        .toast-content {
            flex-grow: 1;
        }

        .toast-title {
            font-weight: 600;
            margin-bottom: 0.25rem;
        }

        .toast-message {
            font-size: 0.875rem;
            opacity: 0.9;
        }

        /* Loading Spinner */
        .spinner {
            display: inline-block;
            width: 2rem;
            height: 2rem;
            border: 3px solid rgba(255, 255, 255, 0.3);
            border-radius: 50%;
            border-top-color: white;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        .loading-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.7);
            backdrop-filter: var(--blur-effect);
            display: flex;
            align-items: center;
            justify-content: center;
            flex-direction: column;
            gap: 1rem;
            z-index: 1000;
            color: white;
            display: none;
        }

        /* Header and Navigation */
        header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
            padding-bottom: 1rem;
            border-bottom: 1px solid rgba(255, 255, 255, 0.2);
        }

        .logo {
            display: flex;
            align-items: center;
            gap: 0.75rem;
        }

        .logo-icon {
            font-size: 1.75rem;
            color: white;
        }

        .logo-text {
            color: white;
            font-weight: 700;
            font-size: 1.5rem;
        }

        nav {
            display: flex;
            gap: 1rem;
        }

        .nav-item {
            color: rgba(255, 255, 255, 0.8);
            text-decoration: none;
            padding: 0.5rem 1rem;
            border-radius: 0.5rem;
            transition: all 0.3s ease;
        }

        .nav-item:hover, .nav-item.active {
            background: rgba(255, 255, 255, 0.1);
            color: white;
        }
    </style>
</head>
<body>
    <div class="toast-container" id="toastContainer"></div>
    
    <div class="loading-overlay" id="loadingOverlay">
        <div class="spinner"></div>
        <p>Processing your data element...</p>
    </div>

    <div class="container">
        <header>
            <div class="logo">
                <div class="logo-icon">
                    <i class="fas fa-database"></i>
                </div>
                <div class="logo-text">Data Element Enhancement</div>
            </div>
            <nav>
                <a href="#" class="nav-item active">Enhancement</a>
                <a href="#" class="nav-item">History</a>
                <a href="#" class="nav-item">Settings</a>
            </nav>
        </header>

        <div class="grid grid-2">
            <div class="glass-card">
                <div class="card-header">
                    <div class="card-title">
                        <div class="card-icon">
                            <i class="fas fa-pen-to-square"></i>
                        </div>
                        Data Element Input
                    </div>
                </div>
                <form id="dataElementForm">
                    <div class="form-group">
                        <label for="elementId" class="form-label">Element ID</label>
                        <input type="text" id="elementId" class="form-control" placeholder="Enter a unique identifier">
                    </div>
                    <div class="form-group">
                        <label for="elementName" class="form-label">Element Name</label>
                        <input type="text" id="elementName" class="form-control" placeholder="e.g., cust_id, LN, DOB">
                    </div>
                    <div class="form-group">
                        <label for="elementDescription" class="form-label">Element Description</label>
                        <textarea id="elementDescription" class="form-control" placeholder="e.g., Customer ID in the system, Last name"></textarea>
                    </div>
                    <div class="form-group">
                        <label for="elementExample" class="form-label">Example (Optional)</label>
                        <input type="text" id="elementExample" class="form-control" placeholder="e.g., ABC123, Smith, 01/01/1990">
                    </div>
                    <div class="form-group">
                        <label for="processName" class="form-label">Related Process Name (Optional)</label>
                        <input type="text" id="processName" class="form-control" placeholder="e.g., Customer Onboarding">
                    </div>
                    <div class="btn-group">
                        <button type="button" id="validateBtn" class="btn btn-secondary">
                            <i class="fas fa-check-circle"></i> Validate
                        </button>
                        <button type="button" id="enhanceBtn" class="btn btn-primary">
                            <i class="fas fa-magic"></i> Enhance
                        </button>
                    </div>
                </form>
            </div>

            <div class="glass-card">
                <div class="card-header">
                    <div class="card-title">
                        <div class="card-icon">
                            <i class="fas fa-list-check"></i>
                        </div>
                        Validation Results
                    </div>
                </div>
                <div id="validationResults">
                    <div class="result-card">
                        <div class="result-header">
                            <div class="result-title">Name Validation</div>
                            <div class="status status-warning" id="nameStatus">
                                <i class="fas fa-triangle-exclamation"></i> Pending
                            </div>
                        </div>
                        <div class="result-content" id="nameValidation">
                            Enter a data element name and click "Validate" to check it against ISO/IEC 11179 standards.
                        </div>
                    </div>
                    <div class="result-card">
                        <div class="result-header">
                            <div class="result-title">Description Validation</div>
                            <div class="status status-warning" id="descriptionStatus">
                                <i class="fas fa-triangle-exclamation"></i> Pending
                            </div>
                        </div>
                        <div class="result-content" id="descriptionValidation">
                            Enter a data element description and click "Validate" to check it against ISO/IEC 11179 standards.
                        </div>
                    </div>
                    <div class="result-card">
                        <div class="result-header">
                            <div class="result-title">Overall Assessment</div>
                            <div class="status status-warning" id="overallStatus">
                                <i class="fas fa-triangle-exclamation"></i> Pending
                            </div>
                        </div>
                        <div class="result-content" id="overallValidation">
                            Overall quality status will appear here after validation.
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="glass-card">
            <div class="card-header">
                <div class="card-title">
                    <div class="card-icon">
                        <i class="fas fa-wand-sparkles"></i>
                    </div>
                    Enhancement Results
                </div>
            </div>
            <div class="tabs">
                <button class="tab-btn active" data-tab="comparison">Before/After</button>
                <button class="tab-btn" data-tab="details">Enhancement Details</button>
                <button class="tab-btn" data-tab="feedback">Feedback</button>
            </div>
            <div class="tab-content active" id="comparison">
                <div class="comparison">
                    <div class="comparison-card">
                        <div class="comparison-card-header">
                            <i class="fas fa-file-circle-exclamation"></i> Original
                        </div>
                        <div class="comparison-card-content">
                            <p><strong>Name:</strong> <span id="originalName">-</span></p>
                            <p><strong>Description:</strong> <span id="originalDescription">-</span></p>
                        </div>
                    </div>
                    <div class="comparison-card">
                        <div class="comparison-card-header">
                            <i class="fas fa-file-circle-check"></i> Enhanced
                        </div>
                        <div class="comparison-card-content">
                            <p><strong>Name:</strong> <span id="enhancedName">-</span></p>
                            <p><strong>Description:</strong> <span id="enhancedDescription">-</span></p>
                        </div>
                    </div>
                </div>
                <div style="margin-top: 1.5rem;">
                    <h3 style="color: white; margin-bottom: 0.75rem;">Confidence Assessment</h3>
                    <div class="confidence-meter">
                        <div class="confidence-fill" id="confidenceFill" style="width: 0%;"></div>
                    </div>
                    <div class="confidence-value" id="confidenceValue">0%</div>
                </div>
            </div>

            <div class="tab-content" id="details">
                <div class="progress-steps">
                    <div class="step" id="step1">
                        <div class="step-number">1</div>
                        <div class="step-label">Validation</div>
                    </div>
                    <div class="step" id="step2">
                        <div class="step-number">2</div>
                        <div class="step-label">Enhancement</div>
                    </div>
                    <div class="step" id="step3">
                        <div class="step-number">3</div>
                        <div class="step-label">Quality Check</div>
                    </div>
                    <div class="step" id="step4">
                        <div class="step-number">4</div>
                        <div class="step-label">Final Review</div>
                    </div>
                </div>
                <div class="result-card">
                    <div class="result-header">
                        <div class="result-title">Enhancement Process</div>
                    </div>
                    <div class="result-content" id="enhancementProcess">
                        Click "Enhance" to improve your data element according to ISO/IEC 11179 standards.
                    </div>
                </div>
                <div class="result-card">
                    <div class="result-header">
                        <div class="result-title">Quality Status</div>
                        <div class="status status-warning" id="qualityStatus">
                            <i class="fas fa-triangle-exclamation"></i> Not Started
                        </div>
                    </div>
                    <div class="result-content" id="qualityFeedback">
                        Quality assessment will appear here after enhancement.
                    </div>
                </div>
            </div>

            <div class="tab-content" id="feedback">
                <div class="result-card">
                    <div class="result-header">
                        <div class="result-title">Enhancement Feedback</div>
                    </div>
                    <ul class="feedback-list" id="enhancementFeedback">
                        <li class="feedback-item">
                            <div class="feedback-icon"><i class="fas fa-info-circle"></i></div>
                            <div>Enhancement feedback will appear here after processing.</div>
                        </li>
                    </ul>
                </div>
                <div class="result-card">
                    <div class="result-header">
                        <div class="result-title">Suggested Improvements</div>
                    </div>
                    <ul class="feedback-list" id="suggestedImprovements">
                        <li class="feedback-item">
                            <div class="feedback-icon"><i class="fas fa-lightbulb"></i></div>
                            <div>Suggested improvements will appear here after processing.</div>
                        </li>
                    </ul>
                </div>
            </div>
        </div>
    </div>

    <script>
        // DOM Elements
        const form = document.getElementById('dataElementForm');
        const validateBtn = document.getElementById('validateBtn');
        const enhanceBtn = document.getElementById('enhanceBtn');
        const loadingOverlay = document.getElementById('loadingOverlay');
        const toastContainer = document.getElementById('toastContainer');
        
        // Tab Switching
        const tabBtns = document.querySelectorAll('.tab-btn');
        const tabContents = document.querySelectorAll('.tab-content');
        
        tabBtns.forEach(btn => {
            btn.addEventListener('click', () => {
                const tabId = btn.getAttribute('data-tab');
                
                // Update active tab button
                tabBtns.forEach(b => b.classList.remove('active'));
                btn.classList.add('active');
                
                // Show selected tab content
                tabContents.forEach(content => {
                    content.classList.remove('active');
                    if (content.id === tabId) {
                        content.classList.add('active');
                    }
                });
            });
        });
        
        // Show Toast Notification
        function showToast(title, message, type = 'info') {
            const toast = document.createElement('div');
            toast.className = `toast toast-${type}`;
            
            let icon = '';
            switch (type) {
                case 'success': icon = 'check-circle'; break;
                case 'warning': icon = 'triangle-exclamation'; break;
                case 'error': icon = 'circle-exclamation'; break;
                default: icon = 'info-circle';
            }
            
            toast.innerHTML = `
                <div class="toast-icon">
                    <i class="fas fa-${icon}"></i>
                </div>
                <div class="toast-content">
                    <div class="toast-title">${title}</div>
                    <div class="toast-message">${message}</div>
                </div>
            `;
            
            toastContainer.appendChild(toast);
            
            // Remove toast after 5 seconds
            setTimeout(() => {
                toast.style.opacity = '0';
                setTimeout(() => {
                    toastContainer.removeChild(toast);
                }, 300);
            }, 5000);
        }
        
        // Validate Data Element
        validateBtn.addEventListener('click', async () => {
            const elementId = document.getElementById('elementId').value;
            const elementName = document.getElementById('elementName').value;
            const elementDescription = document.getElementById('elementDescription').value;
            const elementExample = document.getElementById('elementExample').value;
            const processName = document.getElementById('processName').value;
            
            if (!elementId || !elementName || !elementDescription) {
                showToast('Validation Error', 'Please fill in all required fields', 'error');
                return;
            }
            
            // Show loading overlay
            loadingOverlay.style.display = 'flex';
            
            try {
                // Call the actual API endpoint
                const response = await fetch('/api/v1/validate', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        id: elementId,
                        existing_name: elementName,
                        existing_description: elementDescription,
                        example: elementExample || null,
                        process_name: processName || null,
                        process_description: null
                    })
                });
                
                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }
                
                const data = await response.json();
                
                // Update validation results
                updateValidationResults(data);
                
                // Hide loading overlay
                loadingOverlay.style.display = 'none';
                
                // Show toast notification
                showToast(
                    'Validation Complete',
                    `Quality Status: ${data.quality_status}`,
                    data.quality_status === 'GOOD' ? 'success' : 'warning'
                );
                
            } catch (error) {
                console.error('Validation error:', error);
                loadingOverlay.style.display = 'none';
                showToast('Validation Error', 'Failed to validate data element: ' + error.message, 'error');
            }
        });
        
        // Enhance Data Element
        enhanceBtn.addEventListener('click', async () => {
            const elementId = document.getElementById('elementId').value;
            const elementName = document.getElementById('elementName').value;
            const elementDescription = document.getElementById('elementDescription').value;
            const elementExample = document.getElementById('elementExample').value;
            const processName = document.getElementById('processName').value;
            
            if (!elementId || !elementName || !elementDescription) {
                showToast('Enhancement Error', 'Please fill in all required fields', 'error');
                return;
            }
            
            // Update steps
            document.getElementById('step1').classList.add('active');
            
            // Show loading overlay
            loadingOverlay.style.display = 'flex';
            
            try {
                // Call the actual API endpoint
                const response = await fetch('/api/v1/enhance', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        data_element: {
                            id: elementId,
                            existing_name: elementName,
                            existing_description: elementDescription,
                            example: elementExample || null,
                            process_name: processName || null,
                            process_description: null
                        },
                        max_iterations: 5
                    })
                });
                
                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }
                
                let enhancementData = await response.json();
                
                // If the enhancement is asynchronous, poll for results
                if (enhancementData.status === "PENDING" || enhancementData.status === "IN_PROGRESS") {
                    // Step 2: Enhancement
                    document.getElementById('step2').classList.add('active');
                    
                    // Poll for enhancement completion
                    enhancementData = await pollEnhancementStatus(enhancementData.request_id);
                    
                    // Step 3: Quality Check
                    document.getElementById('step3').classList.add('active');
                    
                    // Step 4: Final Review
                    document.getElementById('step4').classList.add('active');
                } else {
                    // If it completed immediately, update all steps
                    document.getElementById('step2').classList.add('active');
                    document.getElementById('step3').classList.add('active');
                    document.getElementById('step4').classList.add('active');
                }
                
                // Update enhancement results
                updateEnhancementResults(enhancementData);
                
                // Hide loading overlay
                loadingOverlay.style.display = 'none';
                
                // Show toast notification
                showToast(
                    'Enhancement Complete',
                    'Data element has been enhanced successfully',
                    'success'
                );
                
            } catch (error) {
                console.error('Enhancement error:', error);
                loadingOverlay.style.display = 'none';
                showToast('Enhancement Error', 'Failed to enhance data element: ' + error.message, 'error');
            }
        });
        
        // Poll for enhancement job status
        async function pollEnhancementStatus(requestId) {
            const maxAttempts = 30;
            let attempts = 0;
            
            while (attempts < maxAttempts) {
                try {
                    const response = await fetch(`/api/v1/enhance/${requestId}`);
                    
                    if (!response.ok) {
                        throw new Error(`HTTP error! Status: ${response.status}`);
                    }
                    
                    const data = await response.json();
                    
                    if (data.status === "COMPLETED") {
                        return data;
                    } else if (data.status === "FAILED") {
                        throw new Error(data.error_message || "Enhancement failed");
                    }
                    
                    // Wait before next poll
                    await new Promise(resolve => setTimeout(resolve, 2000));
                    attempts++;
                } catch (error) {
                    console.error("Error polling enhancement status:", error);
                    throw error;
                }
            }
            
            throw new Error("Enhancement timed out after multiple attempts");
        }
        
        // Update Validation Results
        function updateValidationResults(response) {
            // Name validation
            const nameStatus = document.getElementById('nameStatus');
            const nameValidation = document.getElementById('nameValidation');
            
            const nameValid = response.name_valid;
            
            nameStatus.className = `status ${nameValid ? 'status-success' : 'status-danger'}`;
            nameStatus.innerHTML = nameValid 
                ? '<i class="fas fa-check-circle"></i> Valid'
                : '<i class="fas fa-xmark-circle"></i> Invalid';
            
            nameValidation.textContent = response.name_feedback;
            
            // Description validation
            const descriptionStatus = document.getElementById('descriptionStatus');
            const descriptionValidation = document.getElementById('descriptionValidation');
            
            const descriptionValid = response.description_valid;
            
            descriptionStatus.className = `status ${descriptionValid ? 'status-success' : 'status-danger'}`;
            descriptionStatus.innerHTML = descriptionValid 
                ? '<i class="fas fa-check-circle"></i> Valid'
                : '<i class="fas fa-xmark-circle"></i> Invalid';
            
            descriptionValidation.textContent = response.description_feedback;
            
            // Overall assessment
            const overallStatus = document.getElementById('overallStatus');
            const overallValidation = document.getElementById('overallValidation');
            
            let statusClass = '';
            let statusIcon = '';
            let qualityStatus = response.quality_status;
            
            switch (qualityStatus) {
                case 'GOOD':
                    statusClass = 'status-success';
                    statusIcon = 'check-circle';
                    break;
                case 'NEEDS_IMPROVEMENT':
                    statusClass = 'status-warning';
                    statusIcon = 'triangle-exclamation';
                    break;
                case 'POOR':
                    statusClass = 'status-danger';
                    statusIcon = 'xmark-circle';
                    break;
            }
            
            overallStatus.className = `status ${statusClass}`;
            overallStatus.innerHTML = `<i class="fas fa-${statusIcon}"></i> ${qualityStatus.replace('_', ' ')}`;
            
            // Suggested improvements
            let improvementsHtml = '';
            if (response.suggested_improvements && response.suggested_improvements.length > 0) {
                improvementsHtml = '<p>Suggested Improvements:</p><ul style="margin-left: 1.5rem;">';
                response.suggested_improvements.forEach(improvement => {
                    improvementsHtml += `<li>${improvement}</li>`;
                });
                improvementsHtml += '</ul>';
            }
            
            overallValidation.innerHTML = `
                <p>The data element has been assessed against ISO/IEC 11179 standards.</p>
                <p>Quality Status: <strong>${qualityStatus.replace('_', ' ')}</strong></p>
                ${improvementsHtml}
            `;
        }
        
        // Update Enhancement Results
        function updateEnhancementResults(response) {
            const data = response.enhanced_data;
            
            if (!data) {
                showToast('Enhancement Error', 'No enhancement data available', 'error');
                return;
            }
            
            // Update comparison tab
            document.getElementById('originalName').textContent = data.existing_name;
            document.getElementById('originalDescription').textContent = data.existing_description;
            document.getElementById('enhancedName').textContent = data.enhanced_name;
            document.getElementById('enhancedDescription').textContent = data.enhanced_description;
            
            // Update confidence meter
            const confidenceFill = document.getElementById('confidenceFill');
            const confidenceValue = document.getElementById('confidenceValue');
            
            confidenceFill.style.width = `${data.confidence_score * 100}%`;
            confidenceValue.textContent = `${Math.round(data.confidence_score * 100)}%`;
            
            // Update details tab
            const qualityStatus = document.getElementById('qualityStatus');
            const qualityFeedback = document.getElementById('qualityFeedback');
            
            let statusClass = '';
            let statusIcon = '';
            
            switch (data.quality_status) {
                case 'GOOD':
                    statusClass = 'status-success';
                    statusIcon = 'check-circle';
                    break;
                case 'NEEDS_IMPROVEMENT':
                    statusClass = 'status-warning';
                    statusIcon = 'triangle-exclamation';
                    break;
                case 'POOR':
                    statusClass = 'status-danger';
                    statusIcon = 'xmark-circle';
                    break;
            }
            
            qualityStatus.className = `status ${statusClass}`;
            qualityStatus.innerHTML = `<i class="fas fa-${statusIcon}"></i> ${data.quality_status.replace('_', ' ')}`;
            
            const validationFeedbacks = data.validation_feedback || [];
            let validationList = '';
            
            if (validationFeedbacks.length > 0) {
                validationList = '<ul style="margin-left: 1.5rem;">';
                validationFeedbacks.forEach(feedback => {
                    validationList += `<li>${feedback}</li>`;
                });
                validationList += '</ul>';
            } else {
                validationList = '<p>No validation feedback available.</p>';
            }
            
            qualityFeedback.innerHTML = `
                <p>The enhanced data element has gone through ${data.enhancement_iterations} iterations.</p>
                <p>Validation Feedback:</p>
                ${validationList}
            `;
            
            document.getElementById('enhancementProcess').innerHTML = `
                <p>The data element has been enhanced through an iterative process:</p>
                <ol style="margin-left: 1.5rem;">
                    <li>Initial validation to identify issues</li>
                    <li>Application of enhancement rules</li>
                    <li>Quality check to ensure standards compliance</li>
                    <li>Final review and confidence assessment</li>
                </ol>
                <p><strong>Iterations:</strong> ${data.enhancement_iterations}</p>
                <p><strong>Confidence:</strong> ${Math.round(data.confidence_score * 100)}%</p>
            `;
            
            // Update feedback tab
            const enhancementFeedback = document.getElementById('enhancementFeedback');
            const suggestedImprovements = document.getElementById('suggestedImprovements');
            
            const enhancementFeedbacks = data.enhancement_feedback || [];
            let feedbackItems = '';
            
            if (enhancementFeedbacks.length > 0) {
                enhancementFeedbacks.forEach(feedback => {
                    feedbackItems += `
                        <li class="feedback-item">
                            <div class="feedback-icon"><i class="fas fa-check"></i></div>
                            <div>${feedback}</div>
                        </li>
                    `;
                });
            } else {
                feedbackItems = `
                    <li class="feedback-item">
                        <div class="feedback-icon"><i class="fas fa-info-circle"></i></div>
                        <div>No enhancement feedback available.</div>
                    </li>
                `;
            }
            
            enhancementFeedback.innerHTML = feedbackItems;
            
            // If validation feedback includes suggestions, extract them
            const improvements = [];
            for (const feedback of validationFeedbacks) {
                if (feedback.includes('should') || feedback.includes('could') || feedback.includes('improve')) {
                    improvements.push(feedback);
                }
            }
            
            let improvementItems = '';
            
            if (improvements.length > 0) {
                improvements.forEach(improvement => {
                    improvementItems += `
                        <li class="feedback-item">
                            <div class="feedback-icon"><i class="fas fa-lightbulb"></i></div>
                            <div>${improvement}</div>
                        </li>
                    `;
                });
            } else {
                improvementItems = `
                    <li class="feedback-item">
                        <div class="feedback-icon"><i class="fas fa-check-circle"></i></div>
                        <div>No further improvements needed.</div>
                    </li>
                `;
            }
            
            suggestedImprovements.innerHTML = improvementItems;
        }
        
        // Helper: Format Enhanced Name
        function formatEnhancedName(name) {
            // Convert snake_case to spaces
            let formatted = name.replace(/_/g, ' ');
            
            // Convert camelCase to spaces
            formatted = formatted.replace(/([a-z])([A-Z])/g, '$1 $2');
            
            // Lowercase everything
            formatted = formatted.toLowerCase();
            
            // Expand common abbreviations
            const abbreviations = {
                'cust': 'customer',
                'id': 'identifier',
                'num': 'number',
                'acct': 'account',
                'amt': 'amount',
                'bal': 'balance',
                'addr': 'address',
                'desc': 'description',
                'dob': 'date of birth',
                'ssn': 'social security number',
                'ln': 'last name',
                'fn': 'first name'
            };
            
            Object.keys(abbreviations).forEach(abbr => {
                const regex = new RegExp(`\\b${abbr}\\b`, 'gi');
                formatted = formatted.replace(regex, abbreviations[abbr]);
            });
            
            return formatted;
        }
        
        // Helper: Format Enhanced Description
        function formatEnhancedDescription(description) {
            let formatted = description;
            
            // Ensure first letter is capitalized
            formatted = formatted.charAt(0).toUpperCase() + formatted.slice(1);
            
            // Ensure it ends with a period
            if (!formatted.endsWith('.')) {
                formatted += '.';
            }
            
            // Expand and improve common patterns
            if (formatted.includes('ID') || formatted.includes('Id')) {
                formatted = formatted.replace(/\bID\b/g, 'identifier')
                                   .replace(/\bId\b/g, 'identifier');
            }
            
            // Make it more descriptive for short descriptions
            if (formatted.length < 30) {
                if (formatted.toLowerCase().includes('customer')) {
                    formatted = formatted.replace(/\./g, '') + ' used to uniquely identify a customer within the system.';
                } else if (formatted.toLowerCase().includes('date')) {
                    formatted = formatted.replace(/\./g, '') + ' stored in a standardized date format.';
                } else if (formatted.toLowerCase().includes('name')) {
                    formatted = formatted.replace(/\./g, '') + ' as it appears on official identification documents.';
                } else if (formatted.toLowerCase().includes('amount') || formatted.toLowerCase().includes('balance')) {
                    formatted = formatted.replace(/\./g, '') + ' expressed in the system\'s default currency.';
                }
            }
            
            return formatted;
        }
    </script>
</body>
</html>
