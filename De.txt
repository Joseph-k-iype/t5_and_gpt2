/**
 * Data Element Enhancement Tool
 * 
 * This script handles the functionality of the Data Element Enhancement Tool,
 * including form validation, mock API calls, and UI updates.
 */

// Wait for the DOM to be fully loaded
document.addEventListener('DOMContentLoaded', function() {
    // Get DOM elements
    const form = document.getElementById('data-element-form');
    const validateBtn = document.getElementById('validate-btn');
    const enhanceBtn = document.getElementById('enhance-btn');
    const clearBtn = document.getElementById('clear-btn');
    const nameInput = document.getElementById('existing_name');
    const descriptionInput = document.getElementById('existing_description');
    const idInput = document.getElementById('id');
    const loadingIndicator = document.getElementById('loading');
    const validationResult = document.getElementById('validation-result');
    const enhancementResult = document.getElementById('enhancement-result');

    // Generate a unique ID for the data element
    idInput.value = generateUUID();

    // Enable/disable buttons based on form validity
    function updateButtonState() {
        const isValid = nameInput.value.trim() !== '' && descriptionInput.value.trim() !== '';
        validateBtn.disabled = !isValid;
        enhanceBtn.disabled = !isValid;
    }

    // Add input event listeners to form fields
    nameInput.addEventListener('input', updateButtonState);
    descriptionInput.addEventListener('input', updateButtonState);

    // Validate button event listener
    validateBtn.addEventListener('click', function() {
        if (form.checkValidity()) {
            validateDataElement();
        } else {
            showToast('Please fill in all required fields', 'error');
        }
    });

    // Enhance button event listener
    enhanceBtn.addEventListener('click', function() {
        if (form.checkValidity()) {
            enhanceDataElement();
        } else {
            showToast('Please fill in all required fields', 'error');
        }
    });

    // Clear button event listener
    clearBtn.addEventListener('click', function() {
        clearForm();
        showToast('Form cleared', 'info');
    });

    // Function to validate a data element (mock API call)
    async function validateDataElement() {
        showLoading(true);
        hideResults();

        try {
            // In a real app, this would be an API call
            await simulateAPICall(2000);
            
            // Mock validation result
            const formData = getFormData();
            const result = {
                is_valid: formData.existing_name.includes(' ') && formData.existing_description.length > 20,
                quality_status: getQualityStatus(formData),
                feedback: generateValidationFeedback(formData),
                suggested_improvements: generateSuggestedImprovements(formData)
            };
            
            displayValidationResult(result);
            showToast('Validation complete', 'success');
        } catch (error) {
            console.error('Validation error:', error);
            showToast('Error validating data element', 'error');
        } finally {
            showLoading(false);
        }
    }

    // Function to enhance a data element (mock API call)
    async function enhanceDataElement() {
        showLoading(true);
        hideResults();

        try {
            // In a real app, this would be an API call
            await simulateAPICall(3000);
            
            // Get form data
            const formData = getFormData();
            
            // Mock enhancement result
            const result = {
                ...formData,
                enhanced_name: generateEnhancedName(formData.existing_name),
                enhanced_description: generateEnhancedDescription(formData.existing_description),
                quality_status: 'GOOD',
                enhancement_iterations: 1,
                validation_feedback: [
                    generateValidationFeedback(formData), 
                    "The enhanced element now conforms to ISO/IEC 11179 naming and description standards."
                ],
                enhancement_feedback: [
                    "Successfully transformed the name to lowercase with spaces and expanded abbreviations. Extended the description to be more precise and complete."
                ],
                confidence_score: 0.85
            };
            
            displayEnhancementResult(result);
            showToast('Enhancement complete', 'success');
        } catch (error) {
            console.error('Enhancement error:', error);
            showToast('Error enhancing data element', 'error');
        } finally {
            showLoading(false);
        }
    }

    // Get the data from the form
    function getFormData() {
        return {
            id: idInput.value,
            existing_name: nameInput.value.trim(),
            existing_description: descriptionInput.value.trim(),
            example: document.getElementById('example').value.trim(),
            process_name: document.getElementById('process_name').value.trim(),
            process_description: document.getElementById('process_description').value.trim()
        };
    }

    // Clear the form and results
    function clearForm() {
        // Generate new ID
        idInput.value = generateUUID();
        
        // Clear form fields
        nameInput.value = '';
        descriptionInput.value = '';
        document.getElementById('example').value = '';
        document.getElementById('process_name').value = '';
        document.getElementById('process_description').value = '';
        
        // Hide results
        hideResults();
        
        // Update button state
        updateButtonState();
    }

    // Show/hide the loading indicator
    function showLoading(show) {
        loadingIndicator.style.display = show ? 'flex' : 'none';
    }

    // Hide all result sections
    function hideResults() {
        validationResult.style.display = 'none';
        enhancementResult.style.display = 'none';
    }

    // Display validation result
    function displayValidationResult(result) {
        // Update status badge
        const statusBadge = document.getElementById('validation-status');
        statusBadge.textContent = formatStatusText(result.quality_status);
        statusBadge.className = 'status-badge status-' + result.quality_status.toLowerCase();
        
        // Update feedback
        document.getElementById('validation-feedback').textContent = result.feedback;
        
        // Update improvements list
        const improvementsList = document.getElementById('validation-improvements');
        improvementsList.innerHTML = '';
        
        if (result.suggested_improvements && result.suggested_improvements.length > 0) {
            result.suggested_improvements.forEach(improvement => {
                const li = document.createElement('li');
                li.textContent = improvement;
                improvementsList.appendChild(li);
            });
        } else {
            const li = document.createElement('li');
            li.textContent = 'No specific improvements suggested.';
            improvementsList.appendChild(li);
        }
        
        // Show the result section
        validationResult.style.display = 'block';
        
        // Smooth scroll to the result
        validationResult.scrollIntoView({ behavior: 'smooth', block: 'start' });
    }

    // Display enhancement result
    function displayEnhancementResult(result) {
        // Update status badge
        const statusBadge = document.getElementById('enhancement-status');
        statusBadge.textContent = formatStatusText(result.quality_status);
        statusBadge.className = 'status-badge status-' + result.quality_status.toLowerCase();
        
        // Update comparison table
        document.getElementById('original-name').textContent = result.existing_name;
        document.getElementById('enhanced-name').textContent = result.enhanced_name;
        document.getElementById('original-description').textContent = result.existing_description;
        document.getElementById('enhanced-description').textContent = result.enhanced_description;
        
        // Update feedback
        document.getElementById('enhancement-feedback').textContent = result.enhancement_feedback.join('\n\n');
        document.getElementById('enhancement-validation-feedback').textContent = result.validation_feedback.join('\n\n');
        
        // Update confidence score
        const confidencePercent = Math.round(result.confidence_score * 100);
        document.getElementById('confidence-value').textContent = confidencePercent + '%';
        document.getElementById('confidence-bar').style.width = confidencePercent + '%';
        
        // Show the result section
        enhancementResult.style.display = 'block';
        
        // Smooth scroll to the result
        enhancementResult.scrollIntoView({ behavior: 'smooth', block: 'start' });
    }

    // Initialize the form state
    updateButtonState();
});

// Helper Functions

// Generate a UUID for the data element ID
function generateUUID() {
    // Simple UUID generation for the demo
    return 'de-' + Math.random().toString(36).substring(2, 15) + 
           Math.random().toString(36).substring(2, 15);
}

// Simulate an API call with a delay
function simulateAPICall(delay) {
    return new Promise(resolve => setTimeout(resolve, delay));
}

// Show a toast notification
function showToast(message, type = 'info') {
    const toastContainer = document.getElementById('toast-container');
    
    // Create toast element
    const toast = document.createElement('div');
    toast.className = `toast ${type}`;
    
    // Add icon based on type
    let icon = 'info-circle';
    if (type === 'success') icon = 'check-circle';
    if (type === 'error') icon = 'exclamation-circle';
    
    toast.innerHTML = `<i class="fas fa-${icon}"></i><span>${message}</span>`;
    
    // Add to container
    toastContainer.appendChild(toast);
    
    // Animate in
    setTimeout(() => {
        toast.classList.add('show');
    }, 10);
    
    // Remove after delay
    setTimeout(() => {
        toast.classList.remove('show');
        setTimeout(() => {
            toastContainer.removeChild(toast);
        }, 300);
    }, 3000);
}

// Format status text for display
function formatStatusText(status) {
    return status.replace('_', ' ').replace(/\w\S*/g, 
        txt => txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase()
    );
}

// Determine quality status based on form data
function getQualityStatus(formData) {
    const name = formData.existing_name;
    const description = formData.existing_description;
    
    // Check for issues
    const hasUnderscores = name.includes('_');
    const hasUppercase = /[A-Z]/.test(name);
    const hasSpaces = name.includes(' ');
    const isDescriptionShort = description.length < 30;
    const isDescriptionComprehensive = description.length > 50 && description.includes(' ');
    
    // Determine quality status
    if (hasUnderscores || (hasUppercase && !hasSpaces) || isDescriptionShort) {
        return 'POOR';
    } else if (!hasSpaces || !isDescriptionComprehensive) {
        return 'NEEDS_IMPROVEMENT';
    } else {
        return 'GOOD';
    }
}

// Generate validation feedback based on form data
function generateValidationFeedback(data) {
    let feedback = "";
    
    // Name feedback
    feedback += "Name feedback: ";
    if (data.existing_name.includes('_')) {
        feedback += "The name contains underscores which are not allowed per ISO/IEC 11179 standards. ";
    }
    if (data.existing_name.toUpperCase() === data.existing_name) {
        feedback += "The name is all uppercase. Names should be lowercase with spaces between words. ";
    }
    if (!data.existing_name.includes(' ') && data.existing_name.length > 5) {
        feedback += "The name should have spaces between words for readability. ";
    }
    if (/[A-Z]/.test(data.existing_name) && /[a-z]/.test(data.existing_name)) {
        feedback += "The name appears to use camelCase or PascalCase, which is not allowed. ";
    }
    if (data.existing_name.includes('ID')) {
        feedback += "The acronym 'ID' should be expanded to 'identifier' unless universally understood in this context. ";
    }
    
    // Description feedback
    feedback += "\n\nDescription feedback: ";
    if (data.existing_description.length < 20) {
        feedback += "The description is too short. It should fully explain what the data element represents. ";
    }
    if (!data.existing_description.endsWith('.')) {
        feedback += "The description should end with proper punctuation. ";
    }
    if (data.existing_description.split(' ').length < 5) {
        feedback += "The description is not detailed enough. It should be a complete sentence that properly defines the element. ";
    }
    
    return feedback;
}

// Generate suggested improvements based on form data
function generateSuggestedImprovements(data) {
    const improvements = [];
    
    if (data.existing_name.includes('_')) {
        improvements.push("Replace underscores with spaces in the name");
    }
    if (data.existing_name.toUpperCase() === data.existing_name) {
        improvements.push("Convert name to lowercase with spaces between words");
    }
    if (data.existing_name.includes('ID')) {
        improvements.push("Expand 'ID' to 'identifier' in the name");
    }
    if (data.existing_description.length < 30) {
        improvements.push("Expand the description to fully explain what the data element represents");
    }
    if (!data.existing_description.endsWith('.')) {
        improvements.push("Add proper punctuation to the end of the description");
    }
    
    return improvements;
}

// Generate enhanced name based on original name
function generateEnhancedName(name) {
    // Simulate name enhancement logic
    let enhanced = name.toLowerCase();
    
    // Replace underscores and hyphens with spaces
    enhanced = enhanced.replace(/_/g, ' ').replace(/-/g, ' ');
    
    // Replace camelCase with spaces
    enhanced = enhanced.replace(/([a-z])([A-Z])/g, '$1 $2').toLowerCase();
    
    // Expand common abbreviations
    enhanced = enhanced.replace(/\bid\b/i, 'identifier');
    enhanced = enhanced.replace(/\bnum\b/i, 'number');
    enhanced = enhanced.replace(/\bamt\b/i, 'amount');
    enhanced = enhanced.replace(/\bqty\b/i, 'quantity');
    enhanced = enhanced.replace(/\bdesc\b/i, 'description');
    enhanced = enhanced.replace(/\baddr\b/i, 'address');
    
    // Clean up multiple spaces
    enhanced = enhanced.replace(/\s+/g, ' ').trim();
    
    return enhanced;
}

// Generate enhanced description based on original description
function generateEnhancedDescription(description) {
    // Simulate description enhancement
    let enhanced = description;
    
    // Ensure it starts with capitalization
    enhanced = enhanced.charAt(0).toUpperCase() + enhanced.slice(1);
    
    // Ensure it ends with a period
    if (!enhanced.endsWith('.')) {
        enhanced += '.';
    }
    
    // Add more context if description is short
    if (enhanced.length < 30) {
        enhanced = enhanced.replace('.', '') + ' in the data management system.';
    }
    
    // Fix common abbreviations
    enhanced = enhanced.replace(/\bID\b/g, 'identifier');
    enhanced = enhanced.replace(/\binfo\b/i, 'information');
    
    return enhanced;
}
