import React from 'react';
import { X, Globe, Flag, Zap, Code, FileText, AlertTriangle } from 'lucide-react';
import { ParsedRuleNode } from '../types/rules';
import { formatConditionForDisplay } from '../utils/rulesParser';

interface RuleDetailsPanelProps {
  node: ParsedRuleNode | null;
  onClose: () => void;
}

const RuleDetailsPanel: React.FC<RuleDetailsPanelProps> = ({ node, onClose }) => {
  if (!node) return null;

  const { rule, conditions, event, priority, countries, adequacyCountries } = node.data;

  const getPriorityColor = (priority: number) => {
    if (priority >= 80) return 'text-red-600 bg-red-50 border-red-200';
    if (priority >= 60) return 'text-orange-600 bg-orange-50 border-orange-200';
    if (priority >= 40) return 'text-blue-600 bg-blue-50 border-blue-200';
    return 'text-gray-600 bg-gray-50 border-gray-200';
  };

  const getEventTypeColor = (eventType: string) => {
    switch (eventType.toLowerCase()) {
      case 'require':
        return 'text-green-700 bg-green-50 border-green-200';
      case 'forbid':
        return 'text-red-700 bg-red-50 border-red-200';
      case 'permit':
        return 'text-blue-700 bg-blue-50 border-blue-200';
      default:
        return 'text-purple-700 bg-purple-50 border-purple-200';
    }
  };

  return (
    <div className="fixed right-0 top-0 h-full w-96 bg-white shadow-2xl border-l border-gray-200 z-50 overflow-y-auto">
      {/* Header */}
      <div className="sticky top-0 bg-white border-b border-gray-200 px-6 py-4">
        <div className="flex items-center justify-between">
          <h2 className="text-lg font-semibold text-gray-900">Rule Details</h2>
          <button
            onClick={onClose}
            className="p-2 hover:bg-gray-100 rounded-lg transition-colors"
          >
            <X className="w-5 h-5 text-gray-500" />
          </button>
        </div>
      </div>

      <div className="p-6 space-y-6">
        {/* Rule ID and Priority */}
        <div className="flex items-center justify-between">
          <div>
            <span className="text-sm text-gray-500">Rule ID</span>
            <p className="font-mono text-sm text-gray-900">{rule.rule_id || node.id}</p>
          </div>
          <div className={`px-3 py-1 rounded-full text-sm font-medium border ${getPriorityColor(priority)}`}>
            Priority {priority}
          </div>
        </div>

        {/* Rule Text */}
        <div>
          <div className="flex items-center space-x-2 mb-2">
            <FileText className="w-4 h-4 text-gray-600" />
            <span className="text-sm font-medium text-gray-700">Rule Description</span>
          </div>
          <p className="text-sm text-gray-900 bg-gray-50 rounded-lg p-3 leading-relaxed">
            {rule.rule_text || 'No description available'}
          </p>
        </div>

        {/* Event */}
        <div>
          <div className="flex items-center space-x-2 mb-2">
            <Zap className="w-4 h-4 text-gray-600" />
            <span className="text-sm font-medium text-gray-700">Action</span>
          </div>
          <div className={`p-3 rounded-lg border ${getEventTypeColor(event.type)}`}>
            <div className="font-medium text-sm mb-1">{event.type.toUpperCase()}</div>
            {event.params && Object.keys(event.params).length > 0 && (
              <div className="text-xs opacity-75">
                <pre className="font-mono">{JSON.stringify(event.params, null, 2)}</pre>
              </div>
            )}
          </div>
        </div>

        {/* Conditions */}
        <div>
          <div className="flex items-center space-x-2 mb-3">
            <Code className="w-4 h-4 text-gray-600" />
            <span className="text-sm font-medium text-gray-700">
              Conditions ({conditions.length})
            </span>
          </div>
          <div className="space-y-2">
            {conditions.map((condition, index: number) => {
              const display = formatConditionForDisplay(condition);
              return (
                <div key={index} className="bg-gray-50 rounded-lg p-3 border">
                  <div className="font-mono text-sm text-gray-900 mb-1">
                    {display.readable}
                  </div>
                  <div className="flex items-center space-x-4 text-xs text-gray-600">
                    <span>Fact: <code className="bg-gray-200 px-1 rounded">{display.fact}</code></span>
                    <span>Op: <code className="bg-gray-200 px-1 rounded">{display.operator}</code></span>
                  </div>
                </div>
              );
            })}
          </div>
        </div>

        {/* Geographic Scope */}
        <div>
          <div className="flex items-center space-x-2 mb-3">
            <Globe className="w-4 h-4 text-gray-600" />
            <span className="text-sm font-medium text-gray-700">Geographic Scope</span>
          </div>
          
          {/* Applicable Countries */}
          <div className="mb-3">
            <span className="text-xs text-gray-500 uppercase tracking-wide">Applicable Countries</span>
            <div className="mt-1 flex flex-wrap gap-1">
              {countries.length > 0 ? (
                countries.map((country: string, index: number) => (
                  <span key={index} className="px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded-full">
                    {country}
                  </span>
                ))
              ) : (
                <span className="text-sm text-gray-500 italic">No specific countries</span>
              )}
            </div>
          </div>

          {/* Adequacy Countries */}
          {adequacyCountries.length > 0 && (
            <div>
              <div className="flex items-center space-x-1 mb-1">
                <Flag className="w-3 h-3 text-green-600" />
                <span className="text-xs text-gray-500 uppercase tracking-wide">Adequacy Countries</span>
              </div>
              <div className="flex flex-wrap gap-1">
                {adequacyCountries.map((country: string, index: number) => (
                  <span key={index} className="px-2 py-1 bg-green-100 text-green-800 text-xs rounded-full">
                    {country}
                  </span>
                ))}
              </div>
            </div>
          )}
        </div>

        {/* Raw JSON */}
        <div>
          <div className="flex items-center justify-between mb-2">
            <div className="flex items-center space-x-2">
              <AlertTriangle className="w-4 h-4 text-gray-600" />
              <span className="text-sm font-medium text-gray-700">Raw Rule JSON</span>
            </div>
          </div>
          <details className="group">
            <summary className="cursor-pointer text-sm text-blue-600 hover:text-blue-800">
              Show JSON structure
            </summary>
            <pre className="mt-2 p-3 bg-gray-900 text-gray-100 text-xs rounded-lg overflow-x-auto">
              {JSON.stringify(rule, null, 2)}
            </pre>
          </details>
        </div>
      </div>
    </div>
  );
};

export default RuleDetailsPanel;
