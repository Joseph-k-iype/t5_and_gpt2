import os
import time
import logging
from typing import Optional
from dotenv import load_dotenv
from azure.identity import DefaultAzureCredential
from langchain.chat_models import AzureChatOpenAI
from langchain.schema import AIMessage, HumanMessage, SystemMessage
from langchain.memory import ConversationBufferMemory
from langchain.chains import ConversationChain
from langchain.callbacks import get_openai_callback

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Load environment variables
load_dotenv()

class AzureAuthenticator:
    """Handles Azure authentication and token management."""
    
    def __init__(self):
        try:
            self.credential = DefaultAzureCredential()
            self._validate_endpoint()
        except Exception as e:
            logger.error(f"Failed to initialize Azure credentials: {str(e)}")
            raise

    def _validate_endpoint(self):
        """Validate that the Azure endpoint is configured."""
        self.endpoint = os.getenv("AZURE_OPENAI_ENDPOINT")
        if not self.endpoint:
            raise ValueError(
                "AZURE_OPENAI_ENDPOINT environment variable is not set. "
                "Please set it in your .env file or environment variables."
            )

    def get_token(self) -> str:
        """
        Get Azure AD token for cognitive services.
        
        Returns:
            str: The access token
            
        Raises:
            Exception: If token acquisition fails
        """
        try:
            token = self.credential.get_token("https://cognitiveservices.azure.com/.default")
            return token.token
        except Exception as e:
            logger.error(f"Failed to get Azure AD token: {str(e)}")
            raise

class ChatbotConfig:
    """Configuration settings for the chatbot."""
    
    def __init__(self):
        self.model_name = "gpt-35-turbo"  # Default model
        self.temperature = 0.7
        self.max_tokens = 800
        self.api_version = "2024-02-01"
        self.system_message = """You are a helpful AI assistant. Be concise, clear, and friendly in your responses."""

class AzureChatBot:
    """
    Azure OpenAI-powered chatbot using LangChain.
    """
    
    def __init__(self, config: Optional[ChatbotConfig] = None):
        """
        Initialize the chatbot with Azure authentication and LangChain components.
        
        Args:
            config (ChatbotConfig, optional): Configuration settings for the chatbot
        """
        self.config = config or ChatbotConfig()
        self._setup_authentication()
        self._initialize_chat_model()
        self._setup_conversation()

    def _setup_authentication(self):
        """Set up Azure authentication and get initial token."""
        try:
            self.authenticator = AzureAuthenticator()
            self.access_token = self.authenticator.get_token()
            self.token_refresh_time = time.time()
        except Exception as e:
            logger.error(f"Authentication setup failed: {str(e)}")
            raise

    def _initialize_chat_model(self):
        """Initialize the Azure OpenAI chat model."""
        try:
            self.llm = AzureChatOpenAI(
                model_name=self.config.model_name,
                temperature=self.config.temperature,
                max_tokens=self.config.max_tokens,
                openai_api_version=self.config.api_version,
                azure_endpoint=self.authenticator.endpoint,
                azure_ad_token=self.access_token
            )
        except Exception as e:
            logger.error(f"Failed to initialize chat model: {str(e)}")
            raise

    def _setup_conversation(self):
        """Set up conversation memory and chain."""
        try:
            self.memory = ConversationBufferMemory()
            self.conversation = ConversationChain(
                llm=self.llm,
                memory=self.memory,
                verbose=True
            )
            
            # Initialize with system message
            self.memory.chat_memory.messages.append(
                SystemMessage(content=self.config.system_message)
            )
        except Exception as e:
            logger.error(f"Failed to setup conversation: {str(e)}")
            raise

    def refresh_token_if_needed(self):
        """Refresh the access token if it's older than 55 minutes."""
        current_time = time.time()
        if current_time - self.token_refresh_time > 3300:  # 55 minutes
            try:
                self.access_token = self.authenticator.get_token()
                self.token_refresh_time = current_time
                self.llm.azure_ad_token = self.access_token
                logger.info("Successfully refreshed access token")
            except Exception as e:
                logger.error(f"Failed to refresh token: {str(e)}")
                raise

    def chat(self, user_input: str) -> str:
        """
        Process user input and return the chatbot's response.
        
        Args:
            user_input (str): The user's message
            
        Returns:
            str: The chatbot's response
        """
        if not user_input.strip():
            return "Please provide a non-empty message."
            
        try:
            self.refresh_token_if_needed()
            
            # Track token usage
            with get_openai_callback() as cb:
                response = self.conversation.predict(input=user_input)
                logger.info(f"Tokens used: {cb.total_tokens} (Prompt: {cb.prompt_tokens}, Completion: {cb.completion_tokens})")
            
            return response
            
        except Exception as e:
            error_msg = f"Error processing message: {str(e)}"
            logger.error(error_msg)
            return error_msg

    def get_conversation_history(self) -> list:
        """
        Get the current conversation history.
        
        Returns:
            list: List of conversation messages
        """
        return self.memory.chat_memory.messages

def main():
    """Main function to run the chatbot."""
    try:
        # Initialize chatbot
        print("Initializing chatbot...")
        chatbot = AzureChatBot()
        print("\nChatbot initialized successfully!")
        print("Type 'quit', 'exit', or 'bye' to end the conversation.")
        print("Type 'history' to see the conversation history.")
        print("-" * 50)

        # Main chat loop
        while True:
            user_input = input("\nYou: ").strip()
            
            # Check for exit commands
            if user_input.lower() in ['quit', 'exit', 'bye']:
                print("Goodbye!")
                break
                
            # Check for history command
            if user_input.lower() == 'history':
                messages = chatbot.get_conversation_history()
                print("\nConversation History:")
                for msg in messages:
                    if isinstance(msg, SystemMessage):
                        print(f"System: {msg.content}")
                    elif isinstance(msg, HumanMessage):
                        print(f"You: {msg.content}")
                    elif isinstance(msg, AIMessage):
                        print(f"Bot: {msg.content}")
                continue

            # Get response from chatbot
            response = chatbot.chat(user_input)
            print(f"\nBot: {response}")

    except Exception as e:
        logger.error(f"Fatal error: {str(e)}")
        print("\nAn error occurred. Please check the logs for details.")

if __name__ == "__main__":
    main()
