#!/bin/bash
set -e

# Function to check if Docker is installed
check_docker() {
    if ! command -v docker &> /dev/null; then
        echo "Error: Docker is not installed or not in PATH."
        echo "Please install Docker before running this script."
        exit 1
    fi
}

# Function to check if Docker Compose is installed
check_docker_compose() {
    if ! command -v docker-compose &> /dev/null; then
        echo "Error: Docker Compose is not installed or not in PATH."
        echo "Please install Docker Compose before running this script."
        exit 1
    fi
}

# Function to create required directories
create_directories() {
    echo "Creating required directories..."
    mkdir -p data/chroma_db
    mkdir -p logs
    mkdir -p env
    mkdir -p init-db
    
    # Ensure the init.sql file is in place
    if [ ! -f "init-db/init.sql" ]; then
        if [ -f "init-db-sql" ]; then
            cp init-db-sql init-db/init.sql
        fi
    fi
    
    # Create an empty .env file if it doesn't exist
    if [ ! -f ".env" ]; then
        touch .env
        echo "Created empty .env file. Please add your Azure OpenAI credentials to it."
    fi
}

# Function to build the Docker image
build_image() {
    echo "Building Docker image..."
    docker build -t data-element-enhancement-api .
    echo "Docker image built successfully!"
}

# Function to start the services
start_services() {
    echo "Starting services with Docker Compose..."
    docker-compose up -d
    echo "Services started successfully!"
    echo "API is available at: http://localhost:8000"
    echo "API documentation: http://localhost:8000/docs"
    echo "Dashboard: http://localhost:8000/api/dashboard"
}

# Function to stop the services
stop_services() {
    echo "Stopping services..."
    docker-compose down
    echo "Services stopped successfully!"
}

# Function to display logs
show_logs() {
    echo "Displaying logs. Press Ctrl+C to exit."
    docker-compose logs -f
}

# Function to clean up everything
cleanup() {
    echo "Cleaning up..."
    docker-compose down -v --rmi all --remove-orphans
    echo "Cleanup completed!"
}

# Main execution
case "$1" in
    setup)
        check_docker
        check_docker_compose
        create_directories
        echo "Setup completed successfully!"
        ;;
    build)
        check_docker
        build_image
        ;;
    start)
        check_docker
        check_docker_compose
        docker-compose up -d
        echo "Services started successfully!"
        ;;
    stop)
        check_docker
        check_docker_compose
        stop_services
        ;;
    restart)
        check_docker
        check_docker_compose
        stop_services
        start_services
        ;;
    logs)
        check_docker
        check_docker_compose
        show_logs
        ;;
    clean)
        check_docker
        check_docker_compose
        cleanup
        ;;
    *)
        echo "Data Element Enhancement API Management Script"
        echo ""
        echo "Usage: $0 [command]"
        echo ""
        echo "Commands:"
        echo "  setup    - Create necessary directories and prepare the environment"
        echo "  build    - Build the Docker image"
        echo "  start    - Start the services"
        echo "  stop     - Stop the services"
        echo "  restart  - Restart the services"
        echo "  logs     - Show service logs"
        echo "  clean    - Clean up all resources, including volumes and images"
        ;;
esac

exit 0
