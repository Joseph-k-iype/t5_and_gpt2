import pandas as pd
import requests
import json

# Function to flatten nested JSON (including arrays)
def flatten_json(nested_json, prefix=''):
    flattened = {}
    for key, value in nested_json.items():
        if isinstance(value, dict):
            flattened.update(flatten_json(value, prefix + key + '_'))
        elif isinstance(value, list):
            # For simple arrays, join with comma
            if all(isinstance(item, (str, int, float, bool)) for item in value):
                flattened[prefix + key] = ','.join(str(item) for item in value)
            # For arrays of objects, create separate columns
            elif all(isinstance(item, dict) for item in value):
                for i, item in enumerate(value):
                    flattened.update(flatten_json(item, prefix + key + f'_{i}_'))
            else:
                # Mixed arrays - convert to string
                flattened[prefix + key] = str(value)
        else:
            flattened[prefix + key] = value
    return flattened

# Assuming you have a DataFrame 'df' with job_ids
# If not, create or load it first: df = pd.read_csv('your_file.csv')

# Create empty list to store all job data
all_job_data = []

# Process each job ID
for job_id in df['job_id']:  # Adjust column name if different
    url = f"api/mapping/jobs/{job_id}"
    
    try:
        response = requests.get(url)
        
        if response.status_code == 200:
            data = response.json()
            # Add job_id to the data for reference
            data['job_id'] = job_id
            # Flatten the JSON
            flattened_data = flatten_json(data)
            all_job_data.append(flattened_data)
        else:
            print(f"Error fetching job ID {job_id}: {response.status_code}")
    except Exception as e:
        print(f"Exception for job ID {job_id}: {str(e)}")

# Create DataFrame from all collected job data
result_df = pd.DataFrame(all_job_data)

# Save to CSV if needed
# result_df.to_csv('job_data.csv', index=False)

print(result_df.head())
