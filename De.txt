import logging
from fastapi import APIRouter, Depends, BackgroundTasks, HTTPException
from app.core.models import EnhancementRequest, EnhancementResponse, EnhancementStatus, DataElement, Process
from app.core.db_manager import DBManager
from app.utils.compatibility_utils import convert_legacy_processes_in_request, create_process_from_legacy
from app.agents.workflow import DataEnhancementWorkflow
from app.config.settings import get_llm

# Import the enhancement_jobs dictionary
from app.api.routes.enhancement import enhancement_jobs

logger = logging.getLogger(__name__)

# Modified enhancement endpoint to handle the new process structure
async def enhance_data_element(
    request: EnhancementRequest,
    background_tasks: BackgroundTasks,
    db: DBManager = Depends(lambda: DBManager())
):
    """
    Enhance a data element to meet ISO/IEC 11179 standards.
    This is an asynchronous operation that will run in the background.
    
    Args:
        request: Enhancement request with data element
        background_tasks: FastAPI background tasks
        db: Database manager
        
    Returns:
        EnhancementResponse with request ID and status
    """
    try:
        # Handle legacy process fields in the data element
        data_element = request.data_element
        
        # Check if this is a legacy data element with process_name or process_description
        if hasattr(data_element, "process_name") or hasattr(data_element, "process_description"):
            # Convert legacy process fields to a Process object
            process_name = getattr(data_element, "process_name", None)
            process_description = getattr(data_element, "process_description", None)
            
            if process_name or process_description:
                # Create a process entry
                process = create_process_from_legacy(process_name, process_description)
                
                # Create a new data element with the processes field
                new_data_element = DataElement(
                    id=data_element.id,
                    existing_name=data_element.existing_name,
                    existing_description=data_element.existing_description,
                    example=getattr(data_element, "example", None),
                    processes=[process] if process else [],
                    cdm=getattr(data_element, "cdm", None)
                )
                
                # Update the request
                request.data_element = new_data_element
        
        # Use the provided ID as the request ID for tracking
        request_id = request.data_element.id
        logger.info(f"Enhancement request received for data element: {request_id}")
        
        # Check if this ID is already being processed in memory
        if request_id in enhancement_jobs:
            logger.info(f"Enhancement job already exists in memory for ID: {request_id}")
            job = enhancement_jobs[request_id]
            
            # If already completed or failed, return the result
            if job["status"] in [EnhancementStatus.COMPLETED, EnhancementStatus.FAILED]:
                return EnhancementResponse(
                    request_id=request_id,
                    status=job["status"],
                    enhanced_data=job.get("result"),  # Use get() to avoid KeyError
                    error_message=job.get("error")
                )
            
            # Otherwise, return the current status
            return EnhancementResponse(
                request_id=request_id,
                status=job["status"],
                enhanced_data=None,
                error_message=None
            )
        
        # Check if job exists in the database
        db_job = db.get_job(request_id)
        if db_job is not None:
            # Job exists in database
            status = EnhancementStatus(db_job["status"])
            
            # Load job data from database to memory for faster access
            enhancement_jobs[request_id] = {
                "status": status,
                "request": db_job["data"].get("request", {}),
                "result": db_job["data"].get("result"),
                "error": db_job["data"].get("error")
            }
            
            # If already completed or failed, return the result
            if status in [EnhancementStatus.COMPLETED, EnhancementStatus.FAILED]:
                return EnhancementResponse(
                    request_id=request_id,
                    status=status,
                    enhanced_data=enhancement_jobs[request_id].get("result"),
                    error_message=enhancement_jobs[request_id].get("error")
                )
            
            # Otherwise, return the current status
            return EnhancementResponse(
                request_id=request_id,
                status=status,
                enhanced_data=None,
                error_message=None
            )
        
        # Initialize job status in memory - important to set all fields
        enhancement_jobs[request_id] = {
            "status": EnhancementStatus.PENDING,
            "request": request.dict(),
            "result": None,
            "error": None
        }
        
        # Store job in database
        db.store_job(
            job_id=request_id,
            job_type="enhancement",
            status=EnhancementStatus.PENDING.value,
            data={
                "request": request.dict(),
                "result": None,
                "error": None
            }
        )
        
        # Add the enhancement task to the background tasks
        background_tasks.add_task(
            run_enhancement_job,
            request_id=request_id,
            data_element=request.data_element,
            max_iterations=request.max_iterations
        )
        
        return EnhancementResponse(
            request_id=request_id,
            status=EnhancementStatus.PENDING,
            enhanced_data=None,
            error_message=None
        )
    except Exception as e:
        logger.error(f"Error processing enhancement request: {e}", exc_info=True)
        raise HTTPException(status_code=500, detail=f"Error processing enhancement request: {str(e)}")

async def run_enhancement_job(request_id: str, data_element: DataElement, max_iterations: int = 5):
    """
    Run the enhancement job in the background.
    
    Args:
        request_id: ID of the enhancement job
        data_element: The data element to enhance
        max_iterations: Maximum number of enhancement iterations
    """
    logger.info(f"Starting enhancement job for {request_id}")
    workflow = DataEnhancementWorkflow(get_llm())
    db = DBManager()
    
    try:
        # Update job status to in progress
        enhancement_jobs[request_id]["status"] = EnhancementStatus.IN_PROGRESS
        
        # Update database status
        db.store_job(
            job_id=request_id,
            job_type="enhancement",
            status=EnhancementStatus.IN_PROGRESS.value,
            data=enhancement_jobs[request_id]
        )
        
        # Run the workflow
        result = await workflow.run(data_element, max_iterations)
        
        # Update job status to completed in memory
        enhancement_jobs[request_id]["status"] = EnhancementStatus.COMPLETED
        enhancement_jobs[request_id]["result"] = result
        enhancement_jobs[request_id]["error"] = None
        
        logger.info(f"Job result: {result}")
        
        # Update database with result - important to convert result to dict
        db.store_job(
            job_id=request_id,
            job_type="enhancement",
            status=EnhancementStatus.COMPLETED.value,
            data={
                "request": enhancement_jobs[request_id]["request"],
                "result": result.dict(),
                "error": None
            }
        )
        
        logger.info(f"Enhancement job completed for {request_id}")
        
    except Exception as e:
        # Update job status to failed in memory
        logger.error(f"Enhancement job failed for {request_id}: {str(e)}")
        
        if request_id in enhancement_jobs:
            enhancement_jobs[request_id]["status"] = EnhancementStatus.FAILED
            enhancement_jobs[request_id]["error"] = str(e)
            enhancement_jobs[request_id]["result"] = None
        
            # Update database with error
            db.store_job(
                job_id=request_id,
                job_type="enhancement",
                status=EnhancementStatus.FAILED.value,
                data={
                    "request": enhancement_jobs[request_id]["request"],
                    "result": None,
                    "error": str(e)
                }
            )
        else:
            logger.error(f"Job {request_id} not found in memory after failure")
