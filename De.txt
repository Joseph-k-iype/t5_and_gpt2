from langchain.chat_models import AzureChatOpenAI
from langchain.schema import HumanMessage, SystemMessage
from langchain.chains import ConversationChain
from langchain.memory import ConversationBufferMemory
import os
from dotenv import load_dotenv
from azure.identity import DefaultAzureCredential
import time

# Load environment variables from .env file
load_dotenv()

class AzureAuthenticator:
    def __init__(self):
        # Initialize DefaultAzureCredential
        self.credential = DefaultAzureCredential()
        
    def get_token(self):
        """Get Azure AD token using DefaultAzureCredential"""
        try:
            # Get token for Azure OpenAI scope
            token = self.credential.get_token("https://cognitiveservices.azure.com/.default")
            return token.token
        except Exception as e:
            print(f"Error getting Azure AD token: {str(e)}")
            raise

class AzureChatBot:
    def __init__(self):
        # Initialize Azure AD authenticator
        self.authenticator = AzureAuthenticator()
        
        # Get initial token
        self.access_token = self.authenticator.get_token()
        self.token_refresh_time = time.time()
        
        # Initialize Azure OpenAI chat model
        self.llm = AzureChatOpenAI(
            model_name="gpt-35-turbo",  # Base model name
            temperature=0.7,
            openai_api_version="2024-02-01",
            azure_endpoint=os.getenv("AZURE_OPENAI_ENDPOINT"),
            azure_ad_token=self.access_token
        )
        
        # Initialize conversation memory
        self.memory = ConversationBufferMemory()
        
        # Initialize conversation chain
        self.conversation = ConversationChain(
            llm=self.llm,
            memory=self.memory,
            verbose=True
        )
    
    def refresh_token_if_needed(self):
        """Refresh the access token if it's older than 55 minutes"""
        current_time = time.time()
        if current_time - self.token_refresh_time > 3300:  # 55 minutes in seconds
            self.access_token = self.authenticator.get_token()
            self.token_refresh_time = current_time
            self.llm.azure_ad_token = self.access_token
    
    def chat(self, user_input: str) -> str:
        """
        Process user input and return the chatbot's response
        
        Args:
            user_input (str): The user's message
            
        Returns:
            str: The chatbot's response
        """
        try:
            # Refresh token if needed
            self.refresh_token_if_needed()
            
            # Get response from the model
            response = self.conversation.predict(input=user_input)
            return response
        except Exception as e:
            return f"An error occurred: {str(e)}"

def main():
    # Check for required environment variable
    if not os.getenv("AZURE_OPENAI_ENDPOINT"):
        print("Missing AZURE_OPENAI_ENDPOINT environment variable.")
        print("Please create a .env file with:")
        print("""
        AZURE_OPENAI_ENDPOINT=your_endpoint
        
        # DefaultAzureCredential will automatically try the following methods:
        # 1. Environment variables (AZURE_CLIENT_ID, AZURE_TENANT_ID, AZURE_CLIENT_SECRET)
        # 2. Managed Identity
        # 3. Visual Studio Code credentials
        # 4. Azure CLI credentials
        # 5. Azure PowerShell credentials
        """)
        return

    # Initialize chatbot
    try:
        chatbot = AzureChatBot()
        print("Chatbot initialized successfully. Type 'quit' to exit.")
        
        # Main chat loop
        while True:
            user_input = input("You: ").strip()
            
            if user_input.lower() in ['quit', 'exit', 'bye']:
                print("Goodbye!")
                break
            
            response = chatbot.chat(user_input)
            print(f"Bot: {response}")
            
    except Exception as e:
        print(f"Error initializing chatbot: {str(e)}")

if __name__ == "__main__":
    main()
