// Core Message Types
export interface Message {
  id: string;
  type: 'user' | 'assistant' | 'error' | 'system';
  content: string;
  timestamp: string;
  confidence?: 'low' | 'medium' | 'high' | 'unknown';
  intent?: string;
  approach?: string;
  metadata?: {
    thread_id?: string;
    processing_time?: string;
    research_result?: ResearchState;
    iterations?: number;
    sources?: string[];
    [key: string]: any;
  };
}

// Chat Session Types
export interface ChatSession {
  session_id: string;
  thread_id: string;
  status: 'ready' | 'processing' | 'error';
  message?: string;
  created_at: string;
}

// Thought Process Types
export interface ThoughtProcess {
  timestamp: string;
  content: string;
  type: 'analysis' | 'processing' | 'research' | 'planning' | 'synthesis';
  agent?: string;
  confidence?: number;
  metadata?: {
    iteration?: number;
    step?: string;
    duration?: number;
    [key: string]: any;
  };
}

// Research Types
export interface ResearchState {
  query: string;
  iterations_completed: number;
  confidence: 'low' | 'medium' | 'high' | 'unknown';
  accumulated_knowledge: Record<string, any>;
  final_report: string;
  is_processing?: boolean;
  research_plan?: ResearchPlan;
  knowledge_gaps?: string[];
  current_iteration?: number;
  max_iterations?: number;
}

export interface ResearchPlan {
  main_topic: string;
  research_objectives: string[];
  sections: Array<{
    title: string;
    description: string;
  }>;
  sub_queries: string[];
  expected_jurisdictions: string[];
  complexity_level: 'simple' | 'moderate' | 'complex';
  estimated_depth: number;
}

export interface ResearchIteration {
  iteration_number: number;
  queries: string[];
  search_results: SearchResult[];
  findings: string[];
  knowledge_gaps: string[];
  confidence_score: number;
  next_queries: string[];
  should_continue: boolean;
  duration?: number;
  timestamp: string;
}

// Search and Document Types
export interface SearchResult {
  content: string;
  title: string;
  document_type: string;
  jurisdiction: string;
  framework_type: string;
  article_number?: string;
  chapter_number: string;
  score: number;
  chunk_id?: string;
  article_id?: string;
  page_number?: number;
  key_concepts?: string[];
  supporting_references?: Array<{
    title: string;
    url?: string;
    type: string;
  }>;
  metadata?: Record<string, any>;
}

export interface Document {
  page_content: string;
  metadata: {
    title?: string;
    jurisdiction?: string;
    document_type?: string;
    framework_type?: string;
    article_number?: string;
    chapter_number?: string;
    chunk_id?: string;
    article_id?: string;
    page_number?: number;
    _score?: number;
    _id?: string;
    [key: string]: any;
  };
}

// API Types
export interface ApiResponse<T = any> {
  success: boolean;
  data?: T;
  error?: string;
  message?: string;
  timestamp: string;
}

export interface SendMessageRequest {
  session_id: string;
  message: string;
}

export interface SendMessageResponse {
  status: 'processing' | 'completed' | 'error';
  message: string;
  user_message: Message;
  ai_message?: Message;
}

export interface StartResearchRequest {
  session_id: string;
  topic: string;
  max_iterations?: number;
}

export interface StartResearchResponse {
  status: 'research_started' | 'error';
  topic: string;
  max_iterations: number;
  research_id?: string;
}

export interface HealthCheckResponse {
  status: 'healthy' | 'unhealthy';
  timestamp: string;
  chatbot_ready: boolean;
  services?: {
    elasticsearch: boolean;
    openai: boolean;
    websocket: boolean;
  };
}

export interface DiagnosticsResponse {
  status: 'ready' | 'not_ready' | 'error';
  diagnostics: {
    elasticsearch: {
      connected: boolean;
      version: string;
      indices: Record<string, {
        exists: boolean;
        document_count?: number;
      }>;
    };
    deep_research: {
      iterator_available: boolean;
      max_iterations_supported: number;
      research_planning: boolean;
      iterative_refinement: boolean;
      knowledge_gap_analysis: boolean;
    };
  };
  active_sessions: number;
  errors?: string[];
}

// System Types
export interface SystemStatus {
  chatbot_ready: boolean;
  active_sessions: number;
  elasticsearch_connected?: boolean;
  openai_connected?: boolean;
  websocket_connected?: boolean;
  last_updated: string;
}

export interface ConversationContext {
  thread_id: string;
  query: string;
  intent?: string;
  entities?: string[];
  previous_searches?: Array<{
    query: string;
    results: number;
    timestamp: string;
  }>;
  conversation_history?: Message[];
  current_analysis?: {
    intent: string;
    complexity: string;
    entities: string[];
    domain_focus: string;
    requires_cross_analysis: boolean;
    optimal_approach: string;
    response_format: string;
    reasoning: string;
  };
}

// Privacy Framework Types
export interface PrivacyFramework {
  id: string;
  name: string;
  jurisdiction: string;
  type: 'regulation' | 'standard' | 'guideline' | 'framework';
  description: string;
  key_concepts: string[];
  articles?: PrivacyArticle[];
  effective_date?: string;
  scope: string[];
}

export interface PrivacyArticle {
  id: string;
  number: string;
  title: string;
  content: string;
  framework_id: string;
  chapter?: string;
  section?: string;
  key_terms: string[];
  related_articles: string[];
  compliance_requirements?: string[];
}

// UI Component Types
export interface ToastNotification {
  id: string;
  type: 'success' | 'error' | 'warning' | 'info';
  title: string;
  message: string;
  duration?: number;
  timestamp: string;
}

export interface LoadingState {
  isLoading: boolean;
  message?: string;
  progress?: number;
  type?: 'dots' | 'spinner' | 'pulse' | 'brain' | 'research';
}

// WebSocket Event Types
export interface WebSocketEvents {
  // Connection events
  connect: () => void;
  disconnect: (reason: string) => void;
  connected: (data: { status: string }) => void;
  
  // Session events
  join_session: (data: { session_id: string }) => void;
  session_joined: (data: { session_id: string; status: string }) => void;
  session_error: (data: { error: string }) => void;
  
  // Message events
  message_response: (data: {
    session_id: string;
    message: Message;
    user_message: Message;
  }) => void;
  message_error: (data: {
    session_id: string;
    error: Message;
  }) => void;
  
  // Thinking events
  thinking_start: (data: {
    session_id: string;
    message: string;
  }) => void;
  thinking_update: (data: {
    session_id: string;
    thought: string;
    thoughts: ThoughtProcess[];
  }) => void;
  
  // Research events
  research_start: (data: {
    session_id: string;
    topic: string;
    max_iterations: number;
  }) => void;
  research_complete: (data: {
    session_id: string;
    result: ResearchState;
  }) => void;
  research_error: (data: {
    session_id: string;
    error: string;
  }) => void;
}

// Navigation Types
export type ViewType = 'chat' | 'research' | 'diagnostics';

export interface NavigationItem {
  id: ViewType;
  label: string;
  icon: string;
  description: string;
  badge?: string | number;
}

// Animation Types
export interface AnimationVariants {
  initial: any;
  animate: any;
  exit?: any;
  hover?: any;
  tap?: any;
}

// Theme Types
export interface Theme {
  name: string;
  colors: {
    primary: string;
    secondary: string;
    accent: string;
    background: string;
    surface: string;
    text: string;
    textSecondary: string;
    border: string;
    success: string;
    warning: string;
    error: string;
  };
  glassmorphism: {
    background: string;
    backdrop: string;
    border: string;
    shadow: string;
  };
}

// Error Types
export interface AppError {
  code: string;
  message: string;
  details?: any;
  timestamp: string;
  recoverable: boolean;
}

// Utility Types
export type DeepPartial<T> = {
  [P in keyof T]?: T[P] extends object ? DeepPartial<T[P]> : T[P];
};

export type RequiredFields<T, K extends keyof T> = T & Required<Pick<T, K>>;

export type OptionalFields<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;

// Export all types as a namespace for easier imports
export namespace PrivacyChatbot {
  export type Message = Message;
  export type ChatSession = ChatSession;
  export type ThoughtProcess = ThoughtProcess;
  export type ResearchState = ResearchState;
  export type SearchResult = SearchResult;
  export type SystemStatus = SystemStatus;
  export type ViewType = ViewType;
  export type Theme = Theme;
  export type AppError = AppError;
}
