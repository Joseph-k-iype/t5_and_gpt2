"""
Models for mapping job tracking.
"""

from pydantic import BaseModel, Field, validator
from typing import Optional, List, Dict, Any, Union
from datetime import datetime
from uuid import uuid4
from enum import Enum
from app.models.base import BaseResponse
from app.models.mapping import MappingRequest, MappingResult


class JobStatus(str, Enum):
    """Enum for job status."""
    PENDING = "pending"
    IN_PROGRESS = "in_progress"
    COMPLETED = "completed"
    FAILED = "failed"


class MappingJob(BaseModel):
    """
    Model for tracking mapping jobs.
    """
    id: str = Field(default_factory=lambda: str(uuid4()))
    process_id: str = Field(default_factory=lambda: str(uuid4()))
    status: JobStatus = Field(default=JobStatus.PENDING)
    created_at: datetime = Field(default_factory=datetime.now)
    updated_at: datetime = Field(default_factory=datetime.now)
    completed_at: Optional[datetime] = None
    request: MappingRequest
    results: Optional[List[MappingResult]] = None
    error: Optional[str] = None
    
    def update_status(self, status: JobStatus):
        """Update job status and updated_at timestamp."""
        self.status = status
        self.updated_at = datetime.now()
        if status == JobStatus.COMPLETED:
            self.completed_at = datetime.now()


class MappingJobResponse(BaseResponse):
    """
    Response model for mapping job endpoints.
    """
    job: Optional[MappingJob] = None


class MappingJobsResponse(BaseResponse):
    """
    Response model for listing mapping jobs.
    """
    jobs: List[MappingJob] = []
    total: int = 0
    page: int = 1
    page_size: int = 10


class JobStatusUpdateRequest(BaseModel):
    """
    Request model for updating job status.
    """
    status: JobStatus
    results: Optional[List[MappingResult]] = None
    error: Optional[str] = None
