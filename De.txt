import React, { useState, useRef, useEffect } from 'react';
import { motion } from 'framer-motion';
import { Send, Search, Loader2, Clock } from 'lucide-react';
import { useHotkeys } from 'react-hotkeys-hook';
import { useChat } from '../../hooks/useChat';

const ChatInput = ({ onSendMessage, disabled = false }) => {
  const [message, setMessage] = useState('');
  const [isResearchMode, setIsResearchMode] = useState(false);
  const textareaRef = useRef(null);
  const { isLoading, isProcessing } = useChat();

  // Handle keyboard shortcuts
  useHotkeys('cmd+enter,ctrl+enter', () => {
    if (message.trim() && !disabled && !isLoading) {
      handleSend();
    }
  }, { enableOnContentEditable: true });

  useHotkeys('cmd+shift+enter,ctrl+shift+enter', () => {
    if (message.trim() && !disabled && !isLoading) {
      handleSend(true);
    }
  }, { enableOnContentEditable: true });

  // Auto-resize textarea
  useEffect(() => {
    const textarea = textareaRef.current;
    if (textarea) {
      textarea.style.height = 'auto';
      textarea.style.height = `${Math.min(textarea.scrollHeight, 120)}px`;
    }
  }, [message]);

  const handleSend = async (research = isResearchMode) => {
    if (!message.trim() || disabled || isLoading) return;

    const content = message.trim();
    setMessage('');
    
    // Reset textarea height
    if (textareaRef.current) {
      textareaRef.current.style.height = 'auto';
    }

    await onSendMessage(content, research);
  };

  const handleKeyDown = (e) => {
    if (e.key === 'Enter' && !e.shiftKey && !isLoading) {
      e.preventDefault();
      handleSend();
    }
  };

  const isInputDisabled = disabled || isLoading;

  return (
    <div className="p-4">
      <div className="relative">
        {/* Mode Toggle */}
        <div className="flex space-x-2 mb-3">
          <button
            onClick={() => setIsResearchMode(false)}
            disabled={isInputDisabled}
            className={`px-3 py-1 text-xs font-medium rounded-full transition-colors ${
              !isResearchMode
                ? 'bg-newyorker-black text-newyorker-cream'
                : 'bg-newyorker-gray-200 text-newyorker-muted hover:bg-newyorker-gray-300'
            } ${isInputDisabled ? 'opacity-50 cursor-not-allowed' : ''}`}
          >
            Quick Chat
          </button>
          <button
            onClick={() => setIsResearchMode(true)}
            disabled={isInputDisabled}
            className={`px-3 py-1 text-xs font-medium rounded-full transition-colors ${
              isResearchMode
                ? 'bg-newyorker-accent text-white'
                : 'bg-newyorker-gray-200 text-newyorker-muted hover:bg-newyorker-gray-300'
            } ${isInputDisabled ? 'opacity-50 cursor-not-allowed' : ''}`}
          >
            Deep Research
          </button>
        </div>

        {/* Processing Status */}
        {isProcessing && (
          <div className="mb-3 p-2 bg-blue-50 border border-blue-200 rounded-lg">
            <div className="flex items-center space-x-2 text-sm text-blue-700">
              <Clock size={14} className="animate-pulse" />
              <span>AI research in progress... Please wait for comprehensive analysis.</span>
            </div>
          </div>
        )}

        {/* Input Container */}
        <div className="relative">
          <textarea
            ref={textareaRef}
            value={message}
            onChange={(e) => setMessage(e.target.value)}
            onKeyDown={handleKeyDown}
            placeholder={
              isInputDisabled 
                ? isProcessing 
                  ? "AI is processing your request... Please wait."
                  : "Please wait..."
                : isResearchMode
                ? "Enter a topic for deep research (e.g., 'GDPR compliance requirements')..."
                : "Ask a question about privacy laws or regulations..."
            }
            disabled={isInputDisabled}
            className={`w-full resize-none border border-newyorker-gray-300 rounded-lg p-3 pr-12 focus:outline-none focus:ring-2 focus:ring-newyorker-accent focus:border-transparent transition-colors bg-white text-newyorker-black placeholder-newyorker-muted font-serif text-base leading-relaxed ${
              isInputDisabled ? 'opacity-50 cursor-not-allowed' : ''
            }`}
            style={{ minHeight: '48px', maxHeight: '120px' }}
          />
          
          {/* Send Button */}
          <motion.button
            onClick={() => handleSend()}
            disabled={!message.trim() || isInputDisabled}
            className={`absolute right-2 bottom-2 p-2 rounded-lg transition-all ${
              message.trim() && !isInputDisabled
                ? isResearchMode
                  ? 'bg-newyorker-accent text-white hover:bg-red-700'
                  : 'bg-newyorker-black text-white hover:bg-newyorker-charcoal'
                : 'bg-newyorker-gray-200 text-newyorker-gray-400 cursor-not-allowed'
            }`}
            whileHover={message.trim() && !isInputDisabled ? { scale: 1.05 } : {}}
            whileTap={message.trim() && !isInputDisabled ? { scale: 0.95 } : {}}
          >
            {isLoading ? (
              <Loader2 size={16} className="animate-spin" />
            ) : isResearchMode ? (
              <Search size={16} />
            ) : (
              <Send size={16} />
            )}
          </motion.button>
        </div>

        {/* Hint Text */}
        <div className="mt-2 text-xs text-newyorker-muted font-sans">
          {isProcessing ? (
            <span className="text-blue-600">
              ðŸ§  Deep AI analysis in progress - this may take several minutes for comprehensive research
            </span>
          ) : isResearchMode ? (
            <span>
              <kbd className="px-1 py-0.5 bg-newyorker-gray-100 rounded text-xs">Ctrl+Shift+Enter</kbd> to start research
            </span>
          ) : (
            <span>
              <kbd className="px-1 py-0.5 bg-newyorker-gray-100 rounded text-xs">Ctrl+Enter</kbd> to send, 
              <kbd className="px-1 py-0.5 bg-newyorker-gray-100 rounded text-xs ml-1">Shift+Enter</kbd> for new line
            </span>
          )}
        </div>
      </div>
    </div>
  );
};

export default ChatInput;
