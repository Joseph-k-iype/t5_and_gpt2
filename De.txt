import React from 'react';
import { Handle, Position, NodeProps } from '@xyflow/react';
import { CheckCircle2, AlertCircle, Globe, Flag, Zap } from 'lucide-react';
import { RuleNodeData } from '../types/rules';
import { formatConditionForDisplay } from '../utils/rulesParser';

const RuleNode: React.FC<NodeProps<RuleNodeData>> = ({ data, selected }) => {
  const { rule, label, conditions, event, priority, countries, adequacyCountries } = data;

  const getPriorityColor = (priority: number) => {
    if (priority >= 80) return 'text-red-600 bg-red-50';
    if (priority >= 60) return 'text-orange-600 bg-orange-50';
    if (priority >= 40) return 'text-blue-600 bg-blue-50';
    return 'text-gray-600 bg-gray-50';
  };

  const getEventTypeIcon = (eventType: string) => {
    switch (eventType.toLowerCase()) {
      case 'require':
        return <CheckCircle2 className="w-4 h-4 text-green-600" />;
      case 'forbid':
        return <AlertCircle className="w-4 h-4 text-red-600" />;
      case 'permit':
        return <CheckCircle2 className="w-4 h-4 text-blue-600" />;
      default:
        return <Zap className="w-4 h-4 text-purple-600" />;
    }
  };

  return (
    <div className={`
      bg-white rounded-lg shadow-lg border-2 transition-all duration-200 min-w-[280px] max-w-[350px]
      ${selected ? 'border-blue-500 shadow-xl' : 'border-gray-200 hover:border-gray-300'}
    `}>
      <Handle type="target" position={Position.Top} className="!bg-blue-500" />
      
      {/* Header */}
      <div className="px-4 py-3 border-b border-gray-100">
        <div className="flex items-center justify-between mb-2">
          <div className="flex items-center space-x-2">
            {getEventTypeIcon(event.type)}
            <span className="font-semibold text-gray-900 text-sm">
              {event.type.toUpperCase()}
            </span>
          </div>
          <div className={`px-2 py-1 rounded-full text-xs font-medium ${getPriorityColor(priority)}`}>
            P{priority}
          </div>
        </div>
        <h3 className="font-medium text-gray-900 text-sm leading-tight line-clamp-2">
          {label}
        </h3>
      </div>

      {/* Conditions */}
      <div className="px-4 py-3">
        <h4 className="text-xs font-medium text-gray-700 mb-2 uppercase tracking-wide">
          Conditions ({conditions.length})
        </h4>
        <div className="space-y-1 max-h-20 overflow-y-auto">
          {conditions.slice(0, 3).map((condition, index: number) => {
            const display = formatConditionForDisplay(condition);
            return (
              <div key={index} className="text-xs text-gray-600 bg-gray-50 rounded px-2 py-1 font-mono">
                {display.readable}
              </div>
            );
          })}
          {conditions.length > 3 && (
            <div className="text-xs text-gray-500 italic">
              +{conditions.length - 3} more conditions
            </div>
          )}
        </div>
      </div>

      {/* Footer */}
      <div className="px-4 py-2 bg-gray-50 rounded-b-lg">
        <div className="flex items-center justify-between text-xs text-gray-600">
          <div className="flex items-center space-x-1">
            <Globe className="w-3 h-3" />
            <span>{countries.length || 0} countries</span>
          </div>
          {adequacyCountries.length > 0 && (
            <div className="flex items-center space-x-1">
              <Flag className="w-3 h-3 text-green-600" />
              <span className="text-green-600">{adequacyCountries.length} adequate</span>
            </div>
          )}
        </div>
      </div>

      <Handle type="source" position={Position.Bottom} className="!bg-blue-500" />
    </div>
  );
};

export default RuleNode;
