// frontend/src/components/Chat/ChatContainer.jsx
import React, { useState, useRef, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { MessageCircle, Search, Loader2 } from 'lucide-react';
import ChatMessage from './ChatMessage';
import ChatInput from './ChatInput';
import ChatTyping from './ChatTyping';
import { useChatStore } from '../../hooks/useChat';
import { useResearchStore } from '../../hooks/useResearch';

const ChatContainer = ({ mode, onModeChange }) => {
  const messagesEndRef = useRef(null);
  const { 
    messages, 
    isLoading, 
    sendMessage, 
    sessionId 
  } = useChatStore();
  
  const { 
    startResearch, 
    isResearching 
  } = useResearchStore();

  const [currentInput, setCurrentInput] = useState('');

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  const handleSendMessage = async (message) => {
    if (!message.trim()) return;

    setCurrentInput('');

    if (mode === 'chat') {
      await sendMessage(message);
    } else if (mode === 'research') {
      await startResearch(message);
    }
  };

  const handleModeSwitch = (newMode) => {
    onModeChange(newMode);
  };

  const getWelcomeMessage = () => {
    if (mode === 'chat') {
      return {
        role: 'assistant',
        content: 'Hello! I\'m your AI research assistant. Ask me anything about data privacy, legal compliance, or regulatory matters, and I\'ll provide quick, intelligent responses.',
        timestamp: new Date().toISOString(),
        type: 'welcome'
      };
    } else {
      return {
        role: 'assistant',
        content: 'Ready for deep research! Provide a research topic and I\'ll conduct comprehensive multi-agent analysis with detailed findings, knowledge graphs, and actionable insights.',
        timestamp: new Date().toISOString(),
        type: 'welcome'
      };
    }
  };

  const displayMessages = messages.length > 0 ? messages : [getWelcomeMessage()];

  return (
    <div className="flex flex-col h-full bg-newyorker-paper">
      {/* Chat Header */}
      <motion.div 
        className="border-b border-newyorker-gray-200 p-6"
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
      >
        <div className="flex items-center justify-between">
          <div>
            <h2 className="text-2xl font-display text-newyorker-black">
              {mode === 'chat' ? 'Quick Chat' : 'Deep Research'}
            </h2>
            <p className="text-newyorker-muted font-sans text-sm mt-1">
              {mode === 'chat' 
                ? 'Fast AI responses for immediate questions' 
                : 'Comprehensive multi-agent research analysis'
              }
            </p>
          </div>
          
          {/* Mode Switch Button */}
          <motion.button
            className="flex items-center space-x-2 px-4 py-2 border border-newyorker-gray-300 rounded-md hover:bg-newyorker-gray-50 transition-colors"
            onClick={() => handleModeSwitch(mode === 'chat' ? 'research' : 'chat')}
            whileHover={{ scale: 1.02 }}
            whileTap={{ scale: 0.98 }}
          >
            {mode === 'chat' ? (
              <>
                <Search className="w-4 h-4" />
                <span className="font-sans text-sm">Switch to Research</span>
              </>
            ) : (
              <>
                <MessageCircle className="w-4 h-4" />
                <span className="font-sans text-sm">Switch to Chat</span>
              </>
            )}
          </motion.button>
        </div>
      </motion.div>

      {/* Messages Area */}
      <div className="flex-1 overflow-y-auto px-6 py-4 space-y-6">
        <AnimatePresence initial={false}>
          {displayMessages.map((message, index) => (
            <ChatMessage
              key={`${message.timestamp}-${index}`}
              message={message}
              isLatest={index === displayMessages.length - 1}
            />
          ))}
        </AnimatePresence>

        {/* Typing Indicator */}
        {(isLoading || isResearching) && (
          <ChatTyping mode={mode} isResearching={isResearching} />
        )}

        <div ref={messagesEndRef} />
      </div>

      {/* Input Area */}
      <motion.div 
        className="border-t border-newyorker-gray-200 p-6"
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.2 }}
      >
        <ChatInput
          value={currentInput}
          onChange={setCurrentInput}
          onSend={handleSendMessage}
          placeholder={
            mode === 'chat'
              ? 'Ask a quick question about privacy, compliance, or regulations...'
              : 'Enter a research topic for comprehensive analysis...'
          }
          disabled={isLoading || isResearching}
          mode={mode}
        />
        
        {/* Session Info */}
        {sessionId && (
          <p className="text-xs text-newyorker-muted font-sans mt-2">
            Session: {sessionId.slice(0, 8)}...
          </p>
        )}
      </motion.div>
    </div>
  );
};

export default ChatContainer;

// frontend/src/components/Chat/ChatMessage.jsx
import React from 'react';
import { motion } from 'framer-motion';
import { User, Bot, Clock, CheckCircle2, AlertCircle } from 'lucide-react';
import ReactMarkdown from 'react-markdown';
import { formatDistanceToNow } from 'date-fns';

const ChatMessage = ({ message, isLatest }) => {
  const isUser = message.role === 'user';
  const isWelcome = message.type === 'welcome';
  
  const formatTimestamp = (timestamp) => {
    try {
      return formatDistanceToNow(new Date(timestamp), { addSuffix: true });
    } catch {
      return 'just now';
    }
  };

  const getConfidenceIcon = (confidence) => {
    switch (confidence) {
      case 'high':
        return <CheckCircle2 className="w-3 h-3 text-green-600" />;
      case 'medium':
        return <Clock className="w-3 h-3 text-yellow-600" />;
      case 'low':
        return <AlertCircle className="w-3 h-3 text-red-600" />;
      default:
        return null;
    }
  };

  return (
    <motion.div
      className={`flex ${isUser ? 'justify-end' : 'justify-start'} ${
        isWelcome ? 'opacity-75' : ''
      }`}
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.4 }}
      layout
    >
      <div className={`flex max-w-4xl ${isUser ? 'flex-row-reverse' : 'flex-row'} space-x-3`}>
        {/* Avatar */}
        <motion.div
          className={`flex-shrink-0 w-10 h-10 rounded-full flex items-center justify-center ${
            isUser
              ? 'bg-newyorker-black text-newyorker-cream'
              : 'bg-newyorker-gray-100 text-newyorker-muted'
          }`}
          initial={{ scale: 0 }}
          animate={{ scale: 1 }}
          transition={{ delay: 0.1 }}
        >
          {isUser ? <User className="w-5 h-5" /> : <Bot className="w-5 h-5" />}
        </motion.div>

        {/* Message Content */}
        <div className={`flex-1 ${isUser ? 'mr-3' : 'ml-3'}`}>
          {/* Message Header */}
          <div className={`flex items-center space-x-2 mb-2 ${
            isUser ? 'flex-row-reverse' : 'flex-row'
          }`}>
            <span className="text-sm font-sans font-medium text-newyorker-black">
              {isUser ? 'You' : 'Assistant'}
            </span>
            <span className="text-xs text-newyorker-muted font-sans">
              {formatTimestamp(message.timestamp)}
            </span>
            {message.confidence && getConfidenceIcon(message.confidence)}
          </div>

          {/* Message Body */}
          <motion.div
            className={`p-4 rounded-lg ${
              isUser
                ? 'bg-newyorker-black text-newyorker-cream'
                : 'bg-newyorker-gray-50 text-newyorker-black'
            } ${isWelcome ? 'border-l-4 border-newyorker-accent' : ''}`}
            initial={{ scale: 0.95 }}
            animate={{ scale: 1 }}
            transition={{ delay: 0.2 }}
          >
            {isUser ? (
              <p className="whitespace-pre-wrap">{message.content}</p>
            ) : (
              <div className="prose prose-sm max-w-none">
                <ReactMarkdown
                  components={{
                    p: ({ children }) => <p className="mb-3 last:mb-0">{children}</p>,
                    h1: ({ children }) => <h1 className="text-lg font-display mb-2">{children}</h1>,
                    h2: ({ children }) => <h2 className="text-base font-display mb-2">{children}</h2>,
                    h3: ({ children }) => <h3 className="text-sm font-display mb-2">{children}</h3>,
                    ul: ({ children }) => <ul className="editorial-list">{children}</ul>,
                    ol: ({ children }) => <ol className="editorial-list">{children}</ol>,
                    blockquote: ({ children }) => (
                      <blockquote className="pull-quote text-sm">{children}</blockquote>
                    ),
                    code: ({ children }) => (
                      <code className="bg-newyorker-gray-200 px-1 py-0.5 rounded text-xs font-mono">
                        {children}
                      </code>
                    ),
                  }}
                >
                  {message.content}
                </ReactMarkdown>
              </div>
            )}
          </motion.div>

          {/* Message Metadata */}
          {message.metadata && (
            <div className="mt-2 text-xs text-newyorker-muted font-sans">
              {message.metadata.approach && (
                <span className="mr-4">Method: {message.metadata.approach}</span>
              )}
              {message.metadata.agents_used && (
                <span>Agents: {message.metadata.agents_used.join(', ')}</span>
              )}
            </div>
          )}
        </div>
      </div>
    </motion.div>
  );
};

export default ChatMessage;

// frontend/src/components/Chat/ChatInput.jsx
import React, { useState, useRef, useEffect } from 'react';
import { motion } from 'framer-motion';
import { Send, Loader2, Mic, MicOff } from 'lucide-react';

const ChatInput = ({ 
  value, 
  onChange, 
  onSend, 
  placeholder, 
  disabled, 
  mode 
}) => {
  const [isListening, setIsListening] = useState(false);
  const textareaRef = useRef(null);
  const recognition = useRef(null);

  useEffect(() => {
    // Auto-resize textarea
    if (textareaRef.current) {
      textareaRef.current.style.height = 'auto';
      textareaRef.current.style.height = `${textareaRef.current.scrollHeight}px`;
    }
  }, [value]);

  useEffect(() => {
    // Initialize speech recognition if available
    if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
      recognition.current = new SpeechRecognition();
      recognition.current.continuous = false;
      recognition.current.interimResults = false;
      recognition.current.lang = 'en-US';

      recognition.current.onresult = (event) => {
        const transcript = event.results[0][0].transcript;
        onChange(value + transcript);
        setIsListening(false);
      };

      recognition.current.onerror = () => {
        setIsListening(false);
      };

      recognition.current.onend = () => {
        setIsListening(false);
      };
    }
  }, [value, onChange]);

  const handleSubmit = (e) => {
    e.preventDefault();
    if (value.trim() && !disabled) {
      onSend(value.trim());
    }
  };

  const handleKeyDown = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSubmit(e);
    }
  };

  const toggleListening = () => {
    if (recognition.current) {
      if (isListening) {
        recognition.current.stop();
        setIsListening(false);
      } else {
        recognition.current.start();
        setIsListening(true);
      }
    }
  };

  const hasVoiceSupport = 'webkitSpeechRecognition' in window || 'SpeechRecognition' in window;

  return (
    <motion.form
      onSubmit={handleSubmit}
      className="relative"
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
    >
      <div className="relative flex items-end space-x-3 p-4 border border-newyorker-gray-300 rounded-lg bg-newyorker-cream focus-within:border-newyorker-black transition-colors">
        {/* Text Input */}
        <textarea
          ref={textareaRef}
          value={value}
          onChange={(e) => onChange(e.target.value)}
          onKeyDown={handleKeyDown}
          placeholder={placeholder}
          disabled={disabled}
          className="flex-1 resize-none border-none outline-none bg-transparent text-newyorker-black placeholder-newyorker-muted font-serif text-base leading-relaxed min-h-[24px] max-h-32"
          rows={1}
        />

        {/* Voice Input Button */}
        {hasVoiceSupport && (
          <motion.button
            type="button"
            onClick={toggleListening}
            className={`p-2 rounded-md transition-colors ${
              isListening
                ? 'bg-newyorker-accent text-white'
                : 'text-newyorker-muted hover:text-newyorker-black hover:bg-newyorker-gray-100'
            }`}
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            disabled={disabled}
          >
            {isListening ? (
              <MicOff className="w-5 h-5" />
            ) : (
              <Mic className="w-5 h-5" />
            )}
          </motion.button>
        )}

        {/* Send Button */}
        <motion.button
          type="submit"
          disabled={!value.trim() || disabled}
          className={`p-2 rounded-md transition-colors ${
            value.trim() && !disabled
              ? 'bg-newyorker-black text-newyorker-cream hover:bg-newyorker-charcoal'
              : 'text-newyorker-muted cursor-not-allowed'
          }`}
          whileHover={value.trim() && !disabled ? { scale: 1.05 } : {}}
          whileTap={value.trim() && !disabled ? { scale: 0.95 } : {}}
        >
          {disabled ? (
            <Loader2 className="w-5 h-5 animate-spin" />
          ) : (
            <Send className="w-5 h-5" />
          )}
        </motion.button>
      </div>

      {/* Input Helper Text */}
      <div className="flex justify-between items-center mt-2 text-xs text-newyorker-muted font-sans">
        <span>
          {mode === 'chat' ? 'Press Enter to send, Shift+Enter for new line' : 'Detailed research topics get better results'}
        </span>
        <span>
          {value.length}/2000
        </span>
      </div>
    </motion.form>
  );
};

export default ChatInput;

// frontend/src/components/Chat/ChatTyping.jsx
import React from 'react';
import { motion } from 'framer-motion';
import { Brain, Search, Users } from 'lucide-react';

const ChatTyping = ({ mode, isResearching }) => {
  const getTypingMessage = () => {
    if (mode === 'research' && isResearching) {
      return {
        icon: Search,
        messages: [
          'Initializing multi-agent research system...',
          'Domain experts analyzing the topic...',
          'Conducting specialized research...',
          'Synthesizing findings...',
        ]
      };
    } else {
      return {
        icon: Brain,
        messages: [
          'Thinking...',
          'Analyzing your question...',
          'Generating response...',
        ]
      };
    }
  };

  const { icon: Icon, messages } = getTypingMessage();

  return (
    <motion.div
      className="flex justify-start"
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0, y: -20 }}
    >
      <div className="flex space-x-3 max-w-4xl">
        {/* Avatar */}
        <div className="flex-shrink-0 w-10 h-10 rounded-full bg-newyorker-gray-100 text-newyorker-muted flex items-center justify-center">
          <motion.div
            animate={{ rotate: 360 }}
            transition={{ duration: 2, repeat: Infinity, ease: "linear" }}
          >
            <Icon className="w-5 h-5" />
          </motion.div>
        </div>

        {/* Typing Indicator */}
        <div className="ml-3">
          <div className="flex items-center space-x-2 mb-2">
            <span className="text-sm font-sans font-medium text-newyorker-black">
              Assistant
            </span>
            {isResearching && (
              <span className="text-xs text-newyorker-accent font-sans font-medium">
                Deep Research Mode
              </span>
            )}
          </div>

          <motion.div
            className="bg-newyorker-gray-50 p-4 rounded-lg border"
            initial={{ scale: 0.95 }}
            animate={{ scale: 1 }}
          >
            <div className="flex items-center space-x-2">
              {/* Animated Dots */}
              <div className="flex space-x-1">
                {[0, 1, 2].map((i) => (
                  <motion.div
                    key={i}
                    className="w-2 h-2 bg-newyorker-muted rounded-full"
                    animate={{
                      scale: [1, 1.2, 1],
                      opacity: [0.5, 1, 0.5],
                    }}
                    transition={{
                      duration: 1,
                      repeat: Infinity,
                      delay: i * 0.2,
                    }}
                  />
                ))}
              </div>

              {/* Dynamic Message */}
              <motion.span
                className="text-sm text-newyorker-muted font-sans"
                key={messages[0]} // Change key to trigger re-animation
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                transition={{ duration: 0.5 }}
              >
                {messages[0]}
              </motion.span>
            </div>

            {/* Research Progress Indicator */}
            {isResearching && (
              <motion.div
                className="mt-3 space-y-2"
                initial={{ opacity: 0, height: 0 }}
                animate={{ opacity: 1, height: 'auto' }}
              >
                <div className="flex items-center space-x-2 text-xs text-newyorker-muted">
                  <Users className="w-3 h-3" />
                  <span>Multiple research agents active</span>
                </div>
                <div className="w-full bg-newyorker-gray-200 rounded-full h-1">
                  <motion.div
                    className="bg-newyorker-accent h-1 rounded-full"
                    initial={{ width: 0 }}
                    animate={{ width: '100%' }}
                    transition={{ duration: 10, ease: "easeInOut" }}
                  />
                </div>
              </motion.div>
            )}
          </motion.div>
        </div>
      </div>
    </motion.div>
  );
};

export default ChatTyping;
