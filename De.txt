// frontend/src/components/Chat/ChatContainer.jsx
import React, { useRef, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import ChatMessage from './ChatMessage';
import ChatInput from './ChatInput';
import ChatTyping from './ChatTyping';
import LoadingSpinner from '../Common/LoadingSpinner';
import { useChat } from '../../hooks/useChat';
import { MessageCircle } from 'lucide-react';

const ChatContainer = () => {
  const {
    messages,
    isTyping,
    isLoading,
    sendMessage,
    startDeepResearch
  } = useChat();
  
  const messagesEndRef = useRef(null);
  const containerRef = useRef(null);

  // Auto-scroll to bottom when new messages arrive
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages, isTyping]);

  const handleSendMessage = async (content, isResearch = false) => {
    if (isResearch) {
      await startDeepResearch(content);
    } else {
      await sendMessage(content);
    }
  };

  return (
    <div className="h-full flex flex-col">
      {/* Chat Header */}
      <div className="p-4 border-b border-newyorker-gray-200 bg-newyorker-cream">
        <div className="flex items-center space-x-2">
          <MessageCircle size={20} className="text-newyorker-muted" />
          <h3 className="text-lg font-medium text-newyorker-black font-sans">
            Chat
          </h3>
          <div className="flex-1" />
          <span className="text-xs text-newyorker-muted font-sans">
            {messages.length} messages
          </span>
        </div>
      </div>

      {/* Messages Container */}
      <div
        ref={containerRef}
        className="flex-1 overflow-y-auto p-4 space-y-4"
        style={{ maxHeight: 'calc(100vh - 250px)' }}
      >
        {messages.length === 0 ? (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            className="text-center py-12"
          >
            <MessageCircle size={48} className="text-newyorker-gray-300 mx-auto mb-4" />
            <h4 className="text-lg font-medium text-newyorker-black mb-2">
              Start a conversation
            </h4>
            <p className="text-newyorker-muted text-sm max-w-sm mx-auto">
              Ask questions about data privacy, regulations, or start a deep research session.
            </p>
            
            {/* Suggested Questions */}
            <div className="mt-6 space-y-2">
              <p className="text-xs text-newyorker-muted font-sans uppercase tracking-wider">
                Try asking:
              </p>
              <div className="space-y-2">
                {[
                  "What are the key differences between GDPR and CCPA?",
                  "How do I implement consent mechanisms?",
                  "What are data subject rights under privacy laws?"
                ].map((suggestion, index) => (
                  <button
                    key={index}
                    onClick={() => handleSendMessage(suggestion)}
                    className="block w-full text-left text-sm text-newyorker-muted hover:text-newyorker-black p-2 hover:bg-newyorker-gray-50 rounded transition-colors"
                  >
                    "{suggestion}"
                  </button>
                ))}
              </div>
            </div>
          </motion.div>
        ) : (
          <AnimatePresence>
            {messages.map((message, index) => (
              <ChatMessage
                key={message.id || index}
                message={message}
                isLatest={index === messages.length - 1}
              />
            ))}
          </AnimatePresence>
        )}

        {/* Typing Indicator */}
        {isTyping && <ChatTyping />}
        
        {/* Loading Indicator */}
        {isLoading && (
          <motion.div
            initial={{ opacity: 0, scale: 0.9 }}
            animate={{ opacity: 1, scale: 1 }}
            className="flex justify-center py-4"
          >
            <LoadingSpinner size="sm" />
          </motion.div>
        )}

        <div ref={messagesEndRef} />
      </div>

      {/* Chat Input */}
      <div className="border-t border-newyorker-gray-200 bg-newyorker-cream">
        <ChatInput onSendMessage={handleSendMessage} disabled={isLoading} />
      </div>
    </div>
  );
};

export default ChatContainer;

// frontend/src/components/Chat/ChatMessage.jsx
import React from 'react';
import { motion } from 'framer-motion';
import { User, Bot, Clock, CheckCircle, AlertCircle } from 'lucide-react';
import ReactMarkdown from 'react-markdown';
import { formatDistanceToNow } from 'date-fns';

const ChatMessage = ({ message, isLatest }) => {
  const isUser = message.role === 'user';
  const timestamp = message.timestamp ? new Date(message.timestamp) : new Date();
  
  const getConfidenceIcon = (confidence) => {
    switch (confidence) {
      case 'high':
        return <CheckCircle size={12} className="text-green-600" />;
      case 'medium':
        return <Clock size={12} className="text-yellow-600" />;
      case 'low':
        return <AlertCircle size={12} className="text-red-600" />;
      default:
        return null;
    }
  };

  const getConfidenceColor = (confidence) => {
    switch (confidence) {
      case 'high':
        return 'text-green-600';
      case 'medium':
        return 'text-yellow-600';
      case 'low':
        return 'text-red-600';
      default:
        return 'text-newyorker-muted';
    }
  };

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.3 }}
      className={`flex space-x-3 ${isUser ? 'justify-end' : 'justify-start'}`}
    >
      {!isUser && (
        <div className="flex-shrink-0">
          <div className="w-8 h-8 bg-newyorker-accent rounded-full flex items-center justify-center">
            <Bot size={16} className="text-white" />
          </div>
        </div>
      )}

      <div className={`max-w-[80%] ${isUser ? 'order-2' : ''}`}>
        <div
          className={`rounded-lg p-4 ${
            isUser
              ? 'bg-newyorker-black text-newyorker-cream ml-auto'
              : 'bg-white border border-newyorker-gray-200'
          }`}
        >
          {/* Message Content */}
          <div className={`prose prose-sm max-w-none ${
            isUser 
              ? 'prose-invert' 
              : 'prose-newyorker'
          }`}>
            {isUser ? (
              <p className="mb-0">{message.content}</p>
            ) : (
              <ReactMarkdown
                components={{
                  p: ({ children }) => (
                    <p className="mb-3 last:mb-0 leading-relaxed">{children}</p>
                  ),
                  ul: ({ children }) => (
                    <ul className="mb-3 pl-4 space-y-1">{children}</ul>
                  ),
                  ol: ({ children }) => (
                    <ol className="mb-3 pl-4 space-y-1">{children}</ol>
                  ),
                  li: ({ children }) => (
                    <li className="text-sm">{children}</li>
                  ),
                  strong: ({ children }) => (
                    <strong className="font-semibold">{children}</strong>
                  ),
                  em: ({ children }) => (
                    <em className="italic">{children}</em>
                  ),
                  code: ({ children }) => (
                    <code className="bg-newyorker-gray-100 px-1 py-0.5 rounded text-xs font-mono">
                      {children}
                    </code>
                  ),
                }}
              >
                {message.content}
              </ReactMarkdown>
            )}
          </div>
        </div>

        {/* Message Metadata */}
        <div className={`flex items-center space-x-2 mt-2 text-xs text-newyorker-muted ${
          isUser ? 'justify-end' : 'justify-start'
        }`}>
          <span>{formatDistanceToNow(timestamp, { addSuffix: true })}</span>
          
          {message.metadata?.confidence && (
            <>
              <span>•</span>
              <div className="flex items-center space-x-1">
                {getConfidenceIcon(message.metadata.confidence)}
                <span className={getConfidenceColor(message.metadata.confidence)}>
                  {message.metadata.confidence} confidence
                </span>
              </div>
            </>
          )}
          
          {message.metadata?.approach && (
            <>
              <span>•</span>
              <span className="font-mono text-xs">
                {message.metadata.approach}
              </span>
            </>
          )}
        </div>
      </div>

      {isUser && (
        <div className="flex-shrink-0">
          <div className="w-8 h-8 bg-newyorker-gray-300 rounded-full flex items-center justify-center">
            <User size={16} className="text-newyorker-black" />
          </div>
        </div>
      )}
    </motion.div>
  );
};

export default ChatMessage;

// frontend/src/components/Chat/ChatInput.jsx
import React, { useState, useRef, useEffect } from 'react';
import { motion } from 'framer-motion';
import { Send, Search, Loader2 } from 'lucide-react';
import { useHotkeys } from 'react-hotkeys-hook';

const ChatInput = ({ onSendMessage, disabled = false }) => {
  const [message, setMessage] = useState('');
  const [isResearchMode, setIsResearchMode] = useState(false);
  const textareaRef = useRef(null);

  // Handle keyboard shortcuts
  useHotkeys('cmd+enter,ctrl+enter', () => {
    if (message.trim()) {
      handleSend();
    }
  }, { enableOnContentEditable: true });

  useHotkeys('cmd+shift+enter,ctrl+shift+enter', () => {
    if (message.trim()) {
      handleSend(true);
    }
  }, { enableOnContentEditable: true });

  // Auto-resize textarea
  useEffect(() => {
    const textarea = textareaRef.current;
    if (textarea) {
      textarea.style.height = 'auto';
      textarea.style.height = `${Math.min(textarea.scrollHeight, 120)}px`;
    }
  }, [message]);

  const handleSend = async (research = isResearchMode) => {
    if (!message.trim() || disabled) return;

    const content = message.trim();
    setMessage('');
    
    // Reset textarea height
    if (textareaRef.current) {
      textareaRef.current.style.height = 'auto';
    }

    await onSendMessage(content, research);
  };

  const handleKeyDown = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSend();
    }
  };

  return (
    <div className="p-4">
      <div className="relative">
        {/* Mode Toggle */}
        <div className="flex space-x-2 mb-3">
          <button
            onClick={() => setIsResearchMode(false)}
            className={`px-3 py-1 text-xs font-medium rounded-full transition-colors ${
              !isResearchMode
                ? 'bg-newyorker-black text-newyorker-cream'
                : 'bg-newyorker-gray-200 text-newyorker-muted hover:bg-newyorker-gray-300'
            }`}
          >
            Quick Chat
          </button>
          <button
            onClick={() => setIsResearchMode(true)}
            className={`px-3 py-1 text-xs font-medium rounded-full transition-colors ${
              isResearchMode
                ? 'bg-newyorker-accent text-white'
                : 'bg-newyorker-gray-200 text-newyorker-muted hover:bg-newyorker-gray-300'
            }`}
          >
            Deep Research
          </button>
        </div>

        {/* Input Container */}
        <div className="relative">
          <textarea
            ref={textareaRef}
            value={message}
            onChange={(e) => setMessage(e.target.value)}
            onKeyDown={handleKeyDown}
            placeholder={
              isResearchMode
                ? "Enter a topic for deep research (e.g., 'GDPR compliance requirements')..."
                : "Ask a question about privacy laws or regulations..."
            }
            disabled={disabled}
            className="w-full resize-none border border-newyorker-gray-300 rounded-lg p-3 pr-12 focus:outline-none focus:ring-2 focus:ring-newyorker-accent focus:border-transparent transition-colors bg-white text-newyorker-black placeholder-newyorker-muted font-serif text-base leading-relaxed"
            style={{ minHeight: '48px', maxHeight: '120px' }}
          />
          
          {/* Send Button */}
          <motion.button
            onClick={() => handleSend()}
            disabled={!message.trim() || disabled}
            className={`absolute right-2 bottom-2 p-2 rounded-lg transition-all ${
              message.trim() && !disabled
                ? isResearchMode
                  ? 'bg-newyorker-accent text-white hover:bg-red-700'
                  : 'bg-newyorker-black text-white hover:bg-newyorker-charcoal'
                : 'bg-newyorker-gray-200 text-newyorker-gray-400 cursor-not-allowed'
            }`}
            whileHover={message.trim() && !disabled ? { scale: 1.05 } : {}}
            whileTap={message.trim() && !disabled ? { scale: 0.95 } : {}}
          >
            {disabled ? (
              <Loader2 size={16} className="animate-spin" />
            ) : isResearchMode ? (
              <Search size={16} />
            ) : (
              <Send size={16} />
            )}
          </motion.button>
        </div>

        {/* Hint Text */}
        <div className="mt-2 text-xs text-newyorker-muted font-sans">
          {isResearchMode ? (
            <span>
              <kbd className="px-1 py-0.5 bg-newyorker-gray-100 rounded text-xs">Ctrl+Shift+Enter</kbd> to start research
            </span>
          ) : (
            <span>
              <kbd className="px-1 py-0.5 bg-newyorker-gray-100 rounded text-xs">Ctrl+Enter</kbd> to send, 
              <kbd className="px-1 py-0.5 bg-newyorker-gray-100 rounded text-xs ml-1">Shift+Enter</kbd> for new line
            </span>
          )}
        </div>
      </div>
    </div>
  );
};

export default ChatInput;

// frontend/src/components/Chat/ChatTyping.jsx
import React from 'react';
import { motion } from 'framer-motion';
import { Bot } from 'lucide-react';

const ChatTyping = () => {
  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0, y: -20 }}
      className="flex space-x-3"
    >
      <div className="flex-shrink-0">
        <div className="w-8 h-8 bg-newyorker-accent rounded-full flex items-center justify-center">
          <Bot size={16} className="text-white" />
        </div>
      </div>

      <div className="bg-white border border-newyorker-gray-200 rounded-lg p-4 max-w-[80%]">
        <div className="flex items-center space-x-2">
          <span className="text-newyorker-muted text-sm">AI is thinking</span>
          <div className="flex space-x-1">
            {[0, 1, 2].map((i) => (
              <motion.div
                key={i}
                animate={{
                  scale: [1, 1.2, 1],
                  opacity: [0.5, 1, 0.5],
                }}
                transition={{
                  duration: 1.2,
                  repeat: Infinity,
                  delay: i * 0.2,
                }}
                className="w-2 h-2 bg-newyorker-accent rounded-full"
              />
            ))}
          </div>
        </div>
      </div>
    </motion.div>
  );
};

export default ChatTyping;
