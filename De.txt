# main.py - Fixed version that resolves the uvicorn import string error

import sys
import os
from datetime import datetime
import uuid

print("üöÄ Starting Deep Research Chatbot API...")

# Test basic imports first
try:
    from fastapi import FastAPI, HTTPException
    from fastapi.middleware.cors import CORSMiddleware
    from pydantic import BaseModel
    print("‚úÖ All basic dependencies imported successfully")
except ImportError as e:
    print(f"‚ùå Import failed: {e}")
    print("Install with: pip install fastapi uvicorn[standard] pydantic")
    sys.exit(1)

# Create FastAPI app
app = FastAPI(
    title="Deep Research Chatbot API",
    description="Advanced AI-powered research assistant",
    version="1.0.0",
)

# Configure CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000", "http://127.0.0.1:3000", "*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Simple models
class QuickChatRequest(BaseModel):
    message: str
    session_id: str = None
    user_id: str = None

class QuickChatResponse(BaseModel):
    answer: str
    confidence: str
    approach: str
    session_id: str
    user_id: str
    timestamp: str

# Mock storage
sessions = {}

@app.get("/")
async def root():
    return {
        "message": "Deep Research Chatbot API",
        "status": "running",
        "timestamp": datetime.utcnow().isoformat()
    }

@app.get("/health")
async def health_check():
    return {
        "status": "healthy",
        "timestamp": datetime.utcnow().isoformat()
    }

@app.post("/api/v1/chat/quick", response_model=QuickChatResponse)
async def quick_chat(request: QuickChatRequest):
    print(f"üì® Received message: {request.message}")
    
    try:
        # Handle session initialization
        if request.message == "__session_init__":
            session_id = str(uuid.uuid4())
            user_id = request.user_id or f"user_{uuid.uuid4().hex[:8]}"
            
            sessions[session_id] = {
                "user_id": user_id,
                "created_at": datetime.utcnow().isoformat(),
                "messages": []
            }
            
            print(f"üÜî Created session: {session_id}")
            
            return QuickChatResponse(
                answer="Session initialized successfully!",
                confidence="high",
                approach="session_init",
                session_id=session_id,
                user_id=user_id,
                timestamp=datetime.utcnow().isoformat()
            )
        
        # Get or create session
        session_id = request.session_id or str(uuid.uuid4())
        user_id = request.user_id or f"user_{uuid.uuid4().hex[:8]}"
        
        if session_id not in sessions:
            sessions[session_id] = {
                "user_id": user_id,
                "created_at": datetime.utcnow().isoformat(),
                "messages": []
            }
            print(f"üÜî Created new session: {session_id}")
        
        # Store message
        sessions[session_id]["messages"].append({
            "role": "user",
            "content": request.message,
            "timestamp": datetime.utcnow().isoformat()
        })
        
        # Generate mock response based on message content
        message_lower = request.message.lower()
        
        if "gdpr" in message_lower:
            response_text = f"Regarding GDPR and your question '{request.message}': The General Data Protection Regulation (GDPR) is a comprehensive privacy law that applies to all EU member states. It requires organizations to obtain explicit consent for data processing, provides individuals with rights like data portability and deletion, and imposes significant penalties for non-compliance. This is a mock response - the full AI system would provide detailed, multi-source analysis."
        elif "privacy" in message_lower or "data protection" in message_lower:
            response_text = f"About privacy and data protection regarding '{request.message}': Modern privacy laws like GDPR, CCPA, and others establish frameworks for protecting personal data. Key principles include data minimization, purpose limitation, and individual rights. The full research system would analyze multiple jurisdictions and provide comprehensive compliance guidance."
        elif "ccpa" in message_lower:
            response_text = f"Concerning CCPA and your question '{request.message}': The California Consumer Privacy Act (CCPA) grants California residents rights over their personal information, including the right to know, delete, and opt-out of the sale of personal information. This mock response would be enhanced with detailed multi-agent research in the full system."
        else:
            response_text = f"Thank you for your question: '{request.message}'. This is a mock response from the basic API server. The full AI research system would conduct comprehensive analysis using multiple specialized agents to provide detailed insights on privacy law, data protection, and regulatory compliance topics."
        
        # Store response
        sessions[session_id]["messages"].append({
            "role": "assistant", 
            "content": response_text,
            "timestamp": datetime.utcnow().isoformat()
        })
        
        print(f"üí¨ Generated response for session {session_id}")
        
        return QuickChatResponse(
            answer=response_text,
            confidence="medium",
            approach="mock_contextual",
            session_id=session_id,
            user_id=user_id,
            timestamp=datetime.utcnow().isoformat()
        )
        
    except Exception as e:
        print(f"‚ùå Error in quick_chat: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/v1/research/deep")
async def deep_research(request: dict):
    print(f"üî¨ Received research request: {request}")
    
    topic = request.get("topic", "Unknown topic")
    session_id = request.get("session_id") or str(uuid.uuid4())
    user_id = request.get("user_id") or f"user_{uuid.uuid4().hex[:8]}"
    
    # Generate contextual mock research based on topic
    topic_lower = topic.lower()
    
    if "gdpr" in topic_lower:
        synthesis = f"""# Deep Research Report: {topic}

## Executive Summary
This comprehensive analysis examines GDPR compliance requirements and implementation strategies. The General Data Protection Regulation represents one of the most significant privacy frameworks globally.

## Key Findings

### 1. Core Principles
- **Lawfulness, fairness and transparency**: Processing must have a legal basis
- **Purpose limitation**: Data collected for specified, explicit purposes
- **Data minimization**: Limited to what is necessary
- **Accuracy**: Kept accurate and up to date
- **Storage limitation**: Kept only as long as necessary
- **Integrity and confidentiality**: Secured against unauthorized processing

### 2. Individual Rights
- Right to information and access
- Right to rectification
- Right to erasure ('right to be forgotten')
- Right to restrict processing
- Right to data portability
- Right to object
- Rights related to automated decision making

### 3. Compliance Requirements
- Data Protection Impact Assessments (DPIAs)
- Privacy by Design and by Default
- Data Protection Officer (DPO) appointment
- Record keeping obligations
- Breach notification requirements

## Recommendations
1. Conduct comprehensive data audit
2. Implement privacy management framework
3. Train staff on GDPR requirements
4. Establish breach response procedures
5. Regular compliance monitoring

*Note: This is a mock research report. The full system would provide detailed, multi-source analysis with specific implementation guidance.*"""
    else:
        synthesis = f"""# Deep Research Report: {topic}

## Executive Summary
This analysis examines key aspects of {topic} within the context of privacy law and data protection regulations.

## Key Research Areas Analyzed
- Legal frameworks and regulatory requirements
- Cross-jurisdictional considerations
- Implementation challenges and best practices
- Compliance obligations and recommendations

## Findings Summary
Based on comprehensive analysis of privacy regulations and legal frameworks, several key considerations emerge for {topic}. The regulatory landscape continues to evolve with new requirements and interpretations.

## Recommendations
1. Monitor regulatory developments
2. Implement appropriate safeguards
3. Ensure compliance documentation
4. Regular review and updates
5. Stakeholder engagement and training

*Note: This is a mock research report. The full multi-agent system would conduct detailed analysis using specialized research agents, providing comprehensive insights with specific citations and implementation guidance.*

## Technical Details
- **Research Agents Used**: Domain Expert, Concept Analyst, Synthesis Agent
- **Analysis Depth**: Comprehensive multi-source review
- **Confidence Level**: High (based on authoritative sources)
- **Last Updated**: {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')} UTC
"""
    
    return {
        "final_synthesis": synthesis,
        "overall_confidence": 0.8,
        "session_id": session_id,
        "user_id": user_id,
        "timestamp": datetime.utcnow().isoformat(),
        "agents_used": ["domain_expert", "concept_analyst", "synthesizer"],
        "iterations_completed": 3,
        "processing_time": "extended"
    }

@app.post("/api/v1/knowledge-graph/generate")
async def generate_knowledge_graph(request: dict):
    return {
        "nodes": [],
        "edges": [], 
        "metadata": {"message": "Knowledge graph generation will be implemented soon"}
    }

# FIXED: The issue was here - when using reload=True, we need to pass the app as an import string
if __name__ == "__main__":
    print("‚úÖ FastAPI app configured successfully")
    print("üöÄ Starting server with uvicorn...")
    
    try:
        import uvicorn
        # SOLUTION: Use the import string format instead of passing the app object directly
        uvicorn.run(
            "main:app",  # <-- This is the fix! Use import string instead of app object
            host="0.0.0.0", 
            port=8000, 
            reload=True,
            log_level="info"
        )
    except Exception as e:
        print(f"‚ùå Failed to start server: {e}")
        print("üí° Try running: uvicorn main:app --host 0.0.0.0 --port 8000 --reload")
        sys.exit(1)
