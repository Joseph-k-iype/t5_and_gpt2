import json
from collections import Counter

def complete_json_analysis(data):
    """Complete analysis with examples and patterns"""
    
    def get_sample_values(obj, key, max_samples=3):
        """Get sample values for a field"""
        if isinstance(obj, list):
            values = [item.get(key) for item in obj if isinstance(item, dict) and key in item]
            return list(set(values))[:max_samples]
        elif isinstance(obj, dict) and key in obj:
            return [obj[key]]
        return []
    
    def analyze_patterns(data, name="Data"):
        print(f"📊 ANALYSIS OF: {name}")
        print("=" * 50)
        
        if isinstance(data, dict):
            print(f"🏢 This is a single {name} object with:")
            for key, value in data.items():
                describe_field(key, value, data)
                
        elif isinstance(data, list):
            if data:
                print(f"📋 This is a collection of {len(data)} items")
                if isinstance(data[0], dict):
                    print(f"Each item represents a {name[:-1] if name.endswith('s') else name} with:")
                    analyze_patterns(data[0], f"{name} item")
                    
                    # Show field consistency across items
                    all_keys = set()
                    for item in data:
                        if isinstance(item, dict):
                            all_keys.update(item.keys())
                    
                    print(f"\n📈 Field consistency across {len(data)} items:")
                    for key in all_keys:
                        count = sum(1 for item in data if isinstance(item, dict) and key in item)
                        percentage = (count / len(data)) * 100
                        print(f"   • {key}: present in {count}/{len(data)} items ({percentage:.1f}%)")
    
    def describe_field(key, value, parent_obj=None):
        if isinstance(value, str):
            samples = get_sample_values(parent_obj, key) if parent_obj else [value]
            print(f"   📝 {key}: Text field (e.g., '{samples[0] if samples else 'N/A'}')")
        elif isinstance(value, (int, float)):
            print(f"   🔢 {key}: Number field (value: {value})")
        elif isinstance(value, bool):
            print(f"   ☑️  {key}: True/False field (value: {value})")
        elif isinstance(value, dict):
            print(f"   🔗 {key}: Related object containing:")
            for sub_key, sub_value in value.items():
                print(f"      • {sub_key} ({type(sub_value).__name__})")
        elif isinstance(value, list):
            if value:
                item_type = type(value[0]).__name__
                if isinstance(value[0], dict):
                    print(f"   📋 {key}: List of {len(value)} related objects")
                    print(f"      Each object has: {', '.join(value[0].keys())}")
                else:
                    print(f"   📋 {key}: List of {len(value)} {item_type} values")
            else:
                print(f"   📋 {key}: Empty list")
        else:
            print(f"   ❓ {key}: {type(value).__name__} (value: {value})")
    
    analyze_patterns(data)

# Usage
with open('your_file.json', 'r', encoding='utf-8', errors='ignore') as f:
    data = json.load(f)

complete_json_analysis(data)
