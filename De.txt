// src/App.jsx - Fixed provider order for context communication
import React, { useState, useEffect } from 'react';
import { QueryClient, QueryClientProvider } from 'react-query';
import { ReactQueryDevtools } from 'react-query/devtools';
import toast, { Toaster } from 'react-hot-toast';
import MainLayout from './components/Layout/MainLayout';
import { SessionProvider } from './contexts/SessionContext';
import { ResearchProvider } from './contexts/ResearchContext';
import { ChatProvider } from './contexts/ChatContext';
import ErrorBoundary from './components/Common/ErrorBoundary';
import './styles/newyorker-theme.css';

// Create a query client for React Query
const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      retry: 2,
      refetchOnWindowFocus: false,
      staleTime: 5 * 60 * 1000, // 5 minutes
    },
  },
});

// Simple Error Boundary component since the file was empty
class SimpleErrorBoundary extends React.Component {
  constructor(props) {
    super(props);
    this.state = { hasError: false };
  }

  static getDerivedStateFromError(error) {
    return { hasError: true };
  }

  componentDidCatch(error, errorInfo) {
    console.error('Error boundary caught an error:', error, errorInfo);
  }

  render() {
    if (this.state.hasError) {
      return (
        <div className="min-h-screen bg-newyorker-paper flex items-center justify-center">
          <div className="text-center">
            <h1 className="text-2xl font-bold text-newyorker-black mb-4">
              Something went wrong
            </h1>
            <p className="text-newyorker-muted mb-4">
              Please refresh the page and try again.
            </p>
            <button
              onClick={() => window.location.reload()}
              className="px-4 py-2 bg-newyorker-accent text-white rounded hover:bg-red-700 transition-colors"
            >
              Refresh Page
            </button>
          </div>
        </div>
      );
    }

    return this.props.children;
  }
}

function App() {
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    // Simulate app initialization
    const timer = setTimeout(() => {
      setIsLoading(false);
    }, 1000);

    return () => clearTimeout(timer);
  }, []);

  if (isLoading) {
    return (
      <div className="min-h-screen bg-newyorker-paper flex items-center justify-center">
        <div className="text-center">
          <div className="animate-pulse">
            <h1 className="headline text-newyorker-black mb-4">
              Deep Research
            </h1>
            <p className="body-text text-newyorker-muted">
              Initializing research environment...
            </p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <SimpleErrorBoundary>
      <QueryClientProvider client={queryClient}>
        {/* 
          IMPORTANT: Provider order matters for context communication!
          SessionProvider → ResearchProvider → ChatProvider
          This allows ChatProvider to access ResearchProvider functions
        */}
        <SessionProvider>
          <ResearchProvider>
            <ChatProvider>
              <div className="App bg-newyorker-paper min-h-screen">
                <MainLayout />
                <Toaster
                  position="bottom-right"
                  toastOptions={{
                    duration: 4000,
                    style: {
                      background: '#1a1a1a',
                      color: '#fffef7',
                      fontFamily: 'Inter, system-ui, sans-serif',
                    },
                    success: {
                      duration: 6000,
                      style: {
                        background: '#059669',
                        color: 'white',
                      },
                    },
                  }}
                />
              </div>
            </ChatProvider>
          </ResearchProvider>
        </SessionProvider>
        <ReactQueryDevtools initialIsOpen={false} />
      </QueryClientProvider>
    </SimpleErrorBoundary>
  );
}

export default App;
