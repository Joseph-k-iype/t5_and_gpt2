// 1. Fix MainLayout.jsx - update header spacing
import React, { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import Header from './Header';
import ChatContainer from '../Chat/ChatContainer';
import ResearchPanel from '../Research/ResearchPanel';
import KnowledgeGraph from '../KnowledgeGraph/KnowledgeGraph';
import Accordion from '../Common/Accordion';
import { useChat } from '../../hooks/useChat';
import { useResearch } from '../../hooks/useResearch';

const MainLayout = () => {
  const [rightPanelMode, setRightPanelMode] = useState('research');
  const { messages, isTyping } = useChat();
  const { currentResearch, isResearching } = useResearch();

  return (
    <div className="min-h-screen bg-newyorker-paper">
      <Header />
      
      {/* Fixed: Increased top padding from pt-20 to pt-24 */}
      <main className="magazine-layout pt-24">
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 h-[calc(100vh-6rem)]">
          {/* Left Column - Chat Interface */}
          <motion.div
            initial={{ opacity: 0, x: -20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ duration: 0.6 }}
            className="flex flex-col h-full"
          >
            {/* Fixed: Reduced margins to prevent overlap */}
            <div className="mb-4">
              <h1 className="headline text-newyorker-black mb-1">
                Research Assistant
              </h1>
              <p className="subheadline text-newyorker-muted">
                Explore complex topics with AI-powered deep research
              </p>
            </div>
            
            <div className="flex-1 bg-newyorker-cream border border-newyorker-gray-200 rounded-none shadow-sm">
              <ChatContainer />
            </div>
          </motion.div>

          {/* Right Column - Research & Knowledge Graph */}
          <motion.div
            initial={{ opacity: 0, x: 20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ duration: 0.6, delay: 0.2 }}
            className="flex flex-col h-full"
          >
            {/* Panel Mode Toggle */}
            <div className="mb-4 flex space-x-4">
              <button
                onClick={() => setRightPanelMode('research')}
                className={`px-4 py-2 text-sm font-medium transition-colors ${
                  rightPanelMode === 'research'
                    ? 'text-newyorker-black border-b-2 border-newyorker-accent'
                    : 'text-newyorker-muted hover:text-newyorker-black'
                }`}
              >
                Research Report
              </button>
              <button
                onClick={() => setRightPanelMode('knowledge-graph')}
                className={`px-4 py-2 text-sm font-medium transition-colors ${
                  rightPanelMode === 'knowledge-graph'
                    ? 'text-newyorker-black border-b-2 border-newyorker-accent'
                    : 'text-newyorker-muted hover:text-newyorker-black'
                }`}
              >
                Knowledge Graph
              </button>
            </div>

            {/* Content Panel */}
            <AnimatePresence mode="wait">
              <motion.div
                key={rightPanelMode}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -20 }}
                transition={{ duration: 0.3 }}
                className="flex-1 bg-newyorker-cream border border-newyorker-gray-200 rounded-none shadow-sm overflow-hidden"
              >
                {rightPanelMode === 'research' ? (
                  <ResearchPanel />
                ) : (
                  <div className="h-full flex flex-col">
                    <div className="p-4 border-b border-newyorker-gray-200">
                      <h3 className="text-lg font-medium text-newyorker-black">
                        Knowledge Graph
                      </h3>
                      <p className="text-sm text-newyorker-muted mt-1">
                        Interactive visualization of concepts and relationships
                      </p>
                    </div>
                    
                    <Accordion
                      title="Graph Visualization"
                      defaultOpen={true}
                      className="flex-1"
                    >
                      <div className="h-96">
                        <KnowledgeGraph />
                      </div>
                    </Accordion>
                  </div>
                )}
              </motion.div>
            </AnimatePresence>
          </motion.div>
        </div>
      </main>
    </div>
  );
};

export default MainLayout;

// 2. Fix API service - update api.js
import axios from 'axios';

// Create API instance
const apiInstance = axios.create({
  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8000/api/v1',
  timeout: 30000,
  headers: {
    'Content-Type': 'application/json',
  },
});

// Request interceptor
apiInstance.interceptors.request.use(
  (config) => {
    // Add any auth headers or other common headers here
    const sessionId = localStorage.getItem('research_session_id');
    if (sessionId) {
      config.headers['X-Session-Id'] = sessionId;
    }
    
    console.log(`ðŸ”„ ${config.method?.toUpperCase()} ${config.url}`);
    return config;
  },
  (error) => {
    console.error('Request error:', error);
    return Promise.reject(error);
  }
);

// Response interceptor
apiInstance.interceptors.response.use(
  (response) => {
    console.log(`âœ… ${response.config.method?.toUpperCase()} ${response.config.url}`);
    return response;
  },
  (error) => {
    console.error('Response error:', error);
    
    // Handle common errors
    if (error.response?.status === 401) {
      // Handle unauthorized
      localStorage.removeItem('research_session_id');
      localStorage.removeItem('research_user_id');
    }
    
    // If proxy error (no response), likely backend is down
    if (!error.response) {
      console.error('Backend connection failed - is the server running on port 8000?');
    }
    
    return Promise.reject(error);
  }
);

export default apiInstance;

// 3. Fix ChatContext.jsx - better error handling
import React, { createContext, useContext, useReducer, useCallback } from 'react';
import { chatService } from '../services/chatService';
import { useSession } from './SessionContext';
import toast from 'react-hot-toast';

// Create Chat Context
export const ChatContext = createContext();

// Chat reducer
const chatReducer = (state, action) => {
  switch (action.type) {
    case 'ADD_MESSAGE':
      return {
        ...state,
        messages: [...state.messages, action.payload],
      };
    case 'SET_MESSAGES':
      return {
        ...state,
        messages: action.payload,
      };
    case 'SET_TYPING':
      return {
        ...state,
        isTyping: action.payload,
      };
    case 'SET_LOADING':
      return {
        ...state,
        isLoading: action.payload,
      };
    case 'SET_ERROR':
      return {
        ...state,
        error: action.payload,
        isLoading: false,
        isTyping: false,
      };
    case 'CLEAR_MESSAGES':
      return {
        ...state,
        messages: [],
        error: null,
      };
    default:
      return state;
  }
};

// Initial state
const initialState = {
  messages: [],
  isTyping: false,
  isLoading: false,
  error: null,
};

export const ChatProvider = ({ children }) => {
  const [state, dispatch] = useReducer(chatReducer, initialState);
  const { sessionId, userId, updateSessionStats } = useSession();

  const addMessage = useCallback((message) => {
    dispatch({ type: 'ADD_MESSAGE', payload: message });
  }, []);

  const sendMessage = useCallback(async (content) => {
    if (!sessionId || !content.trim()) return;

    try {
      // Add user message immediately
      const userMessage = {
        id: `user_${Date.now()}`,
        role: 'user',
        content: content.trim(),
        timestamp: new Date().toISOString(),
      };
      
      addMessage(userMessage);
      dispatch({ type: 'SET_LOADING', payload: true });
      dispatch({ type: 'SET_TYPING', payload: true });

      // Send to API with better error handling
      const response = await chatService.sendQuickMessage({
        message: content.trim(),
        session_id: sessionId,  // Fixed: use snake_case for API
        user_id: userId,        // Fixed: use snake_case for API
      });

      // Add AI response
      const aiMessage = {
        id: `ai_${Date.now()}`,
        role: 'assistant',
        content: response.answer,
        timestamp: response.timestamp,
        metadata: {
          confidence: response.confidence,
          approach: response.approach,
        },
      };
      
      addMessage(aiMessage);
      
      // Update session stats
      updateSessionStats({
        messageCount: state.messages.length + 2,
      });

    } catch (error) {
      console.error('Failed to send message:', error);
      dispatch({ type: 'SET_ERROR', payload: error.message });
      
      // More specific error messages
      let errorMessage = 'I apologize, but I encountered an error processing your message.';
      
      if (!error.response) {
        errorMessage = 'Unable to connect to the server. Please check if the backend is running on port 8000.';
        toast.error('Connection failed - is the backend running?');
      } else if (error.response.status >= 500) {
        errorMessage = 'The server encountered an error. Please try again in a moment.';
        toast.error('Server error - please try again');
      } else {
        toast.error('Failed to send message. Please try again.');
      }
      
      // Add error message
      const errorMessage_obj = {
        id: `error_${Date.now()}`,
        role: 'assistant',
        content: errorMessage,
        timestamp: new Date().toISOString(),
        metadata: {
          confidence: 'low',
          approach: 'error',
        },
      };
      
      addMessage(errorMessage_obj);
      
    } finally {
      dispatch({ type: 'SET_LOADING', payload: false });
      dispatch({ type: 'SET_TYPING', payload: false });
    }
  }, [sessionId, userId, addMessage, state.messages.length, updateSessionStats]);

  const startDeepResearch = useCallback(async (topic) => {
    if (!sessionId || !topic.trim()) return;

    try {
      // Add user message
      const userMessage = {
        id: `research_user_${Date.now()}`,
        role: 'user',
        content: topic.trim(),
        timestamp: new Date().toISOString(),
        metadata: {
          type: 'research_request',
        },
      };
      
      addMessage(userMessage);
      dispatch({ type: 'SET_LOADING', payload: true });

      // Start research message
      const researchMessage = {
        id: `research_start_${Date.now()}`,
        role: 'assistant',
        content: `Starting deep research on: "${topic.trim()}"\n\nThis may take a few minutes as I conduct comprehensive research using multiple specialized agents. You can monitor the progress in the Research panel.`,
        timestamp: new Date().toISOString(),
        metadata: {
          confidence: 'high',
          approach: 'deep_research_initiated',
          type: 'research_start',
        },
      };
      
      addMessage(researchMessage);

    } catch (error) {
      console.error('Failed to start research:', error);
      dispatch({ type: 'SET_ERROR', payload: error.message });
      toast.error('Failed to start research. Please try again.');
      
    } finally {
      dispatch({ type: 'SET_LOADING', payload: false });
    }
  }, [sessionId, addMessage]);

  const loadConversationHistory = useCallback(async () => {
    if (!sessionId) return;

    try {
      const history = await chatService.getConversationHistory(sessionId);
      dispatch({ type: 'SET_MESSAGES', payload: history.messages });
      
    } catch (error) {
      console.error('Failed to load conversation history:', error);
      // Don't show error toast for this, as it's not critical
    }
  }, [sessionId]);

  const clearMessages = useCallback(() => {
    dispatch({ type: 'CLEAR_MESSAGES' });
  }, []);

  const value = {
    ...state,
    sendMessage,
    startDeepResearch,
    addMessage,
    loadConversationHistory,
    clearMessages,
  };

  return (
    <ChatContext.Provider value={value}>
      {children}
    </ChatContext.Provider>
  );
};

export const useChat = () => {
  const context = useContext(ChatContext);
  if (!context) {
    throw new Error('useChat must be used within a ChatProvider');
  }
  return context;
};
