import React from 'react';
import { motion } from 'framer-motion';

interface LoadingAnimationProps {
  size?: 'sm' | 'md' | 'lg';
  type?: 'dots' | 'spinner' | 'pulse' | 'brain' | 'research';
  message?: string;
}

const LoadingAnimation: React.FC<LoadingAnimationProps> = ({ 
  size = 'md', 
  type = 'dots',
  message 
}) => {
  const sizeClasses = {
    sm: 'w-4 h-4',
    md: 'w-8 h-8', 
    lg: 'w-16 h-16'
  };

  const dotSizes = {
    sm: 'w-1 h-1',
    md: 'w-2 h-2',
    lg: 'w-4 h-4'
  };

  // Dots Animation
  const DotsAnimation = () => (
    <div className="flex items-center justify-center space-x-1">
      {[0, 1, 2].map((index) => (
        <motion.div
          key={index}
          className={`${dotSizes[size]} bg-gradient-to-r from-blue-500 to-purple-500 rounded-full`}
          animate={{
            scale: [1, 1.5, 1],
            opacity: [0.5, 1, 0.5]
          }}
          transition={{
            duration: 1,
            repeat: Infinity,
            delay: index * 0.2,
            ease: "easeInOut"
          }}
        />
      ))}
    </div>
  );

  // Spinner Animation
  const SpinnerAnimation = () => (
    <motion.div
      className={`${sizeClasses[size]} border-2 border-blue-200 border-t-blue-500 rounded-full`}
      animate={{ rotate: 360 }}
      transition={{
        duration: 1,
        repeat: Infinity,
        ease: "linear"
      }}
    />
  );

  // Pulse Animation
  const PulseAnimation = () => (
    <motion.div
      className={`${sizeClasses[size]} bg-gradient-to-r from-blue-500 to-purple-500 rounded-full`}
      animate={{
        scale: [1, 1.3, 1],
        opacity: [0.7, 1, 0.7]
      }}
      transition={{
        duration: 1.5,
        repeat: Infinity,
        ease: "easeInOut"
      }}
    />
  );

  // Brain Animation (AI Thinking)
  const BrainAnimation = () => (
    <div className="relative flex items-center justify-center">
      <motion.div
        className={`${sizeClasses[size]} text-4xl`}
        animate={{
          scale: [1, 1.1, 1],
          rotate: [0, 5, -5, 0]
        }}
        transition={{
          duration: 2,
          repeat: Infinity,
          ease: "easeInOut"
        }}
      >
        ðŸ§ 
      </motion.div>
      
      {/* Thought particles */}
      <div className="absolute inset-0">
        {[...Array(3)].map((_, i) => (
          <motion.div
            key={i}
            className="absolute w-1 h-1 bg-blue-400 rounded-full"
            style={{
              left: `${20 + i * 30}%`,
              top: `${20 + i * 20}%`
            }}
            animate={{
              y: [-5, -15, -5],
              opacity: [0, 1, 0],
              scale: [1, 1.5, 1]
            }}
            transition={{
              duration: 2,
              repeat: Infinity,
              delay: i * 0.5,
              ease: "easeInOut"
            }}
          />
        ))}
      </div>
    </div>
  );

  // Research Animation (Deep Research)
  const ResearchAnimation = () => (
    <div className="relative flex items-center justify-center">
      {/* Central research icon */}
      <motion.div
        className="text-2xl"
        animate={{
          scale: [1, 1.2, 1],
          rotate: [0, 180, 360]
        }}
        transition={{
          duration: 3,
          repeat: Infinity,
          ease: "easeInOut"
        }}
      >
        ðŸ”¬
      </motion.div>

      {/* Orbiting elements */}
      {[0, 1, 2, 3].map((index) => (
        <motion.div
          key={index}
          className="absolute w-8 h-8 flex items-center justify-center"
          animate={{
            rotate: [0, 360]
          }}
          transition={{
            duration: 4,
            repeat: Infinity,
            delay: index * 0.5,
            ease: "linear"
          }}
          style={{
            transformOrigin: `${20 + index * 5}px center`
          }}
        >
          <motion.div
            className="w-2 h-2 bg-gradient-to-r from-purple-400 to-blue-400 rounded-full"
            animate={{
              scale: [1, 1.5, 1],
              opacity: [0.6, 1, 0.6]
            }}
            transition={{
              duration: 1.5,
              repeat: Infinity,
              delay: index * 0.3
            }}
          />
        </motion.div>
      ))}

      {/* Data streams */}
      <div className="absolute inset-0">
        {[...Array(6)].map((_, i) => (
          <motion.div
            key={i}
            className="absolute w-0.5 h-4 bg-gradient-to-t from-transparent via-blue-300 to-transparent"
            style={{
              left: `${10 + i * 15}%`,
              top: `${5 + (i % 2) * 40}%`
            }}
            animate={{
              scaleY: [0, 1, 0],
              opacity: [0, 0.8, 0]
            }}
            transition={{
              duration: 2,
              repeat: Infinity,
              delay: i * 0.2,
              ease: "easeInOut"
            }}
          />
        ))}
      </div>
    </div>
  );

  const renderAnimation = () => {
    switch (type) {
      case 'spinner':
        return <SpinnerAnimation />;
      case 'pulse':
        return <PulseAnimation />;
      case 'brain':
        return <BrainAnimation />;
      case 'research':
        return <ResearchAnimation />;
      case 'dots':
      default:
        return <DotsAnimation />;
    }
  };

  return (
    <div className="flex flex-col items-center justify-center space-y-3">
      <motion.div
        initial={{ opacity: 0, scale: 0.8 }}
        animate={{ opacity: 1, scale: 1 }}
        transition={{ duration: 0.3 }}
        className="flex items-center justify-center"
      >
        {renderAnimation()}
      </motion.div>
      
      {message && (
        <motion.div
          initial={{ opacity: 0, y: 10 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5, delay: 0.2 }}
          className="text-center"
        >
          <p className="text-sm text-gray-600 font-medium">
            {message}
          </p>
        </motion.div>
      )}
    </div>
  );
};

export default LoadingAnimation;
