from langchain.chat_models import AzureChatOpenAI
from langchain.schema import HumanMessage, SystemMessage
from langchain.chains import ConversationChain
from langchain.memory import ConversationBufferMemory
import os
from dotenv import load_dotenv
from azure.identity import ClientSecretCredential, UsernamePasswordCredential, CertificateCredential
import time

# Load environment variables from .env file
load_dotenv()

class AzureAuthenticator:
    def __init__(self):
        self.tenant_id = os.getenv("AZURE_TENANT_ID")
        self.client_id = os.getenv("AZURE_CLIENT_ID")
        self.client_secret = os.getenv("AZURE_CLIENT_SECRET")
        self.cert_path = os.getenv("AZURE_CERTIFICATE_PATH")
        self.ad_username = os.getenv("AZURE_AD_USERNAME")
        self.ad_password = os.getenv("AZURE_AD_PASSWORD")
        
    def get_token(self):
        """Get Azure AD token using certificate authentication"""
        try:
            # Try certificate authentication first
            if self.cert_path and os.path.exists(self.cert_path):
                credential = CertificateCredential(
                    tenant_id=self.tenant_id,
                    client_id=self.client_id,
                    certificate_path=self.cert_path
                )
            # Fall back to client secret if certificate not available
            elif self.client_secret:
                credential = ClientSecretCredential(
                    tenant_id=self.tenant_id,
                    client_id=self.client_id,
                    client_secret=self.client_secret
                )
            # Fall back to username/password if neither certificate nor client secret available
            elif self.ad_username and self.ad_password:
                credential = UsernamePasswordCredential(
                    tenant_id=self.tenant_id,
                    client_id=self.client_id,
                    username=self.ad_username,
                    password=self.ad_password
                )
            else:
                raise ValueError("No valid authentication credentials provided")

            # Get token for Azure OpenAI scope
            token = credential.get_token("https://cognitiveservices.azure.com/.default")
            return token.token
            
        except Exception as e:
            print(f"Error getting Azure AD token: {str(e)}")
            raise

class AzureChatBot:
    def __init__(self):
        # Initialize Azure AD authenticator
        self.authenticator = AzureAuthenticator()
        
        # Get initial token
        self.access_token = self.authenticator.get_token()
        self.token_refresh_time = time.time()
        
        # Initialize Azure OpenAI chat model
        self.llm = AzureChatOpenAI(
            deployment_name=os.getenv("AZURE_DEPLOYMENT_NAME", "gpt-35-turbo"),
            model_name="gpt-35-turbo",
            temperature=0.7,
            openai_api_version="2024-02-01",
            azure_endpoint=os.getenv("AZURE_OPENAI_ENDPOINT"),
            azure_ad_token=self.access_token
        )
        
        # Initialize conversation memory
        self.memory = ConversationBufferMemory()
        
        # Initialize conversation chain
        self.conversation = ConversationChain(
            llm=self.llm,
            memory=self.memory,
            verbose=True
        )
    
    def refresh_token_if_needed(self):
        """Refresh the access token if it's older than 55 minutes"""
        current_time = time.time()
        if current_time - self.token_refresh_time > 3300:  # 55 minutes in seconds
            self.access_token = self.authenticator.get_token()
            self.token_refresh_time = current_time
            self.llm.azure_ad_token = self.access_token
    
    def chat(self, user_input: str) -> str:
        """
        Process user input and return the chatbot's response
        
        Args:
            user_input (str): The user's message
            
        Returns:
            str: The chatbot's response
        """
        try:
            # Refresh token if needed
            self.refresh_token_if_needed()
            
            # Get response from the model
            response = self.conversation.predict(input=user_input)
            return response
        except Exception as e:
            return f"An error occurred: {str(e)}"

def main():
    # Check for required environment variables
    required_env_vars = [
        "AZURE_TENANT_ID",
        "AZURE_CLIENT_ID",
        "AZURE_OPENAI_ENDPOINT",
        "AZURE_DEPLOYMENT_NAME"
    ]
    
    # Add conditional requirements based on auth method
    if os.getenv("AZURE_CERTIFICATE_PATH"):
        required_env_vars.append("AZURE_CERTIFICATE_PATH")
    elif os.getenv("AZURE_CLIENT_SECRET"):
        required_env_vars.append("AZURE_CLIENT_SECRET")
    elif os.getenv("AZURE_AD_USERNAME"):
        required_env_vars.extend(["AZURE_AD_USERNAME", "AZURE_AD_PASSWORD"])
    else:
        print("No authentication method specified. Please provide either:")
        print("1. Certificate path (AZURE_CERTIFICATE_PATH)")
        print("2. Client secret (AZURE_CLIENT_SECRET)")
        print("3. Username and password (AZURE_AD_USERNAME, AZURE_AD_PASSWORD)")
        return

    missing_vars = [var for var in required_env_vars if not os.getenv(var)]
    
    if missing_vars:
        print(f"Missing required environment variables: {', '.join(missing_vars)}")
        print("Please create a .env file with the following variables:")
        print("""
        AZURE_TENANT_ID=your_tenant_id
        AZURE_CLIENT_ID=your_client_id
        AZURE_OPENAI_ENDPOINT=your_endpoint
        AZURE_DEPLOYMENT_NAME=your_deployment_name
        
        # Choose one of the following authentication methods:
        
        # 1. Certificate Authentication
        AZURE_CERTIFICATE_PATH=path/to/your/cert.pem
        
        # 2. Client Secret Authentication
        AZURE_CLIENT_SECRET=your_client_secret
        
        # 3. Username/Password Authentication
        AZURE_AD_USERNAME=your_username
        AZURE_AD_PASSWORD=your_password
        """)
        return

    # Initialize chatbot
    try:
        chatbot = AzureChatBot()
        print("Chatbot initialized successfully. Type 'quit' to exit.")
        
        # Main chat loop
        while True:
            user_input = input("You: ").strip()
            
            if user_input.lower() in ['quit', 'exit', 'bye']:
                print("Goodbye!")
                break
            
            response = chatbot.chat(user_input)
            print(f"Bot: {response}")
            
    except Exception as e:
        print(f"Error initializing chatbot: {str(e)}")

if __name__ == "__main__":
    main()
