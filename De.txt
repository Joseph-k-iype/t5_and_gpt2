import React, { forwardRef } from 'react';
import { motion, HTMLMotionProps } from 'framer-motion';

interface GlassCardProps extends HTMLMotionProps<"div"> {
  variant?: 'default' | 'elevated' | 'interactive' | 'modal' | 'nav';
  blur?: 'sm' | 'md' | 'lg' | 'xl';
  opacity?: 'light' | 'medium' | 'dark';
  border?: 'subtle' | 'normal' | 'prominent';
  shadow?: 'none' | 'sm' | 'md' | 'lg' | 'xl';
  gradient?: boolean;
  animated?: boolean;
  hoverable?: boolean;
}

const GlassCard = forwardRef<HTMLDivElement, GlassCardProps>(({
  variant = 'default',
  blur = 'md',
  opacity = 'medium',
  border = 'normal',
  shadow = 'md',
  gradient = false,
  animated = true,
  hoverable = true,
  className = '',
  children,
  ...props
}, ref) => {

  // Blur intensity mapping
  const blurValues = {
    sm: 'backdrop-blur-sm',
    md: 'backdrop-blur-md',
    lg: 'backdrop-blur-lg',
    xl: 'backdrop-blur-xl'
  };

  // Background opacity mapping
  const opacityValues = {
    light: 'bg-white/15',
    medium: 'bg-white/25',
    dark: 'bg-white/35'
  };

  // Border intensity mapping
  const borderValues = {
    subtle: 'border-white/10',
    normal: 'border-white/20',
    prominent: 'border-white/30'
  };

  // Shadow intensity mapping
  const shadowValues = {
    none: '',
    sm: 'shadow-sm',
    md: 'shadow-lg shadow-blue-500/10',
    lg: 'shadow-xl shadow-blue-500/15',
    xl: 'shadow-2xl shadow-blue-500/20'
  };

  // Variant-specific styles
  const variantStyles = {
    default: `
      ${opacityValues[opacity]}
      ${blurValues[blur]}
      border
      ${borderValues[border]}
      ${shadowValues[shadow]}
      rounded-2xl
    `,
    elevated: `
      bg-white/30
      ${blurValues[blur]}
      border
      border-white/25
      shadow-2xl shadow-blue-500/20
      rounded-2xl
    `,
    interactive: `
      ${opacityValues[opacity]}
      ${blurValues[blur]}
      border
      ${borderValues[border]}
      ${shadowValues[shadow]}
      rounded-2xl
      cursor-pointer
      transition-all duration-300 ease-in-out
      hover:bg-white/35
      hover:border-white/30
      hover:shadow-xl hover:shadow-blue-500/20
      hover:-translate-y-1
      active:translate-y-0
      active:shadow-lg
    `,
    modal: `
      bg-white/35
      backdrop-blur-2xl
      border
      border-white/25
      shadow-2xl shadow-black/20
      rounded-3xl
    `,
    nav: `
      bg-white/20
      backdrop-blur-lg
      border
      border-white/15
      shadow-lg shadow-blue-500/5
      rounded-2xl
    `
  };

  // Animation variants
  const cardVariants = {
    initial: {
      opacity: 0,
      scale: 0.95,
      y: 20
    },
    animate: {
      opacity: 1,
      scale: 1,
      y: 0,
      transition: {
        type: "spring",
        stiffness: 300,
        damping: 25,
        duration: 0.5
      }
    },
    hover: hoverable ? {
      scale: 1.02,
      y: -4,
      transition: {
        type: "spring",
        stiffness: 400,
        damping: 25
      }
    } : {},
    tap: {
      scale: 0.98,
      transition: {
        duration: 0.1
      }
    }
  };

  // Gradient overlay
  const gradientOverlay = gradient ? (
    <div className="absolute inset-0 bg-gradient-to-br from-blue-500/5 via-purple-500/5 to-pink-500/5 rounded-2xl pointer-events-none" />
  ) : null;

  // Shimmer effect for interactive cards
  const shimmerEffect = variant === 'interactive' ? (
    <div className="absolute inset-0 -z-10 bg-gradient-to-r from-transparent via-white/10 to-transparent opacity-0 hover:opacity-100 transition-opacity duration-500 rounded-2xl shimmer-bg" />
  ) : null;

  // Floating particles for elevated variant
  const floatingParticles = variant === 'elevated' ? (
    <div className="absolute inset-0 overflow-hidden rounded-2xl pointer-events-none">
      {[...Array(3)].map((_, i) => (
        <motion.div
          key={i}
          className="absolute w-1 h-1 bg-white/30 rounded-full"
          style={{
            left: `${20 + i * 30}%`,
            top: `${30 + i * 20}%`
          }}
          animate={{
            y: [-5, -15, -5],
            opacity: [0.3, 0.7, 0.3],
            scale: [1, 1.2, 1]
          }}
          transition={{
            duration: 4,
            repeat: Infinity,
            delay: i * 1,
            ease: "easeInOut"
          }}
        />
      ))}
    </div>
  ) : null;

  const baseClasses = `
    relative
    ${variantStyles[variant]}
    ${className}
  `.trim().replace(/\s+/g, ' ');

  return (
    <motion.div
      ref={ref}
      className={baseClasses}
      variants={animated ? cardVariants : undefined}
      initial={animated ? "initial" : undefined}
      animate={animated ? "animate" : undefined}
      whileHover={hoverable ? "hover" : undefined}
      whileTap={variant === 'interactive' ? "tap" : undefined}
      {...props}
    >
      {/* Background gradient overlay */}
      {gradientOverlay}
      
      {/* Shimmer effect */}
      {shimmerEffect}
      
      {/* Floating particles */}
      {floatingParticles}
      
      {/* Border glow effect */}
      <div className="absolute inset-0 rounded-2xl border border-white/10 pointer-events-none" />
      
      {/* Content */}
      <div className="relative z-10">
        {children}
      </div>
      
      {/* Corner accent for elevated variant */}
      {variant === 'elevated' && (
        <motion.div
          className="absolute top-3 right-3 w-2 h-2 bg-gradient-to-br from-blue-400 to-purple-400 rounded-full"
          animate={{
            scale: [1, 1.2, 1],
            opacity: [0.5, 1, 0.5]
          }}
          transition={{
            duration: 2,
            repeat: Infinity,
            ease: "easeInOut"
          }}
        />
      )}
    </motion.div>
  );
});

GlassCard.displayName = 'GlassCard';

export default GlassCard;
