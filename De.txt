"""
Script to initialize the job tracking index.
"""

import os
import sys
import asyncio
import argparse
import logging
from app.services.job_tracking_service import JobTrackingService
from app.core.environment import get_os_env

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)

logger = logging.getLogger(__name__)

async def init_job_tracking_index(force_recreate=False):
    """
    Initialize the job tracking index.
    
    Args:
        force_recreate: Whether to force recreate the index if it exists
    """
    try:
        # Create job tracking service
        job_service = JobTrackingService()
        
        # Connect to Elasticsearch
        await job_service.connect()
        
        # If force recreate is enabled, delete the index first
        if force_recreate:
            index_exists = await job_service.client.indices.exists(index=job_service.index_name)
            if index_exists:
                logger.info(f"Deleting existing job tracking index '{job_service.index_name}'")
                await job_service.client.indices.delete(index=job_service.index_name)
                logger.info(f"Index '{job_service.index_name}' deleted")
        
        # Create the index
        await job_service.create_index()
        logger.info("Job tracking index initialization completed successfully")
        
    except Exception as e:
        logger.error(f"Error initializing job tracking index: {e}")
        raise
    finally:
        # Close client if connected
        if job_service and job_service.client:
            await job_service.client.close()
            logger.info("Elasticsearch client closed")

def main():
    """Main function to run the script."""
    parser = argparse.ArgumentParser(description="Initialize the job tracking index in Elasticsearch")
    parser.add_argument("--force", action="store_true", help="Force recreate the index if it exists")
    args = parser.parse_args()
    
    # Load environment variables
    env = get_os_env()
    
    # Run the async function
    asyncio.run(init_job_tracking_index(args.force))

if __name__ == "__main__":
    main()
