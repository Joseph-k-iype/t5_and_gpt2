// src/components/Research/ResearchPanel.jsx - Updated to show latest results
import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Search, FileText, Clock, CheckCircle, AlertCircle, Download, Share, RefreshCw } from 'lucide-react';
import ResearchReport from './ResearchReport';
import ResearchProgress from './ResearchProgress';
import { useResearch } from '../../hooks/useResearch';
import { useChat } from '../../hooks/useChat';
import { formatRelativeTime, formatConfidence } from '../../utils/formatters';
import LoadingSpinner from '../Common/LoadingSpinner';

// Utility functions
const getConfidenceIcon = (confidence) => {
  const level = formatConfidence(confidence);
  switch (level) {
    case 'high':
      return <CheckCircle size={16} className="text-green-600" />;
    case 'medium':
      return <Clock size={16} className="text-yellow-600" />;
    case 'low':
      return <AlertCircle size={16} className="text-red-600" />;
    default:
      return null;
  }
};

const getConfidenceColor = (confidence) => {
  const level = formatConfidence(confidence);
  switch (level) {
    case 'high':
      return 'text-green-600';
    case 'medium':
      return 'text-yellow-600';
    case 'low':
      return 'text-red-600';
    default:
      return 'text-newyorker-muted';
  }
};

const ResearchPanel = () => {
  const { 
    currentResearch, 
    researchHistory, 
    isResearching, 
    isChatResearchActive, // New state to track chat-initiated research
    progress, 
    error,
    startResearch,
    clearCurrentResearch 
  } = useResearch();
  
  const { messages, isProcessing } = useChat();
  const [activeTab, setActiveTab] = useState('current');
  const [lastUpdateTime, setLastUpdateTime] = useState(null);
  const [showUpdateNotification, setShowUpdateNotification] = useState(false);

  // Track when research gets updated to show notification
  useEffect(() => {
    if (currentResearch) {
      const now = Date.now();
      
      // If this is a new research result (timestamp is recent)
      if (lastUpdateTime && (now - lastUpdateTime < 5000)) {
        setShowUpdateNotification(true);
        
        // Hide notification after 3 seconds
        const timer = setTimeout(() => {
          setShowUpdateNotification(false);
        }, 3000);
        
        return () => clearTimeout(timer);
      }
      
      setLastUpdateTime(now);
    }
  }, [currentResearch, lastUpdateTime]);

  // Determine if research is currently active (either dedicated or chat-based)
  const isActivelyResearching = isResearching || isChatResearchActive || isProcessing;

  return (
    <div className="h-full flex flex-col">
      {/* Header */}
      <div className="p-4 border-b border-newyorker-gray-200 bg-newyorker-cream">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-2">
            <Search size={20} className="text-newyorker-muted" />
            <h3 className="text-lg font-medium text-newyorker-black font-sans">
              Research
            </h3>
            
            {/* Research Status Indicator */}
            {isActivelyResearching && (
              <div className="flex items-center space-x-1 text-xs">
                <RefreshCw size={12} className="animate-spin text-blue-600" />
                <span className="text-blue-600">
                  {isChatResearchActive ? 'Chat Research Active' : 'Research Active'}
                </span>
              </div>
            )}
            
            {/* Update Notification */}
            <AnimatePresence>
              {showUpdateNotification && (
                <motion.div
                  initial={{ opacity: 0, scale: 0.8 }}
                  animate={{ opacity: 1, scale: 1 }}
                  exit={{ opacity: 0, scale: 0.8 }}
                  className="bg-green-100 text-green-700 px-2 py-1 rounded text-xs font-medium"
                >
                  âœ¨ Updated!
                </motion.div>
              )}
            </AnimatePresence>
          </div>
          
          {currentResearch && (
            <div className="flex space-x-2">
              <button
                onClick={() => {/* Handle download */}}
                className="p-2 text-newyorker-muted hover:text-newyorker-black transition-colors"
                title="Download Report"
              >
                <Download size={16} />
              </button>
              <button
                onClick={() => {/* Handle share */}}
                className="p-2 text-newyorker-muted hover:text-newyorker-black transition-colors"
                title="Share Report"
              >
                <Share size={16} />
              </button>
              <button
                onClick={clearCurrentResearch}
                className="p-2 text-newyorker-muted hover:text-newyorker-black transition-colors"
                title="Clear Current Research"
              >
                <RefreshCw size={16} />
              </button>
            </div>
          )}
        </div>

        {/* Tabs */}
        <div className="flex space-x-4 mt-3">
          <button
            onClick={() => setActiveTab('current')}
            className={`pb-2 text-sm font-medium transition-colors ${
              activeTab === 'current'
                ? 'text-newyorker-black border-b-2 border-newyorker-accent'
                : 'text-newyorker-muted hover:text-newyorker-black'
            }`}
          >
            Current Research
            {currentResearch && (
              <span className="ml-1 w-2 h-2 bg-green-500 rounded-full inline-block"></span>
            )}
          </button>
          <button
            onClick={() => setActiveTab('history')}
            className={`pb-2 text-sm font-medium transition-colors ${
              activeTab === 'history'
                ? 'text-newyorker-black border-b-2 border-newyorker-accent'
                : 'text-newyorker-muted hover:text-newyorker-black'
            }`}
          >
            History ({researchHistory.length})
          </button>
        </div>

        {/* Research Source Indicator */}
        {currentResearch && (
          <div className="mt-2 text-xs text-newyorker-muted">
            <span>Source: </span>
            <span className="font-medium">
              {currentResearch.metadata?.source === 'chat_research' ? 
                'ðŸ’¬ Chat Research' : 
                'ðŸ”¬ Deep Research'
              }
            </span>
            {currentResearch.timestamp && (
              <span className="ml-2">
                â€¢ Updated {formatRelativeTime(currentResearch.timestamp)}
              </span>
            )}
          </div>
        )}
      </div>

      {/* Content */}
      <div className="flex-1 overflow-hidden">
        <AnimatePresence mode="wait">
          <motion.div
            key={activeTab}
            initial={{ opacity: 0, x: 20 }}
            animate={{ opacity: 1, x: 0 }}
            exit={{ opacity: 0, x: -20 }}
            transition={{ duration: 0.2 }}
            className="h-full"
          >
            {activeTab === 'current' ? (
              <CurrentResearchTab
                currentResearch={currentResearch}
                isResearching={isActivelyResearching}
                progress={progress}
                error={error}
                onClear={clearCurrentResearch}
                isChatResearchActive={isChatResearchActive}
              />
            ) : (
              <ResearchHistoryTab history={researchHistory} />
            )}
          </motion.div>
        </AnimatePresence>
      </div>
    </div>
  );
};

const CurrentResearchTab = ({ currentResearch, isResearching, progress, error, onClear, isChatResearchActive }) => {
  if (error) {
    return (
      <div className="p-6 text-center">
        <AlertCircle size={48} className="text-red-500 mx-auto mb-4" />
        <h4 className="text-lg font-medium text-newyorker-black mb-2">
          Research Failed
        </h4>
        <p className="text-newyorker-muted text-sm mb-4">
          {error}
        </p>
        <button
          onClick={onClear}
          className="btn btn-primary"
        >
          Try Again
        </button>
      </div>
    );
  }

  if (isResearching) {
    return (
      <div className="p-6">
        {isChatResearchActive ? (
          <div className="text-center space-y-4">
            <div className="flex items-center justify-center space-x-2">
              <RefreshCw size={24} className="animate-spin text-blue-600" />
              <h4 className="text-lg font-medium text-newyorker-black">
                Chat Research in Progress
              </h4>
            </div>
            <p className="text-newyorker-muted">
              AI is conducting comprehensive research based on your chat question. 
              Results will appear here when complete.
            </p>
            <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
              <p className="text-sm text-blue-700">
                ðŸ’¡ <strong>Tip:</strong> Research results from chat conversations automatically 
                appear in this panel for detailed analysis and reference.
              </p>
            </div>
          </div>
        ) : (
          <ResearchProgress progress={progress} />
        )}
      </div>
    );
  }

  if (currentResearch) {
    return (
      <div className="h-full">
        <ResearchReport research={currentResearch} />
      </div>
    );
  }

  return (
    <div className="p-6 text-center">
      <Search size={48} className="text-newyorker-gray-300 mx-auto mb-4" />
      <h4 className="text-lg font-medium text-newyorker-black mb-2">
        No Research Results
      </h4>
      <div className="space-y-4 text-newyorker-muted text-sm">
        <p>
          Research results will appear here when you:
        </p>
        <div className="space-y-2 text-left max-w-sm mx-auto">
          <div className="flex items-start space-x-2">
            <span className="text-newyorker-accent">â€¢</span>
            <span>Ask research questions in the chat (automatically detected)</span>
          </div>
          <div className="flex items-start space-x-2">
            <span className="text-newyorker-accent">â€¢</span>
            <span>Use "Deep Research" mode for comprehensive analysis</span>
          </div>
          <div className="flex items-start space-x-2">
            <span className="text-newyorker-accent">â€¢</span>
            <span>Ask complex questions about privacy laws, GDPR, CCPA, etc.</span>
          </div>
        </div>
      </div>
    </div>
  );
};

const ResearchHistoryTab = ({ history }) => {
  if (history.length === 0) {
    return (
      <div className="p-6 text-center">
        <FileText size={48} className="text-newyorker-gray-300 mx-auto mb-4" />
        <h4 className="text-lg font-medium text-newyorker-black mb-2">
          No Research History
        </h4>
        <p className="text-newyorker-muted text-sm">
          Your completed research sessions will appear here.
        </p>
      </div>
    );
  }

  return (
    <div className="p-4 space-y-4 overflow-y-auto">
      {history.map((item, index) => (
        <motion.div
          key={item.id}
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: index * 0.1 }}
          className="border border-newyorker-gray-200 rounded-lg p-4 hover:shadow-md transition-shadow cursor-pointer"
          onClick={() => {/* Handle view research */}}
        >
          <div className="flex items-start justify-between">
            <div className="flex-1">
              <h5 className="font-medium text-newyorker-black mb-1 line-clamp-1">
                {item.topic}
              </h5>
              <p className="text-sm text-newyorker-muted mb-2 line-clamp-2">
                {item.summary}
              </p>
              
              <div className="flex items-center space-x-3 text-xs text-newyorker-muted">
                <span>{formatRelativeTime(item.timestamp)}</span>
                <div className="flex items-center space-x-1">
                  {getConfidenceIcon(item.confidence)}
                  <span className={getConfidenceColor(item.confidence)}>
                    {formatConfidence(item.confidence)} confidence
                  </span>
                </div>
                {item.source && (
                  <>
                    <span>â€¢</span>
                    <span className="capitalize">
                      {item.source === 'chat' ? 'ðŸ’¬ Chat' : 'ðŸ”¬ Deep Research'}
                    </span>
                  </>
                )}
              </div>
            </div>
            
            <FileText size={16} className="text-newyorker-muted ml-3" />
          </div>
        </motion.div>
      ))}
    </div>
  );
};

export default ResearchPanel;
