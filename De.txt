import os
import time
import logging
import requests
from typing import Optional
from urllib.parse import quote
from dotenv import load_dotenv
from azure.identity import ClientSecretCredential
from langchain.chat_models import AzureChatOpenAI
from langchain.schema import HumanMessage, SystemMessage
from langchain.memory import ConversationBufferMemory
from langchain.chains import ConversationChain

# Set up logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Load environment variables from .env file
load_dotenv()

def create_env_template():
    """Create a template .env file if it doesn't exist."""
    if not os.path.exists('.env'):
        with open('.env', 'w') as f:
            f.write("""
# Azure OpenAI Configuration
AZURE_OPENAI_ENDPOINT=your_endpoint_here
AZURE_TENANT_ID=your_tenant_id_here
AZURE_CLIENT_ID=your_client_id_here
AZURE_CLIENT_SECRET=your_client_secret_here

# Azure AD Credentials and Proxy Settings
AZURE_AD_USERNAME=your_ad_username
AZURE_AD_PASSWORD=your_ad_password
PROXY_DOMAIN=uk-proxy.system.abc.com
""")
        print("Created .env template file. Please fill in your credentials.")
        return True
    return False

class ChatbotConfig:
    """Configuration class for the chatbot."""
    def __init__(self):
        # Load required environment variables
        self.openai_endpoint = os.getenv('AZURE_OPENAI_ENDPOINT')
        self.tenant_id = os.getenv('AZURE_TENANT_ID')
        self.client_id = os.getenv('AZURE_CLIENT_ID')
        self.client_secret = os.getenv('AZURE_CLIENT_SECRET')
        self.ad_username = os.getenv('AZURE_AD_USERNAME')
        self.ad_password = os.getenv('AZURE_AD_PASSWORD')
        self.proxy_domain = os.getenv('PROXY_DOMAIN')
        
        # Model configuration
        self.model_name = "gpt-4o-mini"
        self.temperature = 0.7
        self.max_tokens = 800
        self.api_version = "2024-02-01"
        
        # Validate configuration
        self._validate_config()
        
    def _validate_config(self):
        """Validate that all required environment variables are set."""
        required_vars = {
            'AZURE_OPENAI_ENDPOINT': self.openai_endpoint,
            'AZURE_TENANT_ID': self.tenant_id,
            'AZURE_CLIENT_ID': self.client_id,
            'AZURE_CLIENT_SECRET': self.client_secret,
            'AZURE_AD_USERNAME': self.ad_username,
            'AZURE_AD_PASSWORD': self.ad_password,
            'PROXY_DOMAIN': self.proxy_domain
        }
        
        missing = [k for k, v in required_vars.items() if not v]
        if missing:
            raise ValueError(f"Missing required environment variables: {', '.join(missing)}")

class ProxyManager:
    """Manages proxy configuration and connection testing."""
    def __init__(self, config: ChatbotConfig):
        self.config = config
        self.proxy_url = self._build_proxy_url()
        
    def _build_proxy_url(self) -> str:
        """Build proxy URL with encoded credentials."""
        username = quote(self.config.ad_username)
        password = quote(self.config.ad_password)
        return f"https://{username}:{password}@{self.config.proxy_domain}"
        
    def get_proxy_dict(self) -> dict:
        """Get proxy dictionary for requests."""
        return {
            'http': self.proxy_url,
            'https': self.proxy_url
        }
        
    def test_connection(self):
        """Test connection to required endpoints."""
        proxies = self.get_proxy_dict()
        endpoints = [
            "https://login.microsoftonline.com",
            "https://cognitiveservices.azure.com"
        ]
        
        session = requests.Session()
        for endpoint in endpoints:
            try:
                response = session.get(
                    endpoint,
                    proxies=proxies,
                    timeout=10
                )
                response.raise_for_status()
                logger.info(f"Successfully connected to {endpoint}")
            except Exception as e:
                logger.error(f"Failed to connect to {endpoint}")
                raise ConnectionError(f"Failed to connect to {endpoint}: {str(e)}")

class AzureChatbot:
    """Main chatbot class that handles conversations."""
    
    def __init__(self):
        """Initialize the chatbot with configuration and setup."""
        self.config = ChatbotConfig()
        self.proxy_manager = ProxyManager(self.config)
        self._setup()
        
    def _setup(self):
        """Set up the chatbot components."""
        # Test connection
        self.proxy_manager.test_connection()
        
        # Set up Azure credentials
        self.credential = ClientSecretCredential(
            tenant_id=self.config.tenant_id,
            client_id=self.config.client_id,
            client_secret=self.config.client_secret,
            proxies=self.proxy_manager.get_proxy_dict()
        )
        
        # Get initial token
        self.access_token = self._get_token()
        self.token_refresh_time = time.time()
        
        # Initialize Azure OpenAI chat model
        self.llm = AzureChatOpenAI(
            model_name=self.config.model_name,
            temperature=self.config.temperature,
            max_tokens=self.config.max_tokens,
            openai_api_version=self.config.api_version,
            azure_endpoint=self.config.openai_endpoint,
            azure_ad_token=self.access_token
        )
        
        # Set up conversation chain
        self.memory = ConversationBufferMemory()
        self.conversation = ConversationChain(
            llm=self.llm,
            memory=self.memory,
            verbose=True
        )
    
    def _get_token(self) -> str:
        """Get Azure AD token."""
        try:
            token = self.credential.get_token("https://cognitiveservices.azure.com/.default")
            return token.token
        except Exception as e:
            logger.error(f"Failed to get token: {str(e)}")
            raise
    
    def _refresh_token_if_needed(self):
        """Refresh the access token if it's older than 55 minutes."""
        current_time = time.time()
        if current_time - self.token_refresh_time > 3300:  # 55 minutes
            self.access_token = self._get_token()
            self.token_refresh_time = current_time
            self.llm.azure_ad_token = self.access_token
    
    def chat(self, message: str) -> str:
        """Process a single message and return the response."""
        if not message.strip():
            return "Please provide a non-empty message."
        
        try:
            self._refresh_token_if_needed()
            response = self.conversation.predict(input=message)
            return response
        except Exception as e:
            logger.error(f"Error in chat: {str(e)}")
            return f"An error occurred: {str(e)}"

def main():
    """Main function to run the chatbot."""
    # Create .env template if needed
    if create_env_template():
        return
    
    try:
        print("Initializing chatbot...")
        print("Testing connection and authenticating...")
        
        chatbot = AzureChatbot()
        
        print("\nChatbot initialized successfully!")
        print("Type 'quit', 'exit', or 'bye' to end the conversation")
        print("-" * 50)
        
        while True:
            user_input = input("\nYou: ").strip()
            
            if user_input.lower() in ['quit', 'exit', 'bye']:
                print("Goodbye!")
                break
            
            response = chatbot.chat(user_input)
            print(f"\nBot: {response}")
            
    except ValueError as e:
        print(f"\nConfiguration Error: {str(e)}")
        print("Please check your .env file and ensure all required variables are set.")
    except ConnectionError as e:
        print(f"\nConnection Error: {str(e)}")
        print("Please check your internet connection and proxy settings.")
    except Exception as e:
        print(f"\nUnexpected Error: {str(e)}")
        print("Please check the logs for more details.")
        logger.exception("Unexpected error occurred")

if __name__ == "__main__":
    main()
