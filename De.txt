"""
System monitoring module for collecting and storing performance metrics.
This can be run as a separate process or integrated with the main application.
"""

import logging
import time
import threading
import psutil
from typing import Dict, Any, Optional
from app.core.db_manager import DBManager
from app.api.routes.enhancement import enhancement_jobs
from app.api.routes.tagging import tagging_jobs
from app.api.routes.pbt_tagging import pbt_tagging_jobs

logger = logging.getLogger(__name__)

class SystemMonitor:
    """System monitoring service for collecting and storing performance metrics."""
    
    _instance = None
    
    def __new__(cls):
        """Singleton pattern to ensure only one monitoring instance."""
        if cls._instance is None:
            cls._instance = super(SystemMonitor, cls).__new__(cls)
            cls._instance._initialized = False
        return cls._instance
    
    def __init__(self):
        """Initialize the system monitor."""
        if self._initialized:
            return
            
        self._initialized = True
        self.db_manager = DBManager()
        self.monitoring_thread = None
        self.stop_event = threading.Event()
        self.interval = 300  # Collect metrics every 5 minutes by default
        
        logger.info("System monitor initialized")
    
    def start(self, interval: int = 300):
        """
        Start the monitoring thread.
        
        Args:
            interval: Interval in seconds between metrics collection
        """
        if self.monitoring_thread and self.monitoring_thread.is_alive():
            logger.warning("Monitoring thread is already running")
            return
        
        self.interval = interval
        self.stop_event.clear()
        self.monitoring_thread = threading.Thread(target=self._monitoring_loop, daemon=True)
        self.monitoring_thread.start()
        
        logger.info(f"System monitoring started with {interval}s interval")
    
    def stop(self):
        """Stop the monitoring thread."""
        if not self.monitoring_thread or not self.monitoring_thread.is_alive():
            logger.warning("Monitoring thread is not running")
            return
        
        self.stop_event.set()
        self.monitoring_thread.join(timeout=5)
        
        if self.monitoring_thread.is_alive():
            logger.warning("Monitoring thread could not be stopped gracefully")
        else:
            logger.info("System monitoring stopped")
    
    def _monitoring_loop(self):
        """Main monitoring loop that collects metrics at regular intervals."""
        while not self.stop_event.is_set():
            try:
                self.collect_and_store_metrics()
                
                # Sleep until next interval or until stop event is set
                self.stop_event.wait(self.interval)
            except Exception as e:
                logger.error(f"Error in monitoring loop: {e}")
                # Sleep a bit before retrying
                time.sleep(10)
    
    def collect_metrics(self) -> Dict[str, Any]:
        """
        Collect system metrics.
        
        Returns:
            Dict containing system metrics
        """
        try:
            # Get CPU and memory usage
            cpu_percent = psutil.cpu_percent(interval=1)
            memory = psutil.virtual_memory()
            memory_percent = memory.percent
            
            # Get job counts
            enhancement_jobs_count = len(enhancement_jobs)
            tagging_jobs_count = len(tagging_jobs)
            pbt_tagging_jobs_count = len(pbt_tagging_jobs)
            
            return {
                "cpu_usage": cpu_percent,
                "memory_usage": memory_percent,
                "enhancement_jobs_count": enhancement_jobs_count,
                "tagging_jobs_count": tagging_jobs_count,
                "pbt_tagging_jobs_count": pbt_tagging_jobs_count
            }
        except Exception as e:
            logger.error(f"Error collecting metrics: {e}")
            return {
                "cpu_usage": 0.0,
                "memory_usage": 0.0,
                "enhancement_jobs_count": 0,
                "tagging_jobs_count": 0,
                "pbt_tagging_jobs_count": 0
            }
    
    def collect_and_store_metrics(self) -> bool:
        """
        Collect and store system metrics in the database.
        
        Returns:
            True if successful, False otherwise
        """
        try:
            # Collect metrics
            metrics = self.collect_metrics()
            
            # Store in database
            success = self.db_manager.record_system_stats(
                cpu_usage=metrics["cpu_usage"],
                memory_usage=metrics["memory_usage"],
                enhancement_jobs_count=metrics["enhancement_jobs_count"],
                tagging_jobs_count=metrics["tagging_jobs_count"],
                pbt_tagging_jobs_count=metrics["pbt_tagging_jobs_count"]
            )
            
            if success:
                logger.debug("System metrics recorded successfully")
            else:
                logger.warning("Failed to record system metrics")
            
            return success
        except Exception as e:
            logger.error(f"Error collecting and storing metrics: {e}")
            return False
    
    def get_recent_metrics(self, limit: int = 24) -> list:
        """
        Get recent system metrics from the database.
        
        Args:
            limit: Maximum number of records to retrieve
            
        Returns:
            List of dictionaries containing metrics
        """
        try:
            return self.db_manager.get_system_stats(limit=limit)
        except Exception as e:
            logger.error(f"Error retrieving system metrics: {e}")
            return []
    
    def get_disk_usage(self) -> Dict[str, Any]:
        """
        Get disk usage statistics.
        
        Returns:
            Dict with disk usage statistics
        """
        try:
            disk_usage = psutil.disk_usage('/')
            return {
                "total_gb": round(disk_usage.total / (1024 * 1024 * 1024), 2),
                "used_gb": round(disk_usage.used / (1024 * 1024 * 1024), 2),
                "free_gb": round(disk_usage.free / (1024 * 1024 * 1024), 2),
                "percent": disk_usage.percent
            }
        except Exception as e:
            logger.error(f"Error getting disk usage: {e}")
            return {
                "total_gb": 0,
                "used_gb": 0,
                "free_gb": 0,
                "percent": 0
            }
    
    def get_network_stats(self) -> Dict[str, Any]:
        """
        Get network statistics.
        
        Returns:
            Dict with network statistics
        """
        try:
            # Get initial counters
            net_io_counters_start = psutil.net_io_counters()
            
            # Wait for a short period to calculate rates
            time.sleep(1)
            
            # Get updated counters
            net_io_counters_end = psutil.net_io_counters()
            
            # Calculate rates
            bytes_sent = net_io_counters_end.bytes_sent - net_io_counters_start.bytes_sent
            bytes_recv = net_io_counters_end.bytes_recv - net_io_counters_start.bytes_recv
            
            return {
                "bytes_sent_per_sec": bytes_sent,
                "bytes_recv_per_sec": bytes_recv,
                "total_sent_gb": round(net_io_counters_end.bytes_sent / (1024 * 1024 * 1024), 2),
                "total_recv_gb": round(net_io_counters_end.bytes_recv / (1024 * 1024 * 1024), 2)
            }
        except Exception as e:
            logger.error(f"Error getting network stats: {e}")
            return {
                "bytes_sent_per_sec": 0,
                "bytes_recv_per_sec": 0,
                "total_sent_gb": 0,
                "total_recv_gb": 0
            }
    
    def get_system_info(self) -> Dict[str, Any]:
        """
        Get system information.
        
        Returns:
            Dict with system information
        """
        try:
            boot_time = psutil.boot_time()
            uptime_seconds = time.time() - boot_time
            
            # Format uptime as days, hours, minutes
            days = int(uptime_seconds // (24 * 3600))
            hours = int((uptime_seconds % (24 * 3600)) // 3600)
            minutes = int((uptime_seconds % 3600) // 60)
            
            cpu_count = psutil.cpu_count()
            cpu_physical = psutil.cpu_count(logical=False)
            
            return {
                "boot_time": boot_time,
                "uptime": {
                    "days": days,
                    "hours": hours,
                    "minutes": minutes,
                    "total_seconds": int(uptime_seconds)
                },
                "cpu": {
                    "logical_count": cpu_count,
                    "physical_count": cpu_physical
                },
                "memory": {
                    "total_gb": round(psutil.virtual_memory().total / (1024 * 1024 * 1024), 2)
                }
            }
        except Exception as e:
            logger.error(f"Error getting system info: {e}")
            return {
                "boot_time": 0,
                "uptime": {
                    "days": 0,
                    "hours": 0,
                    "minutes": 0,
                    "total_seconds": 0
                },
                "cpu": {
                    "logical_count": 0,
                    "physical_count": 0
                },
                "memory": {
                    "total_gb": 0
                }
            }

# Create a singleton instance
system_monitor = SystemMonitor()

def start_monitoring(interval: int = 300):
    """
    Start the system monitoring as a background process.
    
    Args:
        interval: Interval in seconds between metrics collection
    """
    system_monitor.start(interval=interval)

def stop_monitoring():
    """Stop the system monitoring."""
    system_monitor.stop()

def get_recent_metrics(limit: int = 24):
    """
    Get recent system metrics.
    
    Args:
        limit: Maximum number of records to retrieve
        
    Returns:
        List of dictionaries containing metrics
    """
    return system_monitor.get_recent_metrics(limit=limit)

def get_system_health():
    """
    Get a comprehensive system health overview.
    
    Returns:
        Dict with system health information
    """
    try:
        metrics = system_monitor.collect_metrics()
        disk = system_monitor.get_disk_usage()
        network = system_monitor.get_network_stats()
        system_info = system_monitor.get_system_info()
        
        return {
            "status": "healthy",
            "metrics": metrics,
            "disk": disk,
            "network": network,
            "system_info": system_info,
            "jobs": {
                "enhancement": metrics["enhancement_jobs_count"],
                "tagging": metrics["tagging_jobs_count"],
                "pbt_tagging": metrics["pbt_tagging_jobs_count"]
            }
        }
    except Exception as e:
        logger.error(f"Error getting system health: {e}")
        return {
            "status": "error",
            "error": str(e)
        }
