def populate_slide_6(slide, df):
    delete_existing_tables(slide)
    headers = ["Process", "Consumed or Produced", "Business", "Process Owner", "Total Metrics", "BDEs at Boundary Level", "Pass Through BDEs", "Pass Through Metrics"]
    table = create_table(slide, headers, num_rows=1 + 2 * df['Process'].nunique(), top_position=Inches(1))

    row_data = []
    for process in df['Process'].unique():
        process_data = df[df['Process'] == process]

        # Consumed calculations
        consumed_metrics = process_data['Consumed Metric'].loc[process_data['Consumed Metric'] != ''].nunique()

        # Boundary BDEs for consumed: Includes specific Flow Type keywords without grouping parentheses
        boundary_consumed_bdes = process_data[
            (process_data['Consumed BDE'] != '') &
            (
                process_data['Flow Type'].str.contains('Inbound Element', case=False, na=False) |
                process_data['Flow Type'].str.contains('In-bound Element', case=False, na=False) |
                process_data['Flow Type'].str.contains('Pass-Through', case=False, na=False) |
                process_data['Flow Type'].str.contains('Pass Through', case=False, na=False)
            )
        ]['Consumed BDE'].nunique()

        # Pass-Through BDEs for consumed (same as boundary in this case)
        pass_through_consumed_bdes = boundary_consumed_bdes

        # Pass-Through Metrics for consumed
        pass_through_metrics_consumed = process_data[
            (process_data['Consumed Metric'] != '') &
            (
                process_data['Flow Type'].str.contains('Pass Through', case=False, na=False) |
                process_data['Flow Type'].str.contains('Pass-Through', case=False, na=False)
            )
        ]['Consumed Metric'].nunique()

        row_data.append([
            process, 'Consumed', process_data['Business'].iloc[0] if 'Business' in process_data.columns else '',
            process_data['Process Owner'].iloc[0] if 'Process Owner' in process_data.columns else '',
            consumed_metrics, boundary_consumed_bdes, pass_through_consumed_bdes, pass_through_metrics_consumed
        ])

        # Produced calculations
        produced_metrics = process_data['Produced Metric'].loc[process_data['Produced Metric'] != ''].nunique()

        # Boundary BDEs for produced: Includes specific Flow Type keywords without grouping parentheses
        boundary_produced_bdes = process_data[
            (process_data['Produced BDE'] != '') &
            (
                process_data['Flow Type'].str.contains('Process Output', case=False, na=False) |
                process_data['Flow Type'].str.contains('Process-Output', case=False, na=False) |
                process_data['Flow Type'].str.contains('Pass-Through', case=False, na=False) |
                process_data['Flow Type'].str.contains('Pass Through', case=False, na=False)
            )
        ]['Produced BDE'].nunique()

        # Pass-Through BDEs for produced (same as boundary in this case)
        pass_through_produced_bdes = boundary_produced_bdes

        # Pass-Through Metrics for produced
        pass_through_metrics_produced = process_data[
            (process_data['Produced Metric'] != '') &
            (
                process_data['Flow Type'].str.contains('Pass Through', case=False, na=False) |
                process_data['Flow Type'].str.contains('Pass-Through', case=False, na=False)
            )
        ]['Produced Metric'].nunique()

        row_data.append([
            process, 'Produced', process_data['Business'].iloc[0] if 'Business' in process_data.columns else '',
            process_data['Process Owner'].iloc[0] if 'Process Owner' in process_data.columns else '',
            produced_metrics, boundary_produced_bdes, pass_through_produced_bdes, pass_through_metrics_produced
        ])

    populate_table(table, row_data)
