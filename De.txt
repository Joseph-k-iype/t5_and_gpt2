// frontend/src/App.jsx
import React, { useState, useEffect } from 'react';
import { QueryClient, QueryClientProvider } from 'react-query';
import { ReactQueryDevtools } from 'react-query/devtools';
import { Toaster } from 'react-hot-toast';
import MainLayout from './components/Layout/MainLayout';
import { SessionProvider } from './contexts/SessionContext';
import { ChatProvider } from './contexts/ChatContext';
import { ResearchProvider } from './contexts/ResearchContext';
import ErrorBoundary from './components/Common/ErrorBoundary';
import './styles/newyorker-theme.css';

// Create a query client for React Query
const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      retry: 2,
      refetchOnWindowFocus: false,
      staleTime: 5 * 60 * 1000, // 5 minutes
    },
  },
});

function App() {
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    // Simulate app initialization
    const timer = setTimeout(() => {
      setIsLoading(false);
    }, 1000);

    return () => clearTimeout(timer);
  }, []);

  if (isLoading) {
    return (
      <div className="min-h-screen bg-newyorker-paper flex items-center justify-center">
        <div className="text-center">
          <div className="animate-pulse">
            <h1 className="headline text-newyorker-black mb-4">
              Deep Research
            </h1>
            <p className="body-text text-newyorker-muted">
              Initializing research environment...
            </p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <ErrorBoundary>
      <QueryClientProvider client={queryClient}>
        <SessionProvider>
          <ChatProvider>
            <ResearchProvider>
              <div className="App bg-newyorker-paper min-h-screen">
                <MainLayout />
                <Toaster
                  position="bottom-right"
                  toastOptions={{
                    duration: 4000,
                    style: {
                      background: '#1a1a1a',
                      color: '#fffef7',
                      fontFamily: 'Inter, system-ui, sans-serif',
                    },
                  }}
                />
              </div>
            </ResearchProvider>
          </ChatProvider>
        </SessionProvider>
        <ReactQueryDevtools initialIsOpen={false} />
      </QueryClientProvider>
    </ErrorBoundary>
  );
}

export default App;

// frontend/src/components/Layout/MainLayout.jsx
import React, { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import Header from './Header';
import ChatContainer from '../Chat/ChatContainer';
import ResearchPanel from '../Research/ResearchPanel';
import KnowledgeGraph from '../KnowledgeGraph/KnowledgeGraph';
import Accordion from '../Common/Accordion';
import { useChat } from '../../hooks/useChat';
import { useResearch } from '../../hooks/useResearch';

const MainLayout = () => {
  const [rightPanelMode, setRightPanelMode] = useState('research'); // 'research' | 'knowledge-graph'
  const { messages, isTyping } = useChat();
  const { currentResearch, isResearching } = useResearch();

  return (
    <div className="min-h-screen bg-newyorker-paper">
      <Header />
      
      <main className="magazine-layout pt-20">
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 h-[calc(100vh-5rem)]">
          {/* Left Column - Chat Interface */}
          <motion.div
            initial={{ opacity: 0, x: -20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ duration: 0.6 }}
            className="flex flex-col h-full"
          >
            <div className="mb-6">
              <h1 className="headline text-newyorker-black mb-2">
                Research Assistant
              </h1>
              <p className="subheadline text-newyorker-muted">
                Explore complex topics with AI-powered deep research
              </p>
            </div>
            
            <div className="flex-1 bg-newyorker-cream border border-newyorker-gray-200 rounded-none shadow-sm">
              <ChatContainer />
            </div>
          </motion.div>

          {/* Right Column - Research & Knowledge Graph */}
          <motion.div
            initial={{ opacity: 0, x: 20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ duration: 0.6, delay: 0.2 }}
            className="flex flex-col h-full"
          >
            {/* Panel Mode Toggle */}
            <div className="mb-4 flex space-x-4">
              <button
                onClick={() => setRightPanelMode('research')}
                className={`px-4 py-2 text-sm font-medium transition-colors ${
                  rightPanelMode === 'research'
                    ? 'text-newyorker-black border-b-2 border-newyorker-accent'
                    : 'text-newyorker-muted hover:text-newyorker-black'
                }`}
              >
                Research Report
              </button>
              <button
                onClick={() => setRightPanelMode('knowledge-graph')}
                className={`px-4 py-2 text-sm font-medium transition-colors ${
                  rightPanelMode === 'knowledge-graph'
                    ? 'text-newyorker-black border-b-2 border-newyorker-accent'
                    : 'text-newyorker-muted hover:text-newyorker-black'
                }`}
              >
                Knowledge Graph
              </button>
            </div>

            {/* Content Panel */}
            <AnimatePresence mode="wait">
              <motion.div
                key={rightPanelMode}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -20 }}
                transition={{ duration: 0.3 }}
                className="flex-1 bg-newyorker-cream border border-newyorker-gray-200 rounded-none shadow-sm overflow-hidden"
              >
                {rightPanelMode === 'research' ? (
                  <ResearchPanel />
                ) : (
                  <div className="h-full flex flex-col">
                    <div className="p-4 border-b border-newyorker-gray-200">
                      <h3 className="text-lg font-medium text-newyorker-black">
                        Knowledge Graph
                      </h3>
                      <p className="text-sm text-newyorker-muted mt-1">
                        Interactive visualization of concepts and relationships
                      </p>
                    </div>
                    
                    <Accordion
                      title="Graph Visualization"
                      defaultOpen={true}
                      className="flex-1"
                    >
                      <div className="h-96">
                        <KnowledgeGraph />
                      </div>
                    </Accordion>
                  </div>
                )}
              </motion.div>
            </AnimatePresence>
          </main>
        </div>
      </main>
    </div>
  );
};

export default MainLayout;

// frontend/src/components/Layout/Header.jsx
import React from 'react';
import { motion } from 'framer-motion';
import { Search, Settings, User, HelpCircle } from 'lucide-react';
import { useSession } from '../../hooks/useSession';

const Header = () => {
  const { sessionId, sessionStats } = useSession();

  return (
    <motion.header
      initial={{ opacity: 0, y: -10 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.4 }}
      className="fixed top-0 left-0 right-0 z-50 bg-newyorker-paper/95 backdrop-blur-sm border-b border-newyorker-gray-200"
    >
      <div className="magazine-layout">
        <div className="flex items-center justify-between py-4">
          {/* Logo/Brand */}
          <div className="flex items-center space-x-4">
            <h1 className="text-2xl font-display font-normal text-newyorker-black">
              Deep Research
            </h1>
            <div className="hidden md:block h-6 w-px bg-newyorker-gray-300" />
            <div className="hidden md:block text-sm text-newyorker-muted font-sans">
              Powered by AI
            </div>
          </div>

          {/* Navigation & Controls */}
          <div className="flex items-center space-x-6">
            {/* Session Info */}
            {sessionId && (
              <div className="hidden lg:flex items-center space-x-4 text-xs text-newyorker-muted font-sans">
                <span>Session: {sessionId.slice(-8)}</span>
                {sessionStats && (
                  <span>Messages: {sessionStats.messageCount}</span>
                )}
              </div>
            )}

            {/* Action Buttons */}
            <div className="flex items-center space-x-3">
              <button
                className="p-2 text-newyorker-muted hover:text-newyorker-black transition-colors"
                title="Search"
              >
                <Search size={18} />
              </button>
              
              <button
                className="p-2 text-newyorker-muted hover:text-newyorker-black transition-colors"
                title="Help"
              >
                <HelpCircle size={18} />
              </button>
              
              <button
                className="p-2 text-newyorker-muted hover:text-newyorker-black transition-colors"
                title="Settings"
              >
                <Settings size={18} />
              </button>
              
              <button
                className="p-2 text-newyorker-muted hover:text-newyorker-black transition-colors"
                title="Profile"
              >
                <User size={18} />
              </button>
            </div>
          </div>
        </div>
      </div>
    </motion.header>
  );
};

export default Header;

// frontend/src/components/Common/ErrorBoundary.jsx
import React from 'react';

class ErrorBoundary extends React.Component {
  constructor(props) {
    super(props);
    this.state = { hasError: false, error: null, errorInfo: null };
  }

  static getDerivedStateFromError(error) {
    return { hasError: true };
  }

  componentDidCatch(error, errorInfo) {
    this.setState({
      error: error,
      errorInfo: errorInfo
    });
  }

  render() {
    if (this.state.hasError) {
      return (
        <div className="min-h-screen bg-newyorker-paper flex items-center justify-center p-8">
          <div className="max-w-md text-center">
            <h1 className="headline text-newyorker-black mb-4">
              Something went wrong
            </h1>
            <p className="body-text text-newyorker-muted mb-6">
              We encountered an unexpected error. Please refresh the page to continue.
            </p>
            
            <button
              onClick={() => window.location.reload()}
              className="btn btn-primary"
            >
              Refresh Page
            </button>
            
            {process.env.NODE_ENV === 'development' && (
              <details className="mt-6 text-left text-sm text-newyorker-muted">
                <summary className="cursor-pointer mb-2">Error Details</summary>
                <pre className="whitespace-pre-wrap bg-newyorker-gray-50 p-4 rounded border text-xs">
                  {this.state.error && this.state.error.toString()}
                  <br />
                  {this.state.errorInfo.componentStack}
                </pre>
              </details>
            )}
          </div>
        </div>
      );
    }

    return this.props.children;
  }
}

export default ErrorBoundary;
