import React, { useState, useCallback, useEffect } from 'react';
import ReactFlow, {
  Node,
  Edge,
  useNodesState,
  useEdgesState,
  Background,
  Controls,
  MiniMap,
} from 'reactflow';
import 'reactflow/dist/style.css';

interface GraphVisualizationProps {
  message: string;
  metadata?: any;
  messageType: string;
}

const GraphVisualization: React.FC<GraphVisualizationProps> = ({
  message,
  metadata,
  messageType
}) => {
  const [nodes, setNodes, onNodesChange] = useNodesState([]);
  const [edges, setEdges, onEdgesChange] = useEdgesState([]);
  const [isLoading, setIsLoading] = useState(true);

  // Extract concepts from message content
  const extractConcepts = useCallback((text: string) => {
    const concepts = new Set<string>();
    const jurisdictions = new Set<string>();

    // Simple privacy terms
    const privacyTerms = [
      'personal data', 'consent', 'processing', 'privacy', 'breach',
      'rights', 'access', 'security', 'compliance', 'data protection'
    ];

    // Jurisdictions
    const jurisdictionTerms = [
      'GDPR', 'EU', 'CCPA', 'California', 'LGPD', 'Brazil', 
      'PIPEDA', 'Canada', 'PDPA', 'Singapore'
    ];

    const textLower = text.toLowerCase();

    privacyTerms.forEach(term => {
      if (textLower.includes(term.toLowerCase())) {
        concepts.add(term);
      }
    });

    jurisdictionTerms.forEach(term => {
      if (textLower.includes(term.toLowerCase())) {
        jurisdictions.add(term);
      }
    });

    return {
      concepts: Array.from(concepts).slice(0, 6),
      jurisdictions: Array.from(jurisdictions).slice(0, 4)
    };
  }, []);

  // Create basic nodes and edges
  const createGraph = useCallback(() => {
    setIsLoading(true);
    
    const extracted = extractConcepts(message);
    const newNodes: Node[] = [];
    const newEdges: Edge[] = [];
    
    // Main topic node
    let mainTopic = 'Privacy Topic';
    if (metadata?.intent) {
      mainTopic = metadata.intent;
    }
    
    // Central node - using default node type
    newNodes.push({
      id: '1',
      type: 'default',
      position: { x: 250, y: 200 },
      data: { label: mainTopic },
      style: { 
        background: '#e0e7ff', 
        border: '2px solid #6366f1', 
        borderRadius: '8px',
        fontSize: '14px',
        fontWeight: 'bold'
      }
    });

    let nodeId = 2;

    // Add jurisdiction nodes
    extracted.jurisdictions.forEach((jurisdiction, index) => {
      newNodes.push({
        id: nodeId.toString(),
        type: 'default',
        position: { x: 100 + index * 120, y: 100 },
        data: { label: jurisdiction },
        style: { 
          background: '#dcfce7', 
          border: '2px solid #16a34a', 
          borderRadius: '8px' 
        }
      });

      newEdges.push({
        id: `e1-${nodeId}`,
        source: '1',
        target: nodeId.toString(),
        style: { stroke: '#16a34a', strokeWidth: 2 }
      });

      nodeId++;
    });

    // Add concept nodes
    extracted.concepts.forEach((concept, index) => {
      newNodes.push({
        id: nodeId.toString(),
        type: 'default',
        position: { x: 50 + index * 100, y: 300 },
        data: { label: concept },
        style: { 
          background: '#dbeafe', 
          border: '2px solid #2563eb', 
          borderRadius: '8px' 
        }
      });

      newEdges.push({
        id: `e1-${nodeId}`,
        source: '1',
        target: nodeId.toString(),
        style: { stroke: '#2563eb', strokeWidth: 1.5 }
      });

      nodeId++;
    });

    console.log('Created nodes:', newNodes);
    console.log('Created edges:', newEdges);

    setNodes(newNodes);
    setEdges(newEdges);
    setIsLoading(false);
  }, [message, metadata, extractConcepts]);

  useEffect(() => {
    createGraph();
  }, [createGraph]);

  if (isLoading) {
    return (
      <div className="w-full h-full flex items-center justify-center bg-gray-50">
        <div className="text-center">
          <div className="w-8 h-8 border-4 border-blue-200 border-t-blue-500 rounded-full animate-spin mx-auto mb-2"></div>
          <p className="text-gray-600">Loading graph...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="w-full h-full">
      <div style={{ width: '100%', height: '100%' }}>
        <ReactFlow
          nodes={nodes}
          edges={edges}
          onNodesChange={onNodesChange}
          onEdgesChange={onEdgesChange}
          fitView
          fitViewOptions={{ padding: 0.2 }}
          style={{ width: '100%', height: '100%' }}
          minZoom={0.3}
          maxZoom={2}
        >
          <Background color="#f8fafc" gap={12} />
          <Controls />
          <MiniMap 
            style={{ height: 100, width: 150 }}
            zoomable
            pannable
          />
        </ReactFlow>
      </div>
      
      {/* Debug info */}
      <div className="absolute bottom-2 left-2 bg-white/90 px-2 py-1 rounded text-xs">
        {nodes.length} nodes, {edges.length} connections
      </div>
    </div>
  );
};

export default GraphVisualization;
