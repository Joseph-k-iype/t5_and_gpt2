import React, { useCallback, useEffect, useState } from 'react';
import {
  ReactFlow,
  Background,
  Controls,
  MiniMap,
  useNodesState,
  useEdgesState,
  NodeTypes,
  SelectionMode,
  Panel,
  Node,
  Edge,
} from '@xyflow/react';
import '@xyflow/react/dist/style.css';

import RuleNode from './RuleNode';
import RuleDetailsPanel from './RuleDetailsPanel';
import LoadingSpinner from './LoadingSpinner';
import { useRulesData } from '../hooks/useRulesData';
import { useAutoLayout } from '../hooks/useAutoLayout';
import { ParsedRuleNode } from '../types/rules';
import { AlertCircle, Info, Zap } from 'lucide-react';

const nodeTypes: NodeTypes = {
  rule: RuleNode,
};

interface RulesFlowProps {
  layoutDirection: 'TB' | 'LR' | 'BT' | 'RL';
  onLayoutChange?: (direction: 'TB' | 'LR' | 'BT' | 'RL') => void;
}

const RulesFlow: React.FC<RulesFlowProps> = ({ layoutDirection, onLayoutChange }) => {
  const { ruleGraph, loading, error, refetch } = useRulesData();
  const { layoutNodes } = useAutoLayout();
  const [nodes, setNodes, onNodesChange] = useNodesState([]);
  const [edges, setEdges, onEdgesChange] = useEdgesState([]);
  const [selectedNode, setSelectedNode] = useState<ParsedRuleNode | null>(null);

  // Update nodes and edges when ruleGraph changes
  useEffect(() => {
    if (ruleGraph.nodes.length > 0) {
      layoutNodes(ruleGraph.nodes, ruleGraph.edges, { direction: layoutDirection });
    }
  }, [ruleGraph, layoutNodes, layoutDirection]);

  // Handle node selection
  const onNodeClick = useCallback((event: React.MouseEvent, node: Node) => {
    setSelectedNode(node as ParsedRuleNode);
  }, []);

  // Handle closing details panel
  const handleCloseDetails = useCallback(() => {
    setSelectedNode(null);
  }, []);

  // Handle background click to deselect
  const onPaneClick = useCallback(() => {
    setSelectedNode(null);
  }, []);

  if (loading) {
    return <LoadingSpinner message="Loading and parsing rules..." fullScreen />;
  }

  if (error) {
    return (
      <div className="h-full flex items-center justify-center bg-gray-50">
        <div className="text-center max-w-md mx-auto p-6">
          <div className="flex justify-center mb-4">
            <div className="w-16 h-16 bg-red-100 rounded-full flex items-center justify-center">
              <AlertCircle className="w-8 h-8 text-red-600" />
            </div>
          </div>
          <h2 className="text-xl font-semibold text-gray-900 mb-2">Failed to Load Rules</h2>
          <p className="text-gray-600 mb-4">{error}</p>
          <button
            onClick={refetch}
            className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
          >
            Try Again
          </button>
          
          <div className="mt-6 p-4 bg-yellow-50 rounded-lg text-left">
            <div className="flex items-start space-x-2">
              <Info className="w-5 h-5 text-yellow-600 mt-0.5 flex-shrink-0" />
              <div className="text-sm text-yellow-800">
                <strong>Make sure:</strong>
                <ul className="mt-1 space-y-1 list-disc list-inside">
                  <li>The file <code>json_rules_engine_format.json</code> exists in the <code>public</code> folder</li>
                  <li>The JSON format is valid and follows json-rules-engine structure</li>
                  <li>Each rule has <code>conditions</code> and <code>event</code> properties</li>
                </ul>
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  }

  if (ruleGraph.nodes.length === 0) {
    return (
      <div className="h-full flex items-center justify-center bg-gray-50">
        <div className="text-center">
          <div className="flex justify-center mb-4">
            <div className="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center">
              <Zap className="w-8 h-8 text-gray-400" />
            </div>
          </div>
          <h2 className="text-xl font-semibold text-gray-900 mb-2">No Rules Found</h2>
          <p className="text-gray-600">No valid rules were found in the uploaded file.</p>
        </div>
      </div>
    );
  }

  return (
    <div className="h-full relative">
      <ReactFlow
        nodes={nodes}
        edges={edges}
        onNodesChange={onNodesChange}
        onEdgesChange={onEdgesChange}
        onNodeClick={onNodeClick}
        onPaneClick={onPaneClick}
        nodeTypes={nodeTypes}
        selectionMode={SelectionMode.Partial}
        panOnScroll
        selectionKeyCode="Shift"
        multiSelectionKeyCode="Shift"
        fitView
        fitViewOptions={{
          padding: 50,
          maxZoom: 1.2,
        }}
        className="bg-gray-50"
      >
        <Background color="#e5e7eb" gap={20} />
        <Controls 
          position="bottom-left"
          showInteractive={false}
        />
        <MiniMap 
          position="bottom-right"
          pannable
          zoomable
          nodeColor={(node) => {
            const priority = (node.data as any)?.priority || 50;
            if (priority >= 80) return '#dc2626';
            if (priority >= 60) return '#ea580c';
            if (priority >= 40) return '#2563eb';
            return '#6b7280';
          }}
        />
        
        {/* Info Panel */}
        <Panel position="top-left" className="bg-white rounded-lg shadow-lg border border-gray-200 p-4 max-w-xs">
          <div className="space-y-2">
            <div className="flex items-center space-x-2">
              <div className="w-3 h-3 bg-blue-600 rounded-full"></div>
              <span className="text-sm text-gray-700">Click on nodes to view details</span>
            </div>
            <div className="flex items-center space-x-2">
              <div className="w-3 h-3 bg-gray-400 rounded-full"></div>
              <span className="text-sm text-gray-700">Drag to pan, scroll to zoom</span>
            </div>
            <div className="flex items-center space-x-2">
              <div className="w-3 h-3 bg-green-600 rounded-full"></div>
              <span className="text-sm text-gray-700">Use controls to navigate</span>
            </div>
          </div>
        </Panel>

        {/* Stats Panel */}
        <Panel position="top-right" className="bg-white rounded-lg shadow-lg border border-gray-200 p-4">
          <div className="text-center">
            <div className="text-2xl font-bold text-gray-900">{ruleGraph.nodes.length}</div>
            <div className="text-sm text-gray-600">Rules Loaded</div>
          </div>
        </Panel>
      </ReactFlow>

      {/* Rule Details Panel */}
      {selectedNode && (
        <RuleDetailsPanel 
          node={selectedNode} 
          onClose={handleCloseDetails} 
        />
      )}
    </div>
  );
};

export default RulesFlow;
