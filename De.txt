import React, { useCallback, useState, useMemo, useRef } from 'react';
import {
  ReactFlow,
  Node,
  Edge,
  NodeTypes,
  useNodesState,
  useEdgesState,
  addEdge,
  Connection,
  Background,
  Controls,
  Panel,
  NodeProps,
  Handle,
  Position,
  OnConnect,
  OnNodesChange,
  OnEdgesChange,
  OnNodeContextMenu,
  ReactFlowProvider,
} from '@xyflow/react';
import '@xyflow/react/dist/style.css';

// Type definitions for our GDPR data structure
interface GDPRCondition {
  condition_id: string;
  condition_definition: string;
  fact: string;
  operator: string;
  value: string | string[] | boolean | number;
  role: string;
  if_condition: string;
  else_condition: string;
}

interface GDPRRule {
  rule_id: string;
  rule_definition: string;
  rule_type: string;
  applicable_countries: string[];
  adequacy_countries: string[];
  conditions: GDPRCondition[];
  aggregated_roles: string[];
  data_category: string;
  domain: string;
  action: string;
  consequence: string;
  reference: string;
  priority: 'high' | 'medium' | 'low';
  event_type: string;
  params: Record<string, any>;
}

interface GDPRData {
  engine_version: string;
  rules: GDPRRule[];
  metadata: {
    generated_by: string;
    generation_date: string;
    total_rules: number;
    methodology: string;
    supervisor_validated: boolean;
    simple_english_rules: boolean;
  };
}

// Node data types
interface RuleNodeData {
  rule: GDPRRule;
}

interface DetailNodeData {
  label: string;
  content: string;
  type: 'action' | 'consequence' | 'general';
}

interface CountryNodeData {
  label: string;
  countries: string[];
  type: 'applicable' | 'adequacy';
}

interface ConditionNodeData {
  condition: GDPRCondition;
  index: number;
}

interface RoleNodeData {
  roles: string[];
}

// Define custom node types with proper typing
type RuleNode = Node<RuleNodeData, 'ruleNode'>;
type DetailNode = Node<DetailNodeData, 'detailNode'>;
type CountryNode = Node<CountryNodeData, 'countryNode'>;
type ConditionNode = Node<ConditionNodeData, 'conditionNode'>;
type RoleNode = Node<RoleNodeData, 'roleNode'>;

type CustomNode = RuleNode | DetailNode | CountryNode | ConditionNode | RoleNode;

// Sample GDPR data (in production, this would be imported or fetched)
const gdprData: GDPRData = {
  "engine_version": "1.0",
  "rules": [
    {
      "rule_id": "a1b2c3d4_access_right_001",
      "rule_definition": "Data subjects have the right to obtain confirmation from the controller about whether their personal data is being processed",
      "rule_type": "access_right",
      "applicable_countries": ["DE", "FR", "IT", "ES"],
      "adequacy_countries": ["CA", "CH", "JP"],
      "conditions": [
        {
          "condition_id": "cond_12345678",
          "condition_definition": "When a data subject submits a valid access request",
          "fact": "request.type",
          "operator": "equal",
          "value": "subject_access_request",
          "role": "data_subject",
          "if_condition": "IF the request is a valid access request",
          "else_condition": "ELSE reject the invalid request"
        }
      ],
      "aggregated_roles": ["data_subject", "data_controller"],
      "data_category": "personal_data",
      "domain": "data_subject_rights",
      "action": "Provide confirmation and copy of personal data being processed",
      "consequence": "Administrative fine up to 4% of annual worldwide turnover",
      "reference": "GDPR Article 15(1)",
      "priority": "high",
      "event_type": "rule_evaluation",
      "params": {}
    },
    {
      "rule_id": "a1b2c3d4_processing_obligation_002",
      "rule_definition": "Data controllers must implement appropriate technical and organizational measures to ensure data security",
      "rule_type": "processing_obligation",
      "applicable_countries": ["DE", "FR", "IT", "ES"],
      "adequacy_countries": ["CA", "CH", "JP"],
      "conditions": [
        {
          "condition_id": "cond_87654321",
          "condition_definition": "When the controller processes personal data",
          "fact": "data.category",
          "operator": "equal",
          "value": "personal_data",
          "role": "data_controller",
          "if_condition": "IF processing personal data",
          "else_condition": "ELSE no obligation applies"
        }
      ],
      "aggregated_roles": ["data_controller"],
      "data_category": "personal_data",
      "domain": "data_protection_compliance",
      "action": "Implement appropriate technical and organizational security measures",
      "consequence": "Administrative fine and potential data breach liability",
      "reference": "GDPR Article 32(1)",
      "priority": "high",
      "event_type": "rule_evaluation",
      "params": {}
    },
    {
      "rule_id": "a1b2c3d4_consent_requirement_005",
      "rule_definition": "Controllers must obtain freely given, specific, informed and unambiguous consent from data subjects",
      "rule_type": "consent_requirement",
      "applicable_countries": ["DE", "FR", "IT", "ES"],
      "adequacy_countries": ["CA", "CH", "JP"],
      "conditions": [
        {
          "condition_id": "cond_99887766",
          "condition_definition": "When consent is required for processing",
          "fact": "processing.lawful_basis",
          "operator": "equal",
          "value": "consent",
          "role": "data_controller",
          "if_condition": "IF consent is the lawful basis",
          "else_condition": "ELSE use alternative lawful basis"
        }
      ],
      "aggregated_roles": ["data_controller", "data_subject"],
      "data_category": "personal_data",
      "domain": "consent_management",
      "action": "Obtain clear and unambiguous consent with easy withdrawal mechanism",
      "consequence": "Processing becomes unlawful and subject to penalties",
      "reference": "GDPR Article 7(1)",
      "priority": "high",
      "event_type": "rule_evaluation",
      "params": {}
    }
  ],
  "metadata": {
    "generated_by": "Multi-Agent Legal Rule Extraction System with Supervisor",
    "generation_date": "2025-01-27T10:30:00.000Z",
    "total_rules": 3,
    "methodology": "Mixture of Experts with Supervisor Agent and Chain of Thought",
    "supervisor_validated": true,
    "simple_english_rules": true
  }
};

// Custom Node Components
const RuleNodeComponent: React.FC<NodeProps<RuleNodeData>> = ({ data, selected }) => {
  const { rule } = data;
  
  const priorityStyles = {
    high: 'bg-red-50 border-red-300 text-red-900',
    medium: 'bg-yellow-50 border-yellow-300 text-yellow-900',
    low: 'bg-green-50 border-green-300 text-green-900'
  };

  const priorityBadgeStyles = {
    high: 'bg-red-100 text-red-800',
    medium: 'bg-yellow-100 text-yellow-800',
    low: 'bg-green-100 text-green-800'
  };

  return (
    <div className={`
      p-4 rounded-lg border-2 shadow-lg min-w-[320px] max-w-[420px] transition-all duration-200
      ${priorityStyles[rule.priority] || 'bg-gray-50 border-gray-300 text-gray-900'}
      ${selected ? 'ring-2 ring-blue-500 shadow-xl' : ''}
      hover:shadow-xl cursor-pointer
    `}>
      <div className="flex items-center justify-between mb-3">
        <span className={`
          px-2 py-1 rounded-md text-xs font-semibold
          ${priorityBadgeStyles[rule.priority] || 'bg-gray-100 text-gray-800'}
        `}>
          {rule.rule_type.replace(/_/g, ' ').toUpperCase()}
        </span>
        <span className={`
          px-2 py-1 rounded-md text-xs font-bold border
          ${rule.priority === 'high' ? 'bg-red-500 text-white border-red-600' : 
            rule.priority === 'medium' ? 'bg-yellow-500 text-white border-yellow-600' : 
            'bg-green-500 text-white border-green-600'}
        `}>
          {rule.priority?.toUpperCase()}
        </span>
      </div>
      
      <h3 className="font-bold text-sm mb-3 leading-tight">
        {rule.rule_definition}
      </h3>
      
      <div className="text-xs space-y-2 text-gray-700">
        <div className="flex items-start">
          <span className="font-semibold mr-2">Reference:</span>
          <span className="text-blue-600">{rule.reference}</span>
        </div>
        <div className="flex items-start">
          <span className="font-semibold mr-2">Domain:</span>
          <span>{rule.domain.replace(/_/g, ' ')}</span>
        </div>
        <div className="mt-3 p-2 bg-gray-100 rounded text-xs italic text-gray-600">
          Right-click to expand details and explore relationships
        </div>
      </div>
    </div>
  );
};

const DetailNodeComponent: React.FC<NodeProps<DetailNodeData>> = ({ data }) => {
  const typeStyles = {
    action: 'bg-blue-50 border-blue-300 text-blue-900',
    consequence: 'bg-red-50 border-red-300 text-red-900',
    general: 'bg-gray-50 border-gray-300 text-gray-900'
  };

  return (
    <div className={`
      p-3 rounded-lg border-2 shadow-md min-w-[260px] max-w-[380px]
      ${typeStyles[data.type] || typeStyles.general}
    `}>
      <h4 className="font-semibold text-sm mb-2">{data.label}</h4>
      <div className="text-xs leading-relaxed">{data.content}</div>
    </div>
  );
};

const CountryNodeComponent: React.FC<NodeProps<CountryNodeData>> = ({ data }) => {
  const typeStyles = {
    applicable: 'bg-green-50 border-green-300',
    adequacy: 'bg-emerald-50 border-emerald-300'
  };

  return (
    <div className={`
      p-3 rounded-lg border-2 shadow-md min-w-[220px]
      ${typeStyles[data.type] || typeStyles.applicable}
    `}>
      <h4 className="font-semibold text-sm text-green-800 mb-2">{data.label}</h4>
      <div className="flex flex-wrap gap-1">
        {data.countries.map((country, index) => (
          <span
            key={index}
            className="px-2 py-1 bg-green-100 text-green-800 rounded text-xs font-medium border border-green-200"
          >
            {country}
          </span>
        ))}
      </div>
    </div>
  );
};

const ConditionNodeComponent: React.FC<NodeProps<ConditionNodeData>> = ({ data }) => {
  const { condition } = data;
  
  return (
    <div className="p-3 rounded-lg border-2 bg-purple-50 border-purple-300 shadow-md min-w-[300px] max-w-[400px]">
      <h4 className="font-semibold text-sm text-purple-800 mb-2">
        Condition #{data.index + 1}
      </h4>
      <div className="text-xs text-purple-700 space-y-2">
        <div>
          <span className="font-semibold">Definition:</span> {condition.condition_definition}
        </div>
        <div>
          <span className="font-semibold">Role:</span> {condition.role.replace(/_/g, ' ')}
        </div>
        <div>
          <span className="font-semibold">Logic:</span> {condition.if_condition}
        </div>
        <div className="text-xs text-purple-600 bg-purple-100 p-2 rounded">
          <span className="font-semibold">Operator:</span> {condition.operator} | 
          <span className="font-semibold ml-2">Value:</span> {
            Array.isArray(condition.value) 
              ? condition.value.join(', ') 
              : String(condition.value)
          }
        </div>
      </div>
    </div>
  );
};

const RoleNodeComponent: React.FC<NodeProps<RoleNodeData>> = ({ data }) => {
  return (
    <div className="p-3 rounded-lg border-2 bg-orange-50 border-orange-300 shadow-md min-w-[200px]">
      <h4 className="font-semibold text-sm text-orange-800 mb-2">Involved Roles</h4>
      <div className="flex flex-wrap gap-1">
        {data.roles.map((role, index) => (
          <span
            key={index}
            className="px-2 py-1 bg-orange-100 text-orange-800 rounded text-xs font-medium border border-orange-200"
          >
            {role.replace(/_/g, ' ')}
          </span>
        ))}
      </div>
    </div>
  );
};

// Context Menu Component
interface ContextMenuProps {
  x: number;
  y: number;
  onExpand: (type: string) => void;
  onClose: () => void;
  options: Array<{
    key: string;
    label: string;
    icon: string;
    available: boolean;
  }>;
}

const ContextMenu: React.FC<ContextMenuProps> = ({ x, y, onExpand, onClose, options }) => {
  const menuRef = useRef<HTMLDivElement>(null);

  React.useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (menuRef.current && !menuRef.current.contains(event.target as Node)) {
        onClose();
      }
    };
    
    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, [onClose]);

  return (
    <div
      ref={menuRef}
      className="fixed bg-white border border-gray-300 rounded-lg shadow-lg py-2 z-50 min-w-[200px]"
      style={{ left: x, top: y }}
    >
      {options.map((option) => (
        <button
          key={option.key}
          disabled={!option.available}
          className={`
            w-full px-4 py-2 text-left text-sm flex items-center gap-3 transition-colors
            ${option.available 
              ? 'hover:bg-gray-100 text-gray-700 cursor-pointer' 
              : 'text-gray-400 cursor-not-allowed'
            }
          `}
          onClick={() => {
            if (option.available) {
              onExpand(option.key);
              onClose();
            }
          }}
        >
          <span className="text-base">{option.icon}</span>
          <span>{option.label}</span>
        </button>
      ))}
    </div>
  );
};

// Define node types
const nodeTypes: NodeTypes = {
  ruleNode: RuleNodeComponent,
  detailNode: DetailNodeComponent,
  countryNode: CountryNodeComponent,
  conditionNode: ConditionNodeComponent,
  roleNode: RoleNodeComponent,
};

// Main Visualizer Component
const GDPRRulesVisualizer: React.FC = () => {
  const [nodes, setNodes, onNodesChange]: [CustomNode[], any, OnNodesChange<CustomNode>] = useNodesState([]);
  const [edges, setEdges, onEdgesChange] = useEdgesState<Edge>([]);
  const [contextMenu, setContextMenu] = useState<{
    x: number;
    y: number;
    nodeId: string;
    options: Array<{ key: string; label: string; icon: string; available: boolean }>;
  } | null>(null);
  const [expandedNodes, setExpandedNodes] = useState<Set<string>>(new Set());

  // Generate initial nodes from GDPR data
  const initialNodes: CustomNode[] = useMemo(() => {
    return gdprData.rules.map((rule, index): RuleNode => ({
      id: rule.rule_id,
      type: 'ruleNode',
      position: { 
        x: (index % 2) * 500, 
        y: Math.floor(index / 2) * 350 
      },
      data: { rule },
    }));
  }, []);

  // Initialize nodes
  React.useEffect(() => {
    setNodes(initialNodes);
  }, [initialNodes, setNodes]);

  const onConnect: OnConnect = useCallback(
    (params: Connection) => setEdges((eds) => addEdge(params, eds)),
    [setEdges]
  );

  const onNodeContextMenu: OnNodeContextMenu<CustomNode> = useCallback(
    (event, node) => {
      event.preventDefault();
      
      if (node.type !== 'ruleNode') return;

      const rule = (node.data as RuleNodeData).rule;
      const menuOptions = [
        {
          key: 'countries',
          label: 'Show Applicable Countries',
          icon: '🌍',
          available: rule.applicable_countries?.length > 0
        },
        {
          key: 'adequacy',
          label: 'Show Adequacy Countries',
          icon: '✅',
          available: rule.adequacy_countries?.length > 0
        },
        {
          key: 'conditions',
          label: 'Show Conditions',
          icon: '⚙️',
          available: rule.conditions?.length > 0
        },
        {
          key: 'roles',
          label: 'Show Roles',
          icon: '👥',
          available: rule.aggregated_roles?.length > 0
        },
        {
          key: 'action',
          label: 'Show Action',
          icon: '⚡',
          available: !!rule.action
        },
        {
          key: 'consequence',
          label: 'Show Consequence',
          icon: '⚠️',
          available: !!rule.consequence
        }
      ];

      setContextMenu({
        x: event.clientX,
        y: event.clientY,
        nodeId: node.id,
        options: menuOptions
      });
    },
    []
  );

  const closeContextMenu = useCallback(() => {
    setContextMenu(null);
  }, []);

  const expandNode = useCallback((nodeId: string, expansionType: string) => {
    const rule = gdprData.rules.find(r => r.rule_id === nodeId);
    if (!rule) return;

    const expansionKey = `${nodeId}-${expansionType}`;
    if (expandedNodes.has(expansionKey)) return;

    setExpandedNodes(prev => new Set([...prev, expansionKey]));

    const parentNode = nodes.find(n => n.id === nodeId);
    if (!parentNode) return;

    const baseX = parentNode.position.x;
    const baseY = parentNode.position.y + 250;

    const newNodes: CustomNode[] = [];
    const newEdges: Edge[] = [];

    switch (expansionType) {
      case 'countries':
        if (rule.applicable_countries?.length > 0) {
          const countryNodeId = `${nodeId}-countries`;
          newNodes.push({
            id: countryNodeId,
            type: 'countryNode',
            position: { x: baseX - 100, y: baseY },
            data: {
              label: 'Applicable Countries',
              countries: rule.applicable_countries,
              type: 'applicable'
            }
          } as CountryNode);
          newEdges.push({
            id: `${nodeId}-to-countries`,
            source: nodeId,
            target: countryNodeId,
            type: 'smoothstep',
            style: { stroke: '#10b981', strokeWidth: 2 }
          });
        }
        break;

      case 'adequacy':
        if (rule.adequacy_countries?.length > 0) {
          const adequacyNodeId = `${nodeId}-adequacy`;
          newNodes.push({
            id: adequacyNodeId,
            type: 'countryNode',
            position: { x: baseX + 250, y: baseY },
            data: {
              label: 'Adequacy Countries',
              countries: rule.adequacy_countries,
              type: 'adequacy'
            }
          } as CountryNode);
          newEdges.push({
            id: `${nodeId}-to-adequacy`,
            source: nodeId,
            target: adequacyNodeId,
            type: 'smoothstep',
            style: { stroke: '#059669', strokeWidth: 2 }
          });
        }
        break;

      case 'conditions':
        if (rule.conditions?.length > 0) {
          rule.conditions.forEach((condition, index) => {
            const conditionNodeId = `${nodeId}-condition-${index}`;
            newNodes.push({
              id: conditionNodeId,
              type: 'conditionNode',
              position: { x: baseX - 150 + (index * 250), y: baseY + 150 },
              data: { condition, index }
            } as ConditionNode);
            newEdges.push({
              id: `${nodeId}-to-condition-${index}`,
              source: nodeId,
              target: conditionNodeId,
              type: 'smoothstep',
              style: { stroke: '#8b5cf6', strokeWidth: 2 }
            });
          });
        }
        break;

      case 'roles':
        if (rule.aggregated_roles?.length > 0) {
          const rolesNodeId = `${nodeId}-roles`;
          newNodes.push({
            id: rolesNodeId,
            type: 'roleNode',
            position: { x: baseX + 200, y: baseY + 80 },
            data: { roles: rule.aggregated_roles }
          } as RoleNode);
          newEdges.push({
            id: `${nodeId}-to-roles`,
            source: nodeId,
            target: rolesNodeId,
            type: 'smoothstep',
            style: { stroke: '#f97316', strokeWidth: 2 }
          });
        }
        break;

      case 'action':
        const actionNodeId = `${nodeId}-action`;
        newNodes.push({
          id: actionNodeId,
          type: 'detailNode',
          position: { x: baseX - 250, y: baseY - 50 },
          data: {
            label: 'Required Action',
            content: rule.action,
            type: 'action'
          }
        } as DetailNode);
        newEdges.push({
          id: `${nodeId}-to-action`,
          source: nodeId,
          target: actionNodeId,
          type: 'smoothstep',
          style: { stroke: '#3b82f6', strokeWidth: 2 }
        });
        break;

      case 'consequence':
        const consequenceNodeId = `${nodeId}-consequence`;
        newNodes.push({
          id: consequenceNodeId,
          type: 'detailNode',
          position: { x: baseX + 350, y: baseY - 50 },
          data: {
            label: 'Consequence',
            content: rule.consequence,
            type: 'consequence'
          }
        } as DetailNode);
        newEdges.push({
          id: `${nodeId}-to-consequence`,
          source: nodeId,
          target: consequenceNodeId,
          type: 'smoothstep',
          style: { stroke: '#ef4444', strokeWidth: 2 }
        });
        break;
    }

    setNodes((nds) => [...nds, ...newNodes]);
    setEdges((eds) => [...eds, ...newEdges]);
  }, [nodes, expandedNodes, setNodes, setEdges]);

  const handleExpand = useCallback((expansionType: string) => {
    if (contextMenu) {
      expandNode(contextMenu.nodeId, expansionType);
    }
  }, [contextMenu, expandNode]);

  const resetView = useCallback(() => {
    setNodes(initialNodes);
    setEdges([]);
    setExpandedNodes(new Set());
  }, [initialNodes, setNodes, setEdges]);

  return (
    <div className="w-full h-screen bg-gradient-to-br from-gray-50 to-gray-100">
      <ReactFlow
        nodes={nodes}
        edges={edges}
        onNodesChange={onNodesChange}
        onEdgesChange={onEdgesChange}
        onConnect={onConnect}
        onNodeContextMenu={onNodeContextMenu}
        nodeTypes={nodeTypes}
        fitView
        className="bg-transparent"
      >
        <Background color="#e5e7eb" />
        <Controls />
        <Panel position="top-right" className="bg-white/90 backdrop-blur-sm p-4 rounded-lg shadow-lg border">
          <div className="space-y-3">
            <h2 className="font-bold text-lg text-gray-800">GDPR Rules Visualizer</h2>
            <p className="text-sm text-gray-600 max-w-[200px]">
              Right-click on rule nodes to explore details and relationships
            </p>
            <button
              onClick={resetView}
              className="w-full px-3 py-2 bg-blue-500 text-white rounded-md text-sm hover:bg-blue-600 transition-colors shadow-sm"
            >
              Reset View
            </button>
            <div className="text-xs text-gray-500 pt-2 border-t">
              <div>Total Rules: {gdprData.metadata.total_rules}</div>
              <div>Engine: v{gdprData.engine_version}</div>
            </div>
          </div>
        </Panel>
      </ReactFlow>
      
      {contextMenu && (
        <ContextMenu
          x={contextMenu.x}
          y={contextMenu.y}
          options={contextMenu.options}
          onExpand={handleExpand}
          onClose={closeContextMenu}
        />
      )}
    </div>
  );
};

// Main App Component
const App: React.FC = () => {
  return (
    <ReactFlowProvider>
      <GDPRRulesVisualizer />
    </ReactFlowProvider>
  );
};

export default App;
