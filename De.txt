import React, { useState } from 'react';
import { 
  BarChart3, 
  RefreshCw, 
  Layout, 
  Settings, 
  FileJson, 
  Globe,
  ChevronDown,
  ChevronUp
} from 'lucide-react';
import { RuleAnalytics } from '../types/rules';

interface HeaderProps {
  analytics: RuleAnalytics | null;
  loading: boolean;
  onRefresh: () => void;
  onLayoutChange: (direction: 'TB' | 'LR' | 'BT' | 'RL') => void;
  currentLayout: string;
}

const Header: React.FC<HeaderProps> = ({ 
  analytics, 
  loading, 
  onRefresh, 
  onLayoutChange,
  currentLayout 
}) => {
  const [showAnalytics, setShowAnalytics] = useState(false);
  const [showLayoutOptions, setShowLayoutOptions] = useState(false);

  const layoutOptions = [
    { value: 'TB', label: 'Top to Bottom', icon: '↓' },
    { value: 'BT', label: 'Bottom to Top', icon: '↑' },
    { value: 'LR', label: 'Left to Right', icon: '→' },
    { value: 'RL', label: 'Right to Left', icon: '←' },
  ];

  return (
    <div className="bg-white border-b border-gray-200 shadow-sm">
      <div className="px-6 py-4">
        <div className="flex items-center justify-between">
          {/* Left side - Title and basic info */}
          <div className="flex items-center space-x-4">
            <div className="flex items-center space-x-2">
              <FileJson className="w-6 h-6 text-blue-600" />
              <h1 className="text-xl font-bold text-gray-900">Rules Visualizer</h1>
            </div>
            
            {analytics && (
              <div className="flex items-center space-x-4 text-sm text-gray-600">
                <div className="flex items-center space-x-1">
                  <BarChart3 className="w-4 h-4" />
                  <span>{analytics.totalRules} rules</span>
                </div>
                <div className="flex items-center space-x-1">
                  <Globe className="w-4 h-4" />
                  <span>{Object.keys(analytics.countryDistribution).length} countries</span>
                </div>
              </div>
            )}
          </div>

          {/* Right side - Controls */}
          <div className="flex items-center space-x-3">
            {/* Analytics Toggle */}
            <button
              onClick={() => setShowAnalytics(!showAnalytics)}
              className="flex items-center space-x-1 px-3 py-2 text-sm text-gray-700 hover:bg-gray-100 rounded-lg transition-colors"
            >
              <BarChart3 className="w-4 h-4" />
              <span>Analytics</span>
              {showAnalytics ? <ChevronUp className="w-4 h-4" /> : <ChevronDown className="w-4 h-4" />}
            </button>

            {/* Layout Options */}
            <div className="relative">
              <button
                onClick={() => setShowLayoutOptions(!showLayoutOptions)}
                className="flex items-center space-x-1 px-3 py-2 text-sm text-gray-700 hover:bg-gray-100 rounded-lg transition-colors"
              >
                <Layout className="w-4 h-4" />
                <span>Layout</span>
                <ChevronDown className="w-4 h-4" />
              </button>

              {showLayoutOptions && (
                <div className="absolute right-0 mt-2 w-48 bg-white rounded-lg shadow-lg border border-gray-200 z-10">
                  {layoutOptions.map((option) => (
                    <button
                      key={option.value}
                      onClick={() => {
                        onLayoutChange(option.value as any);
                        setShowLayoutOptions(false);
                      }}
                      className={`w-full text-left px-4 py-2 text-sm hover:bg-gray-50 first:rounded-t-lg last:rounded-b-lg flex items-center justify-between ${
                        currentLayout === option.value ? 'bg-blue-50 text-blue-700' : 'text-gray-700'
                      }`}
                    >
                      <span>{option.label}</span>
                      <span className="text-lg">{option.icon}</span>
                    </button>
                  ))}
                </div>
              )}
            </div>

            {/* Refresh Button */}
            <button
              onClick={onRefresh}
              disabled={loading}
              className="flex items-center space-x-1 px-3 py-2 text-sm text-white bg-blue-600 hover:bg-blue-700 disabled:bg-blue-400 rounded-lg transition-colors"
            >
              <RefreshCw className={`w-4 h-4 ${loading ? 'animate-spin' : ''}`} />
              <span>Refresh</span>
            </button>
          </div>
        </div>

        {/* Analytics Panel */}
        {showAnalytics && analytics && (
          <div className="mt-4 p-4 bg-gray-50 rounded-lg">
            <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
              {/* Event Types */}
              <div>
                <h3 className="text-sm font-medium text-gray-700 mb-2">Event Types</h3>
                <div className="space-y-1">
                  {Object.entries(analytics.eventTypes).map(([type, count]) => (
                    <div key={type} className="flex justify-between text-sm">
                      <span className="text-gray-600 capitalize">{type}</span>
                      <span className="font-medium">{count}</span>
                    </div>
                  ))}
                </div>
              </div>

              {/* Priority Distribution */}
              <div>
                <h3 className="text-sm font-medium text-gray-700 mb-2">Priority Levels</h3>
                <div className="space-y-1">
                  {Object.entries(analytics.priorityDistribution).map(([range, count]) => (
                    <div key={range} className="flex justify-between text-sm">
                      <span className="text-gray-600">{range}</span>
                      <span className="font-medium">{count}</span>
                    </div>
                  ))}
                </div>
              </div>

              {/* Top Condition Types */}
              <div>
                <h3 className="text-sm font-medium text-gray-700 mb-2">Top Conditions</h3>
                <div className="space-y-1">
                  {Object.entries(analytics.conditionTypes)
                    .sort(([,a], [,b]) => b - a)
                    .slice(0, 5)
                    .map(([fact, count]) => (
                      <div key={fact} className="flex justify-between text-sm">
                        <span className="text-gray-600 truncate">{fact}</span>
                        <span className="font-medium">{count}</span>
                      </div>
                    ))}
                </div>
              </div>

              {/* Top Countries */}
              <div>
                <h3 className="text-sm font-medium text-gray-700 mb-2">Top Countries</h3>
                <div className="space-y-1">
                  {Object.entries(analytics.countryDistribution)
                    .sort(([,a], [,b]) => b - a)
                    .slice(0, 5)
                    .map(([country, count]) => (
                      <div key={country} className="flex justify-between text-sm">
                        <span className="text-gray-600">{country}</span>
                        <span className="font-medium">{count}</span>
                      </div>
                    ))}
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default Header;
