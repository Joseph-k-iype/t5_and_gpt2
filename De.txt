from langchain.chat_models import AzureChatOpenAI
from langchain.schema import HumanMessage, SystemMessage
from langchain.chains import ConversationChain
from langchain.memory import ConversationBufferMemory
import os
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

# Azure OpenAI Configuration
os.environ["AZURE_OPENAI_API_KEY"] = os.getenv("AZURE_OPENAI_API_KEY")
os.environ["AZURE_OPENAI_ENDPOINT"] = os.getenv("AZURE_OPENAI_ENDPOINT")

class AzureChatBot:
    def __init__(self):
        # Initialize Azure OpenAI chat model
        self.llm = AzureChatOpenAI(
            deployment_name="gpt-35-turbo",  # Your Azure OpenAI deployment name
            model_name="gpt-35-turbo",       # Model name
            temperature=0.7,
            openai_api_version="2024-02-01"
        )
        
        # Initialize conversation memory
        self.memory = ConversationBufferMemory()
        
        # Initialize conversation chain
        self.conversation = ConversationChain(
            llm=self.llm,
            memory=self.memory,
            verbose=True
        )
    
    def chat(self, user_input: str) -> str:
        """
        Process user input and return the chatbot's response
        
        Args:
            user_input (str): The user's message
            
        Returns:
            str: The chatbot's response
        """
        try:
            response = self.conversation.predict(input=user_input)
            return response
        except Exception as e:
            return f"An error occurred: {str(e)}"

def main():
    # Create .env file with your Azure OpenAI credentials
    required_env_vars = ["AZURE_OPENAI_API_KEY", "AZURE_OPENAI_ENDPOINT"]
    missing_vars = [var for var in required_env_vars if not os.getenv(var)]
    
    if missing_vars:
        print(f"Missing required environment variables: {', '.join(missing_vars)}")
        print("Please create a .env file with the following variables:")
        print("""
        AZURE_OPENAI_API_KEY=your_api_key_here
        AZURE_OPENAI_ENDPOINT=your_endpoint_here
        """)
        return

    # Initialize chatbot
    chatbot = AzureChatBot()
    
    print("Chatbot initialized. Type 'quit' to exit.")
    
    # Main chat loop
    while True:
        user_input = input("You: ").strip()
        
        if user_input.lower() in ['quit', 'exit', 'bye']:
            print("Goodbye!")
            break
        
        response = chatbot.chat(user_input)
        print(f"Bot: {response}")

if __name__ == "__main__":
    main()
