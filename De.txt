from pptx.util import Inches, Pt
from pptx.dml.color import RGBColor

# Helper function to trim the URL to show only the part after "ISO"
def trim_url(url):
    iso_index = url.find("ISO")
    return url[iso_index:] if iso_index != -1 else url

# Function to add a hyperlinked text box next to a table cell
def add_hyperlinked_textbox(slide, cell, url, top, left):
    trimmed_text = trim_url(url)
    
    # Create a text box near the table cell position with the trimmed URL text
    textbox = slide.shapes.add_textbox(left, top, width=cell.width, height=cell.height)
    text_frame = textbox.text_frame
    text_frame.text = trimmed_text
    
    # Set hyperlink for the textbox
    r_id = slide.part.relate_to(url, "http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink", is_external=True)
    p = text_frame.paragraphs[0]
    r = p.runs[0]
    r.hyperlink.address = url
    
    # Set font style (optional)
    font = r.font
    font.size = Pt(10)
    font.color.rgb = RGBColor(0, 0, 255)  # Blue text to indicate hyperlink

# Updated populate_slide_10 function with hyperlinked text boxes for URLs
def populate_slide_10(slide, df_slide10):
    delete_existing_tables(slide)
    headers = ["Issue", "Summary", "Issues (URL)"]
    table = create_table(slide, headers, num_rows=1 + len(df_slide10), top_position=Inches(1))

    # Populate the table with data, and add hyperlinked text boxes for the "Issues (URL)" column
    for row_idx, row_data in enumerate(df_slide10.itertuples(index=False), start=1):
        # Set Issue and Summary cells
        table.cell(row_idx, 0).text = str(row_data.Issue)
        table.cell(row_idx, 1).text = str(row_data.Summary)
        
        # Set Issues (URL) text, then add a hyperlinked text box
        cell = table.cell(row_idx, 2)
        cell.text = trim_url(row_data.Issue)
        
        # Calculate position for the hyperlink text box to place over the cell
        top = Inches(1 + 0.5 * row_idx)
        left = Inches(3.5)  # Adjust based on your table position
        add_hyperlinked_textbox(slide, cell, str(row_data.Issue), top, left)

# Example usage within create_report function
def create_report(template_path, output_folder, report_value):
    try:
        prs = Presentation(template_path)
        # Generate data for Slide 10
        df_slide10 = generate_slide10_data(report_value)
        
        # Create folder for report
        report_name = "example_report"  # Replace with actual logic to get report name
        report_folder = os.path.join(output_folder, report_name)
        os.makedirs(report_folder, exist_ok=True)

        # Populate Slide 10 with trimmed URL as clickable hyperlinks
        if len(prs.slides) > 9:
            populate_slide_10(prs.slides[9], df_slide10)

        # Save the PowerPoint
        pptx_path = os.path.join(report_folder, f"{report_name}.pptx")
        prs.save(pptx_path)
        print(f"PowerPoint saved as {pptx_path}")

    except Exception as e:
        print(f"Error processing report URL {report_value}: {e}")
