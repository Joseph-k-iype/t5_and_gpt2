import React, { useState, useRef, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import MessageBubble from './MessageBubble';
import ThoughtBubble from './ThoughtBubble';
import LoadingAnimation from './LoadingAnimation';
import GlassCard from './GlassCard';
import { cn } from '../utils/lib';
import type { Message, ChatSession, ThoughtProcess, ResearchState } from '../types';

interface ChatInterfaceProps {
  session: ChatSession | null;
  messages: Message[];
  isProcessing: boolean;
  currentThoughts: ThoughtProcess[];
  researchState: ResearchState | null;
  onSendMessage: (message: string) => Promise<void>;
  onStartResearch: (topic: string, maxIterations?: number) => Promise<void>;
}

const ChatInterface: React.FC<ChatInterfaceProps> = ({
  session,
  messages,
  isProcessing,
  currentThoughts,
  researchState,
  onSendMessage,
  onStartResearch
}) => {
  const [inputText, setInputText] = useState('');
  const [researchTopic, setResearchTopic] = useState('');
  const [showResearchModal, setShowResearchModal] = useState(false);
  const [maxIterations, setMaxIterations] = useState(3);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const inputRef = useRef<HTMLTextAreaElement>(null);

  // Auto-scroll to bottom when new messages arrive
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages, currentThoughts]);

  // Focus input on mount
  useEffect(() => {
    inputRef.current?.focus();
  }, []);

  const handleSendMessage = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!inputText.trim() || isProcessing) return;
    
    const message = inputText.trim();
    setInputText('');
    
    try {
      await onSendMessage(message);
    } catch (error) {
      console.error('Failed to send message:', error);
      // Re-populate input on error
      setInputText(message);
    }
  };

  const handleStartResearch = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!researchTopic.trim() || isProcessing) return;
    
    try {
      await onStartResearch(researchTopic, maxIterations);
      setShowResearchModal(false);
      setResearchTopic('');
    } catch (error) {
      console.error('Failed to start research:', error);
    }
  };

  const handleKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage(e as any);
    }
  };

  const suggestedQuestions = [
    "What are the key differences between GDPR and CCPA consent requirements?",
    "How do data breach notification laws vary across jurisdictions?",
    "What constitutes personal data under different privacy frameworks?",
    "Compare data subject rights across EU, California, and Brazil",
    "What are the compliance requirements for international data transfers?"
  ];

  return (
    <div className="max-w-6xl mx-auto">
      {/* Header */}
      <motion.div
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.6 }}
        className="text-center mb-8"
      >
        <h1 className="text-4xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent mb-4">
          Privacy Q&A Expert
        </h1>
        <p className="text-gray-600 text-lg max-w-2xl mx-auto">
          Ask questions about data privacy regulations worldwide. I provide expert guidance 
          on GDPR, CCPA, LGPD, and other privacy frameworks with deep research capabilities.
        </p>
      </motion.div>

      {/* Main Chat Container */}
      <div className="grid lg:grid-cols-4 gap-6">
        {/* Chat Messages */}
        <div className="lg:col-span-3">
          <GlassCard className="h-[600px] flex flex-col">
            {/* Messages Area */}
            <div className="flex-1 overflow-y-auto p-6 space-y-4 glass-scrollbar">
              {messages.length === 0 && !isProcessing && (
                <motion.div
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  className="text-center py-12"
                >
                  <div className="text-6xl mb-4">ðŸ§ </div>
                  <h3 className="text-xl font-semibold text-gray-800 mb-2">
                    Ready to Help with Privacy Questions
                  </h3>
                  <p className="text-gray-600 mb-6">
                    Start by asking a question or try one of the suggested topics below.
                  </p>
                  
                  <div className="space-y-2 max-w-md mx-auto">
                    {suggestedQuestions.slice(0, 3).map((question, index) => (
                      <motion.button
                        key={index}
                        whileHover={{ scale: 1.02 }}
                        whileTap={{ scale: 0.98 }}
                        onClick={() => setInputText(question)}
                        className="w-full text-left p-3 bg-blue-50/50 hover:bg-blue-50/80 rounded-lg text-sm text-gray-700 transition-all duration-200"
                      >
                        ðŸ’­ {question}
                      </motion.button>
                    ))}
                  </div>
                </motion.div>
              )}

              <AnimatePresence>
                {messages.map((message) => (
                  <MessageBubble
                    key={message.id}
                    message={message}
                  />
                ))}
              </AnimatePresence>

              {/* Thinking Bubbles */}
              <AnimatePresence>
                {currentThoughts.map((thought, index) => (
                  <ThoughtBubble
                    key={`${thought.timestamp}-${index}`}
                    thought={thought}
                  />
                ))}
              </AnimatePresence>

              {/* Processing Indicator */}
              {isProcessing && (
                <motion.div
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  exit={{ opacity: 0, y: -20 }}
                  className="flex items-center space-x-3 px-4 py-3"
                >
                  <LoadingAnimation size="sm" />
                  <span className="text-gray-600">
                    AI is analyzing your question...
                  </span>
                </motion.div>
              )}

              <div ref={messagesEndRef} />
            </div>

            {/* Input Area */}
            <div className="border-t border-white/20 p-4">
              <form onSubmit={handleSendMessage} className="flex space-x-3">
                <div className="flex-1 relative">
                  <textarea
                    ref={inputRef}
                    value={inputText}
                    onChange={(e) => setInputText(e.target.value)}
                    onKeyDown={handleKeyDown}
                    placeholder="Ask about data privacy regulations..."
                    disabled={isProcessing}
                    className={cn(
                      "w-full min-h-[50px] max-h-[120px] px-4 py-3 resize-none",
                      "bg-white/50 backdrop-blur-sm border border-white/30 rounded-xl",
                      "focus:outline-none focus:ring-2 focus:ring-blue-500/50 focus:border-transparent",
                      "disabled:opacity-50 disabled:cursor-not-allowed",
                      "transition-all duration-200"
                    )}
                    rows={1}
                  />
                  <div className="absolute bottom-2 right-2 flex space-x-1">
                    <motion.button
                      type="button"
                      whileHover={{ scale: 1.1 }}
                      whileTap={{ scale: 0.9 }}
                      onClick={() => setShowResearchModal(true)}
                      disabled={isProcessing}
                      className="p-2 text-purple-600 hover:text-purple-700 disabled:opacity-50"
                      title="Start Deep Research"
                    >
                      ðŸ”¬
                    </motion.button>
                  </div>
                </div>
                
                <motion.button
                  type="submit"
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                  disabled={!inputText.trim() || isProcessing}
                  className={cn(
                    "px-6 py-3 rounded-xl font-medium transition-all duration-200",
                    "bg-gradient-to-r from-blue-500 to-purple-500 text-white",
                    "hover:from-blue-600 hover:to-purple-600",
                    "disabled:opacity-50 disabled:cursor-not-allowed"
                  )}
                >
                  {isProcessing ? (
                    <LoadingAnimation size="sm" />
                  ) : (
                    <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8" />
                    </svg>
                  )}
                </motion.button>
              </form>
              
              <div className="mt-2 text-xs text-gray-500 text-center">
                Press Enter to send â€¢ Shift+Enter for new line â€¢ ðŸ”¬ for deep research
              </div>
            </div>
          </GlassCard>
        </div>

        {/* Sidebar */}
        <div className="space-y-4">
          {/* Session Info */}
          <GlassCard className="p-4">
            <h3 className="font-semibold text-gray-800 mb-3">Session Info</h3>
            <div className="space-y-2 text-sm">
              <div className="flex justify-between">
                <span className="text-gray-600">Status:</span>
                <span className={cn(
                  "px-2 py-1 rounded-full text-xs",
                  session ? 'bg-green-100 text-green-700' : 'bg-gray-100 text-gray-600'
                )}>
                  {session ? 'Active' : 'Not Started'}
                </span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-600">Messages:</span>
                <span className="font-medium">{messages.length}</span>
              </div>
              {currentThoughts.length > 0 && (
                <div className="flex justify-between">
                  <span className="text-gray-600">Thoughts:</span>
                  <span className="font-medium">{currentThoughts.length}</span>
                </div>
              )}
            </div>
          </GlassCard>

          {/* Research State */}
          {researchState && (
            <motion.div
              initial={{ opacity: 0, scale: 0.9 }}
              animate={{ opacity: 1, scale: 1 }}
              transition={{ duration: 0.3 }}
            >
              <GlassCard className="p-4">
                <h3 className="font-semibold text-gray-800 mb-3">ðŸ”¬ Research State</h3>
                <div className="space-y-3 text-sm">
                  <div>
                    <span className="text-gray-600">Topic:</span>
                    <p className="font-medium text-gray-800 mt-1">
                      {researchState.query}
                    </p>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">Iterations:</span>
                    <span className="font-medium">{researchState.iterations_completed}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">Confidence:</span>
                    <span className={cn(
                      "px-2 py-1 rounded-full text-xs",
                      researchState.confidence === 'high' ? 'bg-green-100 text-green-700' :
                      researchState.confidence === 'medium' ? 'bg-yellow-100 text-yellow-700' :
                      'bg-red-100 text-red-700'
                    )}>
                      {researchState.confidence}
                    </span>
                  </div>
                  {researchState.accumulated_knowledge && (
                    <div>
                      <span className="text-gray-600">Knowledge Areas:</span>
                      <div className="mt-2 flex flex-wrap gap-1">
                        {Object.keys(researchState.accumulated_knowledge).map((area) => (
                          <span
                            key={area}
                            className="px-2 py-1 bg-blue-100/50 text-blue-700 rounded text-xs"
                          >
                            {area}
                          </span>
                        ))}
                      </div>
                    </div>
                  )}
                </div>
              </GlassCard>
            </motion.div>
          )}

          {/* Quick Actions */}
          <GlassCard className="p-4">
            <h3 className="font-semibold text-gray-800 mb-3">Quick Actions</h3>
            <div className="space-y-2">
              <motion.button
                whileHover={{ scale: 1.02 }}
                whileTap={{ scale: 0.98 }}
                onClick={() => setShowResearchModal(true)}
                disabled={isProcessing}
                className="w-full text-left p-2 bg-purple-50/50 hover:bg-purple-50/80 rounded-lg text-sm font-medium text-purple-700 disabled:opacity-50 transition-all duration-200"
              >
                ðŸ”¬ Start Deep Research
              </motion.button>
              
              <motion.button
                whileHover={{ scale: 1.02 }}
                whileTap={{ scale: 0.98 }}
                onClick={() => setInputText(suggestedQuestions[Math.floor(Math.random() * suggestedQuestions.length)])}
                className="w-full text-left p-2 bg-blue-50/50 hover:bg-blue-50/80 rounded-lg text-sm font-medium text-blue-700 transition-all duration-200"
              >
                ðŸ’­ Random Question
              </motion.button>
            </div>
          </GlassCard>
        </div>
      </div>

      {/* Deep Research Modal */}
      <AnimatePresence>
        {showResearchModal && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center p-4 z-50"
            onClick={() => setShowResearchModal(false)}
          >
            <motion.div
              initial={{ opacity: 0, scale: 0.9, y: 20 }}
              animate={{ opacity: 1, scale: 1, y: 0 }}
              exit={{ opacity: 0, scale: 0.9, y: 20 }}
              onClick={(e) => e.stopPropagation()}
              className="w-full max-w-md"
            >
              <GlassCard variant="modal" className="p-6">
                <h3 className="text-xl font-semibold text-gray-800 mb-4">
                  ðŸ”¬ Start Deep Research
                </h3>
                
                <form onSubmit={handleStartResearch} className="space-y-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Research Topic
                    </label>
                    <textarea
                      value={researchTopic}
                      onChange={(e) => setResearchTopic(e.target.value)}
                      placeholder="Enter a complex topic for comprehensive analysis..."
                      className="w-full h-24 px-3 py-2 bg-white/50 backdrop-blur-sm border border-white/30 rounded-lg resize-none focus:outline-none focus:ring-2 focus:ring-purple-500/50"
                      required
                    />
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Max Iterations
                    </label>
                    <select
                      value={maxIterations}
                      onChange={(e) => setMaxIterations(Number(e.target.value))}
                      className="w-full px-3 py-2 bg-white/50 backdrop-blur-sm border border-white/30 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500/50"
                    >
                      <option value={1}>1 - Quick Research</option>
                      <option value={2}>2 - Standard Research</option>
                      <option value={3}>3 - Comprehensive Research</option>
                      <option value={4}>4 - Deep Analysis</option>
                      <option value={5}>5 - Maximum Depth</option>
                    </select>
                  </div>
                  
                  <div className="flex space-x-3 pt-4">
                    <motion.button
                      type="button"
                      whileHover={{ scale: 1.02 }}
                      whileTap={{ scale: 0.98 }}
                      onClick={() => setShowResearchModal(false)}
                      className="flex-1 px-4 py-2 bg-gray-100/50 text-gray-700 rounded-lg font-medium hover:bg-gray-100/80 transition-all duration-200"
                    >
                      Cancel
                    </motion.button>
                    <motion.button
                      type="submit"
                      whileHover={{ scale: 1.02 }}
                      whileTap={{ scale: 0.98 }}
                      disabled={!researchTopic.trim() || isProcessing}
                      className="flex-1 px-4 py-2 bg-gradient-to-r from-purple-500 to-blue-500 text-white rounded-lg font-medium disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200"
                    >
                      Start Research
                    </motion.button>
                  </div>
                </form>
              </GlassCard>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
};

export default ChatInterface;
