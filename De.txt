import React, { useState } from 'react';
import { NodeProps } from '@xyflow/react';
import { Eye, EyeOff, Zap, Globe, Scale, AlertTriangle } from 'lucide-react';
import { RuleNodeData, ConditionNodeData, EventNodeData, LogicNodeData } from '../../types';

// Rule Node Component
export const RuleNode: React.FC<NodeProps<RuleNodeData>> = ({ data }) => {
  const [isExpanded, setIsExpanded] = useState(false);
  
  return (
    <div className={`bg-gradient-to-br from-blue-500 to-blue-600 rounded-lg shadow-lg border-2 border-blue-300 min-w-[300px] max-w-[400px] ${isExpanded ? 'max-h-none' : 'max-h-32'} overflow-hidden transition-all duration-300`}>
      <div className="p-4">
        <div className="flex items-start justify-between mb-2">
          <div className="flex items-center gap-2">
            <Scale className="w-5 h-5 text-white" />
            <h3 className="font-bold text-white text-sm">{data.rule_id}</h3>
          </div>
          <div className="flex items-center gap-1">
            <span className="bg-white bg-opacity-20 text-white text-xs px-2 py-1 rounded">
              Priority: {data.priority || 50}
            </span>
            <button 
              onClick={() => setIsExpanded(!isExpanded)}
              className="text-white hover:bg-white hover:bg-opacity-20 p-1 rounded transition-colors"
              type="button"
            >
              {isExpanded ? <EyeOff className="w-4 h-4" /> : <Eye className="w-4 h-4" />}
            </button>
          </div>
        </div>
        
        <p className={`text-white text-xs mb-3 ${isExpanded ? '' : 'line-clamp-2'}`}>
          {data.rule_text}
        </p>
        
        {data.applies_to_countries && data.applies_to_countries.length > 0 && (
          <div className="flex items-center gap-2 mb-2">
            <Globe className="w-4 h-4 text-white" />
            <div className="flex flex-wrap gap-1">
              {data.applies_to_countries.map((country, idx) => (
                <span key={idx} className="bg-white bg-opacity-30 text-white text-xs px-2 py-1 rounded">
                  {country}
                </span>
              ))}
            </div>
          </div>
        )}
        
        {isExpanded && data.adequacy_countries && data.adequacy_countries.length > 0 && (
          <div className="mt-2 pt-2 border-t border-white border-opacity-30">
            <div className="flex items-center gap-2 mb-1">
              <Zap className="w-4 h-4 text-white" />
              <span className="text-white text-xs font-medium">Adequacy Countries:</span>
            </div>
            <div className="flex flex-wrap gap-1">
              {data.adequacy_countries.map((country, idx) => (
                <span key={idx} className="bg-green-500 bg-opacity-30 text-white text-xs px-2 py-1 rounded">
                  {country}
                </span>
              ))}
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

// Condition Node Component
export const ConditionNode: React.FC<NodeProps<ConditionNodeData>> = ({ data }) => {
  const getOperatorColor = (operator: string) => {
    switch (operator) {
      case 'equal': return 'bg-green-500';
      case 'in': case 'contains': return 'bg-blue-500';
      case 'greaterThan': case 'lessThan': return 'bg-orange-500';
      case 'notEqual': case 'notContains': return 'bg-red-500';
      default: return 'bg-gray-500';
    }
  };

  return (
    <div className="bg-white rounded-lg shadow-md border border-gray-200 p-3 min-w-[200px] max-w-[300px]">
      <div className="flex items-center gap-2 mb-2">
        <AlertTriangle className="w-4 h-4 text-yellow-600" />
        <span className="font-medium text-gray-700 text-sm">Condition</span>
      </div>
      
      <div className="space-y-2">
        <div className="text-xs text-gray-600">
          <span className="font-medium">Fact:</span> {data.fact}
        </div>
        
        <div className="flex items-center gap-2 flex-wrap">
          <span className={`${getOperatorColor(data.operator)} text-white text-xs px-2 py-1 rounded font-medium`}>
            {data.operator}
          </span>
          <span className="text-xs text-gray-700 font-medium break-words">
            {Array.isArray(data.value) ? data.value.join(', ') : String(data.value)}
          </span>
        </div>
        
        {data.path && (
          <div className="text-xs text-gray-500">
            <span className="font-medium">Path:</span> {data.path}
          </div>
        )}
      </div>
    </div>
  );
};

// Event Node Component
export const EventNode: React.FC<NodeProps<EventNodeData>> = ({ data }) => {
  const getEventColor = (type: string) => {
    switch (type) {
      case 'require': return 'from-red-500 to-red-600';
      case 'permit': return 'from-green-500 to-green-600';
      case 'forbid': return 'from-red-600 to-red-700';
      case 'notify': return 'from-yellow-500 to-yellow-600';
      default: return 'from-purple-500 to-purple-600';
    }
  };

  return (
    <div className={`bg-gradient-to-br ${getEventColor(data.type)} rounded-lg shadow-lg border border-gray-300 p-3 min-w-[180px] max-w-[250px]`}>
      <div className="flex items-center gap-2 mb-2">
        <Zap className="w-4 h-4 text-white" />
        <span className="font-bold text-white text-sm capitalize">{data.type}</span>
      </div>
      
      {data.params && Object.keys(data.params).length > 0 && (
        <div className="space-y-1">
          {Object.entries(data.params).slice(0, 3).map(([key, value]) => (
            <div key={key} className="text-xs text-white">
              <span className="font-medium">{key}:</span> <span className="break-words">{String(value)}</span>
            </div>
          ))}
          {Object.keys(data.params).length > 3 && (
            <div className="text-xs text-white opacity-75">
              ... and {Object.keys(data.params).length - 3} more
            </div>
          )}
        </div>
      )}
    </div>
  );
};

// Logic Node Component
export const LogicNode: React.FC<NodeProps<LogicNodeData>> = ({ data }) => {
  const getLogicColor = (logic: string) => {
    switch (logic) {
      case 'all': return 'bg-blue-500';
      case 'any': return 'bg-green-500';
      case 'not': return 'bg-red-500';
      default: return 'bg-gray-500';
    }
  };

  return (
    <div className={`${getLogicColor(data.logic)} rounded-full w-12 h-12 flex items-center justify-center shadow-lg border-2 border-white hover:scale-110 transition-transform duration-200`}>
      <span className="text-white font-bold text-xs uppercase">{data.logic}</span>
    </div>
  );
};
