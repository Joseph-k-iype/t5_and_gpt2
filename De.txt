import json
import re

def generate_substrings(word, min_len=3):
    """Generate all substrings of 'word' with a minimum length of min_len."""
    substrings = set()
    n = len(word)
    for i in range(n):
        for j in range(i + min_len, n + 1):
            substrings.add(word[i:j])
    return substrings

# Load the JSON data (adjust the file path as needed)
with open("input.json", "r") as f:
    data = json.load(f)

for entry in data:
    # Get the regex fragments and classification name
    regex_list = entry.get("classification_regex", [])
    classification_name = entry.get("classification_name", "")
    
    allowed_words = []
    
    # Extract words from each regex fragment (only keep those with 3+ characters)
    for pattern in regex_list:
        allowed_words.extend([w for w in re.findall(r'\w+', pattern) if len(w) >= 3])
    
    # Extract words from the classification name.
    # This splits on any non-word character (spaces, underscores, etc.)
    allowed_words.extend([w for w in re.findall(r'\w+', classification_name) if len(w) >= 3])
    
    # Remove duplicates
    allowed_words = set(allowed_words)
    
    # Generate all substrings of length >= 3 for each allowed word
    allowed_substrings = set()
    for word in allowed_words:
        allowed_substrings.update(generate_substrings(word, min_len=3))
    
    if allowed_substrings:
        # Escape each substring to avoid regex metacharacter issues
        escaped_substrings = [re.escape(s) for s in allowed_substrings]
        # Sort by descending length to ensure longer alternatives are tested first
        escaped_substrings.sort(key=lambda s: len(s), reverse=True)
        alternation = "|".join(escaped_substrings)
        # Build a regex pattern that allows one or more tokens (separated by whitespace)
        # where each token matches one of the allowed substrings.
        combined_pattern = rf"(?i)^(?:{alternation})(?:\s+(?:{alternation}))*$"
        entry["classification_regex"] = combined_pattern
    else:
        # Fallback pattern that never matches if no valid words are found.
        entry["classification_regex"] = r"(?i)$^"

# Write the updated data back to a JSON file
with open("output.json", "w") as f:
    json.dump(data, f, indent=4)

print("Updated JSON written to output.json")
