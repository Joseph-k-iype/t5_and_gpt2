import { RuleData } from '../types';

// Utility function to validate JSON Rules Engine format
export const validateRuleData = (data: any): data is RuleData => {
  return (
    typeof data === 'object' &&
    data !== null &&
    typeof data.rule_id === 'string' &&
    typeof data.rule_text === 'string'
  );
};

// Utility function to extract unique countries from rules
export const extractUniqueCountries = (rules: RuleData[]): string[] => {
  const countries = new Set<string>();
  
  rules.forEach(rule => {
    rule.applies_to_countries?.forEach(country => countries.add(country));
    rule.adequacy_countries?.forEach(country => countries.add(country));
  });
  
  return Array.from(countries).sort();
};

// Utility function to calculate priority distribution
export const calculatePriorityDistribution = (rules: RuleData[]) => {
  const distribution = {
    high: 0,
    medium: 0,
    low: 0,
  };
  
  rules.forEach(rule => {
    const priority = rule.priority || 50;
    if (priority >= 70) {
      distribution.high++;
    } else if (priority >= 30) {
      distribution.medium++;
    } else {
      distribution.low++;
    }
  });
  
  return distribution;
};

// Utility function to format file size
export const formatFileSize = (bytes: number): string => {
  if (bytes === 0) return '0 Bytes';
  
  const k = 1024;
  const sizes = ['Bytes', 'KB', 'MB', 'GB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
};

// Utility function to download JSON data
export const downloadJson = (data: any, filename: string) => {
  const dataStr = JSON.stringify(data, null, 2);
  const dataBlob = new Blob([dataStr], { type: 'application/json' });
  const url = URL.createObjectURL(dataBlob);
  const link = document.createElement('a');
  link.href = url;
  link.download = filename;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  URL.revokeObjectURL(url);
};

// Utility function to generate unique ID
export const generateId = (): string => {
  return `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
};

// Utility function to debounce function calls
export const debounce = <T extends (...args: any[]) => any>(
  func: T,
  wait: number
): ((...args: Parameters<T>) => void) => {
  let timeout: NodeJS.Timeout;
  
  return (...args: Parameters<T>) => {
    clearTimeout(timeout);
    timeout = setTimeout(() => func(...args), wait);
  };
};

// Utility function to calculate graph statistics
export const calculateGraphStats = (rules: RuleData[]) => {
  let totalConditions = 0;
  let totalEvents = 0;
  
  rules.forEach(rule => {
    if (rule.conditions) {
      Object.values(rule.conditions).forEach(conditionList => {
        if (Array.isArray(conditionList)) {
          totalConditions += conditionList.length;
        }
      });
    }
    
    if (rule.event) {
      totalEvents++;
    }
  });
  
  return {
    totalRules: rules.length,
    totalConditions,
    totalEvents,
    averageConditionsPerRule: rules.length > 0 ? totalConditions / rules.length : 0,
  };
};
