#!/bin/bash
set -e

# Function to wait for a service to be ready
wait_for_service() {
    local host="$1"
    local port="$2"
    local service="$3"
    
    echo "Waiting for $service to be ready at $host:$port..."
    
    # Use nc (netcat) to check if the port is open
    while ! nc -z "$host" "$port"; do
        echo "Waiting for $service to be ready..."
        sleep 1
    done
    
    echo "$service is ready!"
}

# Check if PostgreSQL credentials are set
if [ -z "$PG_HOST" ] || [ -z "$PG_PORT" ] || [ -z "$PG_USER" ] || [ -z "$PG_PASSWORD" ] || [ -z "$PG_DB" ]; then
    echo "WARNING: PostgreSQL credentials not fully set. Using defaults."
else
    # Wait for PostgreSQL to be ready
    wait_for_service "$PG_HOST" "$PG_PORT" "PostgreSQL"
fi

# Create the env directory if it doesn't exist
mkdir -p env

# Generate config.env file if it doesn't exist
if [ ! -f "env/config.env" ]; then
    echo "Creating config.env file..."
    cat > env/config.env << EOF
PROXY_ENABLED=${PROXY_ENABLED:-False}
HTTPS_PROXY_DOMAIN=${HTTPS_PROXY_DOMAIN:-""}
AD_USERNAME=${AD_USERNAME:-""}
AD_USER_PW=${AD_USER_PW:-""}
CUSTOM_NO_PROXY=${CUSTOM_NO_PROXY:-""}

VECTOR_DB_TYPE=${VECTOR_DB_TYPE:-chroma}
CHROMA_PERSIST_DIR=${CHROMA_PERSIST_DIR:-./data/chroma_db}
CHROMA_COLLECTION=${CHROMA_COLLECTION:-business_terms}
CHROMA_SERVER_PORT=${CHROMA_SERVER_PORT:-8001}

PG_HOST=${PG_HOST:-localhost}
PG_PORT=${PG_PORT:-5432}
PG_USER=${PG_USER:-postgres}
PG_PASSWORD=${PG_PASSWORD:-postgres}
PG_DB=${PG_DB:-metadata_db}
PG_SCHEMA=${PG_SCHEMA:-ai_stitching_platform}
PG_MIN_CONNECTIONS=${PG_MIN_CONNECTIONS:-2}
PG_MAX_CONNECTIONS=${PG_MAX_CONNECTIONS:-10}

EMBEDDING_MODEL=${EMBEDDING_MODEL:-text-embedding-3-small}
MODEL_NAME=${MODEL_NAME:-gpt-4o}
API_VERSION=${API_VERSION:-2023-05-15}
TEMPERATURE=${TEMPERATURE:-0.3}
MAX_TOKENS=${MAX_TOKENS:-2000}

SIMILARITY_THRESHOLD=${SIMILARITY_THRESHOLD:-0.2}
MONITORING_INTERVAL=${MONITORING_INTERVAL:-300}

TOKEN_CACHING_ENABLED=${TOKEN_CACHING_ENABLED:-True}
TOKEN_REFRESH_INTERVAL=${TOKEN_REFRESH_INTERVAL:-300}
TOKEN_VALIDATION_THRESHOLD=${TOKEN_VALIDATION_THRESHOLD:-600}
EOF
fi

# Generate credentials.env file if it doesn't exist
if [ ! -f "env/credentials.env" ]; then
    echo "Creating credentials.env file..."
    cat > env/credentials.env << EOF
AZURE_TENANT_ID=${AZURE_TENANT_ID:-""}
AZURE_CLIENT_ID=${AZURE_CLIENT_ID:-""}
AZURE_CLIENT_SECRET=${AZURE_CLIENT_SECRET:-""}
AZURE_ENDPOINT=${AZURE_ENDPOINT:-""}
SECURED_ENDPOINTS=${SECURED_ENDPOINTS:-False}
USE_MANAGED_IDENTITY=${USE_MANAGED_IDENTITY:-False}
EOF
fi

# Create data directory if it doesn't exist
mkdir -p data

# Generate requirements.txt if needed
if [ ! -s requirements.txt ]; then
    echo "Creating minimal requirements.txt..."
    cat > requirements.txt << EOF
fastapi>=0.100.0
uvicorn>=0.22.0
python-dotenv>=1.0.0
pydantic>=2.0.0
pandas>=2.0.0
numpy>=1.24.0
psycopg2-binary>=2.9.6
chromadb>=0.4.0
langchain-openai>=0.0.2
langchain-core>=0.1.0
langgraph>=0.0.15
azure-identity>=1.13.0
openai>=1.0.0
tenacity>=8.2.2
chardet>=5.1.0
EOF
fi

# If requirements.txt exists and is not empty, install dependencies
if [ -s requirements.txt ]; then
    echo "Installing Python dependencies..."
    pip install -r requirements.txt
fi

# Run database migrations or initialization if needed
echo "Running database initialization..."
python -c "from app.core.db_manager import DBManager; DBManager()" || echo "Database initialization completed with warnings."

# Run command
echo "Starting application with command: $@"
exec "$@"
