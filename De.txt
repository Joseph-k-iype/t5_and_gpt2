import React, { useState } from 'react';
import { motion, type Variants, type Transition } from 'framer-motion';
import { cn, copyToClipboard, formatTimestamp } from '../utils/lib';
import type { Message } from '../types';

interface MessageBubbleProps {
  message: Message;
  onShowGraph?: (message: any) => void;
}

const MessageBubble: React.FC<MessageBubbleProps> = ({ message, onShowGraph }) => {
  const [isExpanded, setIsExpanded] = useState(false);
  const [isCopying, setIsCopying] = useState(false);
  
  const isUser = message.type === 'user';
  const isError = message.type === 'error';

  const getConfidenceColor = (confidence?: string) => {
    switch (confidence) {
      case 'high': return 'text-green-600 bg-green-100/50';
      case 'medium': return 'text-yellow-600 bg-yellow-100/50';
      case 'low': return 'text-red-600 bg-red-100/50';
      default: return 'text-gray-600 bg-gray-100/50';
    }
  };

  const getIntentIcon = (intent?: string) => {
    switch (intent) {
      case 'definition': return 'üìñ';
      case 'comparison': return '‚öñÔ∏è';
      case 'compliance': return '‚úÖ';
      case 'explanation': return 'üí°';
      case 'research': return 'üî¨';
      default: return 'üí¨';
    }
  };

  const renderMarkdown = (text: string) => {
    // Enhanced markdown rendering for better text formatting
    return text
      .replace(/\*\*(.*?)\*\*/g, '<strong class="font-semibold text-gray-900">$1</strong>')
      .replace(/\*(.*?)\*/g, '<em class="italic">$1</em>')
      .replace(/`(.*?)`/g, '<code class="bg-gray-100/70 px-1.5 py-0.5 rounded text-sm font-mono text-gray-800 border">$1</code>')
      .replace(/### (.*?)$/gm, '<h3 class="text-lg font-semibold text-gray-800 mt-4 mb-2 border-b border-gray-200 pb-1">$1</h3>')
      .replace(/## (.*?)$/gm, '<h2 class="text-xl font-semibold text-gray-800 mt-5 mb-3 border-b-2 border-blue-200 pb-2">$1</h2>')
      .replace(/# (.*?)$/gm, '<h1 class="text-2xl font-bold text-gray-800 mt-6 mb-4 border-b-2 border-blue-300 pb-2">$1</h1>')
      .replace(/\n\n/g, '</p><p class="mb-3 leading-relaxed">')
      .replace(/^(.+)$/gm, '<p class="mb-3 leading-relaxed">$1</p>');
  };

  const handleCopy = async () => {
    setIsCopying(true);
    const success = await copyToClipboard(message.content);
    if (success) {
      setTimeout(() => setIsCopying(false), 1500);
    } else {
      setIsCopying(false);
    }
  };

  const messageVariants: Variants = {
    initial: { 
      opacity: 0, 
      y: 20, 
      scale: 0.95 
    },
    animate: { 
      opacity: 1, 
      y: 0, 
      scale: 1,
      transition: {
        type: "spring" as const,
        stiffness: 300,
        damping: 25,
        duration: 0.5
      } as Transition
    },
    exit: { 
      opacity: 0, 
      y: -20, 
      scale: 0.95,
      transition: {
        duration: 0.3
      } as Transition
    }
  };

  const bubbleVariants: Variants = {
    initial: { scale: 0.9 },
    animate: { scale: 1 },
    hover: { 
      scale: 1.01,
      transition: { duration: 0.2 }
    }
  };

  return (
    <motion.div
      variants={messageVariants}
      initial="initial"
      animate="animate"
      exit="exit"
      className={cn(
        "flex mb-6 group relative message-container",
        isUser ? 'justify-end' : 'justify-start'
      )}
    >
      <div className={cn(
        "max-w-[90%] sm:max-w-[85%] lg:max-w-[75%] xl:max-w-[70%] relative flex flex-col",
        isUser ? 'items-end' : 'items-start'
      )}>
        {/* Avatar and Message Container */}
        <div className={cn(
          "flex items-start gap-3 w-full",
          isUser ? 'flex-row-reverse' : 'flex-row'
        )}>
          {/* Avatar */}
          <motion.div
            className={cn(
              "flex-shrink-0 w-10 h-10 rounded-full flex items-center justify-center text-lg shadow-lg",
              isUser 
                ? 'bg-gradient-to-br from-blue-500 to-purple-500 text-white' 
                : isError
                ? 'bg-gradient-to-br from-red-500 to-pink-500 text-white'
                : 'bg-gradient-to-br from-green-500 to-teal-500 text-white'
            )}
            whileHover={{ scale: 1.1 }}
            whileTap={{ scale: 0.9 }}
          >
            {isUser ? 'üë§' : isError ? '‚ö†Ô∏è' : 'üß†'}
          </motion.div>

          {/* Message Content */}
          <div className={cn(
            "flex-1 min-w-0",
            isUser ? 'text-right' : 'text-left'
          )}>
            <motion.div
              variants={bubbleVariants}
              whileHover="hover"
              className={cn(
                "relative inline-block max-w-full px-4 py-3 shadow-lg backdrop-blur-sm border border-white/20",
                "rounded-2xl transition-all duration-200",
                isUser
                  ? 'bg-gradient-to-br from-blue-500/90 to-purple-500/90 text-white rounded-br-md'
                  : isError
                  ? 'bg-gradient-to-br from-red-50/90 to-pink-50/90 text-red-800 border-red-200/50 rounded-bl-md'
                  : 'bg-white/90 text-gray-800 rounded-bl-md border-gray-200/30'
              )}
            >
              {/* Message Content */}
              <div 
                className={cn(
                  "leading-relaxed break-words",
                  isUser ? 'text-white' : 'text-gray-800'
                )}
                dangerouslySetInnerHTML={{ 
                  __html: renderMarkdown(message.content) 
                }}
              />

              {/* Action Buttons for AI Messages */}
              {!isUser && !isError && (
                <div className="flex flex-wrap items-center gap-2 mt-3 pt-3 border-t border-gray-200/30">
                  {/* Graph View Button */}
                  {onShowGraph && (
                    <motion.button
                      whileHover={{ scale: 1.05 }}
                      whileTap={{ scale: 0.95 }}
                      onClick={() => onShowGraph(message)}
                      className="flex items-center gap-1 px-3 py-1.5 rounded-lg text-xs font-medium transition-all duration-200 bg-blue-100/50 hover:bg-blue-100/80 text-blue-700"
                    >
                      <span>üìä</span>
                      <span>View Graph</span>
                    </motion.button>
                  )}

                  {/* Copy Button */}
                  <motion.button
                    whileHover={{ scale: 1.05 }}
                    whileTap={{ scale: 0.95 }}
                    onClick={handleCopy}
                    className={cn(
                      "flex items-center gap-1 px-3 py-1.5 rounded-lg text-xs font-medium transition-all duration-200",
                      isCopying 
                        ? "bg-green-500 text-white shadow-md" 
                        : "bg-gray-100/50 hover:bg-gray-100/80 text-gray-700"
                    )}
                  >
                    {isCopying ? (
                      <>
                        <span>‚úÖ</span>
                        <span>Copied!</span>
                      </>
                    ) : (
                      <>
                        <span>üìã</span>
                        <span>Copy</span>
                      </>
                    )}
                  </motion.button>

                  {/* Details Toggle */}
                  {message.metadata && (
                    <motion.button
                      whileHover={{ scale: 1.05 }}
                      whileTap={{ scale: 0.95 }}
                      onClick={() => setIsExpanded(!isExpanded)}
                      className={cn(
                        "flex items-center gap-1 px-3 py-1.5 rounded-lg text-xs font-medium transition-all duration-200",
                        isExpanded 
                          ? "bg-purple-500 text-white shadow-md" 
                          : "bg-purple-100/50 hover:bg-purple-100/80 text-purple-700"
                      )}
                    >
                      <span>{isExpanded ? 'üîº' : 'üîΩ'}</span>
                      <span>Details</span>
                    </motion.button>
                  )}
                </div>
              )}

              {/* Message Metadata */}
              {!isUser && message.metadata && (
                <motion.div
                  initial={{ opacity: 0, height: 0 }}
                  animate={{ 
                    opacity: isExpanded ? 1 : 0, 
                    height: isExpanded ? 'auto' : 0 
                  }}
                  transition={{ duration: 0.3 }}
                  className="mt-3 pt-3 border-t border-gray-200/50 text-xs space-y-2 overflow-hidden"
                >
                  <div className="flex flex-wrap gap-2">
                    {message.confidence && (
                      <span className={cn(
                        "px-2 py-1 rounded-full text-xs font-medium",
                        getConfidenceColor(message.confidence)
                      )}>
                        Confidence: {message.confidence}
                      </span>
                    )}
                    {message.intent && (
                      <span className="px-2 py-1 rounded-full text-xs font-medium bg-blue-100/50 text-blue-700">
                        {getIntentIcon(message.intent)} {message.intent}
                      </span>
                    )}
                    {message.approach && (
                      <span className="px-2 py-1 rounded-full text-xs font-medium bg-purple-100/50 text-purple-700">
                        Method: {message.approach}
                      </span>
                    )}
                  </div>
                  
                  {message.metadata.thread_id && (
                    <div className="text-gray-500">
                      <span className="font-medium">Thread:</span> 
                      <span className="font-mono text-xs ml-1">{message.metadata.thread_id}</span>
                    </div>
                  )}

                  {message.metadata.processing_time && (
                    <div className="text-gray-500">
                      <span className="font-medium">Processing Time:</span> 
                      <span className="ml-1">{message.metadata.processing_time}</span>
                    </div>
                  )}

                  {message.metadata.iterations && (
                    <div className="text-gray-500">
                      <span className="font-medium">Research Iterations:</span> 
                      <span className="ml-1">{message.metadata.iterations}</span>
                    </div>
                  )}
                </motion.div>
              )}
            </motion.div>

            {/* Timestamp */}
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              transition={{ delay: 0.3 }}
              className={cn(
                "text-xs text-gray-500 mt-2 px-1",
                isUser ? 'text-right' : 'text-left'
              )}
            >
              {formatTimestamp(message.timestamp)}
            </motion.div>

            {/* Quality Indicators for AI messages */}
            {!isUser && !isError && (
              <motion.div
                initial={{ opacity: 0, x: -10 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ delay: 0.5 }}
                className={cn(
                  "flex items-center gap-2 mt-2",
                  isUser ? 'justify-end' : 'justify-start'
                )}
              >
                {/* Processing Quality Indicator */}
                <motion.div
                  className="w-2 h-2 rounded-full bg-green-400"
                  animate={{
                    scale: [1, 1.2, 1],
                    opacity: [0.7, 1, 0.7]
                  }}
                  transition={{
                    duration: 2,
                    repeat: Infinity,
                    ease: "easeInOut" as const
                  }}
                />
                
                {/* High-quality response indicator */}
                {message.confidence === 'high' && (
                  <motion.div
                    className="text-xs text-green-600 font-medium"
                    initial={{ opacity: 0 }}
                    animate={{ opacity: 1 }}
                    transition={{ delay: 0.7 }}
                  >
                    ‚úì High-quality response
                  </motion.div>
                )}
              </motion.div>
            )}
          </div>
        </div>

        {/* Message Actions */}
        {!isUser && !isError && (
          <motion.div
            initial={{ opacity: 0, y: 10 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.8 }}
            className="flex items-center gap-2 mt-2"
          >
            {/* Reaction Buttons */}
            <motion.button
              whileHover={{ scale: 1.2 }}
              whileTap={{ scale: 0.8 }}
              className="w-6 h-6 rounded-full bg-white/60 backdrop-blur-sm flex items-center justify-center text-sm hover:bg-white/80 transition-all duration-200 shadow-sm border border-white/30"
              title="Helpful"
            >
              üëç
            </motion.button>
            <motion.button
              whileHover={{ scale: 1.2 }}
              whileTap={{ scale: 0.8 }}
              className="w-6 h-6 rounded-full bg-white/60 backdrop-blur-sm flex items-center justify-center text-sm hover:bg-white/80 transition-all duration-200 shadow-sm border border-white/30"
              title="Not helpful"
            >
              üëé
            </motion.button>
            
            {/* Research Quality Badge */}
            {message.metadata?.research_result && (
              <motion.div
                initial={{ opacity: 0, scale: 0.8 }}
                animate={{ opacity: 1, scale: 1 }}
                transition={{ delay: 1 }}
                className="px-2 py-1 bg-purple-100/50 text-purple-700 rounded-full text-xs font-medium border border-purple-200/50"
              >
                üî¨ Research-backed
              </motion.div>
            )}
          </motion.div>
        )}
      </div>
    </motion.div>
  );
};

export default MessageBubble;
