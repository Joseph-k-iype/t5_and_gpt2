import React from 'react';
import { NodeProps, Handle, Position } from '@xyflow/react';
import { RoleNodeData } from '@/types/node.types';

// Role icon and color mapping
const roleConfig: Record<string, { icon: string; color: string; description: string }> = {
  'data_subject': {
    icon: 'üë§',
    color: 'bg-blue-100 text-blue-800 border-blue-200 hover:bg-blue-200',
    description: 'Individual whose personal data is processed'
  },
  'data_controller': {
    icon: 'üè¢',
    color: 'bg-green-100 text-green-800 border-green-200 hover:bg-green-200',
    description: 'Entity that determines purposes and means of processing'
  },
  'data_processor': {
    icon: '‚öôÔ∏è',
    color: 'bg-orange-100 text-orange-800 border-orange-200 hover:bg-orange-200',
    description: 'Entity that processes data on behalf of controller'
  },
  'joint_controller': {
    icon: 'ü§ù',
    color: 'bg-purple-100 text-purple-800 border-purple-200 hover:bg-purple-200',
    description: 'Multiple controllers jointly determining processing'
  },
  'dpo': {
    icon: 'üõ°Ô∏è',
    color: 'bg-indigo-100 text-indigo-800 border-indigo-200 hover:bg-indigo-200',
    description: 'Data Protection Officer'
  },
  'supervisory_authority': {
    icon: '‚öñÔ∏è',
    color: 'bg-red-100 text-red-800 border-red-200 hover:bg-red-200',
    description: 'Regulatory authority enforcing data protection law'
  }
};

const RoleNode: React.FC<NodeProps<RoleNodeData>> = ({ data }) => {
  const getRoleConfig = (role: string) => {
    return roleConfig[role] || {
      icon: 'üë•',
      color: 'bg-gray-100 text-gray-800 border-gray-200 hover:bg-gray-200',
      description: 'Stakeholder in data processing'
    };
  };

  const formatRoleName = (role: string): string => {
    return role.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
  };

  return (
    <div className="
      relative p-4 rounded-xl border-2 bg-orange-50 border-orange-300 shadow-lg 
      min-w-[220px] max-w-[320px] transition-all duration-200 hover:shadow-xl
    ">
      {/* Connection Handle */}
      <Handle
        type="target"
        position={Position.Top}
        className="w-3 h-3 bg-gray-400 border-2 border-white shadow-md"
      />
      
      {/* Header */}
      <div className="flex items-center gap-2 mb-3 px-3 py-2 bg-orange-100 rounded-lg border border-orange-200">
        <span className="text-base">üë•</span>
        <h4 className="font-semibold text-sm text-orange-800">Involved Roles</h4>
        <span className="ml-auto text-xs font-bold bg-white px-2 py-1 rounded-full text-orange-800">
          {data.roles.length}
        </span>
      </div>
      
      {/* Roles Grid */}
      <div className="space-y-2">
        {data.roles.map((role, index) => {
          const config = getRoleConfig(role);
          return (
            <div
              key={index}
              className={`
                group flex items-center gap-3 p-3 rounded-lg border 
                transition-all duration-150 cursor-help
                ${config.color}
              `}
              title={config.description}
            >
              <span className="text-base flex-shrink-0">
                {config.icon}
              </span>
              <div className="flex-1 min-w-0">
                <div className="font-semibold text-sm truncate">
                  {formatRoleName(role)}
                </div>
                <div className="text-xs opacity-75 truncate">
                  {config.description}
                </div>
              </div>
              
              {/* Role hierarchy indicator */}
              {(role === 'data_controller' || role === 'joint_controller') && (
                <div className="flex-shrink-0">
                  <span className="text-xs bg-white px-2 py-1 rounded-full font-bold">
                    PRIMARY
                  </span>
                </div>
              )}
              {role === 'supervisory_authority' && (
                <div className="flex-shrink-0">
                  <span className="text-xs bg-white px-2 py-1 rounded-full font-bold">
                    AUTHORITY
                  </span>
                </div>
              )}
            </div>
          );
        })}
      </div>
      
      {/* Role Relationship Indicators */}
      {data.roles.length > 1 && (
        <div className="mt-3 pt-2 border-t border-orange-200">
          <div className="text-xs text-orange-700 space-y-1">
            <div className="flex items-center justify-between">
              <span>Role Relationships</span>
              <span className="font-bold">
                {data.roles.includes('data_controller') && data.roles.includes('data_processor') ? 'üîó' : 'üë•'}
              </span>
            </div>
            {data.roles.includes('data_controller') && data.roles.includes('data_processor') && (
              <div className="text-xs bg-orange-100 p-2 rounded border">
                Controller-Processor relationship detected
              </div>
            )}
          </div>
        </div>
      )}
      
      {/* Footer Stats */}
      <div className="mt-3 pt-2 border-t border-orange-200">
        <div className="flex items-center justify-between text-xs text-gray-600">
          <span>Total Roles</span>
          <span className="font-bold text-orange-800">{data.roles.length}</span>
        </div>
      </div>
      
      {/* Visual accent */}
      <div className="absolute top-0 left-0 w-1 h-full bg-orange-500 rounded-l-xl" />
      
      {/* Role count indicator */}
      <div className="absolute -top-2 -right-2 w-6 h-6 bg-orange-500 text-white text-xs font-bold rounded-full flex items-center justify-center shadow-md">
        {data.roles.length}
      </div>
    </div>
  );
};

export default RoleNode;
