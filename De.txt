import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { Message } from '../types';

interface MessageBubbleProps {
  message: Message;
}

const MessageBubble: React.FC<MessageBubbleProps> = ({ message }) => {
  const [isExpanded, setIsExpanded] = useState(false);
  const isUser = message.type === 'user';
  const isError = message.type === 'error';

  const formatTimestamp = (timestamp: string) => {
    return new Date(timestamp).toLocaleTimeString([], { 
      hour: '2-digit', 
      minute: '2-digit' 
    });
  };

  const getConfidenceColor = (confidence: string) => {
    switch (confidence) {
      case 'high': return 'text-green-600 bg-green-100/50';
      case 'medium': return 'text-yellow-600 bg-yellow-100/50';
      case 'low': return 'text-red-600 bg-red-100/50';
      default: return 'text-gray-600 bg-gray-100/50';
    }
  };

  const getIntentIcon = (intent: string) => {
    switch (intent) {
      case 'definition': return 'üìñ';
      case 'comparison': return '‚öñÔ∏è';
      case 'compliance': return '‚úÖ';
      case 'explanation': return 'üí°';
      case 'research': return 'üî¨';
      default: return 'üí¨';
    }
  };

  const renderMarkdown = (text: string) => {
    // Simple markdown rendering for better text formatting
    return text
      .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
      .replace(/\*(.*?)\*/g, '<em>$1</em>')
      .replace(/`(.*?)`/g, '<code class="bg-gray-100/50 px-1 py-0.5 rounded text-sm font-mono">$1</code>')
      .replace(/### (.*?)$/gm, '<h3 class="text-lg font-semibold text-gray-800 mt-4 mb-2">$1</h3>')
      .replace(/## (.*?)$/gm, '<h2 class="text-xl font-semibold text-gray-800 mt-4 mb-2">$1</h2>')
      .replace(/# (.*?)$/gm, '<h1 class="text-2xl font-bold text-gray-800 mt-4 mb-2">$1</h1>')
      .replace(/\n\n/g, '</p><p class="mb-3">')
      .replace(/^(.+)$/gm, '<p class="mb-3">$1</p>');
  };

  const messageVariants = {
    initial: { 
      opacity: 0, 
      y: 20, 
      scale: 0.95 
    },
    animate: { 
      opacity: 1, 
      y: 0, 
      scale: 1,
      transition: {
        type: "spring",
        stiffness: 300,
        damping: 25
      }
    },
    exit: { 
      opacity: 0, 
      y: -20, 
      scale: 0.95,
      transition: {
        duration: 0.2
      }
    }
  };

  const bubbleVariants = {
    initial: { scale: 0.9 },
    animate: { scale: 1 },
    hover: { 
      scale: 1.02,
      transition: { duration: 0.2 }
    }
  };

  return (
    <motion.div
      variants={messageVariants}
      initial="initial"
      animate="animate"
      exit="exit"
      className={`flex ${isUser ? 'justify-end' : 'justify-start'} mb-4`}
    >
      <motion.div
        variants={bubbleVariants}
        whileHover="hover"
        className={`max-w-[80%] ${isUser ? 'order-2' : 'order-1'}`}
      >
        {/* Avatar */}
        <div className={`flex items-end space-x-3 ${isUser ? 'flex-row-reverse space-x-reverse' : ''}`}>
          <motion.div
            className={`flex-shrink-0 w-10 h-10 rounded-full flex items-center justify-center text-lg ${
              isUser 
                ? 'bg-gradient-to-br from-blue-500 to-purple-500' 
                : isError
                ? 'bg-gradient-to-br from-red-500 to-pink-500'
                : 'bg-gradient-to-br from-green-500 to-teal-500'
            }`}
            whileHover={{ scale: 1.1 }}
            whileTap={{ scale: 0.9 }}
          >
            {isUser ? 'üë§' : isError ? '‚ö†Ô∏è' : 'üß†'}
          </motion.div>

          {/* Message Bubble */}
          <div className={`relative ${isUser ? 'text-right' : 'text-left'}`}>
            <motion.div
              className={`inline-block px-4 py-3 rounded-2xl shadow-lg backdrop-blur-sm border border-white/20 ${
                isUser
                  ? 'bg-gradient-to-br from-blue-500/90 to-purple-500/90 text-white'
                  : isError
                  ? 'bg-gradient-to-br from-red-50/90 to-pink-50/90 text-red-800 border-red-200/50'
                  : 'bg-white/80 text-gray-800'
              } ${
                isUser 
                  ? 'rounded-br-md' 
                  : 'rounded-bl-md'
              }`}
              whileHover={{ 
                boxShadow: "0 10px 25px rgba(0,0,0,0.1)",
                y: -2
              }}
              transition={{ duration: 0.2 }}
            >
              {/* Message Content */}
              <div 
                className={`${isUser ? 'text-white' : 'text-gray-800'} leading-relaxed`}
                dangerouslySetInnerHTML={{ 
                  __html: renderMarkdown(message.content) 
                }}
              />

              {/* Message Metadata */}
              {!isUser && message.metadata && (
                <motion.div
                  initial={{ opacity: 0, height: 0 }}
                  animate={{ 
                    opacity: isExpanded ? 1 : 0, 
                    height: isExpanded ? 'auto' : 0 
                  }}
                  className="mt-3 pt-3 border-t border-gray-200/50 text-xs space-y-2"
                >
                  <div className="flex flex-wrap gap-2">
                    {message.confidence && (
                      <span className={`px-2 py-1 rounded-full text-xs font-medium ${getConfidenceColor(message.confidence)}`}>
                        Confidence: {message.confidence}
                      </span>
                    )}
                    {message.intent && (
                      <span className="px-2 py-1 rounded-full text-xs font-medium bg-blue-100/50 text-blue-700">
                        {getIntentIcon(message.intent)} {message.intent}
                      </span>
                    )}
                    {message.approach && (
                      <span className="px-2 py-1 rounded-full text-xs font-medium bg-purple-100/50 text-purple-700">
                        Method: {message.approach}
                      </span>
                    )}
                  </div>
                  
                  {message.metadata.thread_id && (
                    <div className="text-gray-500">
                      <span className="font-medium">Thread:</span> {message.metadata.thread_id}
                    </div>
                  )}
                </motion.div>
              )}

              {/* Expand/Collapse Button for AI messages */}
              {!isUser && message.metadata && (
                <motion.button
                  onClick={() => setIsExpanded(!isExpanded)}
                  className="mt-2 text-xs text-gray-500 hover:text-gray-700 transition-colors duration-200"
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                >
                  {isExpanded ? '‚ñ≤ Less details' : '‚ñº More details'}
                </motion.button>
              )}
            </motion.div>

            {/* Timestamp */}
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              transition={{ delay: 0.3 }}
              className={`text-xs text-gray-500 mt-1 ${isUser ? 'text-right' : 'text-left'}`}
            >
              {formatTimestamp(message.timestamp)}
            </motion.div>

            {/* Message Status Indicators */}
            {!isUser && (
              <motion.div
                initial={{ opacity: 0, x: -10 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ delay: 0.5 }}
                className="flex items-center space-x-1 mt-1"
              >
                {/* Processing Quality Indicator */}
                <motion.div
                  className="w-2 h-2 rounded-full bg-green-400"
                  animate={{
                    scale: [1, 1.2, 1],
                    opacity: [0.7, 1, 0.7]
                  }}
                  transition={{
                    duration: 2,
                    repeat: Infinity,
                    ease: "easeInOut"
                  }}
                />
                
                {/* AI Reasoning Indicator */}
                {message.confidence === 'high' && (
                  <motion.div
                    className="text-xs text-green-600 font-medium"
                    initial={{ opacity: 0 }}
                    animate={{ opacity: 1 }}
                    transition={{ delay: 0.7 }}
                  >
                    ‚úì High-quality response
                  </motion.div>
                )}
              </motion.div>
            )}

            {/* Copy Button */}
            <motion.button
              onClick={() => navigator.clipboard.writeText(message.content)}
              className={`absolute -top-2 ${isUser ? '-left-8' : '-right-8'} w-6 h-6 bg-white/80 backdrop-blur-sm border border-white/30 rounded-full flex items-center justify-center text-gray-600 hover:text-gray-800 hover:bg-white/90 transition-all duration-200 opacity-0 group-hover:opacity-100`}
              whileHover={{ scale: 1.1 }}
              whileTap={{ scale: 0.9 }}
              title="Copy message"
            >
              <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
              </svg>
            </motion.button>
          </div>
        </div>

        {/* Message Actions */}
        <motion.div
          initial={{ opacity: 0, y: 10 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.8 }}
          className={`flex items-center space-x-2 mt-2 ${isUser ? 'justify-end' : 'justify-start'}`}
        >
          {!isUser && !isError && (
            <>
              {/* Reaction Buttons */}
              <motion.button
                whileHover={{ scale: 1.2 }}
                whileTap={{ scale: 0.8 }}
                className="w-6 h-6 rounded-full bg-white/60 backdrop-blur-sm flex items-center justify-center text-sm hover:bg-white/80 transition-all duration-200"
                title="Helpful"
              >
                üëç
              </motion.button>
              <motion.button
                whileHover={{ scale: 1.2 }}
                whileTap={{ scale: 0.8 }}
                className="w-6 h-6 rounded-full bg-white/60 backdrop-blur-sm flex items-center justify-center text-sm hover:bg-white/80 transition-all duration-200"
                title="Not helpful"
              >
                üëé
              </motion.button>
            </>
          )}
        </motion.div>
      </motion.div>
    </motion.div>
  );
};

export default MessageBubble;
