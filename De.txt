import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence, type Variants, type Transition } from 'framer-motion';
import { formatTimestampWithSeconds } from '../utils/lib';
import type { ThoughtProcess } from '../types';

interface ThoughtBubbleProps {
  thought: ThoughtProcess;
}

const ThoughtBubble: React.FC<ThoughtBubbleProps> = ({ thought }) => {
  const [isVisible, setIsVisible] = useState(true);
  const [displayText, setDisplayText] = useState('');
  const [currentIndex, setCurrentIndex] = useState(0);

  // Typewriter effect for thought content
  useEffect(() => {
    if (currentIndex < thought.content.length) {
      const timer = setTimeout(() => {
        setDisplayText(prev => prev + thought.content[currentIndex]);
        setCurrentIndex(prev => prev + 1);
      }, 30); // Adjust speed here

      return () => clearTimeout(timer);
    }
  }, [currentIndex, thought.content]);

  // Auto-hide after some time
  useEffect(() => {
    const timer = setTimeout(() => {
      setIsVisible(false);
    }, 8000); // Hide after 8 seconds

    return () => clearTimeout(timer);
  }, []);

  const getThoughtIcon = (content: string): string => {
    const lowerContent = content.toLowerCase();
    
    if (lowerContent.includes('search') || lowerContent.includes('looking')) return 'üîç';
    if (lowerContent.includes('analyz') || lowerContent.includes('evaluat')) return 'üß†';
    if (lowerContent.includes('research') || lowerContent.includes('investigat')) return 'üî¨';
    if (lowerContent.includes('compar') || lowerContent.includes('contrast')) return '‚öñÔ∏è';
    if (lowerContent.includes('understanding') || lowerContent.includes('interpret')) return 'üí°';
    if (lowerContent.includes('processing') || lowerContent.includes('comput')) return '‚öôÔ∏è';
    if (lowerContent.includes('validat') || lowerContent.includes('verif')) return '‚úÖ';
    if (lowerContent.includes('synthesiz') || lowerContent.includes('combin')) return 'üîó';
    if (lowerContent.includes('planning') || lowerContent.includes('strateg')) return 'üìã';
    if (lowerContent.includes('thinking') || lowerContent.includes('consider')) return 'ü§î';
    
    return 'üí≠';
  };

  const thoughtVariants: Variants = {
    initial: { 
      opacity: 0, 
      scale: 0.8,
      y: 20,
      x: -10
    },
    animate: { 
      opacity: 1, 
      scale: 1,
      y: 0,
      x: 0,
      transition: {
        type: "spring" as const,
        stiffness: 400,
        damping: 25,
        duration: 0.5
      } as Transition
    },
    exit: { 
      opacity: 0, 
      scale: 0.8,
      y: -10,
      x: 10,
      transition: {
        duration: 0.3,
        ease: "easeInOut" as const
      } as Transition
    }
  };

  const bubbleVariants: Variants = {
    initial: { 
      pathLength: 0,
      opacity: 0
    },
    animate: { 
      pathLength: 1,
      opacity: 1,
      transition: {
        pathLength: { duration: 1, ease: "easeInOut" as const },
        opacity: { duration: 0.3 }
      } as Transition
    }
  };

  const floatingAnimation = {
    y: [0, -5, 0],
    transition: {
      duration: 3,
      repeat: Infinity,
      ease: "easeInOut" as const
    }
  };

  return (
    <AnimatePresence>
      {isVisible && (
        <motion.div
          variants={thoughtVariants}
          initial="initial"
          animate="animate"
          exit="exit"
          className="flex justify-start mb-2"
        >
          <motion.div
            animate={floatingAnimation}
            className="max-w-[70%] relative"
          >
            {/* Thought Bubble with SVG */}
            <div className="relative">
              {/* Main bubble */}
              <motion.div
                className="relative bg-gradient-to-br from-blue-50/70 to-purple-50/70 backdrop-blur-sm border border-blue-200/30 rounded-2xl px-4 py-3 shadow-lg"
                whileHover={{ 
                  scale: 1.02,
                  boxShadow: "0 8px 25px rgba(59, 130, 246, 0.15)"
                }}
                transition={{ duration: 0.2 }}
              >
                {/* Thought bubble decoration */}
                <svg 
                  className="absolute -left-3 top-4 w-6 h-6 text-blue-200/50"
                  viewBox="0 0 24 24"
                  fill="currentColor"
                >
                  <motion.circle 
                    variants={bubbleVariants}
                    cx="12" 
                    cy="12" 
                    r="10"
                    fill="currentColor"
                    opacity="0.6"
                  />
                  <motion.circle 
                    cx="6" 
                    cy="18" 
                    r="3"
                    fill="currentColor"
                    opacity="0.4"
                    animate={{
                      scale: [1, 1.2, 1],
                      opacity: [0.4, 0.6, 0.4]
                    }}
                    transition={{
                      duration: 2,
                      repeat: Infinity,
                      delay: 0.5
                    }}
                  />
                  <motion.circle 
                    cx="3" 
                    cy="21" 
                    r="1.5"
                    fill="currentColor"
                    opacity="0.3"
                    animate={{
                      scale: [1, 1.3, 1],
                      opacity: [0.3, 0.5, 0.3]
                    }}
                    transition={{
                      duration: 2,
                      repeat: Infinity,
                      delay: 1
                    }}
                  />
                </svg>

                {/* Content */}
                <div className="flex items-start space-x-3">
                  {/* Icon */}
                  <motion.div
                    className="flex-shrink-0 text-lg"
                    animate={{
                      rotate: [0, 5, -5, 0],
                      scale: [1, 1.1, 1]
                    }}
                    transition={{
                      duration: 2,
                      repeat: Infinity,
                      ease: "easeInOut" as const
                    }}
                  >
                    {getThoughtIcon(thought.content)}
                  </motion.div>

                  {/* Text content */}
                  <div className="flex-1 min-w-0">
                    <motion.div
                      className="text-sm text-gray-700 leading-relaxed"
                      initial={{ opacity: 0 }}
                      animate={{ opacity: 1 }}
                      transition={{ delay: 0.2 }}
                    >
                      <span className="font-medium text-blue-700">AI Thinking:</span>
                      <span className="ml-2">{displayText}</span>
                      {currentIndex < thought.content.length && (
                        <motion.span
                          className="inline-block w-0.5 h-4 bg-blue-500 ml-1"
                          animate={{ opacity: [1, 0, 1] }}
                          transition={{ duration: 0.8, repeat: Infinity }}
                        />
                      )}
                    </motion.div>

                    {/* Progress indicator */}
                    <motion.div
                      className="mt-2 h-1 bg-blue-100/50 rounded-full overflow-hidden"
                      initial={{ width: 0 }}
                      animate={{ width: "100%" }}
                      transition={{ duration: 0.5, delay: 0.3 }}
                    >
                      <motion.div
                        className="h-full bg-gradient-to-r from-blue-400 to-purple-400 rounded-full"
                        initial={{ width: "0%" }}
                        animate={{ width: `${(currentIndex / thought.content.length) * 100}%` }}
                        transition={{ duration: 0.1 }}
                      />
                    </motion.div>
                  </div>

                  {/* Close button */}
                  <motion.button
                    onClick={() => setIsVisible(false)}
                    className="flex-shrink-0 w-5 h-5 rounded-full bg-blue-100/50 hover:bg-blue-100/80 flex items-center justify-center text-blue-600 transition-colors duration-200"
                    whileHover={{ scale: 1.1 }}
                    whileTap={{ scale: 0.9 }}
                    title="Dismiss thought"
                  >
                    <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                    </svg>
                  </motion.button>
                </div>

                {/* Timestamp */}
                <motion.div
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 1 }}
                  transition={{ delay: 0.8 }}
                  className="text-xs text-blue-500/70 mt-2 text-right"
                >
                  {formatTimestampWithSeconds(thought.timestamp)}
                </motion.div>

                {/* Thought type indicator */}
                <motion.div
                  initial={{ opacity: 0, scale: 0.8 }}
                  animate={{ opacity: 1, scale: 1 }}
                  transition={{ delay: 1 }}
                  className="absolute -top-2 -right-2"
                >
                  <div className="w-6 h-6 bg-gradient-to-br from-blue-400 to-purple-400 rounded-full flex items-center justify-center text-white text-xs font-bold shadow-lg">
                    AI
                  </div>
                </motion.div>
              </motion.div>

              {/* Floating particles */}
              <div className="absolute inset-0 pointer-events-none">
                {[...Array(3)].map((_, i) => (
                  <motion.div
                    key={i}
                    className="absolute w-1 h-1 bg-blue-300/40 rounded-full"
                    style={{
                      left: `${20 + i * 25}%`,
                      top: `${30 + i * 10}%`
                    }}
                    animate={{
                      y: [-5, -15, -5],
                      opacity: [0.4, 0.8, 0.4],
                      scale: [1, 1.2, 1]
                    }}
                    transition={{
                      duration: 3,
                      repeat: Infinity,
                      delay: i * 0.5,
                      ease: "easeInOut" as const
                    }}
                  />
                ))}
              </div>
            </div>

            {/* Processing status */}
            <motion.div
              initial={{ opacity: 0, y: 5 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 1.2 }}
              className="flex items-center justify-start mt-2 space-x-2"
            >
              <div className="flex space-x-1">
                {[0, 1, 2].map((i) => (
                  <motion.div
                    key={i}
                    className="w-1.5 h-1.5 bg-blue-400 rounded-full"
                    animate={{
                      scale: [1, 1.3, 1],
                      opacity: [0.5, 1, 0.5]
                    }}
                    transition={{
                      duration: 1.5,
                      repeat: Infinity,
                      delay: i * 0.2
                    }}
                  />
                ))}
              </div>
              <span className="text-xs text-blue-500/70">
                Processing...
              </span>
            </motion.div>
          </motion.div>
        </motion.div>
      )}
    </AnimatePresence>
  );
};

export default ThoughtBubble;
