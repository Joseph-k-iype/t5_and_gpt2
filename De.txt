#!/usr/bin/env python3
"""
Setup and Usage Script for Comprehensive AI JSON Schema Analyzer
Supports OpenAI o3-mini and other latest models
"""

import os
import sys
import subprocess
import json
from pathlib import Path

def install_dependencies():
    """Install required dependencies"""
    print("📦 Installing required dependencies...")
    
    dependencies = [
        "openai>=1.0.0",
        "rdflib>=7.0.0",
    ]
    
    for dep in dependencies:
        try:
            subprocess.check_call([sys.executable, "-m", "pip", "install", dep])
            print(f"✅ Installed {dep}")
        except subprocess.CalledProcessError:
            print(f"❌ Failed to install {dep}")
            return False
    
    return True

def setup_environment():
    """Setup environment and API key"""
    print("\n🔑 Setting up OpenAI API key...")
    
    api_key = os.getenv('OPENAI_API_KEY')
    if not api_key:
        print("OPENAI_API_KEY not found in environment variables.")
        api_key = input("Please enter your OpenAI API key (or press Enter to set later): ").strip()
        
        if api_key:
            # Save to .env file
            with open('.env', 'w') as f:
                f.write(f"OPENAI_API_KEY={api_key}\n")
            print("✅ API key saved to .env file")
        else:
            print("⚠️  You can set the API key later using: export OPENAI_API_KEY='your-key'")
    else:
        print("✅ API key found in environment")
    
    return True

def create_sample_json():
    """Create a sample JSON file for testing"""
    sample_data = {
        "users": [
            {
                "id": 1,
                "name": "John Doe",
                "email": "john@example.com",
                "profile": {
                    "age": 30,
                    "city": "New York",
                    "preferences": {
                        "notifications": True,
                        "theme": "dark"
                    }
                },
                "orders": [
                    {
                        "order_id": "ORD-001",
                        "total": 99.99,
                        "status": "completed",
                        "items": [
                            {"product": "Widget A", "quantity": 2, "price": 49.99}
                        ]
                    }
                ]
            }
        ],
        "metadata": {
            "version": "1.0",
            "last_updated": "2025-07-07T10:00:00Z",
            "total_users": 1
        }
    }
    
    with open('sample_data.json', 'w') as f:
        json.dump(sample_data, f, indent=2)
    
    print("📄 Created sample_data.json for testing")

def run_quick_demo():
    """Run a quick demo analysis"""
    print("\n🚀 Running quick demo analysis...")
    
    # Create sample data if it doesn't exist
    if not Path('sample_data.json').exists():
        create_sample_json()
    
    try:
        # Import and run the analyzer
        from comprehensive_ai_json_analyzer import quick_analysis_with_rdf
        quick_analysis_with_rdf('sample_data.json')
        print("✅ Demo completed! Check the generated files.")
    except Exception as e:
        print(f"❌ Demo failed: {e}")
        print("Make sure you have set your OpenAI API key and installed dependencies.")

def main():
    """Main setup function"""
    print("🤖 COMPREHENSIVE AI JSON SCHEMA ANALYZER SETUP")
    print("=" * 50)
    print("Supports OpenAI o3-mini and latest models")
    print()
    
    while True:
        print("\nSelect an option:")
        print("1. 📦 Install dependencies")
        print("2. 🔑 Setup API key")
        print("3. 📄 Create sample JSON file")
        print("4. 🚀 Run quick demo")
        print("5. 📚 Show usage examples")
        print("6. 🎯 Run comprehensive analysis on your file")
        print("0. ❌ Exit")
        
        choice = input("\nEnter your choice (0-6): ").strip()
        
        if choice == "0":
            print("👋 Goodbye!")
            break
        elif choice == "1":
            install_dependencies()
        elif choice == "2":
            setup_environment()
        elif choice == "3":
            create_sample_json()
        elif choice == "4":
            run_quick_demo()
        elif choice == "5":
            show_usage_examples()
        elif choice == "6":
            run_custom_analysis()
        else:
            print("❌ Invalid choice. Please try again.")

def show_usage_examples():
    """Show usage examples"""
    print("\n📚 USAGE EXAMPLES")
    print("=" * 30)
    
    examples = """
# 1. Quick Analysis with RDF Graph
from comprehensive_ai_json_analyzer import quick_analysis_with_rdf
quick_analysis_with_rdf('your_file.json')

# 2. Comprehensive Analysis (Recommended)
from comprehensive_ai_json_analyzer import analyze_json_comprehensive
analyze_json_comprehensive('your_file.json')

# 3. Custom Output Directory
analyze_json_comprehensive('your_file.json', output_dir='my_analysis')

# 4. With Custom API Key
analyze_json_comprehensive('your_file.json', api_key='your-api-key')

# 5. Using the Class Directly
from comprehensive_ai_json_analyzer import ComprehensiveAIJsonAnalyzer

analyzer = ComprehensiveAIJsonAnalyzer()
analyzer.generate_comprehensive_analysis('your_file.json', 'output_folder')

# 6. Available Models in the Analysis:
# - o3-mini: Deep reasoning for schema and entity analysis
# - gpt-4o: Business domain and performance analysis  
# - gpt-4o-mini: Data quality assessment
"""
    
    print(examples)
    
    print("\n🎯 OUTPUT FILES GENERATED:")
    print("- comprehensive_analysis_[id].md - Detailed report")
    print("- schema_graph_[id].ttl - RDF graph (Turtle format)")
    print("- schema_graph_[id].rdf - RDF graph (XML format)")
    print("- schema_graph_[id].jsonld - RDF graph (JSON-LD format)")
    print("- analysis_metadata_[id].json - Analysis metadata")

def run_custom_analysis():
    """Run analysis on user-specified file"""
    print("\n🎯 CUSTOM ANALYSIS")
    print("=" * 20)
    
    json_file = input("Enter path to your JSON file: ").strip()
    
    if not Path(json_file).exists():
        print(f"❌ File not found: {json_file}")
        return
    
    output_dir = input("Enter output directory (or press Enter for default 'analysis_output'): ").strip()
    if not output_dir:
        output_dir = "analysis_output"
    
    print(f"\n🚀 Starting comprehensive analysis...")
    print(f"📁 Input file: {json_file}")
    print(f"📁 Output directory: {output_dir}")
    print(f"🤖 Models: o3-mini, gpt-4o, gpt-4o-mini")
    
    try:
        from comprehensive_ai_json_analyzer import analyze_json_comprehensive
        analyze_json_comprehensive(json_file, output_dir=output_dir)
        print("🎉 Analysis completed successfully!")
    except Exception as e:
        print(f"❌ Analysis failed: {e}")

if __name__ == "__main__":
    main()
