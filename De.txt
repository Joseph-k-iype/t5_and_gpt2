import React from 'react';
import { NodeProps, Handle, Position } from '@xyflow/react';
import type { ConditionNodeData } from '../../types/node.types';

// Operator icon mapping
const operatorIcons: Record<string, string> = {
  'equal': '=',
  'notEqual': '≠',
  'in': '∈',
  'notIn': '∉',
  'greaterThan': '>',
  'lessThan': '<',
  'greaterThanOrEqual': '≥',
  'lessThanOrEqual': '≤',
  'contains': '⊇',
  'startsWith': '→',
  'endsWith': '←'
};

const ConditionNode: React.FC<NodeProps<ConditionNodeData>> = ({ data }) => {
  const { condition, index } = data;
  
  const formatValue = (value: string | string[] | boolean | number): string => {
    if (Array.isArray(value)) {
      return value.length > 3 
        ? `[${value.slice(0, 3).join(', ')}, +${value.length - 3} more]`
        : `[${value.join(', ')}]`;
    }
    if (typeof value === 'boolean') {
      return value ? 'TRUE' : 'FALSE';
    }
    return String(value);
  };

  const getOperatorSymbol = (operator: string): string => {
    return operatorIcons[operator] || operator.toUpperCase();
  };

  const getRoleColor = (role: string): string => {
    const roleColors: Record<string, string> = {
      'data_subject': 'bg-blue-100 text-blue-800 border-blue-200',
      'data_controller': 'bg-green-100 text-green-800 border-green-200',
      'data_processor': 'bg-orange-100 text-orange-800 border-orange-200',
      'joint_controller': 'bg-purple-100 text-purple-800 border-purple-200',
      'dpo': 'bg-indigo-100 text-indigo-800 border-indigo-200',
      'supervisory_authority': 'bg-red-100 text-red-800 border-red-200'
    };
    return roleColors[role] || 'bg-gray-100 text-gray-800 border-gray-200';
  };

  return (
    <div className="
      relative p-4 rounded-xl border-2 bg-purple-50 border-purple-300 shadow-lg 
      min-w-[300px] max-w-[420px] transition-all duration-200 hover:shadow-xl
    ">
      {/* Connection Handle */}
      <Handle
        type="target"
        position={Position.Top}
        className="w-3 h-3 bg-gray-400 border-2 border-white shadow-md"
      />
      
      {/* Header */}
      <div className="flex items-center justify-between mb-3">
        <div className="flex items-center gap-2 px-3 py-2 bg-purple-100 rounded-lg border border-purple-200">
          <span className="text-base">⚙️</span>
          <h4 className="font-semibold text-sm text-purple-800">
            Condition #{index + 1}
          </h4>
        </div>
        <div className={`
          px-2 py-1 rounded-lg text-xs font-medium border
          ${getRoleColor(condition.role)}
        `}>
          {condition.role.replace(/_/g, ' ').toUpperCase()}
        </div>
      </div>
      
      {/* Condition Definition */}
      <div className="mb-3 p-3 bg-purple-100/50 rounded-lg border border-purple-200">
        <div className="text-xs text-purple-700 leading-relaxed">
          <span className="font-semibold text-purple-800">Definition:</span> {condition.condition_definition}
        </div>
      </div>
      
      {/* Logic Expression */}
      <div className="space-y-3 text-xs text-purple-700">
        {/* Fact and Operator */}
        <div className="flex items-center gap-2 p-2 bg-white rounded-lg border border-purple-200">
          <span className="font-mono font-semibold text-purple-800 bg-purple-100 px-2 py-1 rounded">
            {condition.fact}
          </span>
          <span className="font-bold text-purple-600 bg-purple-100 px-2 py-1 rounded">
            {getOperatorSymbol(condition.operator)}
          </span>
          <span className="font-mono text-purple-800 bg-purple-50 px-2 py-1 rounded flex-1 truncate">
            {formatValue(condition.value)}
          </span>
        </div>
        
        {/* If-Then Logic */}
        <div className="space-y-2">
          <div className="p-2 bg-green-50 border border-green-200 rounded-lg">
            <span className="font-semibold text-green-800">✓ </span>
            <span className="text-green-700 text-xs">{condition.if_condition}</span>
          </div>
          <div className="p-2 bg-red-50 border border-red-200 rounded-lg">
            <span className="font-semibold text-red-800">✗ </span>
            <span className="text-red-700 text-xs">{condition.else_condition}</span>
          </div>
        </div>
      </div>
      
      {/* Condition ID (for debugging/reference) */}
      <div className="mt-3 pt-2 border-t border-purple-200">
        <div className="flex items-center justify-between text-xs text-gray-600">
          <span>Condition ID</span>
          <span className="font-mono text-xs bg-gray-100 px-2 py-1 rounded">
            {condition.condition_id.split('_').pop()}
          </span>
        </div>
      </div>
      
      {/* Visual accent */}
      <div className="absolute top-0 left-0 w-1 h-full bg-purple-500 rounded-l-xl" />
      
      {/* Index indicator */}
      <div className="absolute -top-2 -right-2 w-6 h-6 bg-purple-500 text-white text-xs font-bold rounded-full flex items-center justify-center shadow-md">
        {index + 1}
      </div>
    </div>
  );
};

export default ConditionNode;
