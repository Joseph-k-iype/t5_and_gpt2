import React, { useState, useCallback, useEffect } from 'react';
import { motion } from 'framer-motion';
import ReactFlow, {
  Node,
  Edge,
  useNodesState,
  useEdgesState,
  Background,
  NodeTypes,
  MarkerType,
} from 'reactflow';
import 'reactflow/dist/style.css';

interface GraphVisualizationProps {
  message: string;
  metadata?: any;
  messageType: string;
}

// Simple Node Components
const ConceptNode = ({ data }: { data: any }) => (
  <div className="px-3 py-2 bg-blue-100 border-2 border-blue-300 rounded-lg text-center min-w-[100px]">
    <div className="text-sm font-semibold text-blue-800">{data.label}</div>
  </div>
);

const JurisdictionNode = ({ data }: { data: any }) => (
  <div className="px-3 py-2 bg-green-100 border-2 border-green-300 rounded-lg text-center min-w-[100px]">
    <div className="text-sm font-semibold text-green-800">{data.label}</div>
  </div>
);

const RegulationNode = ({ data }: { data: any }) => (
  <div className="px-3 py-2 bg-purple-100 border-2 border-purple-300 rounded-lg text-center min-w-[120px]">
    <div className="text-sm font-semibold text-purple-800">{data.label}</div>
  </div>
);

const CentralTopicNode = ({ data }: { data: any }) => (
  <div className="px-4 py-3 bg-indigo-200 border-3 border-indigo-400 rounded-xl text-center min-w-[140px]">
    <div className="text-base font-bold text-indigo-900">{data.label}</div>
  </div>
);

const nodeTypes: NodeTypes = {
  concept: ConceptNode,
  jurisdiction: JurisdictionNode,
  regulation: RegulationNode,
  central: CentralTopicNode,
};

const GraphVisualization: React.FC<GraphVisualizationProps> = ({
  message,
  metadata,
  messageType
}) => {
  const [nodes, setNodes, onNodesChange] = useNodesState([]);
  const [edges, setEdges, onEdgesChange] = useEdgesState([]);
  const [isLoading, setIsLoading] = useState(true);

  // Extract concepts from message content
  const extractConcepts = useCallback((text: string) => {
    const concepts = new Set<string>();
    const jurisdictions = new Set<string>();
    const regulations = new Set<string>();

    // Simple privacy terms
    const privacyTerms = [
      'personal data', 'consent', 'processing', 'privacy', 'breach',
      'rights', 'access', 'security', 'compliance', 'data protection'
    ];

    // Jurisdictions
    const jurisdictionTerms = [
      'GDPR', 'EU', 'CCPA', 'California', 'LGPD', 'Brazil', 
      'PIPEDA', 'Canada', 'PDPA', 'Singapore', 'UK'
    ];

    // Regulations
    const regulationTerms = [
      'General Data Protection Regulation', 'California Consumer Privacy Act',
      'Personal Data Protection Act', 'Data Protection Act'
    ];

    const textLower = text.toLowerCase();

    privacyTerms.forEach(term => {
      if (textLower.includes(term.toLowerCase())) {
        concepts.add(term);
      }
    });

    jurisdictionTerms.forEach(term => {
      if (textLower.includes(term.toLowerCase())) {
        jurisdictions.add(term);
      }
    });

    regulationTerms.forEach(term => {
      if (textLower.includes(term.toLowerCase())) {
        const shortName = term.length > 25 ? term.substring(0, 25) + '...' : term;
        regulations.add(shortName);
      }
    });

    return {
      concepts: Array.from(concepts).slice(0, 6),
      jurisdictions: Array.from(jurisdictions).slice(0, 4),
      regulations: Array.from(regulations).slice(0, 3)
    };
  }, []);

  // Create simple graph
  const createGraph = useCallback(() => {
    setIsLoading(true);
    
    const extracted = extractConcepts(message);
    const newNodes: Node[] = [];
    const newEdges: Edge[] = [];
    
    // Main topic
    let mainTopic = 'Privacy Topic';
    if (metadata?.intent) {
      mainTopic = metadata.intent.charAt(0).toUpperCase() + metadata.intent.slice(1);
    }
    
    // Central node
    newNodes.push({
      id: 'central',
      type: 'central',
      position: { x: 300, y: 200 },
      data: { label: mainTopic }
    });

    // Add jurisdiction nodes
    extracted.jurisdictions.forEach((jurisdiction, index) => {
      const id = `jurisdiction-${index}`;
      newNodes.push({
        id,
        type: 'jurisdiction',
        position: { x: 100 + index * 120, y: 100 },
        data: { label: jurisdiction }
      });

      newEdges.push({
        id: `central-${id}`,
        source: 'central',
        target: id,
        type: 'smoothstep',
        style: { stroke: '#10b981', strokeWidth: 2 }
      });
    });

    // Add regulation nodes
    extracted.regulations.forEach((regulation, index) => {
      const id = `regulation-${index}`;
      newNodes.push({
        id,
        type: 'regulation',
        position: { x: 150 + index * 140, y: 300 },
        data: { label: regulation }
      });

      newEdges.push({
        id: `central-${id}`,
        source: 'central',
        target: id,
        type: 'smoothstep',
        style: { stroke: '#8b5cf6', strokeWidth: 2 }
      });
    });

    // Add concept nodes
    extracted.concepts.forEach((concept, index) => {
      const id = `concept-${index}`;
      newNodes.push({
        id,
        type: 'concept',
        position: { x: 50 + index * 100, y: 400 },
        data: { label: concept }
      });

      newEdges.push({
        id: `central-${id}`,
        source: 'central',
        target: id,
        type: 'smoothstep',
        style: { stroke: '#3b82f6', strokeWidth: 1.5 }
      });
    });

    setNodes(newNodes);
    setEdges(newEdges);
    setIsLoading(false);
  }, [message, metadata, extractConcepts]);

  useEffect(() => {
    createGraph();
  }, [createGraph]);

  if (isLoading) {
    return (
      <div className="w-full h-full flex items-center justify-center bg-gray-50 rounded-xl">
        <div className="text-center">
          <div className="w-8 h-8 border-4 border-blue-200 border-t-blue-500 rounded-full animate-spin mx-auto mb-2"></div>
          <p className="text-gray-600">Loading graph...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="w-full h-full flex flex-col bg-white rounded-xl border overflow-hidden">
      {/* Simple Graph - No Overlays */}
      <div className="flex-1 relative">
        <ReactFlow
          nodes={nodes}
          edges={edges}
          onNodesChange={onNodesChange}
          onEdgesChange={onEdgesChange}
          nodeTypes={nodeTypes}
          fitView
          className="w-full h-full"
          minZoom={0.5}
          maxZoom={2}
        >
          <Background color="#f1f5f9" gap={16} />
        </ReactFlow>
      </div>

      {/* Simple Controls Below */}
      <div className="p-3 bg-gray-50 border-t text-center">
        <p className="text-xs text-gray-500">
          Mouse wheel: zoom • Drag: pan • {nodes.length} nodes, {edges.length} connections
        </p>
      </div>
    </div>
  );
};

export default GraphVisualization;
