// frontend/src/components/Common/Accordion.jsx
import React, { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { ChevronDown, ChevronUp } from 'lucide-react';

const Accordion = ({ 
  title, 
  children, 
  defaultOpen = false, 
  icon = null,
  className = ''
}) => {
  const [isOpen, setIsOpen] = useState(defaultOpen);

  return (
    <div className={`border border-newyorker-gray-200 rounded-lg overflow-hidden ${className}`}>
      <motion.button
        className="w-full flex items-center justify-between p-4 bg-newyorker-gray-50 hover:bg-newyorker-gray-100 transition-colors"
        onClick={() => setIsOpen(!isOpen)}
        whileHover={{ backgroundColor: 'var(--color-border)' }}
      >
        <div className="flex items-center space-x-3">
          {icon && (
            <div className="text-newyorker-muted">
              {icon}
            </div>
          )}
          <h3 className="font-display text-lg text-newyorker-black text-left">
            {title}
          </h3>
        </div>
        
        <motion.div
          animate={{ rotate: isOpen ? 180 : 0 }}
          transition={{ duration: 0.2 }}
        >
          <ChevronDown className="w-5 h-5 text-newyorker-muted" />
        </motion.div>
      </motion.button>

      <AnimatePresence initial={false}>
        {isOpen && (
          <motion.div
            initial={{ height: 0, opacity: 0 }}
            animate={{ height: 'auto', opacity: 1 }}
            exit={{ height: 0, opacity: 0 }}
            transition={{ duration: 0.3, ease: 'easeInOut' }}
            className="overflow-hidden"
          >
            <div className="p-4 bg-newyorker-cream">
              {children}
            </div>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
};

export default Accordion;

// frontend/src/components/Common/Button.jsx
import React from 'react';
import { motion } from 'framer-motion';
import { Loader2 } from 'lucide-react';

const Button = ({
  children,
  variant = 'primary',
  size = 'md',
  loading = false,
  disabled = false,
  icon = null,
  className = '',
  onClick,
  type = 'button',
  ...props
}) => {
  const baseClasses = 'inline-flex items-center justify-center font-sans font-medium transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2';
  
  const variants = {
    primary: 'bg-newyorker-black text-newyorker-cream hover:bg-newyorker-charcoal focus:ring-newyorker-black',
    secondary: 'bg-newyorker-gray-100 text-newyorker-black hover:bg-newyorker-gray-200 focus:ring-newyorker-gray-300',
    outline: 'border border-newyorker-gray-300 text-newyorker-black hover:bg-newyorker-gray-50 focus:ring-newyorker-gray-300',
    ghost: 'text-newyorker-muted hover:text-newyorker-black hover:bg-newyorker-gray-50',
    accent: 'bg-newyorker-accent text-white hover:bg-red-700 focus:ring-newyorker-accent',
  };

  const sizes = {
    sm: 'px-3 py-1.5 text-sm rounded-md',
    md: 'px-4 py-2 text-sm rounded-md',
    lg: 'px-6 py-3 text-base rounded-lg',
    xl: 'px-8 py-4 text-lg rounded-lg',
  };

  const disabledClasses = disabled || loading ? 'opacity-50 cursor-not-allowed' : '';

  const classes = [
    baseClasses,
    variants[variant],
    sizes[size],
    disabledClasses,
    className
  ].join(' ');

  return (
    <motion.button
      type={type}
      className={classes}
      onClick={onClick}
      disabled={disabled || loading}
      whileHover={!disabled && !loading ? { scale: 1.02 } : {}}
      whileTap={!disabled && !loading ? { scale: 0.98 } : {}}
      {...props}
    >
      {loading ? (
        <Loader2 className="w-4 h-4 animate-spin mr-2" />
      ) : icon ? (
        <span className="mr-2">{icon}</span>
      ) : null}
      {children}
    </motion.button>
  );
};

export default Button;

// frontend/src/components/Common/LoadingSpinner.jsx
import React from 'react';
import { motion } from 'framer-motion';

const LoadingSpinner = ({ 
  size = 'md', 
  color = 'primary',
  text = null,
  className = '' 
}) => {
  const sizes = {
    sm: 'w-4 h-4',
    md: 'w-6 h-6',
    lg: 'w-8 h-8',
    xl: 'w-12 h-12',
  };

  const colors = {
    primary: 'border-newyorker-accent',
    secondary: 'border-newyorker-muted',
    white: 'border-white',
  };

  return (
    <div className={`flex flex-col items-center justify-center ${className}`}>
      <motion.div
        className={`${sizes[size]} border-2 ${colors[color]} border-t-transparent rounded-full`}
        animate={{ rotate: 360 }}
        transition={{ duration: 1, repeat: Infinity, ease: "linear" }}
      />
      {text && (
        <motion.p 
          className="mt-3 text-sm text-newyorker-muted font-sans"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ delay: 0.2 }}
        >
          {text}
        </motion.p>
      )}
    </div>
  );
};

export default LoadingSpinner;

// frontend/src/utils/constants.js
export const API_ENDPOINTS = {
  CHAT: {
    QUICK: '/chat/quick',
    CONVERSATION: '/chat/conversation',
    SESSION: '/chat/session',
  },
  RESEARCH: {
    DEEP: '/research/deep',
    STATUS: '/research/status',
    STREAM: '/research/stream',
  },
  KNOWLEDGE_GRAPH: {
    GENERATE: '/knowledge-graph/generate',
    SESSION: '/knowledge-graph/session',
  },
  HEALTH: '/health',
};

export const RESEARCH_STAGES = {
  INITIALIZATION: 'initialization',
  PLANNING: 'planning',
  RESEARCH: 'research',
  SYNTHESIS: 'synthesis',
  COMPLETION: 'completion',
  ERROR: 'error',
};

export const MESSAGE_ROLES = {
  USER: 'user',
  ASSISTANT: 'assistant',
  SYSTEM: 'system',
};

export const CONFIDENCE_LEVELS = {
  HIGH: 'high',
  MEDIUM: 'medium',
  LOW: 'low',
};

export const NODE_TYPES = {
  DOMAIN_TERM: 'domain_term',
  PROPER_NOUN: 'proper_noun',
  ACRONYM: 'acronym',
  QUOTED_TERM: 'quoted_term',
  CONCEPT: 'concept',
};

export const ANIMATION_VARIANTS = {
  fadeIn: {
    initial: { opacity: 0, y: 20 },
    animate: { opacity: 1, y: 0 },
    exit: { opacity: 0, y: -20 },
  },
  slideIn: {
    initial: { opacity: 0, x: -20 },
    animate: { opacity: 1, x: 0 },
    exit: { opacity: 0, x: 20 },
  },
  scaleIn: {
    initial: { opacity: 0, scale: 0.9 },
    animate: { opacity: 1, scale: 1 },
    exit: { opacity: 0, scale: 0.9 },
  },
};

// frontend/src/utils/formatters.js
import { formatDistanceToNow, format, isValid } from 'date-fns';

export const formatTimestamp = (timestamp) => {
  try {
    const date = new Date(timestamp);
    if (!isValid(date)) return 'Unknown time';
    return formatDistanceToNow(date, { addSuffix: true });
  } catch {
    return 'Unknown time';
  }
};

export const formatFullDate = (timestamp) => {
  try {
    const date = new Date(timestamp);
    if (!isValid(date)) return 'Unknown date';
    return format(date, 'PPP');
  } catch {
    return 'Unknown date';
  }
};

export const formatConfidence = (confidence) => {
  if (typeof confidence === 'number') {
    return `${Math.round(confidence * 100)}%`;
  }
  return confidence || 'Unknown';
};

export const formatDuration = (seconds) => {
  if (!seconds || seconds < 0) return '0s';
  
  const minutes = Math.floor(seconds / 60);
  const remainingSeconds = seconds % 60;
  
  if (minutes > 0) {
    return `${minutes}m ${remainingSeconds}s`;
  }
  return `${remainingSeconds}s`;
};

export const truncateText = (text, maxLength = 100) => {
  if (!text || text.length <= maxLength) return text;
  return text.slice(0, maxLength).trim() + '...';
};

export const capitalizeFirst = (str) => {
  if (!str) return '';
  return str.charAt(0).toUpperCase() + str.slice(1);
};

export const slugify = (text) => {
  return text
    .toLowerCase()
    .replace(/[^\w\s-]/g, '')
    .replace(/[\s_-]+/g, '-')
    .replace(/^-+|-+$/g, '');
};

// frontend/src/utils/knowledgeGraphUtils.js
export const generateNodePosition = (index, total, centerX = 400, centerY = 300, radius = 200) => {
  const angle = (index / total) * 2 * Math.PI;
  return {
    x: centerX + radius * Math.cos(angle),
    y: centerY + radius * Math.sin(angle),
  };
};

export const getNodeColor = (nodeType) => {
  const colorMap = {
    domain_term: '#E74C3C',     // Red
    proper_noun: '#3498DB',     // Blue
    acronym: '#9B59B6',         // Purple
    quoted_term: '#F39C12',     // Orange
    concept: '#2ECC71',         // Green
  };
  return colorMap[nodeType] || '#95A5A6'; // Default gray
};

export const calculateNodeSize = (properties) => {
  const baseSize = 20;
  const score = properties?.score || 0.5;
  const frequency = properties?.frequency || 1;
  
  // Size based on score and frequency
  return Math.max(15, Math.min(50, baseSize + (score * 20) + (frequency * 5)));
};

export const filterGraphBySearch = (nodes, edges, searchTerm) => {
  if (!searchTerm) return { nodes, edges };
  
  const filteredNodes = nodes.filter(node =>
    node.data.label.toLowerCase().includes(searchTerm.toLowerCase())
  );
  
  const nodeIds = new Set(filteredNodes.map(node => node.id));
  const filteredEdges = edges.filter(edge =>
    nodeIds.has(edge.source) && nodeIds.has(edge.target)
  );
  
  return { nodes: filteredNodes, edges: filteredEdges };
};

export const filterGraphByType = (nodes, edges, nodeType) => {
  if (nodeType === 'all') return { nodes, edges };
  
  const filteredNodes = nodes.filter(node =>
    node.data.nodeType === nodeType
  );
  
  const nodeIds = new Set(filteredNodes.map(node => node.id));
  const filteredEdges = edges.filter(edge =>
    nodeIds.has(edge.source) && nodeIds.has(edge.target)
  );
  
  return { nodes: filteredNodes, edges: filteredEdges };
};

export const exportGraphData = (nodes, edges, format = 'json') => {
  const graphData = {
    nodes: nodes.map(node => ({
      id: node.id,
      label: node.data.label,
      type: node.data.nodeType,
      position: node.position,
      properties: node.data.properties,
    })),
    edges: edges.map(edge => ({
      id: edge.id,
      source: edge.source,
      target: edge.target,
      label: edge.label,
      type: edge.type,
    })),
    metadata: {
      exportDate: new Date().toISOString(),
      nodeCount: nodes.length,
      edgeCount: edges.length,
    },
  };
  
  if (format === 'json') {
    return JSON.stringify(graphData, null, 2);
  }
  
  // Could add other formats like CSV, GraphML, etc.
  return graphData;
};

// frontend/src/index.js
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

// Error boundary component
class ErrorBoundary extends React.Component {
  constructor(props) {
    super(props);
    this.state = { hasError: false, error: null };
  }

  static getDerivedStateFromError(error) {
    return { hasError: true, error };
  }

  componentDidCatch(error, errorInfo) {
    console.error('Error boundary caught an error:', error, errorInfo);
  }

  render() {
    if (this.state.hasError) {
      return (
        <div className="min-h-screen bg-newyorker-paper flex items-center justify-center p-8">
          <div className="max-w-md text-center">
            <h1 className="text-2xl font-display text-newyorker-black mb-4">
              Something went wrong
            </h1>
            <p className="text-newyorker-muted font-sans mb-6">
              We apologize for the inconvenience. Please refresh the page to try again.
            </p>
            <button
              className="btn btn-primary"
              onClick={() => window.location.reload()}
            >
              Refresh Page
            </button>
            {process.env.NODE_ENV === 'development' && (
              <details className="mt-6 text-left">
                <summary className="cursor-pointer text-sm text-newyorker-muted">
                  Error Details (Development)
                </summary>
                <pre className="mt-2 p-4 bg-newyorker-gray-100 rounded text-xs overflow-auto">
                  {this.state.error?.toString()}
                </pre>
              </details>
            )}
          </div>
        </div>
      );
    }

    return this.props.children;
  }
}

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <ErrorBoundary>
      <App />
    </ErrorBoundary>
  </React.StrictMode>
);

// Performance monitoring
reportWebVitals(console.log);

// frontend/src/reportWebVitals.js
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

// frontend/public/index.html
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#1a1a1a" />
    <meta name="description" content="Deep Research Chatbot - AI-powered research assistant with knowledge graph generation" />
    
    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website" />
    <meta property="og:title" content="Deep Research Chatbot" />
    <meta property="og:description" content="AI-powered research assistant with knowledge graph generation" />
    <meta property="og:image" content="%PUBLIC_URL%/og-image.png" />
    
    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:title" content="Deep Research Chatbot" />
    <meta property="twitter:description" content="AI-powered research assistant with knowledge graph generation" />
    <meta property="twitter:image" content="%PUBLIC_URL%/twitter-image.png" />
    
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    
    <!-- Preload critical fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    
    <title>Deep Research Chatbot</title>
  </head>
  <body>
    <noscript>
      <div style="
        display: flex;
        align-items: center;
        justify-content: center;
        min-height: 100vh;
        font-family: 'Crimson Text', serif;
        background-color: #fffef7;
        color: #1a1a1a;
        text-align: center;
        padding: 2rem;
      ">
        <div>
          <h1 style="font-size: 2rem; margin-bottom: 1rem;">Deep Research Chatbot</h1>
          <p style="margin-bottom: 1rem;">You need to enable JavaScript to run this app.</p>
          <p style="font-size: 0.875rem; color: #6b7280;">
            This application requires JavaScript for interactive features including 
            real-time chat and knowledge graph visualization.
          </p>
        </div>
      </div>
    </noscript>
    <div id="root"></div>
  </body>
</html>

// frontend/public/manifest.json
{
  "short_name": "Deep Research",
  "name": "Deep Research Chatbot",
  "description": "AI-powered research assistant with knowledge graph generation",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#1a1a1a",
  "background_color": "#fffef7",
  "categories": ["education", "productivity", "business"]
}
