import uuid
from typing import Dict, Any, Optional, List
from app.core.models import Process

def convert_legacy_data_element(data_element: Dict[str, Any]) -> Dict[str, Any]:
    """
    Convert a legacy DataElement with process_name/process_description to the new format with processes array.
    
    Args:
        data_element: Dictionary representation of a legacy DataElement
        
    Returns:
        Updated dictionary with processes array
    """
    # Make a shallow copy to avoid modifying the input
    result = data_element.copy()
    
    # Check if this is a legacy data element with process_name or process_description
    if "process_name" in result or "process_description" in result:
        process_name = result.pop("process_name", None)
        process_description = result.pop("process_description", None)
        
        if process_name or process_description:
            # Create a process entry with a generated ID
            process = {
                "process_id": f"LEGACY-{uuid.uuid4().hex[:8]}",
                "process_name": process_name or "Unnamed Process",
                "process_description": process_description or ""
            }
            
            # Add to processes array
            if "processes" not in result:
                result["processes"] = []
            
            result["processes"].append(process)
    
    return result

def convert_legacy_data_element_to_new(data_element_dict: Dict[str, Any]) -> Dict[str, Any]:
    """
    Convert a legacy DataElement to the new format and return a dictionary.
    This function handles nested dictionaries and ensures all paths are updated.
    
    Args:
        data_element_dict: Dictionary representation of a legacy DataElement
        
    Returns:
        Updated dictionary with processes array
    """
    result = convert_legacy_data_element(data_element_dict)
    
    # Also check and convert any nested data elements
    for key, value in result.items():
        if isinstance(value, dict) and ("process_name" in value or "process_description" in value):
            result[key] = convert_legacy_data_element(value)
        elif isinstance(value, list):
            # Convert any dictionaries in the list that have process_name/process_description
            for i, item in enumerate(value):
                if isinstance(item, dict) and ("process_name" in item or "process_description" in item):
                    result[key][i] = convert_legacy_data_element(item)
    
    return result

def create_process_from_legacy(process_name: Optional[str], process_description: Optional[str]) -> Optional[Process]:
    """
    Create a Process model from legacy process_name and process_description fields.
    
    Args:
        process_name: Legacy process name
        process_description: Legacy process description
        
    Returns:
        Process model or None if both inputs are None
    """
    if not process_name and not process_description:
        return None
        
    return Process(
        process_id=f"LEGACY-{uuid.uuid4().hex[:8]}",
        process_name=process_name or "Unnamed Process",
        process_description=process_description or ""
    )

def convert_legacy_processes_in_request(request_data: Dict[str, Any]) -> Dict[str, Any]:
    """
    Specially formatted function to handle enhancement requests or tagging requests.
    
    Args:
        request_data: Request data that may contain a data_element
        
    Returns:
        Updated request data with processes array
    """
    # Handle the case where the request has a data_element
    if "data_element" in request_data and isinstance(request_data["data_element"], dict):
        request_data["data_element"] = convert_legacy_data_element_to_new(request_data["data_element"])
    
    # Special handling for tagging requests that may have process_name/process_description directly
    if "process_name" in request_data or "process_description" in request_data:
        process_name = request_data.pop("process_name", None)
        process_description = request_data.pop("process_description", None)
        
        if process_name or process_description:
            process = {
                "process_id": f"LEGACY-{uuid.uuid4().hex[:8]}",
                "process_name": process_name or "Unnamed Process",
                "process_description": process_description or ""
            }
            
            if "processes" not in request_data:
                request_data["processes"] = []
            
            request_data["processes"].append(process)
    
    return request_data
