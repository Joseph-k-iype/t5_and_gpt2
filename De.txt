import os
import time
import logging
from typing import Optional
from dotenv import load_dotenv
from azure.identity import (
    DefaultAzureCredential,
    EnvironmentCredential,
    ManagedIdentityCredential,
    ClientSecretCredential,
    AzureCliCredential,
    ChainedTokenCredential
)
from azure.core.exceptions import ClientAuthenticationError
from langchain.chat_models import AzureChatOpenAI
from langchain.schema import AIMessage, HumanMessage, SystemMessage
from langchain.memory import ConversationBufferMemory
from langchain.chains import ConversationChain

# Configure logging with more detail
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Load environment variables
load_dotenv()

class AzureAuthenticator:
    """Handles Azure authentication and token management with detailed error handling."""
    
    def __init__(self):
        self._validate_environment()
        self._setup_credentials()

    def _validate_environment(self):
        """Validate required environment variables and Azure endpoint."""
        self.endpoint = os.getenv("AZURE_OPENAI_ENDPOINT")
        if not self.endpoint:
            raise ValueError(
                "AZURE_OPENAI_ENDPOINT environment variable is not set. "
                "Please set it in your .env file or environment variables."
            )
        
        # Log available authentication environment variables
        auth_vars = {
            "AZURE_TENANT_ID": os.getenv("AZURE_TENANT_ID"),
            "AZURE_CLIENT_ID": os.getenv("AZURE_CLIENT_ID"),
            "AZURE_CLIENT_SECRET": os.getenv("AZURE_CLIENT_SECRET"),
            "AZURE_USERNAME": os.getenv("AZURE_USERNAME"),
            "AZURE_PASSWORD": os.getenv("AZURE_PASSWORD")
        }
        
        logger.info("Checking authentication environment variables:")
        for var, value in auth_vars.items():
            logger.info(f"{var}: {'Set' if value else 'Not set'}")

    def _setup_credentials(self):
        """Set up various credential options and chain them together."""
        credentials = []
        
        # Try Environment Credentials
        if all(os.getenv(var) for var in ["AZURE_TENANT_ID", "AZURE_CLIENT_ID", "AZURE_CLIENT_SECRET"]):
            try:
                env_cred = EnvironmentCredential()
                credentials.append(env_cred)
                logger.info("Added Environment Credentials to chain")
            except Exception as e:
                logger.warning(f"Failed to initialize Environment Credentials: {str(e)}")

        # Try Client Secret Credentials
        tenant_id = os.getenv("AZURE_TENANT_ID")
        client_id = os.getenv("AZURE_CLIENT_ID")
        client_secret = os.getenv("AZURE_CLIENT_SECRET")
        if all([tenant_id, client_id, client_secret]):
            try:
                client_secret_cred = ClientSecretCredential(
                    tenant_id=tenant_id,
                    client_id=client_id,
                    client_secret=client_secret
                )
                credentials.append(client_secret_cred)
                logger.info("Added Client Secret Credentials to chain")
            except Exception as e:
                logger.warning(f"Failed to initialize Client Secret Credentials: {str(e)}")

        # Try Managed Identity
        try:
            managed_identity_cred = ManagedIdentityCredential()
            credentials.append(managed_identity_cred)
            logger.info("Added Managed Identity Credentials to chain")
        except Exception as e:
            logger.warning(f"Failed to initialize Managed Identity Credentials: {str(e)}")

        # Try Azure CLI
        try:
            cli_cred = AzureCliCredential()
            credentials.append(cli_cred)
            logger.info("Added Azure CLI Credentials to chain")
        except Exception as e:
            logger.warning(f"Failed to initialize Azure CLI Credentials: {str(e)}")

        if not credentials:
            raise ValueError(
                "No valid credentials could be initialized. Please ensure you have either:\n"
                "1. Valid environment variables (AZURE_TENANT_ID, AZURE_CLIENT_ID, AZURE_CLIENT_SECRET)\n"
                "2. An active Azure CLI session (run 'az login')\n"
                "3. A managed identity (if running in Azure)\n"
            )

        # Create a chained credential from our list of credentials
        self.credential = ChainedTokenCredential(*credentials)

    def get_token(self) -> str:
        """
        Get Azure AD token with detailed error handling.
        
        Returns:
            str: The access token
            
        Raises:
            Exception: If token acquisition fails
        """
        try:
            # Attempt to get token for cognitive services
            token = self.credential.get_token("https://cognitiveservices.azure.com/.default")
            logger.info("Successfully acquired token")
            return token.token
        except ClientAuthenticationError as e:
            logger.error(f"Authentication failed: {str(e)}")
            raise ValueError(
                f"Failed to authenticate with Azure. Error: {str(e)}\n"
                "Please ensure you have valid credentials configured."
            )
        except Exception as e:
            logger.error(f"Unexpected error during token acquisition: {str(e)}")
            raise

class ChatbotConfig:
    """Configuration settings for the chatbot."""
    
    def __init__(self):
        self.model_name = "gpt-35-turbo"
        self.temperature = 0.7
        self.max_tokens = 800
        self.api_version = "2024-02-01"
        self.system_message = """You are a helpful AI assistant. Be concise, clear, and friendly in your responses."""

class AzureChatBot:
    """Azure OpenAI-powered chatbot using LangChain."""
    
    def __init__(self, config: Optional[ChatbotConfig] = None):
        self.config = config or ChatbotConfig()
        self._setup_authentication()
        self._initialize_chat_model()
        self._setup_conversation()

    def _setup_authentication(self):
        """Set up Azure authentication with error handling."""
        try:
            self.authenticator = AzureAuthenticator()
            self.access_token = self.authenticator.get_token()
            self.token_refresh_time = time.time()
            logger.info("Authentication setup completed successfully")
        except Exception as e:
            logger.error(f"Authentication setup failed: {str(e)}")
            raise

    def _initialize_chat_model(self):
        """Initialize the Azure OpenAI chat model."""
        try:
            self.llm = AzureChatOpenAI(
                model_name=self.config.model_name,
                temperature=self.config.temperature,
                max_tokens=self.config.max_tokens,
                openai_api_version=self.config.api_version,
                azure_endpoint=self.authenticator.endpoint,
                azure_ad_token=self.access_token
            )
            logger.info("Chat model initialized successfully")
        except Exception as e:
            logger.error(f"Failed to initialize chat model: {str(e)}")
            raise

    def _setup_conversation(self):
        """Set up conversation memory and chain."""
        try:
            self.memory = ConversationBufferMemory()
            self.conversation = ConversationChain(
                llm=self.llm,
                memory=self.memory,
                verbose=True
            )
            self.memory.chat_memory.messages.append(
                SystemMessage(content=self.config.system_message)
            )
            logger.info("Conversation setup completed successfully")
        except Exception as e:
            logger.error(f"Failed to setup conversation: {str(e)}")
            raise

    def chat(self, user_input: str) -> str:
        """Process user input and return response."""
        if not user_input.strip():
            return "Please provide a non-empty message."
            
        try:
            # Refresh token if needed
            current_time = time.time()
            if current_time - self.token_refresh_time > 3300:
                self.access_token = self.authenticator.get_token()
                self.token_refresh_time = current_time
                self.llm.azure_ad_token = self.access_token
                logger.info("Token refreshed successfully")
            
            response = self.conversation.predict(input=user_input)
            return response
            
        except Exception as e:
            error_msg = f"Error processing message: {str(e)}"
            logger.error(error_msg)
            return error_msg

def main():
    """Main function to run the chatbot with error handling."""
    try:
        print("Initializing chatbot...")
        print("Checking Azure credentials and authentication...")
        
        chatbot = AzureChatBot()
        
        print("\nChatbot initialized successfully!")
        print("Type 'quit' or 'exit' to end the conversation")
        print("-" * 50)

        while True:
            user_input = input("\nYou: ").strip()
            
            if user_input.lower() in ['quit', 'exit', 'bye']:
                print("Goodbye!")
                break

            response = chatbot.chat(user_input)
            print(f"\nBot: {response}")

    except ValueError as e:
        print(f"\nConfiguration Error: {str(e)}")
        print("\nPlease check your authentication settings and try again.")
    except Exception as e:
        print(f"\nUnexpected Error: {str(e)}")
        print("\nPlease check the logs for more details.")

if __name__ == "__main__":
    main()
