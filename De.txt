import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import './styles/globals.css';

// Error boundary component
class ErrorBoundary extends React.Component<
  { children: React.ReactNode },
  { hasError: boolean; error?: Error }
> {
  constructor(props: { children: React.ReactNode }) {
    super(props);
    this.state = { hasError: false };
  }

  static getDerivedStateFromError(error: Error) {
    return { hasError: true, error };
  }

  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {
    console.error('React Error Boundary caught an error:', error, errorInfo);
    
    // Here you could send error to monitoring service
    // reportErrorToService(error, errorInfo);
  }

  render() {
    if (this.state.hasError) {
      return (
        <div className="min-h-screen bg-gradient-to-br from-red-50 via-white to-pink-50 flex items-center justify-center p-4">
          <div className="glass-card p-8 max-w-md mx-auto text-center">
            <div className="text-red-500 mb-4">
              <svg className="w-16 h-16 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path 
                  strokeLinecap="round" 
                  strokeLinejoin="round" 
                  strokeWidth={2} 
                  d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L4.082 15.5c-.77.833.192 2.5 1.732 2.5z" 
                />
              </svg>
            </div>
            
            <h2 className="text-xl font-semibold text-gray-800 mb-2">
              Something went wrong
            </h2>
            
            <p className="text-gray-600 mb-6">
              We're sorry, but something unexpected happened. Please refresh the page to try again.
            </p>
            
            <button
              onClick={() => window.location.reload()}
              className="glass-button px-6 py-2 bg-blue-500/20 text-blue-700 rounded-lg font-medium hover:bg-blue-500/30 transition-all duration-200"
            >
              Refresh Page
            </button>
            
            {process.env.NODE_ENV === 'development' && this.state.error && (
              <details className="mt-6 text-left">
                <summary className="cursor-pointer text-sm text-gray-500 hover:text-gray-700">
                  Technical Details
                </summary>
                <pre className="mt-2 p-3 bg-gray-100/50 rounded text-xs overflow-auto max-h-32">
                  {this.state.error.stack}
                </pre>
              </details>
            )}
          </div>
        </div>
      );
    }

    return this.props.children;
  }
}

// Performance monitoring
const reportWebVitals = (metric: any) => {
  if (process.env.NODE_ENV === 'development') {
    console.log('Web Vitals:', metric);
  }
  
  // Here you could send metrics to analytics service
  // analytics.track('Web Vitals', metric);
};

// Check for browser compatibility
const checkBrowserCompatibility = () => {
  const isSupported = (() => {
    // Check for required features
    return (
      typeof fetch !== 'undefined' &&
      typeof Promise !== 'undefined' &&
      typeof WebSocket !== 'undefined' &&
      typeof CSS !== 'undefined' &&
      CSS.supports('backdrop-filter', 'blur(10px)')
    );
  })();

  if (!isSupported) {
    document.body.innerHTML = `
      <div style="
        min-height: 100vh;
        display: flex;
        align-items: center;
        justify-content: center;
        background: linear-gradient(135deg, #f0f9ff 0%, #ffffff 50%, #faf5ff 100%);
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;
        padding: 2rem;
      ">
        <div style="
          background: rgba(255, 255, 255, 0.9);
          padding: 3rem;
          border-radius: 1rem;
          box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
          text-align: center;
          max-width: 32rem;
        ">
          <h1 style="
            color: #1e293b;
            font-size: 1.5rem;
            font-weight: 600;
            margin-bottom: 1rem;
          ">
            Browser Not Supported
          </h1>
          <p style="
            color: #64748b;
            margin-bottom: 1.5rem;
            line-height: 1.6;
          ">
            This application requires a modern browser with support for ES2020, WebSocket, and CSS backdrop-filter.
            Please update your browser or try using Chrome, Firefox, Safari, or Edge.
          </p>
          <a 
            href="https://browsehappy.com/" 
            style="
              display: inline-block;
              background: #3b82f6;
              color: white;
              padding: 0.75rem 1.5rem;
              text-decoration: none;
              border-radius: 0.5rem;
              font-weight: 500;
              transition: background-color 0.2s;
            "
            onmouseover="this.style.backgroundColor='#2563eb'"
            onmouseout="this.style.backgroundColor='#3b82f6'"
          >
            Update Browser
          </a>
        </div>
      </div>
    `;
    return false;
  }
  
  return true;
};

// Initialize application
const initializeApp = () => {
  // Check browser compatibility first
  if (!checkBrowserCompatibility()) {
    return;
  }

  // Get root element
  const rootElement = document.getElementById('root');
  
  if (!rootElement) {
    throw new Error('Root element not found. Make sure you have a div with id="root" in your index.html');
  }

  // Create React root and render app
  const root = ReactDOM.createRoot(rootElement);
  
  root.render(
    <React.StrictMode>
      <ErrorBoundary>
        <App />
      </ErrorBoundary>
    </React.StrictMode>
  );

  // Register service worker for PWA features (optional)
  if ('serviceWorker' in navigator && process.env.NODE_ENV === 'production') {
    window.addEventListener('load', () => {
      navigator.serviceWorker.register('/sw.js')
        .then((registration) => {
          console.log('SW registered: ', registration);
        })
        .catch((registrationError) => {
          console.log('SW registration failed: ', registrationError);
        });
    });
  }

  // Performance monitoring
  if (process.env.NODE_ENV === 'development') {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(reportWebVitals);
      getFID(reportWebVitals);
      getFCP(reportWebVitals);
      getLCP(reportWebVitals);
      getTTFB(reportWebVitals);
    });
  }

  // Development helpers
  if (process.env.NODE_ENV === 'development') {
    // Add useful development tools to window object
    (window as any).__PRIVACY_CHATBOT_DEV__ = {
      version: process.env.npm_package_version,
      buildTime: __BUILD_TIME__,
      environment: process.env.NODE_ENV,
    };
    
    console.log('ðŸ§  Privacy Chatbot - Development Mode');
    console.log('Version:', process.env.npm_package_version);
    console.log('Build Time:', __BUILD_TIME__);
    console.log('API URL:', import.meta.env.VITE_API_BASE_URL || 'http://localhost:5000');
    console.log('WebSocket URL:', import.meta.env.VITE_WEBSOCKET_URL || 'http://localhost:5000');
  }
};

// Handle uncaught errors
window.addEventListener('error', (event) => {
  console.error('Uncaught error:', event.error);
  // You could send this to monitoring service
});

window.addEventListener('unhandledrejection', (event) => {
  console.error('Unhandled promise rejection:', event.reason);
  // You could send this to monitoring service
  event.preventDefault();
});

// Initialize when DOM is ready
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', initializeApp);
} else {
  initializeApp();
}

// Export for potential testing purposes
export { ErrorBoundary, reportWebVitals };
