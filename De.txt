import { useState, useEffect } from 'react';
import { JsonRule, RuleGraph, RuleAnalytics } from '../types/rules';
import { parseRulesData, generateRuleAnalytics } from '../utils/rulesParser';

interface UseRulesDataReturn {
  rules: JsonRule[];
  ruleGraph: RuleGraph;
  analytics: RuleAnalytics | null;
  loading: boolean;
  error: string | null;
  refetch: () => void;
}

export const useRulesData = (filePath: string = '/json_rules_engine_format.json'): UseRulesDataReturn => {
  const [rules, setRules] = useState<JsonRule[]>([]);
  const [ruleGraph, setRuleGraph] = useState<RuleGraph>({ nodes: [], edges: [] });
  const [analytics, setAnalytics] = useState<RuleAnalytics | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const fetchRules = async () => {
    try {
      setLoading(true);
      setError(null);

      const response = await fetch(filePath);
      
      if (!response.ok) {
        throw new Error(`Failed to fetch rules: ${response.status} ${response.statusText}`);
      }

      const data = await response.json();
      
      // Handle both array and single rule formats
      const rulesArray: JsonRule[] = Array.isArray(data) ? data : [data];
      
      if (rulesArray.length === 0) {
        throw new Error('No rules found in the file');
      }

      // Validate rule structure
      const validRules = rulesArray.filter(rule => {
        return rule.conditions && rule.event;
      });

      if (validRules.length === 0) {
        throw new Error('No valid rules found. Rules must have conditions and event properties.');
      }

      if (validRules.length < rulesArray.length) {
        console.warn(`${rulesArray.length - validRules.length} invalid rules were filtered out`);
      }

      setRules(validRules);
      
      // Parse rules into graph format
      const graph = parseRulesData(validRules);
      setRuleGraph(graph);
      
      // Generate analytics
      const analyticsData = generateRuleAnalytics(validRules);
      setAnalytics(analyticsData);

    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Unknown error occurred';
      setError(errorMessage);
      console.error('Error fetching rules:', err);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchRules();
  }, [filePath]);

  const refetch = () => {
    fetchRules();
  };

  return {
    rules,
    ruleGraph,
    analytics,
    loading,
    error,
    refetch
  };
};
