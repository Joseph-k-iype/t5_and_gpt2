# ... (keep all existing code above the NEW CODE section intact)

##############################################
# NEW CODE BELOW FOR REGEX GENERATOR WORKFLOW
##############################################

# Import necessary LangGraph components
from langgraph.graph import StateGraph, END
from langchain_core.messages import HumanMessage, AIMessage
from langchain_core.runnables import RunnablePassthrough
import csv
import io

# Define schemas for data flow
class DataItem(BaseModel):
    name: str
    definition: str = ""
    related_term_name: str = ""
    related_term_definition: str = ""
    related_term_example: str = ""
    
class ResearchResult(BaseModel):
    name: str
    possible_values: List[str]
    value_descriptions: Dict[str, str] = {}
    examples: List[str] = []
    notes: str = ""

class RegexGeneration(BaseModel):
    name: str
    possible_values: List[str]
    regex: str
    explanation: str = ""
    
class ValidationResult(BaseModel):
    name: str
    regex: str
    is_valid: bool
    issues: List[str] = []
    corrected_regex: Optional[str] = None
    
class EvaluationResult(BaseModel):
    name: str
    regex: str
    status: str  # RED, AMBER, GREEN
    reason: str
    suggestions: List[str] = []

class WorkflowState(BaseModel):
    input_data: DataItem
    research_result: Optional[ResearchResult] = None
    regex_generation: Optional[RegexGeneration] = None
    validation_result: Optional[ValidationResult] = None
    evaluation_result: Optional[EvaluationResult] = None
    final_output: Optional[str] = None

# Agent implementation templates
class ResearcherAgent:
    def __init__(self, llm):
        self.llm = llm
        self.prompt_template = PromptTemplate(
            template="""You are a field researcher expert. Your task is to understand a field name and its metadata, 
            then generate all possible values that could be represented by this field.
            
            For example:
            - If the field is "age", possible values might include integers, ranges, years, months, etc.
            - If the field is "currency", possible values might include currency codes (USD, EUR), symbols ($, â‚¬), etc.
            
            Field information:
            - Name: {name}
            - Definition: {definition}
            - Related term name: {related_term_name}
            - Related term definition: {related_term_definition}
            - Related term example: {related_term_example}
            
            Generate a comprehensive list of all possible values and formats for this field.
            Be exhaustive in your analysis but focus on actual data values, not descriptive terms.
            
            Your response format should be:
            POSSIBLE VALUES:
            - [list value types one per line]
            
            EXAMPLES:
            - [list concrete examples one per line]
            
            NOTES:
            [Any special considerations or edge cases]
            """,
            input_variables=["name", "definition", "related_term_name", "related_term_definition", "related_term_example"]
        )
        
    def process(self, state: WorkflowState) -> WorkflowState:
        try:
            data = state.input_data
            prompt = self.prompt_template.format(
                name=data.name,
                definition=data.definition,
                related_term_name=data.related_term_name,
                related_term_definition=data.related_term_definition,
                related_term_example=data.related_term_example
            )
            
            response = self.llm.invoke(prompt)
            response_text = response.content if hasattr(response, 'content') else str(response)
            
            # Parse the response
            possible_values = []
            examples = []
            notes = []
            
            current_section = None
            for line in response_text.split('\n'):
                clean_line = line.strip()
                if clean_line.startswith('POSSIBLE VALUES:'):
                    current_section = 'values'
                elif clean_line.startswith('EXAMPLES:'):
                    current_section = 'examples'
                elif clean_line.startswith('NOTES:'):
                    current_section = 'notes'
                elif current_section == 'values' and clean_line.startswith('-'):
                    possible_values.append(clean_line[1:].strip())
                elif current_section == 'examples' and clean_line.startswith('-'):
                    examples.append(clean_line[1:].strip())
                elif current_section == 'notes' and clean_line:
                    notes.append(clean_line)
            
            # Create research result
            state.research_result = ResearchResult(
                name=data.name,
                possible_values=possible_values,
                examples=examples,
                notes=' '.join(notes).strip()
            )
            
            return state
        
        except Exception as e:
            logger.error(f"Error in ResearcherAgent: {e}")
            raise

class RegexGeneratorAgent:
    def __init__(self, llm):
        self.llm = llm
        self.prompt_template = PromptTemplate(
            template="""You are a regex engineering expert. Create a technically sound regex pattern for the field "{name}".
            
            Requirements:
            1. Must match these value types:
            {possible_values}
            
            2. Must handle these examples:
            {examples}
            
            3. Special considerations:
            {notes}
            
            Rules:
            - DO NOT include the field name in the pattern
            - Prioritize pattern matching over exact strings
            - Use exact match only as fallback
            - Include appropriate anchors and quantifiers
            - Optimize for performance
            - Use non-capturing groups where possible
            
            Respond ONLY with:
            REGEX: // Your regex here (without delimiters)
            EXPLANATION: // Brief technical explanation""",
            input_variables=["name", "possible_values", "examples", "notes"]
        )
        
    def process(self, state: WorkflowState) -> WorkflowState:
        try:
            research = state.research_result
            
            prompt = self.prompt_template.format(
                name=research.name,
                possible_values='\n'.join(research.possible_values),
                examples='\n'.join(research.examples),
                notes=research.notes
            )
            
            response = self.llm.invoke(prompt)
            response_text = response.content if hasattr(response, 'content') else str(response)
            
            # Parse response
            regex = ''
            explanation = []
            
            in_explanation = False
            for line in response_text.split('\n'):
                clean_line = line.strip()
                if clean_line.startswith('REGEX:'):
                    regex = clean_line[6:].strip()
                elif clean_line.startswith('EXPLANATION:'):
                    in_explanation = True
                elif in_explanation:
                    explanation.append(clean_line)
            
            # Store results
            state.regex_generation = RegexGeneration(
                name=research.name,
                possible_values=research.possible_values,
                regex=regex,
                explanation=' '.join(explanation).strip()
            )
            
            return state
        
        except Exception as e:
            logger.error(f"Error in RegexGeneratorAgent: {e}")
            raise

class ValidatorAgent:
    def __init__(self):
        self.compilation_cache = {}
        
    def process(self, state: WorkflowState) -> WorkflowState:
        try:
            regex = state.regex_generation.regex
            validation = ValidationResult(
                name=state.input_data.name,
                regex=regex,
                is_valid=False
            )
            
            # Syntax check
            try:
                re.compile(regex)
                validation.is_valid = True
            except re.error as e:
                validation.issues.append(f"Syntax error: {str(e)}")
                # Attempt automatic correction
                corrected = self._attempt_correction(regex)
                if corrected:
                    validation.corrected_regex = corrected
                    try:
                        re.compile(corrected)
                        validation.issues.append("Auto-corrected valid regex")
                        validation.is_valid = True
                    except:
                        validation.issues.append("Failed to auto-correct")
            
            state.validation_result = validation
            return state
        
        except Exception as e:
            logger.error(f"Error in ValidatorAgent: {e}")
            raise
    
    def _attempt_correction(self, regex: str) -> Optional[str]:
        # Simple common fixes
        corrections = [
            (r'([^\\])([+*?{])', r'\1\\\2'),  # Escape special characters
            (r'^/', ''), (r'/$', ''),         # Remove common delimiters
            (r'\\\\([+*?{])', r'\\\1')        # Fix double escapes
        ]
        for pattern, replacement in corrections:
            regex = re.sub(pattern, replacement, regex)
        return regex

class EvaluatorAgent:
    def __init__(self, llm):
        self.llm = llm
        self.prompt_template = PromptTemplate(
            template="""Evaluate this regex for field "{name}":
            Regex: {regex}
            Intended values: {possible_values}
            
            Assessment Criteria:
            1. Coverage - Does it match all intended value types?
            2. Precision - Does it avoid false positives?
            3. Performance - Is it efficient?
            4. Maintainability - Is it readable/modifiable?
            
            Return assessment as:
            STATUS: [GREEN|AMBER|RED]
            REASON: Concise justification
            SUGGESTIONS: - Bullet points""",
            input_variables=["name", "regex", "possible_values"]
        )
        
    def process(self, state: WorkflowState) -> WorkflowState:
        try:
            research = state.research_result
            validation = state.validation_result
            
            if not validation.is_valid:
                return EvaluationResult(
                    status="RED",
                    reason="Invalid regex syntax",
                    suggestions=["Fix syntax errors first"]
                )
            
            prompt = self.prompt_template.format(
                name=research.name,
                regex=validation.regex,
                possible_values=', '.join(research.possible_values)
            )
            
            response = self.llm.invoke(prompt)
            response_text = response.content if hasattr(response, 'content') else str(response)
            
            # Parse response
            status = "AMBER"
            reason = []
            suggestions = []
            
            current_section = None
            for line in response_text.split('\n'):
                clean_line = line.strip()
                if clean_line.startswith('STATUS:'):
                    status = clean_line[7:].strip().upper()
                elif clean_line.startswith('REASON:'):
                    current_section = 'reason'
                elif clean_line.startswith('SUGGESTIONS:'):
                    current_section = 'suggestions'
                elif current_section == 'reason' and clean_line:
                    reason.append(clean_line)
                elif current_section == 'suggestions' and clean_line.startswith('-'):
                    suggestions.append(clean_line[1:].strip())
            
            state.evaluation_result = EvaluationResult(
                name=research.name,
                regex=validation.regex,
                status=status,
                reason=' '.join(reason),
                suggestions=suggestions
            )
            
            # Generate final output
            state.final_output = self._format_output(state)
            return state
        
        except Exception as e:
            logger.error(f"Error in EvaluatorAgent: {e}")
            raise
    
    def _format_output(self, state: WorkflowState) -> str:
        output = io.StringIO()
        writer = csv.writer(output, quoting=csv.QUOTE_ALL)
        
        # Header
        writer.writerow([
            "Field Name", "Generated Regex", "Validation Status",
            "Evaluation Status", "Coverage %", "Suggested Improvements"
        ])
        
        # Data
        eval_result = state.evaluation_result
        research = state.research_result
        
        writer.writerow([
            state.input_data.name,
            eval_result.regex,
            "Valid" if state.validation_result.is_valid else "Invalid",
            eval_result.status,
            self._calculate_coverage(state),
            '; '.join(eval_result.suggestions)
        ])
        
        return output.getvalue()
    
    def _calculate_coverage(self, state: WorkflowState) -> float:
        # Simple coverage heuristic
        research = state.research_result
        regex = state.validation_result.regex
        examples = research.examples
        
        matched = 0
        for example in examples:
            if re.fullmatch(regex, example):
                matched += 1
                
        return round((matched / len(examples)) * 100) if examples else 100

# Workflow setup
class RegexGeneratorWorkflow:
    def __init__(self, config_file=CONFIG_PATH, creds_file=CREDS_PATH, cert_file=CERT_PATH):
        self.chatbot = AzureChatbot(config_file, creds_file, cert_file)
        self.llm = self.chatbot.llm
        
        # Initialize agents
        self.researcher = ResearcherAgent(self.llm)
        self.generator = RegexGeneratorAgent(self.llm)
        self.validator = ValidatorAgent()
        self.evaluator = EvaluatorAgent(self.llm)
        
        # Build workflow
        self.workflow = StateGraph(WorkflowState)
        self.workflow.add_node("research", self.researcher.process)
        self.workflow.add_node("generate", self.generator.process)
        self.workflow.add_node("validate", self.validator.process)
        self.workflow.add_node("evaluate", self.evaluator.process)
        
        # Define flow
        self.workflow.set_entry_point("research")
        self.workflow.add_edge("research", "generate")
        self.workflow.add_edge("generate", "validate")
        self.workflow.add_edge("validate", "evaluate")
        self.workflow.add_edge("evaluate", END)
        
        # Compile graph
        self.graph = self.workflow.compile()
    
    def process_csv(self, input_path: str, output_path: str):
        items = read_csv_file(input_path)
        with open(output_path, 'w', newline='') as out_file:
            writer = csv.writer(out_file)
            writer.writerow(["Field Name", "Regex", "Status", "Coverage", "Issues"])
            
            for item in items:
                state = WorkflowState(input_data=item)
                result = self.graph.invoke(state)
                
                eval_result = result.evaluation_result
                writer.writerow([
                    item.name,
                    eval_result.regex,
                    eval_result.status,
                    result.evaluator._calculate_coverage(result),
                    '; '.join(eval_result.suggestions)
                ])

def read_csv_file(file_path: str) -> List[DataItem]:
    items = []
    with open(file_path, newline='') as csvfile:
        reader = csv.DictReader(csvfile)
        for row in reader:
            items.append(DataItem(
                name=row['name'],
                definition=row.get('definition', ''),
                related_term_name=row.get('related term name', ''),
                related_term_definition=row.get('related term definition', ''),
                related_term_example=row.get('related term example', '')
            ))
    return items

# Execution
if __name__ == "__main__":
    if len(sys.argv) != 3:
        print("Usage: python regex_gen.py <input.csv> <output.csv>")
        sys.exit(1)
    
    workflow = RegexGeneratorWorkflow()
    workflow.process_csv(sys.argv[1], sys.argv[2])
    print(f"Processing complete. Results saved to {sys.argv[2]}")
