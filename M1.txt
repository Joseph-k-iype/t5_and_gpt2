import pandas as pd
import re

# Check if the string contains special characters
def has_special_characters(val):
    if isinstance(val, str):
        return bool(re.search(r'[^a-zA-Z0-9\s]', val))
    return False

# Check if the string has fewer than 4 characters
def has_less_than_4_characters(val):
    if isinstance(val, str):
        return len(val) < 4
    return False

# Check if the string contains digits (e.g., version numbers or IDs)
def has_digits(val):
    if isinstance(val, str):
        return bool(re.search(r'\d+', val))
    return False

# Check if the string is fully uppercase (e.g., acronyms like API, SQL)
def is_all_uppercase(val):
    if isinstance(val, str):
        return bool(re.search(r'^[A-Z]+$', val))
    return False

# Check if the string contains a mix of letters and numbers (e.g., APIv2, ID123)
def is_mixed_letters_numbers(val):
    if isinstance(val, str):
        return bool(re.search(r'[a-zA-Z]+\d+', val))
    return False

# Check if the string looks like a version or file pattern (e.g., v1.0, .exe)
def is_version_or_file_pattern(val):
    if isinstance(val, str):
        return bool(re.search(r'\w+\.\w+', val))
    return False

# Check if the string is in camel case (e.g., camelCase)
def is_camel_case(val):
    if isinstance(val, str):
        return bool(re.search(r'^[a-z]+(?:[A-Z][a-z]+)+$', val))
    return False

# Check if the string is in underscore case (e.g., snake_case)
def is_underscore_case(val):
    if isinstance(val, str):
        return bool(re.search(r'^[a-zA-Z]+_[a-zA-Z]+$', val))
    return False

# Check if two columns have the same value
def is_same_value(val1, val2):
    return val1 == val2

# Main function to compare columns and generate specific reasons
def compare_columns(df, col1, col2):
    # Initialize lists to store the results of various checks
    comparison_results = []
    special_char_col = []
    less_than_4_col = []
    has_digits_col = []
    all_uppercase_col = []
    mixed_letters_numbers_col = []
    version_file_pattern_col = []
    camel_case_col = []
    underscore_case_col = []
    reasons = []

    for index, row in df.iterrows():
        value1 = row[col1]
        value2 = row[col2]
        
        # Perform all checks
        same_values = is_same_value(value1, value2)
        special_chars = has_special_characters(value1)
        less_than_4 = has_less_than_4_characters(value1)
        has_digits = has_digits(value1)
        all_uppercase = is_all_uppercase(value1)
        mixed_letters_numbers = is_mixed_letters_numbers(value1)
        version_file_pattern = is_version_or_file_pattern(value1)
        camel_case = is_camel_case(value1)
        underscore_case = is_underscore_case(value1)

        # Build the reason string based on the checks
        reason = []

        if same_values:
            reason.append("Values are the same")
        else:
            reason.append("Values are different")

        if special_chars:
            reason.append("First column contains special characters")
        if less_than_4:
            reason.append("First column has less than 4 characters")
        if has_digits:
            reason.append("Contains digits")
        if all_uppercase:
            reason.append("Is all uppercase (e.g., acronym)")
        if mixed_letters_numbers:
            reason.append("Contains a mix of letters and numbers")
        if version_file_pattern:
            reason.append("Looks like a version or file pattern")
        if camel_case:
            reason.append("Is in camel case (e.g., camelCase)")
        if underscore_case:
            reason.append("Is in underscore case (e.g., snake_case)")
        
        # Join all reasons
        reasons.append(" and ".join(reason))

        # Append boolean results for each check
        comparison_results.append(same_values)
        special_char_col.append(special_chars)
        less_than_4_col.append(less_than_4)
        has_digits_col.append(has_digits)
        all_uppercase_col.append(all_uppercase)
        mixed_letters_numbers_col.append(mixed_letters_numbers)
        version_file_pattern_col.append(version_file_pattern)
        camel_case_col.append(camel_case)
        underscore_case_col.append(underscore_case)

    # Add new columns to the DataFrame for each condition
    df['Comparison'] = comparison_results
    df['Has Special Characters'] = special_char_col
    df['Has Less Than 4 Characters'] = less_than_4_col
    df['Contains Digits'] = has_digits_col
    df['Is All Uppercase'] = all_uppercase_col
    df['Mixed Letters and Numbers'] = mixed_letters_numbers_col
    df['Version or File Pattern'] = version_file_pattern_col
    df['Camel Case'] = camel_case_col
    df['Underscore Case'] = underscore_case_col
    df['Reason'] = reasons

    return df

# Sample DataFrame
data = {'Column1': ['ID123', 'Price Report', 'v1.0', 'Budget', 'snake_case_example', 'camelCaseExample', 'SQL'],
        'Column2': ['ID123', 'Price report', 'v1', 'budget', 'Snake_Case', 'camelcaseexample', 'sql']}

df = pd.DataFrame(data)

# Call the function and display the updated DataFrame
result_df = compare_columns(df, 'Column1', 'Column2')
print(result_df)


