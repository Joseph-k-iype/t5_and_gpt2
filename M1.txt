import pandas as pd
from pptx import Presentation
from pptx.util import Pt
import copy
from rdflib import Graph, ConjunctiveGraph
import rdflib.plugins.stores.sparqlstore as store
import rdflib

endpoint = "abc.com"
st = store.SPARQLUpdateStore(endpoint)
rdf = rdflib.ConjunctiveGraph(store=st)

# Modified function to generate data based on a dynamic report value (URL)
def generate_data(report_value):
    results = []
    query = f"""
        SELECT ?reportName ?processName ?prodbdeName ?conbdeName ?conrmName ?prodrmName ?gucid ?type
        WHERE {{
            <{report_value}> a abc:Report .
            <{report_value}> abc:hasProcess ?process .
            <{report_value}> abc:reportName ?reportName .
            ?process abc:hasProcessName ?processName .
            ?process abc:hasProducedBDE ?prodbde .
            ?prodbde abc:hasBDEName ?prodbdeName .
            OPTIONAL {{?process abc:hasConsumedBDE ?conbde .
            ?conbde abc:hasBDEName ?conbdeName .}}
            OPTIONAL {{?process abc:hasConsumedMetric ?conrm .
            ?conrm abc:hasMetricName ?conrmName .}}
            OPTIONAL {{?process abc:hasProducedMetric ?prodrm .
            ?prodrm abc:hasMetricName ?prodrmName .}}
            OPTIONAL {{?process abc:hasMonitored ?guc .
            ?guc abc:hasGUCID ?gucid .}}
            OPTIONAL {{?process abc:hasFlowType ?type .}}
        }}
    """
    for (a, b, c, d, e, f, g, h) in rdf.query(query):
        results.append({
            'Report Name': str(a),
            'Process': str(b),
            'Produced BDE': str(c),
            'Consumed BDE': str(d),
            'Consumed Metric': str(e),
            'Produced Metric': str(f),
            'Monitored': str(g),
            'Flow Type': str(h)
        })
    df_data = pd.DataFrame(results)
    return df_data

# Function to generate the report name and replace in first slide
def replace_report_name(prs, report_name):
    slide = prs.slides[0]
    for shape in slide.shapes:
        if shape.has_text_frame:
            if "Report Name Analysis" in shape.text:
                shape.text = shape.text.replace("Report Name", report_name)
                for paragraph in shape.text_frame.paragraphs:
                    for run in paragraph.runs:
                        run.font.size = Pt(10)
                        run.font.name = 'Arial'

# Function to add a row to the table by duplicating the last row
def add_row_to_table(table):
    last_row = table._tbl.tr_lst[-1]
    new_row = copy.deepcopy(last_row)
    table._tbl.append(new_row)
    for cell in new_row.iterdescendants():
        if cell.tag.endswith('}tc'):
            for text_element in cell.iter('{http://schemas.openxmlformats.org/wordprocessingml/2006/main}t'):
                text_element.getparent().remove(text_element)

# Function to fill in the table in the second slide
def fill_table_in_slide(slide, df):
    table = slide.shapes[0].table  # Assuming the first shape is the table
    processes = df['Process'].unique()
    
    # Start from the second row (first row is header)
    row_idx = 1

    for hop_count, process in enumerate(processes, start=1):
        process_data = df[df['Process'] == process]
        
        # Consumed BDE data
        consumed_bdes = process_data['Consumed BDE'].notna().sum()
        consumed_monitored = process_data[(process_data['Consumed BDE'].notna()) & (process_data['Monitored'].notna())]['Consumed BDE'].nunique()
        boundary_consumed_bdes = process_data[(process_data['Flow Type'] != 'Intra Process') & (process_data['Consumed BDE'].notna())]['Consumed BDE'].nunique()
        boundary_consumed_monitored = process_data[(process_data['Flow Type'] != 'Intra Process') & (process_data['Consumed BDE'].notna()) & (process_data['Monitored'].notna())]['Consumed BDE'].nunique()
        
        # Metrics data for Consumed
        consumed_metrics = process_data['Consumed Metric'].notna().sum()
        consumed_metrics_monitored = process_data[(process_data['Consumed Metric'].notna()) & (process_data['Monitored'].notna())]['Consumed Metric'].nunique()
        boundary_consumed_metrics = process_data[(process_data['Flow Type'] != 'Intra Process') & (process_data['Consumed Metric'].notna())]['Consumed Metric'].nunique()
        boundary_consumed_metrics_monitored = process_data[(process_data['Flow Type'] != 'Intra Process') & (process_data['Consumed Metric'].notna()) & (process_data['Monitored'].notna())]['Consumed Metric'].nunique()
        
        # Add Consumed data to the table if there is data
        if consumed_bdes > 0 or consumed_metrics > 0:
            if row_idx >= len(table.rows):
                add_row_to_table(table)  # Ensure a new row is added before accessing
            table.cell(row_idx, 0).text = str(hop_count)  # Hop Count
            table.cell(row_idx, 1).text = process  # Process
            table.cell(row_idx, 2).text = 'Consumed'  # Consumed or Produced
            table.cell(row_idx, 3).text = str(consumed_bdes)  # Total Consumed BDEs
            table.cell(row_idx, 4).text = str(consumed_monitored)  # Consumed BDEs Agreed to Monitor
            table.cell(row_idx, 5).text = f"{(consumed_monitored / consumed_bdes * 100) if consumed_bdes > 0 else 0:.2f}%"  # % Consumed BDE Monitored
            table.cell(row_idx, 6).text = str(boundary_consumed_bdes)  # Consumed BDEs at Boundary
            table.cell(row_idx, 7).text = str(boundary_consumed_monitored)  # Boundary Consumed BDEs Agreed to Monitor
            table.cell(row_idx, 8).text = f"{(boundary_consumed_monitored / boundary_consumed_bdes * 100) if boundary_consumed_bdes > 0 else 0:.2f}%"  # % Boundary Consumed BDE Monitored
            table.cell(row_idx, 9).text = ""  # Placeholder for Produced data
            table.cell(row_idx, 10).text = ""  # Placeholder for Produced data
            table.cell(row_idx, 11).text = ""  # Placeholder for Produced data
            table.cell(row_idx, 12).text = str(consumed_metrics)  # Consumed Metrics
            table.cell(row_idx, 13).text = str(consumed_metrics_monitored)  # Consumed Metrics Agreed to Monitor
            table.cell(row_idx, 14).text = f"{(consumed_metrics_monitored / consumed_metrics * 100) if consumed_metrics > 0 else 0:.2f}%"  # % Consumed Metrics Monitored
            row_idx += 1

        # Produced BDE data
        produced_bdes = process_data['Produced BDE'].notna().sum()
        produced_monitored = process_data[(process_data['Produced BDE'].notna()) & (process_data['Monitored'].notna())]['Produced BDE'].nunique()
        boundary_produced_bdes = process_data[(process_data['Flow Type'] != 'Intra Process') & (process_data['Produced BDE'].notna())]['Produced BDE'].nunique()
        boundary_produced_monitored = process_data[(process_data['Flow Type'] != 'Intra Process') & (process_data['Produced BDE'].notna()) & (process_data['Monitored'].notna())]['Produced BDE'].nunique()
        
        # Metrics data for Produced
        produced_metrics = process_data['Produced Metric'].notna().sum()
        produced_metrics_monitored = process_data[(process_data['Produced Metric'].notna()) & (process_data['Monitored'].notna())]['Produced Metric'].nunique()
        boundary_produced_metrics = process_data[(process_data['Flow Type'] != 'Intra Process') & (process_data['Produced Metric'].notna())]['Produced Metric'].nunique()
        boundary_produced_metrics_monitored = process_data[(process_data['Flow Type'] != 'Intra Process') & (process_data['Produced Metric'].notna()) & (process_data['Monitored'].notna())]['Produced Metric'].nunique()
        
        # Add Produced data to the table if there is data
        if produced_bdes > 0 or produced_metrics > 0:
            if row_idx >= len(table.rows):
                add_row_to_table(table)  # Ensure a new row is added before accessing
            table.cell(row_idx, 0).text = str(hop_count)  # Hop Count
            table.cell(row_idx, 1).text = process  # Process
            table.cell(row_idx, 2).text = 'Produced'  # Consumed or Produced
            table.cell(row_idx, 3).text = str(produced_bdes)  # Total Produced BDEs
            table.cell(row_idx, 4).text = str(produced_monitored)  # Produced BDEs Agreed to Monitor
            table.cell(row_idx, 5).text = f"{(produced_monitored / produced_bdes * 100) if produced_bdes > 0 else 0:.2f}%"  # % Produced BDE Monitored
            table.cell(row_idx, 6).text = str(boundary_produced_bdes)  # Produced BDEs at Boundary
            table.cell(row_idx, 7).text = str(boundary_produced_monitored)  # Boundary Produced BDEs Agreed to Monitor
            table.cell(row_idx, 8).text = f"{(boundary_produced_monitored / boundary_produced_bdes * 100) if boundary_produced_bdes > 0 else 0:.2f}%"  # % Boundary Produced BDE Monitored
            table.cell(row_idx, 12).text = str(produced_metrics)  # Produced Metrics
            table.cell(row_idx, 13).text = str(produced_metrics_monitored)  # Produced Metrics Agreed to Monitor
            table.cell(row_idx, 14).text = f"{(produced_metrics_monitored / produced_metrics * 100) if produced_metrics > 0 else 0:.2f}%"  # % Produced Metrics Monitored
            row_idx += 1

# Main function to generate the PowerPoint report
def create_report(template_path, output_path, report_value):
    prs = Presentation(template_path)
    report_name = report_value.split("/")[-1]  # Use last part of URL as report name for simplicity
    df = generate_data(report_value)
    replace_report_name(prs, report_name)
    fill_table_in_slide(prs.slides[1], df)
    prs.save(output_path)
    print(f"Report saved as {output_path}")

# Example usage
if __name__ == "__main__":
    TEMPLATE_PATH = "Report Name Analysis.pptx"
    OUTPUT_PATH = "Generated_Report.pptx"
    REPORT_VALUE = input("Enter the report URL: ")
    
    create_report(TEMPLATE_PATH, OUTPUT_PATH, REPORT_VALUE)
