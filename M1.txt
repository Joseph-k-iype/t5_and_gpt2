import pandas as pd
from pptx import Presentation
from pptx.util import Pt
from pptx.dml.color import RGBColor
import copy
from rdflib import ConjunctiveGraph
import rdflib.plugins.stores.sparqlstore as store
import rdflib

# Set up the RDF SPARQL endpoint and data fetching
endpoint = "abc.com"
st = store.SPARQLUpdateStore(endpoint)
rdf = rdflib.ConjunctiveGraph(store=st)

# Function to query data from RDF using a dynamic report URL
def generate_data(report_value):
    results = []
    query = f"""
        SELECT ?reportName ?processName ?prodbdeName ?conbdeName ?conrmName ?prodrmName ?gucid ?type
        WHERE {{
            <{report_value}> a abc:Report .
            <{report_value}> abc:hasProcess ?process .
            <{report_value}> abc:reportName ?reportName .
            ?process abc:hasProcessName ?processName .
            ?process abc:hasProducedBDE ?prodbde .
            ?prodbde abc:hasBDEName ?prodbdeName .
            OPTIONAL {{?process abc:hasConsumedBDE ?conbde .
            ?conbde abc:hasBDEName ?conbdeName .}}
            OPTIONAL {{?process abc:hasConsumedMetric ?conrm .
            ?conrm abc:hasMetricName ?conrmName .}}
            OPTIONAL {{?process abc:hasProducedMetric ?prodrm .
            ?prodrm abc:hasMetricName ?prodrmName .}}
            OPTIONAL {{?process abc:hasMonitored ?guc .
            ?guc abc:hasGUCID ?gucid .}}
            OPTIONAL {{?process abc:hasFlowType ?type .}}
        }}
    """
    for (a, b, c, d, e, f, g, h) in rdf.query(query):
        results.append({
            'Report Name': str(a),
            'Process': str(b),
            'Produced BDE': str(c),
            'Consumed BDE': str(d),
            'Consumed Metric': str(e),
            'Produced Metric': str(f),
            'Monitored': str(g),
            'Flow Type': str(h)
        })
    df_data = pd.DataFrame(results)
    return df_data.replace(['None', 'NA', 'N/A'], '').fillna('0')

# Function to add a new row to the table by duplicating the last row
def add_row_to_table(table):
    last_row = table._tbl.tr_lst[-1]
    new_row = copy.deepcopy(last_row)
    table._tbl.append(new_row)
    for cell in new_row.iterdescendants():
        if cell.tag.endswith('}tc'):  # Table cell
            for text_element in cell.iter('{http://schemas.openxmlformats.org/wordprocessingml/2006/main}t'):
                text_element.getparent().remove(text_element)

# Function to update the report name in the title slide (Slide 1)
def replace_report_name(slide, report_name):
    for shape in slide.shapes:
        if shape.has_text_frame:
            if "Report Name Analysis" in shape.text:
                shape.text = shape.text.replace("Report Name", report_name)

# Function to fill the main table on Slide 8
def fill_main_table_in_slide(slide, df):
    table = None
    for shape in slide.shapes:
        if shape.has_table:
            table = shape.table
            break

    if table is None:
        print("No table found on Slide 8.")
        return

    processes = df['Process'].unique()
    row_idx = 1

    for hop_count, process in enumerate(processes, start=1):
        process_data = df[df['Process'] == process]

        # Consumed BDE and Metrics data
        consumed_bdes = process_data['Consumed BDE'].loc[process_data['Consumed BDE'] != '0'].nunique()
        consumed_monitored = process_data[(process_data['Consumed BDE'] != '0') & (process_data['Monitored'] != '0')]['Consumed BDE'].nunique()
        boundary_consumed_bdes = process_data[(process_data['Flow Type'].str.contains("Inbound Element", case=False)) & (process_data['Consumed BDE'] != '0')]['Consumed BDE'].nunique()
        intra_process_bdes = process_data[(process_data['Flow Type'].str.contains("Intra Process|Intra-Process", case=False)) & (process_data['Consumed BDE'] != '0')]['Consumed BDE'].nunique()
        
        consumed_metrics = process_data['Consumed Metric'].loc[process_data['Consumed Metric'] != '0'].nunique()
        consumed_metrics_monitored = process_data[(process_data['Consumed Metric'] != '0') & (process_data['Monitored'] != '0')]['Consumed Metric'].nunique()
        
        if consumed_bdes > 0 or consumed_metrics > 0:
            row_data = [
                hop_count, process, 'Consumed', consumed_bdes, consumed_monitored,
                f"{(consumed_monitored / consumed_bdes * 100) if consumed_bdes > 0 else 0:.2f}%",
                boundary_consumed_bdes, intra_process_bdes,
                f"{(intra_process_bdes / consumed_bdes * 100) if consumed_bdes > 0 else 0:.2f}%",
                consumed_metrics, consumed_metrics_monitored,
                f"{(consumed_metrics_monitored / consumed_metrics * 100) if consumed_metrics > 0 else 0:.2f}%"
            ]
            if row_idx >= len(table.rows):
                add_row_to_table(table)
            for col, value in enumerate(row_data):
                table.cell(row_idx, col).text = str(value)
            row_idx += 1

        # Produced BDE and Metrics data
        produced_bdes = process_data['Produced BDE'].loc[process_data['Produced BDE'] != '0'].nunique()
        produced_monitored = process_data[(process_data['Produced BDE'] != '0') & (process_data['Monitored'] != '0')]['Produced BDE'].nunique()
        boundary_produced_bdes = process_data[(process_data['Flow Type'].str.contains("Process Output", case=False)) & (process_data['Produced BDE'] != '0')]['Produced BDE'].nunique()
        intra_process_produced_bdes = process_data[(process_data['Flow Type'].str.contains("Intra Process|Intra-Process", case=False)) & (process_data['Produced BDE'] != '0')]['Produced BDE'].nunique()
        
        produced_metrics = process_data['Produced Metric'].loc[process_data['Produced Metric'] != '0'].nunique()
        produced_metrics_monitored = process_data[(process_data['Produced Metric'] != '0') & (process_data['Monitored'] != '0')]['Produced Metric'].nunique()
        
        if produced_bdes > 0 or produced_metrics > 0:
            row_data = [
                hop_count, process, 'Produced', produced_bdes, produced_monitored,
                f"{(produced_monitored / produced_bdes * 100) if produced_bdes > 0 else 0:.2f}%",
                boundary_produced_bdes, intra_process_produced_bdes,
                f"{(intra_process_produced_bdes / produced_bdes * 100) if produced_bdes > 0 else 0:.2f}%",
                produced_metrics, produced_metrics_monitored,
                f"{(produced_metrics_monitored / produced_metrics * 100) if produced_metrics > 0 else 0:.2f}%"
            ]
            if row_idx >= len(table.rows):
                add_row_to_table(table)
            for col, value in enumerate(row_data):
                table.cell(row_idx, col).text = str(value)
            row_idx += 1

# Function to fill two additional tables on Slide 6
def fill_additional_tables_in_slide(slide, df):
    tables = [shape.table for shape in slide.shapes if shape.has_table]
    if len(tables) < 2:
        print("Insufficient tables on Slide 6.")
        return

    # First table on Slide 6
    processes = df['Process'].unique()
    row_idx = 1
    for process in processes:
        process_data = df[df['Process'] == process]
        consumed_total = process_data['Consumed BDE'].loc[process_data['Consumed BDE'] != '0'].nunique() + process_data['Consumed Metric'].loc[process_data['Consumed Metric'] != '0'].nunique()
        produced_total = process_data['Produced BDE'].loc[process_data['Produced BDE'] != '0'].nunique() + process_data['Produced Metric'].loc[process_data['Produced Metric'] != '0'].nunique()
        
        if row_idx >= len(tables[0].rows):
            add_row_to_table(tables[0])
        tables[0].cell(row_idx, 0).text = process
        tables[0].cell(row_idx, 1).text = 'Consumed'
        tables[0].cell(row_idx, 2).text = str(consumed_total)
        row_idx += 1
        if row_idx >= len(tables[0].rows):
            add_row_to_table(tables[0])
        tables[0].cell(row_idx, 0).text = process
        tables[0].cell(row_idx, 1).text = 'Produced'
        tables[0].cell(row_idx, 2).text = str(produced_total)
        row_idx += 1

    # Second table on Slide 6
    row_idx = 1
    for hop_count, process in enumerate(processes, start=1):
        process_data = df[df['Process'] == process]
        # Consumed BDEs and Metrics
        boundary_consumed_bdes = process_data[(process_data['Flow Type'].str.contains("Inbound Element", case=False)) & (process_data['Consumed BDE'] != '0')]['Consumed BDE'].nunique()
        intra_process_bdes = process_data[(process_data['Flow Type'].str.contains("Intra Process|Intra-Process", case=False)) & (process_data['Consumed BDE'] != '0')]['Consumed BDE'].nunique()

        if row_idx >= len(tables[1].rows):
            add_row_to_table(tables[1])
        tables[1].cell(row_idx, 0).text = str(hop_count)
        tables[1].cell(row_idx, 1).text = process
        tables[1].cell(row_idx, 2).text = 'Consumed'
        tables[1].cell(row_idx, 3).text = str(intra_process_bdes)  # Intra Process BDEs
        tables[1].cell(row_idx, 4).text = str(boundary_consumed_bdes)  # BDEs at Boundary Level
        row_idx += 1

        # Produced BDEs and Metrics
        boundary_produced_bdes = process_data[(process_data['Flow Type'].str.contains("Process Output", case=False)) & (process_data['Produced BDE'] != '0')]['Produced BDE'].nunique()
        intra_process_produced_bdes = process_data[(process_data['Flow Type'].str.contains("Intra Process|Intra-Process", case=False)) & (process_data['Produced BDE'] != '0')]['Produced BDE'].nunique()

        if row_idx >= len(tables[1].rows):
            add_row_to_table(tables[1])
        tables[1].cell(row_idx, 0).text = str(hop_count)
        tables[1].cell(row_idx, 1).text = process
        tables[1].cell(row_idx, 2).text = 'Produced'
        tables[1].cell(row_idx, 3).text = str(intra_process_produced_bdes)  # Intra Process BDEs
        tables[1].cell(row_idx, 4).text = str(boundary_produced_bdes)  # BDEs at Boundary Level
        row_idx += 1

# Main function to generate the report by populating slides with data
def create_report(template_path, output_path, report_value):
    prs = Presentation(template_path)
    df = generate_data(report_value)
    report_name = df['Report Name'].iloc[0] if 'Report Name' in df.columns and not df['Report Name'].empty else "Unknown Report"

    # Update Slide 1 with the report name if it exists
    if len(prs.slides) > 0:
        replace_report_name(prs.slides[0], report_name)

    # Fill main table on Slide 8 if it exists
    if len(prs.slides) > 7:
        fill_main_table_in_slide(prs.slides[7], df)

    # Fill additional tables on Slide 6 if they exist
    if len(prs.slides) > 5:
        fill_additional_tables_in_slide(prs.slides[5], df)

    # Save the updated PowerPoint
    prs.save(output_path)
    print(f"Report saved as {output_path}")

# Example usage
if __name__ == "__main__":
    TEMPLATE_PATH = "Report Name Analysis.pptx"
    OUTPUT_PATH = "Generated_Report.pptx"
    REPORT_URL = input("Enter the report URL: ")

    create_report(TEMPLATE_PATH, OUTPUT_PATH, REPORT_URL)
