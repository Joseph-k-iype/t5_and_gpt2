import re
from pptx.util import Inches, Pt
from pptx.dml.color import RGBColor

# Helper function to create table and set font size
def create_table(slide, headers, num_rows, top_position):
    cols = len(headers)
    table = slide.shapes.add_table(num_rows, cols, Inches(0.5), top_position, Inches(11), Inches(0.5)).table

    # Set headers
    for col_idx, header in enumerate(headers):
        cell = table.cell(0, col_idx)
        cell.text = header
        cell.fill.solid()
        cell.fill.fore_color.rgb = RGBColor(0x48, 0x8F, 0x29)
        for paragraph in cell.text_frame.paragraphs:
            for run in paragraph.runs:
                run.font.size = Pt(10)
                run.font.bold = True
                run.font.color.rgb = RGBColor(255, 255, 255)

    # Set font size to 10 for all cells
    for row in table.rows:
        for cell in row.cells:
            for paragraph in cell.text_frame.paragraphs:
                for run in paragraph.runs:
                    run.font.size = Pt(10)

    return table

# Populate Slide 6 with integrated calculations for Intra Process and Boundary BDEs
def populate_slide_6(slide, df):
    delete_existing_tables(slide)
    headers = ["Process", "Consumed or Produced", "Business", "Process Owner", "Total Metrics", "BDEs at Boundary Level", "Pass Through BDEs", "Intra Process BDEs"]
    table = create_table(slide, headers, num_rows=1 + 2 * df['Process'].nunique(), top_position=Inches(1))

    row_data = []
    for process in df['Process'].unique():
        process_data = df[df['Process'] == process]

        # Consumed calculations
        consumed_metrics = process_data['Consumed Metric'].loc[process_data['Consumed Metric'] != ''].nunique()
        intra_process_consumed_bdes = process_data[
            (process_data['Consumed BDE'] != '') &
            (process_data['Flow Type'].str.contains(r'.*\bto Intra process\b', case=False, na=False))
        ]['Consumed BDE'].nunique()
        
        boundary_consumed_bdes = process_data[
            (process_data['Consumed BDE'] != '') &
            (~process_data['Flow Type'].str.contains(r'.*\bto Intra process\b', case=False, na=False))
        ]['Consumed BDE'].nunique()

        row_data.append([
            process, 'Consumed', process_data['Business'].iloc[0] if 'Business' in process_data.columns else '',
            process_data['Process Owner'].iloc[0] if 'Process Owner' in process_data.columns else '',
            consumed_metrics, boundary_consumed_bdes, '', intra_process_consumed_bdes
        ])

        # Produced calculations
        produced_metrics = process_data['Produced Metric'].loc[process_data['Produced Metric'] != ''].nunique()
        intra_process_produced_bdes = process_data[
            (process_data['Produced BDE'] != '') &
            (process_data['Flow Type'].str.contains(r'\bIntra process to\b', case=False, na=False))
        ]['Produced BDE'].nunique()
        
        boundary_produced_bdes = process_data[
            (process_data['Produced BDE'] != '') &
            (~process_data['Flow Type'].str.contains(r'\bIntra process to\b', case=False, na=False))
        ]['Produced BDE'].nunique()

        row_data.append([
            process, 'Produced', process_data['Business'].iloc[0] if 'Business' in process_data.columns else '',
            process_data['Process Owner'].iloc[0] if 'Process Owner' in process_data.columns else '',
            produced_metrics, boundary_produced_bdes, '', intra_process_produced_bdes
        ])

    populate_table(table, row_data)

# Populate Slide 8 with integrated Intra Process and Boundary calculations
def populate_slide_8(slide, df, csv_data):
    delete_existing_tables(slide)
    headers = [
        "Hop Count", "Process", "Consumed or Produced", "Total BDEs", "Total BDEs Agreed to Monitor", "% BDE Monitored",
        "BDEs at Boundary Level", "Boundary BDEs Agreed to Monitor", "% Boundary BDE Monitored",
        "Intra Process BDEs", "Intra Process BDE Agreed to Monitor", "% Intra Process BDE Monitored",
        "Total Metrics", "Total Metrics Agreed to Monitor", "% Metrics Monitored"
    ]
    table = create_table(slide, headers, num_rows=1 + 2 * df['Process'].nunique(), top_position=Inches(1))

    row_data = []
    for hop_count, process in enumerate(df['Process'].unique(), start=1):
        process_data = df[df['Process'] == process]

        # Consumed calculations
        consumed_bdes = process_data['Consumed BDE'].loc[process_data['Consumed BDE'] != ''].nunique()
        consumed_monitored = process_data[(process_data['Consumed BDE'] != '') & (process_data['Monitored'] != '')]['Consumed BDE'].nunique()

        # Intra-process and boundary BDEs for consumed
        intra_process_consumed_bdes = process_data[
            (process_data['Consumed BDE'] != '') &
            (process_data['Flow Type'].str.contains(r'.*\bto Intra process\b', case=False, na=False))
        ]['Consumed BDE'].nunique()
        
        boundary_consumed_bdes = process_data[
            (process_data['Consumed BDE'] != '') &
            (~process_data['Flow Type'].str.contains(r'.*\bto Intra process\b', case=False, na=False))
        ]['Consumed BDE'].nunique()

        row_data.append([
            hop_count, process, 'Consumed', consumed_bdes, consumed_monitored,
            f"{(consumed_monitored / consumed_bdes * 100) if consumed_bdes else 0:.2f}%",
            boundary_consumed_bdes, '', '', intra_process_consumed_bdes, '', '',
            '', '', '', ''
        ])

        # Produced calculations
        produced_bdes = process_data['Produced BDE'].loc[process_data['Produced BDE'] != ''].nunique()
        produced_monitored = process_data[(process_data['Produced BDE'] != '') & (process_data['Monitored'] != '')]['Produced BDE'].nunique()

        # Intra-process and boundary BDEs for produced
        intra_process_produced_bdes = process_data[
            (process_data['Produced BDE'] != '') &
            (process_data['Flow Type'].str.contains(r'\bIntra process to\b', case=False, na=False))
        ]['Produced BDE'].nunique()
        
        boundary_produced_bdes = process_data[
            (process_data['Produced BDE'] != '') &
            (~process_data['Flow Type'].str.contains(r'\bIntra process to\b', case=False, na=False))
        ]['Produced BDE'].nunique()

        row_data.append([
            hop_count, process, 'Produced', produced_bdes, produced_monitored,
            f"{(produced_monitored / produced_bdes * 100) if produced_bdes else 0:.2f}%",
            boundary_produced_bdes, '', '', intra_process_produced_bdes, '', '',
            '', '', '', ''
        ])

    populate_table(table, row_data)
    csv_data.extend(row_data)
