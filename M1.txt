import pandas as pd
import re

# Check if the string contains special characters
def has_special_characters(val):
    if isinstance(val, str):
        return bool(re.search(r'[^a-zA-Z0-9\s]', val))
    return False

# Check if the string has fewer than 4 characters
def has_less_than_4_characters(val):
    if isinstance(val, str):
        return len(val) < 4
    return False

# Check if the string contains digits (e.g., version numbers or IDs)
def has_digits(val):
    if isinstance(val, str):
        return bool(re.search(r'\d+', val))
    return False

# Check if the string is fully uppercase (e.g., acronyms like API, SQL)
def is_all_uppercase(val):
    if isinstance(val, str):
        return bool(re.search(r'^[A-Z]+$', val))
    return False

# Check if the string contains a mix of letters and numbers (e.g., APIv2, ID123)
def is_mixed_letters_numbers(val):
    if isinstance(val, str):
        return bool(re.search(r'[a-zA-Z]+\d+', val))
    return False

# Check if the string looks like a version or file pattern (e.g., v1.0, .exe)
def is_version_or_file_pattern(val):
    if isinstance(val, str):
        return bool(re.search(r'\w+\.\w+', val))
    return False

# Check if the string is in camel case (e.g., camelCase)
def is_camel_case(val):
    if isinstance(val, str):
        return bool(re.search(r'^[a-z]+(?:[A-Z][a-z]+)+$', val))
    return False

# Check if the string is in underscore case (e.g., snake_case)
def is_underscore_case(val):
    if isinstance(val, str):
        return bool(re.search(r'^[a-zA-Z]+_[a-zA-Z]+$', val))
    return False

# Check if the string looks technical based on multiple conditions
def is_technical(value):
    technical_reasons = []
    
    if has_digits(value):
        technical_reasons.append("Contains digits")
        
    if is_all_uppercase(value):
        technical_reasons.append("Is all uppercase (e.g., acronym)")
        
    if is_mixed_letters_numbers(value):
        technical_reasons.append("Contains a mix of letters and numbers")
        
    if is_version_or_file_pattern(value):
        technical_reasons.append("Looks like a version or file pattern")
        
    if is_camel_case(value):
        technical_reasons.append("Is in camel case (e.g., camelCase)")
        
    if is_underscore_case(value):
        technical_reasons.append("Is in underscore case (e.g., snake_case)")
        
    # Return the reasons for being technical, if any
    if technical_reasons:
        return True, " and ".join(technical_reasons)
    else:
        return False, "Looks business understandable."

# Check if two columns have the same value
def is_same_value(val1, val2):
    return val1 == val2

# Main function to compare columns and generate specific reasons
def compare_columns(df, col1, col2):
    comparison_results = []
    special_char_col = []
    less_than_4_col = []
    is_technical_col = []
    reasons = []

    for index, row in df.iterrows():
        value1 = row[col1]
        value2 = row[col2]
        
        # Check conditions
        same_values = is_same_value(value1, value2)
        special_chars = has_special_characters(value1)
        less_than_4 = has_less_than_4_characters(value1)
        is_technical_flag, technical_reason = is_technical(value1)

        # Build a reason string based on the combinations of checks
        reason = []
        
        # Specific reasons based on each condition
        if same_values:
            reason.append("Values are the same")
        else:
            reason.append("Values are different")
        
        if special_chars:
            reason.append("First column contains special characters")
        else:
            reason.append("No special characters in the first column")
        
        if less_than_4:
            reason.append("First column has less than 4 characters")
        else:
            reason.append("First column has 4 or more characters")
        
        # Add technical reason or business understandable flag
        reason.append(technical_reason)
        
        # Join reason statements and append them to the reason list
        reasons.append(" and ".join(reason))
        
        # Append results for comparison and checks
        comparison_results.append(same_values)
        special_char_col.append(special_chars)
        less_than_4_col.append(less_than_4)
        is_technical_col.append(is_technical_flag)

    # Add new columns to the DataFrame
    df['Comparison'] = comparison_results
    df['Has Special Characters'] = special_char_col
    df['Has Less Than 4 Characters'] = less_than_4_col
    df['Looks Technical'] = is_technical_col
    df['Reason'] = reasons

    return df

# Sample DataFrame
data = {'Column1': ['ID123', 'Price Report', 'v1.0', 'Budget', 'snake_case_example', 'camelCaseExample', 'SQL'],
        'Column2': ['ID123', 'Price report', 'v1', 'budget', 'Snake_Case', 'camelcaseexample', 'sql']}

df = pd.DataFrame(data)

# Call the function and display the updated DataFrame
result_df = compare_columns(df, 'Column1', 'Column2')
print(result_df)

