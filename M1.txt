def populate_slide_8(slide, df, csv_data):
    delete_existing_tables(slide)
    headers = [
        "Process", "Consumed or Produced", "Total BDEs", "Total BDEs Agreed to Monitor", "% BDE Monitored",
        "BDEs at Boundary Level", "Boundary BDEs Agreed to Monitor", "% Boundary BDE Monitored",
        "Pass Through BDEs", "Pass Through BDEs Agreed to Monitor", "% Pass Through BDE Monitored",
        "Total Metrics", "Total Metrics Agreed to Monitor", "% Metrics Monitored",
        "Pass Through Metrics", "Pass Through Metrics Agreed to Monitor", "% Pass Through Metrics Monitored"
    ]
    
    slide_width = slide.shapes.title.width  # Adjust the table to the slide width if necessary
    table = create_table(slide, headers, num_rows=1 + 2 * df['Process'].nunique(), top_position=Inches(1))

    row_data = []
    for hop_count, process in enumerate(df['Process'].unique(), start=1):
        process_data = df[df['Process'] == process]

        # Consumed Data Calculations
        consumed_bdes = process_data['Consumed BDE'].loc[process_data['Consumed BDE'] != ''].nunique()
        consumed_monitored = process_data[(process_data['Consumed BDE'] != '') & (process_data['Monitored'] != '')]['Consumed BDE'].nunique()

        # Boundary BDEs for consumed
        boundary_consumed_bdes = process_data[
            (process_data['Consumed BDE'] != '') &
            ((process_data['Flow Type'].str.contains(r'.*\bto Intra[ -]Process\b', case=False, na=False)) |
             (~process_data['Flow Type'].isin(['Intra Process', 'Intra-Process'])))
        ]['Consumed BDE'].nunique()

        boundary_consumed_monitored = process_data[
            (process_data['Consumed BDE'] != '') &
            ((process_data['Flow Type'].str.contains(r'.*\bto Intra[ -]Process\b', case=False, na=False)) |
             (~process_data['Flow Type'].isin(['Intra Process', 'Intra-Process']))) &
            (process_data['Monitored'] != '')
        ]['Consumed BDE'].nunique()

        # Pass-Through BDEs for consumed
        pass_through_bdes = process_data[
            (process_data['Consumed BDE'] != '') &
            (process_data['Flow Type'].str.contains(r'Pass Through', case=False, na=False))
        ]['Consumed BDE'].nunique()

        pass_through_bdes_monitored = process_data[
            (process_data['Consumed BDE'] != '') &
            (process_data['Flow Type'].str.contains(r'Pass Through', case=False, na=False)) &
            (process_data['Monitored'] != '')
        ]['Consumed BDE'].nunique()

        # Total Metrics for consumed
        total_metrics = process_data['Consumed Metric'].loc[process_data['Consumed Metric'] != ''].nunique()
        monitored_metrics = process_data[(process_data['Consumed Metric'] != '') & (process_data['Monitored'] != '')]['Consumed Metric'].nunique()

        pass_through_metrics = process_data[
            (process_data['Consumed Metric'] != '') &
            (process_data['Flow Type'].str.contains(r'Pass Through', case=False, na=False))
        ]['Consumed Metric'].nunique()

        pass_through_metrics_monitored = process_data[
            (process_data['Consumed Metric'] != '') &
            (process_data['Flow Type'].str.contains(r'Pass Through', case=False, na=False)) &
            (process_data['Monitored'] != '')
        ]['Consumed Metric'].nunique()

        row_data.append([
            process, 'Consumed', consumed_bdes, consumed_monitored,
            f"{(consumed_monitored / consumed_bdes * 100) if consumed_bdes else 0:.2f}%",
            boundary_consumed_bdes, boundary_consumed_monitored,
            f"{(boundary_consumed_monitored / boundary_consumed_bdes * 100) if boundary_consumed_bdes else 0:.2f}%",
            pass_through_bdes, pass_through_bdes_monitored,
            f"{(pass_through_bdes_monitored / pass_through_bdes * 100) if pass_through_bdes else 0:.2f}%",
            total_metrics, monitored_metrics,
            f"{(monitored_metrics / total_metrics * 100) if total_metrics else 0:.2f}%",
            pass_through_metrics, pass_through_metrics_monitored,
            f"{(pass_through_metrics_monitored / pass_through_metrics * 100) if pass_through_metrics else 0:.2f}%"
        ])

        # Produced Data Calculations
        produced_bdes = process_data['Produced BDE'].loc[process_data['Produced BDE'] != ''].nunique()
        produced_monitored = process_data[(process_data['Produced BDE'] != '') & (process_data['Monitored'] != '')]['Produced BDE'].nunique()

        # Boundary BDEs for produced
        boundary_produced_bdes = process_data[
            (process_data['Produced BDE'] != '') &
            ((process_data['Flow Type'].str.contains(r'\bIntra[ -]Process to\b.*', case=False, na=False)) |
             (~process_data['Flow Type'].isin(['Intra Process', 'Intra-Process'])))
        ]['Produced BDE'].nunique()

        boundary_produced_monitored = process_data[
            (process_data['Produced BDE'] != '') &
            ((process_data['Flow Type'].str.contains(r'\bIntra[ -]Process to\b.*', case=False, na=False)) |
             (~process_data['Flow Type'].isin(['Intra Process', 'Intra-Process']))) &
            (process_data['Monitored'] != '')
        ]['Produced BDE'].nunique()

        # Pass-Through BDEs for produced
        pass_through_produced_bdes = process_data[
            (process_data['Produced BDE'] != '') &
            (process_data['Flow Type'].str.contains(r'Pass Through', case=False, na=False))
        ]['Produced BDE'].nunique()

        pass_through_produced_bdes_monitored = process_data[
            (process_data['Produced BDE'] != '') &
            (process_data['Flow Type'].str.contains(r'Pass Through', case=False, na=False)) &
            (process_data['Monitored'] != '')
        ]['Produced BDE'].nunique()

        # Total Metrics for produced
        total_produced_metrics = process_data['Produced Metric'].loc[process_data['Produced Metric'] != ''].nunique()
        monitored_produced_metrics = process_data[(process_data['Produced Metric'] != '') & (process_data['Monitored'] != '')]['Produced Metric'].nunique()

        pass_through_produced_metrics = process_data[
            (process_data['Produced Metric'] != '') &
            (process_data['Flow Type'].str.contains(r'Pass Through', case=False, na=False))
        ]['Produced Metric'].nunique()

        pass_through_produced_metrics_monitored = process_data[
            (process_data['Produced Metric'] != '') &
            (process_data['Flow Type'].str.contains(r'Pass Through', case=False, na=False)) &
            (process_data['Monitored'] != '')
        ]['Produced Metric'].nunique()

        row_data.append([
            process, 'Produced', produced_bdes, produced_monitored,
            f"{(produced_monitored / produced_bdes * 100) if produced_bdes else 0:.2f}%",
            boundary_produced_bdes, boundary_produced_monitored,
            f"{(boundary_produced_monitored / boundary_produced_bdes * 100) if boundary_produced_bdes else 0:.2f}%",
            pass_through_produced_bdes, pass_through_produced_bdes_monitored,
            f"{(pass_through_produced_bdes_monitored / pass_through_produced_bdes * 100) if pass_through_produced_bdes else 0:.2f}%",
            total_produced_metrics, monitored_produced_metrics,
            f"{(monitored_produced_metrics / total_produced_metrics * 100) if total_produced_metrics else 0:.2f}%",
            pass_through_produced_metrics, pass_through_produced_metrics_monitored,
            f"{(pass_through_produced_metrics_monitored / pass_through_produced_metrics * 100) if pass_through_produced_metrics else 0:.2f}%"
        ])

    populate_table(table, row_data)
    csv_data.extend(row_data)
