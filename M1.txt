def populate_slide_6(slide, df):
    delete_existing_tables(slide)
    headers = ["Process", "Consumed or Produced", "Business", "Process Owner", "Total Metrics", "BDEs at Boundary Level", "Pass Through BDEs", "Pass Through Metrics"]
    table = create_table(slide, headers, num_rows=1 + 2 * df['Process'].nunique(), top_position=Inches(1))

    row_data = []
    for process in df['Process'].unique():
        process_data = df[df['Process'] == process]

        # Consumed calculations
        consumed_metrics = process_data['Consumed Metric'].loc[process_data['Consumed Metric'] != ''].nunique()

        # Boundary BDEs for consumed: Include if Flow Type contains 'Inbound Element', 'In-bound Element', 'Pass-Through', or 'Pass Through'
        boundary_consumed_bdes = process_data[
            (process_data['Consumed BDE'] != '') &
            (process_data['Flow Type'].str.contains(r'(Inbound Element|In-bound Element|Pass[- ]Through)', case=False, na=False))
        ]['Consumed BDE'].nunique()

        # Pass-Through BDEs for consumed (same logic as boundary for consumed)
        pass_through_consumed_bdes = boundary_consumed_bdes

        # Pass-Through Metrics for consumed
        pass_through_metrics_consumed = process_data[
            (process_data['Consumed Metric'] != '') &
            (process_data['Flow Type'].str.contains(r'Pass[- ]Through', case=False, na=False))
        ]['Consumed Metric'].nunique()

        row_data.append([
            process, 'Consumed', process_data['Business'].iloc[0] if 'Business' in process_data.columns else '',
            process_data['Process Owner'].iloc[0] if 'Process Owner' in process_data.columns else '',
            consumed_metrics, boundary_consumed_bdes, pass_through_consumed_bdes, pass_through_metrics_consumed
        ])

        # Produced calculations
        produced_metrics = process_data['Produced Metric'].loc[process_data['Produced Metric'] != ''].nunique()

        # Boundary BDEs for produced: Include if Flow Type contains 'Process Output', 'Process-Output', 'Pass-Through', or 'Pass Through'
        boundary_produced_bdes = process_data[
            (process_data['Produced BDE'] != '') &
            (process_data['Flow Type'].str.contains(r'(Process Output|Process-Output|Pass[- ]Through)', case=False, na=False))
        ]['Produced BDE'].nunique()

        # Pass-Through BDEs for produced (same logic as boundary for produced)
        pass_through_produced_bdes = boundary_produced_bdes

        # Pass-Through Metrics for produced
        pass_through_metrics_produced = process_data[
            (process_data['Produced Metric'] != '') &
            (process_data['Flow Type'].str.contains(r'Pass[- ]Through', case=False, na=False))
        ]['Produced Metric'].nunique()

        row_data.append([
            process, 'Produced', process_data['Business'].iloc[0] if 'Business' in process_data.columns else '',
            process_data['Process Owner'].iloc[0] if 'Process Owner' in process_data.columns else '',
            produced_metrics, boundary_produced_bdes, pass_through_produced_bdes, pass_through_metrics_produced
        ])

    populate_table(table, row_data)
def populate_slide_8(slide, df, csv_data):
    delete_existing_tables(slide)
    headers = [
        "Process", "Consumed or Produced", "Total BDEs", "Total BDEs Agreed to Monitor", "% BDE Monitored",
        "BDEs at Boundary Level", "Boundary BDEs Agreed to Monitor", "% Boundary BDE Monitored",
        "Pass Through BDEs", "Pass Through BDEs Agreed to Monitor", "% Pass Through BDE Monitored",
        "Total Metrics", "Total Metrics Agreed to Monitor", "% Metrics Monitored",
        "Pass Through Metrics", "Pass Through Metrics Agreed to Monitor", "% Pass Through Metrics Monitored"
    ]
    
    table = create_table(slide, headers, num_rows=1 + 2 * df['Process'].nunique(), top_position=Inches(1))

    row_data = []
    for process in df['Process'].unique():
        process_data = df[df['Process'] == process]

        # Consumed Data Calculations
        consumed_bdes = process_data['Consumed BDE'].loc[process_data['Consumed BDE'] != ''].nunique()
        consumed_monitored = process_data[(process_data['Consumed BDE'] != '') & (process_data['Monitored'] != '')]['Consumed BDE'].nunique()

        # Boundary BDEs for consumed
        boundary_consumed_bdes = process_data[
            (process_data['Consumed BDE'] != '') &
            (process_data['Flow Type'].str.contains(r'(Inbound Element|In-bound Element|Pass[- ]Through)', case=False, na=False))
        ]['Consumed BDE'].nunique()

        boundary_consumed_monitored = process_data[
            (process_data['Consumed BDE'] != '') &
            (process_data['Flow Type'].str.contains(r'(Inbound Element|In-bound Element|Pass[- ]Through)', case=False, na=False)) &
            (process_data['Monitored'] != '')
        ]['Consumed BDE'].nunique()

        # Pass-Through BDEs for consumed (same logic as boundary for consumed)
        pass_through_bdes = boundary_consumed_bdes
        pass_through_bdes_monitored = boundary_consumed_monitored

        # Total Metrics for consumed
        total_metrics = process_data['Consumed Metric'].loc[process_data['Consumed Metric'] != ''].nunique()
        monitored_metrics = process_data[(process_data['Consumed Metric'] != '') & (process_data['Monitored'] != '')]['Consumed Metric'].nunique()

        pass_through_metrics = process_data[
            (process_data['Consumed Metric'] != '') &
            (process_data['Flow Type'].str.contains(r'Pass[- ]Through', case=False, na=False))
        ]['Consumed Metric'].nunique()

        pass_through_metrics_monitored = process_data[
            (process_data['Consumed Metric'] != '') &
            (process_data['Flow Type'].str.contains(r'Pass[- ]Through', case=False, na=False)) &
            (process_data['Monitored'] != '')
        ]['Consumed Metric'].nunique()

        row_data.append([
            process, 'Consumed', consumed_bdes, consumed_monitored,
            f"{(consumed_monitored / consumed_bdes * 100) if consumed_bdes else 0:.2f}%",
            boundary_consumed_bdes, boundary_consumed_monitored,
            f"{(boundary_consumed_monitored / boundary_consumed_bdes * 100) if boundary_consumed_bdes else 0:.2f}%",
            pass_through_bdes, pass_through_bdes_monitored,
            f"{(pass_through_bdes_monitored / pass_through_bdes * 100) if pass_through_bdes else 0:.2f}%",
            total_metrics, monitored_metrics,
            f"{(monitored_metrics / total_metrics * 100) if total_metrics else 0:.2f}%",
            pass_through_metrics, pass_through_metrics_monitored,
            f"{(pass_through_metrics_monitored / pass_through_metrics * 100) if pass_through_metrics else 0:.2f}%"
        ])

        # Produced Data Calculations
        produced_bdes = process_data['Produced BDE'].loc[process_data['Produced BDE'] != ''].nunique()
        produced_monitored = process_data[(process_data['Produced BDE'] != '') & (process_data['Monitored'] != '')]['Produced BDE'].nunique()

        # Boundary BDEs for produced
        boundary_produced_bdes = process_data[
            (process_data['Produced BDE'] != '') &
            (process_data['Flow Type'].str.contains(r'(Process Output|Process-Output|Pass[- ]Through)', case=False, na=False))
        ]['Produced BDE'].nunique()

        boundary_produced_monitored = process_data[
            (process_data['Produced BDE'] != '') &
            (process_data['Flow Type'].str.contains(r'(Process Output|Process-Output|Pass[- ]Through)', case=False, na=False)) &
            (process_data['Monitored'] != '')
        ]['Produced BDE'].nunique()

        # Pass-Through BDEs for produced (same logic as boundary for produced)
        pass_through_produced_bdes = boundary_produced_bdes
        pass_through_produced_bdes_monitored = boundary_produced_monitored

        # Total Metrics for produced
        total_produced_metrics = process_data['Produced Metric'].loc[process_data['Produced Metric'] != ''].nunique()
        monitored_produced_metrics = process_data[(process_data['Produced Metric'] != '') & (process_data['Monitored'] != '')]['Produced Metric'].nunique()

        pass_through_produced_metrics = process_data[
            (process_data['Produced Metric'] != '') &
            (process_data['Flow Type'].str.contains(r'Pass[- ]Through', case=False, na=False))
        ]['Produced Metric'].nunique()

        pass_through_produced_metrics_monitored = process_data[
            (process_data['Produced Metric'] != '') &
            (process_data['Flow Type'].str.contains(r'Pass[- ]Through', case=False, na=False)) &
            (process_data['Monitored'] != '')
        ]['Produced Metric'].nunique()

        row_data.append([
            process, 'Produced', produced_bdes, produced_monitored,
            f"{(produced_monitored / produced_bdes * 100) if produced_bdes else 0:.2f}%",
            boundary_produced_bdes, boundary_produced_monitored,
            f"{(boundary_produced_monitored / boundary_produced_bdes * 100) if boundary_produced_bdes else 0:.2f}%",
            pass_through_produced_bdes, pass_through_produced_bdes_monitored,
            f"{(pass_through_produced_bdes_monitored / pass_through_produced_bdes * 100) if pass_through_produced_bdes else 0:.2f}%",
            total_produced_metrics, monitored_produced_metrics,
            f"{(monitored_produced_metrics / total_produced_metrics * 100) if total_produced_metrics else 0:.2f}%",
            pass_through_produced_metrics, pass_through_produced_metrics_monitored,
            f"{(pass_through_produced_metrics_monitored / pass_through_produced_metrics * 100) if pass_through_produced_metrics else 0:.2f}%"
        ])

    populate_table(table, row_data)
    csv_data.extend(row_data)
