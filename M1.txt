import pandas as pd
from pptx import Presentation
from pptx.util import Inches, Pt
from pptx.dml.color import RGBColor
import copy
from rdflib import ConjunctiveGraph
import rdflib.plugins.stores.sparqlstore as store
import rdflib

# Set up the RDF SPARQL endpoint and data fetching
endpoint = "abc.com"
st = store.SPARQLUpdateStore(endpoint)
rdf = rdflib.ConjunctiveGraph(store=st)

# Function to query data from RDF using a dynamic report URL
def generate_data(report_value):
    results = []
    query = f"""
        SELECT ?reportName ?processName ?prodbdeName ?conbdeName ?conrmName ?prodrmName ?gucid ?type
        WHERE {{
            <{report_value}> a abc:Report .
            <{report_value}> abc:hasProcess ?process .
            <{report_value}> abc:reportName ?reportName .
            ?process abc:hasProcessName ?processName .
            ?process abc:hasProducedBDE ?prodbde .
            ?prodbde abc:hasBDEName ?prodbdeName .
            OPTIONAL {{?process abc:hasConsumedBDE ?conbde .
            ?conbde abc:hasBDEName ?conbdeName .}}
            OPTIONAL {{?process abc:hasConsumedMetric ?conrm .
            ?conrm abc:hasMetricName ?conrmName .}}
            OPTIONAL {{?process abc:hasProducedMetric ?prodrm .
            ?prodrm abc:hasMetricName ?prodrmName .}}
            OPTIONAL {{?process abc:hasMonitored ?guc .
            ?guc abc:hasGUCID ?gucid .}}
            OPTIONAL {{?process abc:hasFlowType ?type .}}
        }}
    """
    for (a, b, c, d, e, f, g, h) in rdf.query(query):
        results.append({
            'Report Name': str(a),
            'Process': str(b),
            'Produced BDE': str(c),
            'Consumed BDE': str(d),
            'Consumed Metric': str(e),
            'Produced Metric': str(f),
            'Monitored': str(g),
            'Flow Type': str(h)
        })
    df_data = pd.DataFrame(results)
    return df_data.replace(['None', 'NA', 'N/A'], '').fillna('')

# Function to add a new row to the table by duplicating the last row
def add_row_to_table(table):
    last_row = table._tbl.tr_lst[-1]
    new_row = copy.deepcopy(last_row)
    table._tbl.append(new_row)
    for cell in new_row.iterdescendants():
        if cell.tag.endswith('}tc'):  # Table cell
            for text_element in cell.iter('{http://schemas.openxmlformats.org/wordprocessingml/2006/main}t'):
                text_element.getparent().remove(text_element)

# Function to update the report name in the title slide (Slide 1)
def replace_report_name(slide, report_name):
    for shape in slide.shapes:
        if shape.has_text_frame:
            if "Report Name Analysis" in shape.text:
                shape.text = shape.text.replace("Report Name", report_name)

# Function to apply consistent font style (Calibri, size 10) and background colors to tables
def apply_table_styling(table):
    for row_idx, row in enumerate(table.rows):
        for cell in row.cells:
            for paragraph in cell.text_frame.paragraphs:
                for run in paragraph.runs:
                    run.font.size = Pt(10)
                    run.font.name = 'Calibri'
            if row_idx == 0:  # Header row styling
                cell.fill.solid()
                cell.fill.fore_color.rgb = RGBColor(0x48, 0x8F, 0x29)  # Green background for header
                for paragraph in cell.text_frame.paragraphs:
                    for run in paragraph.runs:
                        run.font.color.rgb = RGBColor(255, 255, 255)  # White font for header
            else:  # Data rows styling
                cell.fill.solid()
                cell.fill.fore_color.rgb = RGBColor(255, 255, 255)  # White background
                for paragraph in cell.text_frame.paragraphs:
                    for run in paragraph.runs:
                        run.font.color.rgb = RGBColor(0, 0, 0)  # Black font for data rows

# Function to resize columns based on content for a responsive layout
def adjust_table_column_widths(table):
    slide_width = Inches(13.33)
    num_columns = len(table.columns)
    column_width = int(slide_width / num_columns)  # Convert to integer for EMU compatibility
    for column in table.columns:
        column.width = column_width

# Function to get the first table from a slide
def get_first_table_from_slide(slide):
    for shape in slide.shapes:
        if shape.has_table:
            return shape.table
    return None

# Function to populate the two tables on Slide 6
def fill_tables_in_slide_6(slide, df):
    tables = [shape.table for shape in slide.shapes if shape.has_table]
    if len(tables) < 2:
        print("Insufficient tables on Slide 6.")
        return

    # First Table: Process-level totals for Consumed and Produced BDEs/Metrics
    table_1 = tables[0]
    apply_table_styling(table_1)
    adjust_table_column_widths(table_1)
    row_idx = 1
    processes = df['Process'].unique()
    for process in processes:
        process_data = df[df['Process'] == process]
        consumed_total = process_data['Consumed BDE'].loc[process_data['Consumed BDE'] != ''].nunique() + process_data['Consumed Metric'].loc[process_data['Consumed Metric'] != ''].nunique()
        produced_total = process_data['Produced BDE'].loc[process_data['Produced BDE'] != ''].nunique() + process_data['Produced Metric'].loc[process_data['Produced Metric'] != ''].nunique()
        
        if row_idx >= len(table_1.rows):
            add_row_to_table(table_1)
        table_1.cell(row_idx, 0).text = process
        table_1.cell(row_idx, 1).text = 'Consumed'
        table_1.cell(row_idx, 2).text = str(consumed_total)
        row_idx += 1
        if row_idx >= len(table_1.rows):
            add_row_to_table(table_1)
        table_1.cell(row_idx, 0).text = process
        table_1.cell(row_idx, 1).text = 'Produced'
        table_1.cell(row_idx, 2).text = str(produced_total)
        row_idx += 1

    # Second Table: Detailed breakdown for each process
    table_2 = tables[1]
    apply_table_styling(table_2)
    adjust_table_column_widths(table_2)
    row_idx = 1
    for hop_count, process in enumerate(processes, start=1):
        process_data = df[df['Process'] == process]
        consumed_metrics = process_data['Consumed Metric'].loc[process_data['Consumed Metric'] != ''].nunique()
        produced_metrics = process_data['Produced Metric'].loc[process_data['Produced Metric'] != ''].nunique()
        total_bdes_consumed = process_data['Consumed BDE'].loc[process_data['Consumed BDE'] != ''].nunique()
        total_bdes_produced = process_data['Produced BDE'].loc[process_data['Produced BDE'] != ''].nunique()
        
        boundary_bdes_consumed = process_data[(process_data['Flow Type'].str.contains("Inbound", case=False, na=False)) & 
                                              (process_data['Consumed BDE'] != '')]['Consumed BDE'].nunique()
        boundary_bdes_produced = process_data[(process_data['Flow Type'].str.contains("Process Output", case=False, na=False)) & 
                                              (process_data['Produced BDE'] != '')]['Produced BDE'].nunique()
        
        intra_process_bdes_consumed = process_data[(process_data['Flow Type'].str.contains("Intra[- ]?Process", case=False, na=False)) & 
                                                   (process_data['Consumed BDE'] != '')]['Consumed BDE'].nunique()
        intra_process_bdes_produced = process_data[(process_data['Flow Type'].str.contains("Intra[- ]?Process", case=False, na=False)) & 
                                                   (process_data['Produced BDE'] != '')]['Produced BDE'].nunique()

        # Add row for Consumed
        if row_idx >= len(table_2.rows):
            add_row_to_table(table_2)
        table_2.cell(row_idx, 0).text = str(hop_count)
        table_2.cell(row_idx, 1).text = process
        table_2.cell(row_idx, 2).text = 'Consumed'
        table_2.cell(row_idx, 3).text = str(consumed_metrics)
        table_2.cell(row_idx, 4).text = str(total_bdes_consumed)
        table_2.cell(row_idx, 5).text = str(boundary_bdes_consumed)
        table_2.cell(row_idx, 6).text = str(intra_process_bdes_consumed)
        row_idx += 1

        # Add row for Produced
        if row_idx >= len(table_2.rows):
            add_row_to_table(table_2)
        table_2.cell(row_idx, 0).text = str(hop_count)
        table_2.cell(row_idx, 1).text = process
        table_2.cell(row_idx, 2).text = 'Produced'
        table_2.cell(row_idx, 3).text = str(produced_metrics)
        table_2.cell(row_idx, 4).text = str(total_bdes_produced)
        table_2.cell(row_idx, 5).text = str(boundary_bdes_produced)
        table_2.cell(row_idx, 6).text = str(intra_process_bdes_produced)
        row_idx += 1

# Main function to generate the report by populating slides with data
def create_report(template_path, output_path, report_value):
    prs = Presentation(template_path)
    df = generate_data(report_value)
    report_name = df['Report Name'].iloc[0] if 'Report Name' in df.columns and not df['Report Name'].empty else "Unknown Report"

    if len(prs.slides) > 0:
        replace_report_name(prs.slides[0], report_name)

    csv_data = []

    # Apply styling and fill tables on Slide 6
    if len(prs.slides) > 5:
        fill_tables_in_slide_6(prs.slides[5], df)

    # Populate Slide 8 table and apply styling
    if len(prs.slides) > 7:
        fill_main_table_in_slide(prs.slides[7], df, csv_data)

    save_csv(csv_data)
    prs.save(output_path)
    print(f"Report saved as {output_path}")

# Example usage
if __name__ == "__main__":
    TEMPLATE_PATH = "Report Name Analysis.pptx"
    OUTPUT_PATH = "Generated_Report.pptx"
    REPORT_URL = input("Enter the report URL: ")

    create_report(TEMPLATE_PATH, OUTPUT_PATH, REPORT_URL)
