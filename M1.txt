from pptx.oxml import parse_xml
from pptx.oxml.ns import nsdecls

def apply_full_border_with_color(table, border_color="000000"):
    """
    Apply full borders with a specific color to all cells in a PowerPoint table.
    :param table: The PowerPoint table object
    :param border_color: The border color in hexadecimal format (e.g., "000000" for black)
    """
    for row in table.rows:
        for cell in row.cells:
            tc = cell._tc  # Get the XML element for the cell
            tcPr = tc.get_or_add_tcPr()  # Get or add the <a:tcPr> element

            # Define XML for borders with the specified color
            border_xml = f"""
                <a:tcBorders {nsdecls('a')}>
                    <a:lnL w="12700">
                        <a:solidFill><a:srgbClr val="{border_color}"/></a:solidFill>
                        <a:prstDash val="solid"/>
                    </a:lnL>
                    <a:lnR w="12700">
                        <a:solidFill><a:srgbClr val="{border_color}"/></a:solidFill>
                        <a:prstDash val="solid"/>
                    </a:lnR>
                    <a:lnT w="12700">
                        <a:solidFill><a:srgbClr val="{border_color}"/></a:solidFill>
                        <a:prstDash val="solid"/>
                    </a:lnT>
                    <a:lnB w="12700">
                        <a:solidFill><a:srgbClr val="{border_color}"/></a:solidFill>
                        <a:prstDash val="solid"/>
                    </a:lnB>
                </a:tcBorders>
            """
            try:
                # Apply the border to the cell
                tcPr.append(parse_xml(border_xml))
            except Exception as e:
                print(f"Error applying border: {e}")
def create_table(slide, headers, num_rows, top_position, slide_width):
    cols = len(headers)
    table = slide.shapes.add_table(num_rows, cols, Inches(0.5), top_position, slide_width - Inches(1), Inches(0.5)).table

    # Style headers with green background and white text
    for col_idx, header in enumerate(headers):
        cell = table.cell(0, col_idx)
        cell.text = header
        cell.fill.solid()
        cell.fill.fore_color.rgb = RGBColor(0x36, 0x6B, 0x1F)  # Dark green header background
        for paragraph in cell.text_frame.paragraphs:
            for run in paragraph.runs:
                run.font.size = Pt(10)
                run.font.bold = True
                run.font.color.rgb = RGBColor(255, 255, 255)  # White text

    # Style the table rows
    for row_idx in range(1, num_rows):
        for col_idx in range(cols):
            cell = table.cell(row_idx, col_idx)
            cell.fill.solid()
            cell.fill.fore_color.rgb = RGBColor(255, 255, 255)  # White background
            for paragraph in cell.text_frame.paragraphs:
                for run in paragraph.runs:
                    run.font.size = Pt(10)

    # Apply full border to the entire table
    apply_full_border_with_color(table, border_color="000000")  # Black border

    return table
