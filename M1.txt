import pandas as pd
from pptx import Presentation
from pptx.util import Inches, Pt
from pptx.dml.color import RGBColor
from pptx.oxml import parse_xml


def create_table(slide, headers, rows, cols, position=(Inches(0.5), Inches(1), Inches(9), Inches(5))):
    """
    Create a table on the slide.
    """
    graphic_frame = slide.shapes.add_table(rows, cols, *position)
    table = graphic_frame.table

    # Adjust column widths dynamically
    column_widths = [Inches(2.2)] + [Inches(0.6)] * (len(headers) - 1)
    for idx, width in enumerate(column_widths):
        table.columns[idx].width = width

    # Format header row
    for col_idx, header in enumerate(headers):
        cell = table.cell(0, col_idx)
        cell.text = header
        cell.text_frame.paragraphs[0].font.size = Pt(14)
        cell.text_frame.paragraphs[0].font.color.rgb = RGBColor(255, 255, 255)  # White text
        cell.fill.solid()
        cell.fill.fore_color.rgb = RGBColor(0, 58, 111)  # Dark blue background

    return table


def populate_table(table, df):
    """
    Populate the table with data from a dataframe.
    """
    for row_idx in range(df.shape[0]):  # Data starts from the first row of df
        for col_idx in range(df.shape[1]):  # Columns are based on df's columns
            cell = table.cell(row_idx + 1, col_idx)  # Offset by 1 to account for the header row
            value = df.iloc[row_idx, col_idx]  # Get the value from the dataframe
            cell.text = str(value)  # Set the text in the table cell
            # Apply formatting for data cells
            cell.text_frame.paragraphs[0].font.size = Pt(10)
            cell.text_frame.paragraphs[0].font.color.rgb = RGBColor(0, 0, 0)  # Black text
            cell.fill.solid()
            cell.fill.fore_color.rgb = RGBColor(255, 255, 255)  # White background


def populate_slide_6(slide, df):
    """
    Populate Slide 6 with a formatted table.
    """
    headers = ["Process", "Consumed or Produced", "Business", "Process Owner", "Total Metrics",
               "BDEs at Boundary Level", "Pass Through BDEs", "Pass Through Metrics"]
    table = create_table(slide, headers, rows=df.shape[0] + 1, cols=len(headers))
    populate_table(table, df)


def populate_slide_8(slide, df):
    """
    Populate Slide 8 with a formatted table.
    """
    headers = [
        "Process", "Consumed or Produced", "Total BDEs", "Total BDEs Agreed to Monitor", "% BDE Monitored",
        "BDEs at Boundary Level", "Boundary BDEs Agreed to Monitor", "% Boundary BDE Monitored",
        "Pass Through BDEs", "Pass Through BDEs Agreed to Monitor", "% Pass Through BDE Monitored",
        "Total Metrics", "Total Metrics Agreed to Monitor", "% Metrics Monitored",
        "Pass Through Metrics", "Pass Through Metrics Agreed to Monitor", "% Pass Through Metrics Monitored"
    ]
    table = create_table(slide, headers, rows=df.shape[0] + 1, cols=len(headers))
    populate_table(table, df)


def create_presentation(output_path, slide_6_df, slide_8_df):
    """
    Create a presentation with formatted tables on slides 6 and 8.
    """
    prs = Presentation()
    # Add slides
    slide_layout = prs.slide_layouts[5]  # Blank slide layout
    slide_6 = prs.slides.add_slide(slide_layout)
    slide_8 = prs.slides.add_slide(slide_layout)

    # Populate slides
    populate_slide_6(slide_6, slide_6_df)
    populate_slide_8(slide_8, slide_8_df)

    # Save presentation
    prs.save(output_path)


# Example Usage
if __name__ == "__main__":
    # Mock data for Slide 6
    slide_6_data = {
        "Process": ["Process 1", "Process 2"],
        "Consumed or Produced": ["Consumed", "Produced"],
        "Business": ["Business 1", "Business 2"],
        "Process Owner": ["Owner 1", "Owner 2"],
        "Total Metrics": [100, 200],
        "BDEs at Boundary Level": [50, 80],
        "Pass Through BDEs": [30, 60],
        "Pass Through Metrics": [20, 40]
    }
    slide_6_df = pd.DataFrame(slide_6_data)

    # Mock data for Slide 8
    slide_8_data = {
        "Process": ["Process 1", "Process 2"],
        "Consumed or Produced": ["Consumed", "Produced"],
        "Total BDEs": [150, 250],
        "Total BDEs Agreed to Monitor": [120, 220],
        "% BDE Monitored": ["80%", "88%"],
        "BDEs at Boundary Level": [70, 90],
        "Boundary BDEs Agreed to Monitor": [50, 80],
        "% Boundary BDE Monitored": ["71%", "89%"],
        "Pass Through BDEs": [40, 70],
        "Pass Through BDEs Agreed to Monitor": [30, 60],
        "% Pass Through BDE Monitored": ["75%", "85%"],
        "Total Metrics": [300, 400],
        "Total Metrics Agreed to Monitor": [270, 370],
        "% Metrics Monitored": ["90%", "92%"],
        "Pass Through Metrics": [50, 80],
        "Pass Through Metrics Agreed to Monitor": [40, 70],
        "% Pass Through Metrics Monitored": ["80%", "88%"]
    }
    slide_8_df = pd.DataFrame(slide_8_data)

    # Generate presentation
    output_file = "Formatted_Presentation.pptx"
    create_presentation(output_file, slide_6_df, slide_8_df)
    print(f"Presentation saved as {output_file}")
