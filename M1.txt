import pandas as pd
from pptx import Presentation
from pptx.util import Pt, Inches
from pptx.dml.color import RGBColor
from pptx.oxml.ns import nsdecls
from pptx.oxml import parse_xml
import re
import os
import sys
from atlasconnect import rdf


# Function to sanitize filenames for OS compatibility
def sanitize_filename(report_name):
    cleaned_name = re.sub(r'[<>:"/\\|?*]', '_', report_name)
    return cleaned_name.strip()[:255]


# Function to get the last part of a URL
def get_last_part_of_url(url):
    return re.sub(r'[<>:"/\\|?*]', '_', url.strip('/').split('/')[-1])


# Function to replace "Report Name" in all slides
def replace_report_name_in_all_sliders(prs, report_name):
    for slide in prs.slides:
        for shape in slide.shapes:
            if shape.has_text_frame:
                for paragraph in shape.text_frame.paragraphs:
                    for run in paragraph.runs:
                        if "Report Name" in run.text:
                            run.text = run.text.replace("Report Name", report_name)
                            run.font.size = Pt(12)


# Function to delete all tables from a slide
def delete_existing_tables(slide):
    shapes_to_delete = [shape for shape in slide.shapes if shape.has_table]
    for shape in shapes_to_delete:
        sp = shape._element
        sp.getparent().remove(sp)


# Function to create a table
def create_table(slide, headers, num_rows, top_position, slide_width):
    cols = len(headers)
    table = slide.shapes.add_table(num_rows, cols, Inches(0.5), top_position, slide_width - Inches(1), Inches(0.5)).table

    # Set header styles
    for col_idx, header in enumerate(headers):
        cell = table.cell(0, col_idx)
        cell.text = header
        cell.fill.solid()
        cell.fill.fore_color.rgb = RGBColor(0x48, 0x8F, 0x29)
        for paragraph in cell.text_frame.paragraphs:
            for run in paragraph.runs:
                run.font.size = Pt(10)
                run.font.bold = True
                run.font.color.rgb = RGBColor(255, 255, 255)

    return table


# Function to populate a table with data
def populate_table(table, data, start_row=1):
    for row_idx, row_data in enumerate(data, start=start_row):
        for col_idx, cell_data in enumerate(row_data):
            cell = table.cell(row_idx, col_idx)
            cell.text = str(cell_data)
            cell.fill.solid()
            cell.fill.fore_color.rgb = RGBColor(255, 255, 255)


# Function to merge cells in the "Process" column
def merge_process_cells(table, df):
    merge_start = 1  # Start at first data row
    process_column = 0  # Index of "Process" column

    for row_idx in range(1, len(df)):
        if df.iloc[row_idx, process_column] != df.iloc[row_idx - 1, process_column]:
            if merge_start < row_idx:
                table.cell(merge_start, process_column).merge(table.cell(row_idx - 1, process_column))
            merge_start = row_idx

    if merge_start < len(df):
        table.cell(merge_start, process_column).merge(table.cell(len(df) - 1, process_column))


# Populate Slide 6
def populate_slide_6(prs, slide, df):
    delete_existing_tables(slide)
    headers = ["Process", "Consumed or Produced", "Business", "Process Owner", "Total Metrics", "BDEs at Boundary Level", "Pass Through BDEs", "Pass Through Metrics"]
    slide_width = prs.slide_width
    table = create_table(slide, headers, num_rows=1 + len(df), top_position=Inches(1), slide_width=slide_width)

    row_data = []
    for process in df['Process'].unique():
        process_data = df[df['Process'] == process]
        consumed_metrics = process_data['Consumed Metric'].nunique()
        boundary_bdes = process_data[process_data['Flow Type'].str.contains('Inbound Element|Pass Through', case=False, na=False)]['Consumed BDE'].nunique()
        pass_through_metrics = process_data[process_data['Flow Type'].str.contains('Pass Through', case=False, na=False)]['Consumed Metric'].nunique()

        row_data.append([process, 'Consumed', process_data['Business'].iloc[0], process_data['Process Owner'].iloc[0], consumed_metrics, boundary_bdes, pass_through_metrics])

    populate_table(table, row_data)
    merge_process_cells(table, df)


# Populate Slide 8
def populate_slide_8(prs, slide, df, csv_data):
    delete_existing_tables(slide)
    headers = ["Process", "Consumed or Produced", "Total BDEs", "Total Metrics", "BDEs at Boundary Level"]
    slide_width = prs.slide_width
    table = create_table(slide, headers, num_rows=1 + len(df), top_position=Inches(1), slide_width=slide_width)

    row_data = []
    for process in df['Process'].unique():
        process_data = df[df['Process'] == process]
        total_bdes = process_data['Consumed BDE'].nunique()
        boundary_bdes = process_data[process_data['Flow Type'].str.contains('Pass Through|Inbound', case=False, na=False)]['Consumed BDE'].nunique()

        row_data.append([process, 'Consumed', total_bdes, boundary_bdes])

    populate_table(table, row_data)
    csv_data.extend(row_data)
    merge_process_cells(table, df)


# Main function to create reports
def create_report(template_path, output_folder, report_value):
    try:
        prs = Presentation(template_path)
        file_name = get_last_part_of_url(report_value)
        report_folder = os.path.join(output_folder, file_name)
        os.makedirs(report_folder, exist_ok=True)

        # Generate data
        df = pd.DataFrame()  # Replace with actual SPARQL data fetch
        csv_data = []

        # Populate slides
        if len(prs.slides) > 5:
            populate_slide_6(prs, prs.slides[5], df)
        if len(prs.slides) > 6:
            populate_slide_8(prs, prs.slides[6], df, csv_data)

        pptx_path = os.path.join(report_folder, f"{file_name}.pptx")
        prs.save(pptx_path)
        print(f"PowerPoint saved as {pptx_path}")
    except Exception as e:
        print(f"Error processing report URL {report_value}: {e}")


if __name__ == "__main__":
    main()
