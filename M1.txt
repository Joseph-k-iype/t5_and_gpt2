def set_cell_border(cell, border_color="000000", border_width="12700"):
    """
    Sets border for a cell in a table.
    """
    tc = cell._tc
    tcPr = tc.get_or_add_tcPr()

    # Define the border XML
    border_xml = f'''
    <a:tcBorders {nsdecls('a')}>
        <a:lnL w="{border_width}">
            <a:solidFill><a:srgbClr val="{border_color}"/></a:solidFill>
        </a:lnL>
        <a:lnR w="{border_width}">
            <a:solidFill><a:srgbClr val="{border_color}"/></a:solidFill>
        </a:lnR>
        <a:lnT w="{border_width}">
            <a:solidFill><a:srgbClr val="{border_color}"/></a:solidFill>
        </a:lnT>
        <a:lnB w="{border_width}">
            <a:solidFill><a:srgbClr val="{border_color}"/></a:solidFill>
        </a:lnB>
    </a:tcBorders>
    '''
    tcPr.append(parse_xml(border_xml))

def add_thick_border_to_row(table, row_index, border_width="12700", border_color="000000"):
    """
    Adds a thick bottom border to all cells in the specified row.
    """
    for cell in table.rows[row_index].cells:
        tc = cell._tc
        tcPr = tc.get_or_add_tcPr()
        lnB = tcPr.find('.//a:lnB', namespaces={'a': 'http://schemas.openxmlformats.org/drawingml/2006/main'})
        if lnB is not None:
            tcPr.remove(lnB)
        border_xml = f'''
        <a:lnB w="{border_width}">
            <a:solidFill>
                <a:srgbClr val="{border_color}"/>
            </a:solidFill>
        </a:lnB>
        '''
        tcPr.append(parse_xml(border_xml))


def populate_slide_6(slide, df):
    delete_existing_tables(slide)
    headers = ["Process", "Consumed or Produced", "Business", "Process Owner", "Total Metrics",
               "BDEs at Boundary Level", "Pass Through BDEs", "Pass Through Metrics"]
    table = create_table(slide, headers, num_rows=1 + 2 * df['Process'].nunique(), top_position=Inches(1))

    row_data = []
    for process in df['Process'].unique():
        process_data = df[df['Process'] == process]

        # Add rows for consumed data
        row_data.append([...])  # Include all consumed data here
        row_data.append([...])  # Include all produced data here

    populate_table(table, row_data)

    # Add thick borders after every 2 rows (1 for consumed, 1 for produced)
    for i in range(2, len(row_data) + 1, 2):  # Every 2 rows
        add_thick_border_to_row(table, i)


def populate_slide_8(slide, df, csv_data):
    delete_existing_tables(slide)
    headers = [
        "Process", "Consumed or Produced", "Total BDEs", "Total BDEs Agreed to Monitor", "% BDE Monitored",
        "BDEs at Boundary Level", "Boundary BDEs Agreed to Monitor", "% Boundary BDE Monitored",
        "Pass Through BDEs", "Pass Through BDEs Agreed to Monitor", "% Pass Through BDE Monitored",
        "Total Metrics", "Total Metrics Agreed to Monitor", "% Metrics Monitored",
        "Pass Through Metrics", "Pass Through Metrics Agreed to Monitor", "% Pass Through Metrics Monitored"
    ]
    table = create_table(slide, headers, num_rows=1 + 2 * df['Process'].nunique(), top_position=Inches(1))

    row_data = []
    for process in df['Process'].unique():
        process_data = df[df['Process'] == process]

        # Add rows for consumed data
        row_data.append([...])  # Include all consumed data here
        row_data.append([...])  # Include all produced data here

    populate_table(table, row_data)

    # Add thick borders after every 2 rows (1 for consumed, 1 for produced)
    for i in range(2, len(row_data) + 1, 2):  # Every 2 rows
        add_thick_border_to_row(table, i)
