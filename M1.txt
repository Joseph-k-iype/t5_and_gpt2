from pptx.oxml import parse_xml
from pptx.oxml.ns import nsdecls

def set_cell_border(cell, side="bottom", width=12700, color="000000"):
    """
    Apply a border to a cell.
    Parameters:
    - cell: The cell object.
    - side: The side to apply the border ('top', 'bottom', 'left', 'right').
    - width: Border width in EMUs (12700 is 1.5pt).
    - color: Border color in hex format (e.g., '000000' for black).
    """
    tc = cell._tc  # Get the cell's XML element
    tcPr = tc.get_or_add_tcPr()  # Get or create the table cell properties

    # Border mapping to apply the border to the correct side
    side_mapping = {
        "top": "lnT",
        "bottom": "lnB",
        "left": "lnL",
        "right": "lnR"
    }

    # Append the border XML to the table cell properties
    border_tag = side_mapping.get(side, "lnB")
    border_xml = f'''
        <a:{border_tag} {nsdecls("a")} w="{width}">
            <a:solidFill>
                <a:srgbClr val="{color}"/>
            </a:solidFill>
            <a:prstDash val="solid"/>
        </a:{border_tag}>
    '''
    tcPr.append(parse_xml(border_xml))


def add_thick_border_to_row(table, row_index, side="bottom"):
    """
    Add a thick border to a specific side of all cells in a row.
    """
    for cell in table.rows[row_index].cells:
        set_cell_border(cell, side=side)


# Populate Slide 6
def populate_slide_6(slide, df):
    delete_existing_tables(slide)
    headers = ["Process", "Consumed or Produced", "Business", "Process Owner", "Total Metrics", "BDEs at Boundary Level", "Pass Through BDEs", "Pass Through Metrics"]
    table = create_table(slide, headers, num_rows=1 + 2 * df['Process'].nunique(), top_position=Inches(1))

    row_data = []
    for process in df['Process'].unique():
        process_data = df[df['Process'] == process]

        # Add rows for consumed and produced data
        row_data.append([process, 'Consumed', ...])  # Include all consumed data here
        row_data.append([process, 'Produced', ...])  # Include all produced data here

    populate_table(table, row_data)

    # Add thick borders after every 2 rows (1 for consumed, 1 for produced)
    for i in range(2, len(row_data) + 1, 2):  # Every 2 rows
        add_thick_border_to_row(table, i - 1, side="bottom")


# Populate Slide 8
def populate_slide_8(slide, df, csv_data):
    delete_existing_tables(slide)
    headers = [
        "Process", "Consumed or Produced", "Total BDEs", "Total BDEs Agreed to Monitor", "% BDE Monitored",
        "BDEs at Boundary Level", "Boundary BDEs Agreed to Monitor", "% Boundary BDE Monitored",
        "Pass Through BDEs", "Pass Through BDEs Agreed to Monitor", "% Pass Through BDE Monitored",
        "Total Metrics", "Total Metrics Agreed to Monitor", "% Metrics Monitored",
        "Pass Through Metrics", "Pass Through Metrics Agreed to Monitor", "% Pass Through Metrics Monitored"
    ]
    table = create_table(slide, headers, num_rows=1 + 2 * df['Process'].nunique(), top_position=Inches(1))

    row_data = []
    for process in df['Process'].unique():
        process_data = df[df['Process'] == process]

        # Add rows for consumed and produced data
        row_data.append([process, 'Consumed', ...])  # Include all consumed data here
        row_data.append([process, 'Produced', ...])  # Include all produced data here

    populate_table(table, row_data)

    # Add thick borders after every 2 rows (1 for consumed, 1 for produced)
    for i in range(2, len(row_data) + 1, 2):  # Every 2 rows
        add_thick_border_to_row(table, i - 1, side="bottom")
