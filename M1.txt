from datetime import datetime, timedelta

def get_current_week_monday():
    """
    Calculate the date for the Monday of the current week.
    """
    today = datetime.today()
    start_of_week = today - timedelta(days=today.weekday())  # Monday is weekday 0
    return start_of_week.strftime('%Y-%m-%d')  # Format as 'YYYY-MM-DD'

def replace_report_date(slide):
    """
    Replace 'Report Date: {Monday Date}' with the actual Monday's date in the template slide.
    This function ensures that only the specific shape for the report date is targeted.
    """
    monday_date = get_current_week_monday()
    for shape in slide.shapes:
        if shape.has_text_frame and "Report Date:" in shape.text:
            for paragraph in shape.text_frame.paragraphs:
                for run in paragraph.runs:
                    if "Report Date:" in run.text:
                        run.text = f"Report Date: {monday_date}"
                        run.font.size = Pt(12)  # Adjust font size if needed
                        run.font.bold = True
def create_report(template_path, output_folder, report_value):
    try:
        prs = Presentation(template_path)
        file_name = get_last_part_of_url(report_value)
        report_folder = os.path.join(output_folder, file_name)
        os.makedirs(report_folder, exist_ok=True)

        # Generate data
        df = generate_main_data(report_value, report_folder)
        df_slide9 = generate_slide9_data(report_value, report_folder)
        df_slide_11 = generate_slide11_data(report_value, report_folder)

        if df.empty:
            print(f"No data returned for report URL: {report_value}. Skipping...")
            return

        report_name = df['Report Name'].iloc[0] if 'Report Name' in df.columns else "Unknown Report"
        replace_report_name_in_all_sliders(prs, report_name)

        # Replace Report Date on all slides BEFORE modifying slide tables
        for slide in prs.slides:
            replace_report_date(slide)

        # Populate slides with data
        if len(prs.slides) > 4:
            populate_slide_6(prs, prs.slides[4], df)
        if len(prs.slides) > 5:
            csv_data = []
            populate_slide_8(prs, prs.slides[5], df, csv_data)
            save_csv(csv_data, report_folder)
        if len(prs.slides) > 6:
            populate_slide_9(prs, prs.slides[6], df_slide9)
        if len(prs.slides) > 8:
            populate_slide_11(prs, prs.slides[8], df_slide_11)

        pptx_path = os.path.join(report_folder, f"{file_name}.pptx")
        prs.save(pptx_path)
        print(f"PowerPoint saved as {pptx_path}")

    except Exception as e:
        print(f"Error processing report URL {report_value}: {e}")
