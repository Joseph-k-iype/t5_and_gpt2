def create_table(slide, headers, num_rows, top_position, slide_width):
    cols = len(headers)
    table = slide.shapes.add_table(num_rows, cols, Inches(0.5), top_position, slide_width - Inches(1), Inches(0.5)).table

    # Header row styling: green background, white font
    for col_idx, header in enumerate(headers):
        cell = table.cell(0, col_idx)
        cell.text = header
        cell.fill.solid()
        cell.fill.fore_color.rgb = RGBColor(0x36, 0x6B, 0x1F)  # Header background: #366B1F
        for paragraph in cell.text_frame.paragraphs:
            for run in paragraph.runs:
                run.font.size = Pt(10)
                run.font.bold = True
                run.font.color.rgb = RGBColor(255, 255, 255)  # White font color

    # Body row styling: white background, black font
    for row in table.rows[1:]:  # Skip the header row
        for cell in row.cells:
            cell.fill.solid()
            cell.fill.fore_color.rgb = RGBColor(255, 255, 255)  # Body row background: #ffffff
            for paragraph in cell.text_frame.paragraphs:
                for run in paragraph.runs:
                    run.font.size = Pt(10)
                    run.font.color.rgb = RGBColor(0, 0, 0)  # Black font color

    # Apply borders to all cells with black color
    apply_full_border_with_color(table, RGBColor(0, 0, 0))  # Border color: #000000

    return table


def apply_full_border_with_color(table, border_color):
    """
    Apply full borders with a specific color to all cells in a PowerPoint table.
    """
    for row in table.rows:
        for cell in row.cells:
            tc = cell._tc  # Get the underlying XML element for the cell
            tcPr = tc.get_or_add_tcPr()  # Get or add the <w:tcPr> element

            # Clear existing borders if they exist
            while len(tcPr) > 0:
                tcPr.remove(tcPr[0])

            # Define XML for borders with specified color
            border_xml = f"""
                <a:tcBorders {nsdecls('a')}>
                    <a:lnL w="12700"><a:solidFill><a:srgbClr val="{border_color.rgb[0]:02X}{border_color.rgb[1]:02X}{border_color.rgb[2]:02X}"/></a:solidFill></a:lnL>
                    <a:lnR w="12700"><a:solidFill><a:srgbClr val="{border_color.rgb[0]:02X}{border_color.rgb[1]:02X}{border_color.rgb[2]:02X}"/></a:solidFill></a:lnR>
                    <a:lnT w="12700"><a:solidFill><a:srgbClr val="{border_color.rgb[0]:02X}{border_color.rgb[1]:02X}{border_color.rgb[2]:02X}"/></a:solidFill></a:lnT>
                    <a:lnB w="12700"><a:solidFill><a:srgbClr val="{border_color.rgb[0]:02X}{border_color.rgb[1]:02X}{border_color.rgb[2]:02X}"/></a:solidFill></a:lnB>
                </a:tcBorders>
            """

            # Parse and append the border XML to the cell properties
            tcPr.append(parse_xml(border_xml))
