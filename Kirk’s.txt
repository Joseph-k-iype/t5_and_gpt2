import os
from azure.identity import DefaultAzureCredential, get_bearer_token_provider
from openai import AzureOpenAI
from oaai_client_sdk_core.genai_env_setup import OSEnv

class EmbeddingClient:
    def __init__(self, base_dir: str):
        """Initialize embedding client with Azure settings."""
        self.env = OSEnv(base_dir)
        self.azure_api_version = self.env.get("API_VERSION", "2023-05-15")
        self.azure_endpoint = self.env.get("AZURE_OPENAI_ENDPOINT")

        if not self.azure_endpoint:
            raise ValueError("AZURE_OPENAI_ENDPOINT is missing!")

        self.token_provider = get_bearer_token_provider(DefaultAzureCredential())
        self.direct_azure_client = self.get_direct_azure_client()

    def get_direct_azure_client(self):
        """Configure and return the Azure OpenAI client for embeddings."""
        return AzureOpenAI(
            api_version=self.azure_api_version,
            azure_endpoint=self.azure_endpoint,
            azure_ad_token_provider=self.token_provider
        )

    def generate_embeddings(self, text: str) -> list:
        """Generate embeddings for the given text."""
        response = self.direct_azure_client.embeddings.create(
            model="text-embedding-3-large",
            input=text
        )
        return response["data"][0]["embedding"]
