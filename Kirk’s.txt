import os
import time
import logging
from pathlib import Path
from typing import Optional, Dict, Any, List

from dotenv import load_dotenv, dotenv_values
from azure.identity import ClientSecretCredential

from langchain.chat_models import AzureChatOpenAI
from langchain.schema import HumanMessage, SystemMessage, Document
from langchain.memory import ConversationBufferMemory
from langchain.chains import ConversationChain, ConversationalRetrievalChain
from langchain.embeddings import OpenAIEmbeddings
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain.vectorstores import FAISS
from langchain.document_loaders import DirectoryLoader, TextLoader

# --------------------- Logging Configuration ---------------------
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# --------------------- Utility Functions ---------------------
def is_file_readable(filepath: str) -> bool:
    """Check if a file exists and is readable."""
    if not os.path.isfile(filepath) or not os.access(filepath, os.R_OK):
        raise FileNotFoundError(f"The file '{filepath}' does not exist or is not readable")
    return True

def str_to_bool(s: str) -> bool:
    """Convert string to boolean."""
    if s == 'True':
        return True
    elif s == 'False':
        return False
    else:
        raise ValueError(f"Invalid boolean string: {s}")

# --------------------- Environment and Certificate Setup ---------------------
class OSEnv:
    """Environment variable and certificate management class."""
    
    def __init__(self, config_file: str, creds_file: str, certificate_path: str):
        """Initialize with configuration files and certificate path."""
        self.var_list = []  # hold vars that were set via this class
        
        # Load main configuration
        self.bulk_set(config_file, True)
        logger.info(f"Loaded main configuration from {config_file}")
        
        # Load credentials
        self.bulk_set(creds_file, False)
        logger.info(f"Loaded credentials from {creds_file}")
        
        # Set up certificates
        self.set_certificate_path(certificate_path)
        logger.info("Certificate path configured")
        
        # Configure proxy if enabled
        if str_to_bool(self.get("PROXY_ENABLED", "False")):
            self.set_proxy()
            logger.info("Proxy configured")
        
        # Set up Azure token if secure endpoints enabled
        if str_to_bool(self.get("SECURED_ENDPOINTS", "False")):
            logger.info("Securing endpoints")
            self.token = self.get_azure_token()
        else:
            self.token = None

    def set_certificate_path(self, certificate_path: str) -> None:
        """Set up the certificate path for SSL verification."""
        try:
            if not os.path.isabs(certificate_path):
                certificate_path = os.path.abspath(certificate_path)
            
            if not is_file_readable(certificate_path):
                raise Exception("Certificate file missing or not readable")
            
            # Set the certificate environment variables
            self.set("REQUESTS_CA_BUNDLE", certificate_path)
            self.set("SSL_CERT_FILE", certificate_path)
            self.set("CURL_CA_BUNDLE", certificate_path)
            
            logger.info(f"Certificate path set to: {certificate_path}")
            
        except Exception as e:
            logger.error(f"Certificate configuration failed: {str(e)}")
            raise

    def bulk_set(self, dotenvfile: str, print_val: bool = False) -> None:
        """Read and set environment variables from a dotenv file."""
        try:
            if not os.path.isabs(dotenvfile):
                dotenvfile = os.path.abspath(dotenvfile)
                
            if is_file_readable(dotenvfile):
                logger.info(f"Loading environment variables from {dotenvfile}")
                temp_dict = dotenv_values(dotenvfile)
                for k, v in temp_dict.items():
                    self.set(k, v, print_val)
                del temp_dict
        except Exception as e:
            logger.error(f"Failed to load environment file {dotenvfile}: {str(e)}")
            raise

    def set(self, var_name: str, val: str, print_val: bool = True) -> None:
        """Set an environment variable."""
        try:
            os.environ[var_name] = val
            if var_name not in self.var_list:
                self.var_list.append(var_name)
            if print_val:
                logger.info(f"Set {var_name}={val}")
        except Exception as e:
            logger.error(f"Failed to set environment variable {var_name}: {str(e)}")
            raise

    def get(self, var_name: str, default: Optional[str] = None) -> Optional[str]:
        """Get an environment variable value."""
        try:
            return os.environ[var_name]
        except KeyError:
            logger.warning(f"Environment variable {var_name} not found")
            return default

    def set_proxy(self) -> None:
        """Set up proxy configuration with authentication."""
        try:
            ad_username = self.get("AD_USERNAME")
            ad_password = self.get("AD_USER_PW")
            proxy_domain = self.get("HTTPS_PROXY_DOMAIN")
            
            if not all([ad_username, ad_password, proxy_domain]):
                raise ValueError("Missing proxy credentials")
            
            proxy_url = f"http://{ad_username}:{ad_password}@{proxy_domain}"
            self.set("HTTP_PROXY", proxy_url, print_val=False)
            self.set("HTTPS_PROXY", proxy_url, print_val=False)
            
            # Set no_proxy for Azure services
            no_proxy_domains = [
                'cognitiveservices.azure.com',
                'search.windows.net',
                'openai.azure.com',
                'core.windows.net',
                'azurewebsites.net'
            ]
            self.set("NO_PROXY", ",".join(no_proxy_domains))
            
            logger.info("Proxy configuration completed")
            
        except Exception as e:
            logger.error(f"Proxy configuration failed: {str(e)}")
            raise

    def get_azure_token(self) -> str:
        """Get Azure authentication token."""
        try:
            credential = ClientSecretCredential(
                tenant_id=self.get("AZURE_TENANT_ID"),
                client_id=self.get("AZURE_CLIENT_ID"),
                client_secret=self.get("AZURE_CLIENT_SECRET")
            )
            token = credential.get_token("https://cognitiveservices.azure.com/.default")
            self.set("AZURE_TOKEN", token.token, print_val=False)
            logger.info("Azure token acquired successfully")
            return token.token
            
        except Exception as e:
            logger.error(f"Failed to get Azure token: {str(e)}")
            raise

    def list_env_vars(self) -> None:
        """List all environment variables set by this class."""
        for var in self.var_list:
            if var in {'AZURE_TOKEN', 'AD_USER_PW', 'AZURE_CLIENT_SECRET'}:
                logger.info(f"{var}: [HIDDEN]")
            else:
                logger.info(f"{var}: {self.get(var)}")

# --------------------- Document Processing ---------------------
class DocumentProcessor:
    """Handles document loading, splitting, and indexing."""
    
    def __init__(self, env: 'OSEnv'):
        """Initialize with environment configuration."""
        self.env = env
        # Use OpenAIEmbeddings (the recommended replacement for the deprecated AzureOpenAIEmbeddings)
        self.embeddings = OpenAIEmbeddings(
            deployment=env.get("EMBEDDING_DEPLOYMENT", "text-embedding-ada-002"),
            openai_api_base=env.get("AZURE_OPENAI_ENDPOINT"),
            openai_api_version=env.get("API_VERSION", "2024-02-01"),
            openai_api_key=env.token,  # if your Azure setup uses an API key, replace with the appropriate env var
            model="text-embedding-ada-002"
        )
        self.text_splitter = RecursiveCharacterTextSplitter(
            chunk_size=1000,
            chunk_overlap=200
        )
        
    def load_documents(self, directory_path: str) -> List[Document]:
        """Load documents from a directory."""
        try:
            loader = DirectoryLoader(
                directory_path,
                glob="**/*.txt",  # Modify this pattern if you need to support additional file types
                loader_cls=TextLoader
            )
            documents = loader.load()
            logger.info(f"Loaded {len(documents)} documents from {directory_path}")
            return documents
        except Exception as e:
            logger.error(f"Error loading documents: {str(e)}")
            raise

    def process_documents(self, documents: List[Document]) -> FAISS:
        """Process documents and create a vector store."""
        try:
            texts = self.text_splitter.split_documents(documents)
            # Add 'chunk_size' metadata to each document to avoid key errors later
            for doc in texts:
                if "chunk_size" not in doc.metadata:
                    doc.metadata["chunk_size"] = self.text_splitter.chunk_size
            vectorstore = FAISS.from_documents(texts, self.embeddings)
            logger.info(f"Created vector store with {len(texts)} text chunks")
            return vectorstore
        except Exception as e:
            logger.error(f"Error processing documents: {str(e)}")
            raise

# --------------------- RAG-enabled Chatbot ---------------------
class AzureChatbot:
    """RAG-enabled Azure OpenAI chatbot using LangChain."""
    
    def __init__(self, config_file: str, creds_file: str, cert_file: str, knowledge_dir: str):
        """Initialize the chatbot with configuration and knowledge base."""
        logger.info("Initializing RAG-enabled chatbot...")
        self.env = OSEnv(config_file, creds_file, cert_file)
        self.doc_processor = DocumentProcessor(self.env)
        self._setup_knowledge_base(knowledge_dir)
        self._setup_chat_model()

    def _setup_knowledge_base(self, knowledge_dir: str) -> None:
        """Set up the knowledge base from documents."""
        try:
            documents = self.doc_processor.load_documents(knowledge_dir)
            self.vectorstore = self.doc_processor.process_documents(documents)
            logger.info("Knowledge base initialized successfully")
        except Exception as e:
            logger.error(f"Failed to initialize knowledge base: {str(e)}")
            raise

    def _setup_chat_model(self) -> None:
        """Set up the RAG-enabled conversation chain."""
        try:
            self.llm = AzureChatOpenAI(
                model_name=self.env.get("MODEL_NAME", "gpt-4"),
                temperature=float(self.env.get("MODEL_TEMPERATURE", "0.7")),
                max_tokens=int(self.env.get("MAX_TOKENS", "800")),
                openai_api_version=self.env.get("API_VERSION", "2024-02-01"),
                azure_endpoint=self.env.get("AZURE_OPENAI_ENDPOINT"),
                azure_ad_token=self.env.token
            )
            
            self.memory = ConversationBufferMemory(
                memory_key="chat_history",
                return_messages=True
            )
            
            self.conversation = ConversationalRetrievalChain.from_llm(
                llm=self.llm,
                retriever=self.vectorstore.as_retriever(search_kwargs={"k": 3}),
                memory=self.memory,
                return_source_documents=True,
                verbose=True
            )
            
            logger.info("RAG conversation chain initialized successfully")
            
        except Exception as e:
            logger.error(f"Failed to initialize chat model: {str(e)}")
            raise

    def chat(self, message: str) -> Dict[str, Any]:
        """Process a message and return the response with source documents."""
        if not message.strip():
            return {"response": "Please provide a non-empty message.", "sources": []}
        
        try:
            result = self.conversation({"question": message})
            response = {
                "response": result["answer"],
                "sources": [doc.metadata for doc in result["source_documents"]]
            }
            return response
        except Exception as e:
            logger.error(f"Error in chat: {str(e)}")
            return {"response": f"An error occurred: {str(e)}", "sources": []}

# --------------------- Main Function ---------------------
def main():
    """Main function to run the RAG-enabled chatbot."""
    try:
        # Define paths
        base_dir = os.path.dirname(os.path.abspath(__file__))
        env_dir = os.path.join(base_dir, '..', 'env')
        knowledge_dir = os.path.join(base_dir, '..', 'knowledge')
        
        config_path = os.path.join(env_dir, 'config.env')
        creds_path = os.path.join(env_dir, 'credentials.env')
        cert_path = os.path.join(env_dir, 'cacert.pem')
        
        # Ensure the knowledge directory exists (even if empty)
        os.makedirs(knowledge_dir, exist_ok=True)
        
        print("\nInitializing RAG-enabled chatbot...")
        chatbot = AzureChatbot(
            config_file=config_path,
            creds_file=creds_path,
            cert_file=cert_path,
            knowledge_dir=knowledge_dir
        )
        
        print("\nChatbot initialized successfully!")
        print("\nAvailable commands:")
        print("- 'quit', 'exit', or 'bye': End the conversation")
        print("- 'env': Show current environment variables")
        print("\nType your message to begin chatting...")
        print("-" * 50)
        
        while True:
            user_input = input("\nYou: ").strip()
            
            if user_input.lower() in ['quit', 'exit', 'bye']:
                print("Goodbye!")
                break
            
            if user_input.lower() == 'env':
                chatbot.env.list_env_vars()
                continue
            
            result = chatbot.chat(user_input)
            print(f"\nBot: {result['response']}")
            
            if result['sources']:
                print("\nSources:")
                for source in result['sources']:
                    # Adjust key access based on your document metadata structure
                    print(f"- {source.get('source', 'Unknown source')}")
            
    except FileNotFoundError as e:
        print(f"\nFile Error: {str(e)}")
        print("Please check your configuration files and certificate path.")
    except ValueError as e:
        print(f"\nConfiguration Error: {str(e)}")
        print("Please check your environment variables and settings.")
    except Exception as e:
        print(f"\nUnexpected Error: {str(e)}")
        print("Please check the logs for more details.")
        logger.exception("Unexpected error occurred")

if __name__ == "__main__":
    main()
