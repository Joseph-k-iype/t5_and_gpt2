pip install azure-identity openai langchain langgraph
```) and replace the placeholder values (for credentials, proxy details, endpoints, etc.) with your actual values.

```python
import os
import json
from azure.identity import ClientSecretCredential
from langchain.chat_models import AzureChatOpenAI
from langchain.chains import LLMChain
from langchain.prompts import PromptTemplate

# ========= Corporate Proxy & Custom CA Setup =========
# Set your proxy credentials and host details
AD_USERNAME = "your_ad_username"       # e.g. "john.doe"
AD_USERID   = "your_ad_userid"         # e.g. your proxy password or identifier
PROXY_HOST  = "abc.com"
PROXY_PORT  = "80"

# Configure environment variables so that underlying requests use your corporate proxy
os.environ["HTTP_PROXY"]  = f"http://{AD_USERNAME}:{AD_USERID}@{PROXY_HOST}:{PROXY_PORT}"
os.environ["HTTPS_PROXY"] = f"http://{AD_USERNAME}:{AD_USERID}@{PROXY_HOST}:{PROXY_PORT}"
# Ensure the custom CA certificate is used for SSL verification
os.environ["REQUESTS_CA_BUNDLE"] = "cacert.pem"  # Path to your cacert.pem

# ========= Azure AD & Azure OpenAI Configuration =========
# Service principal credentials
CLIENT_ID     = "your_azure_client_id"
CLIENT_SECRET = "your_azure_client_secret"
TENANT_ID     = "your_azure_tenant_id"

# Azure OpenAI settings
OPENAI_API_BASE    = "https://<your-resource-name>.openai.azure.com"  # e.g. https://myresource.openai.azure.com
OPENAI_API_VERSION = "2022-12-01"   # or your preferred API version
DEPLOYMENT_NAME    = "gpt-4o-mini"    # Your deployment name

# Configure OpenAI SDK to use Azure AD authentication
os.environ["OPENAI_API_TYPE"]    = "azure_ad"
os.environ["OPENAI_API_BASE"]    = OPENAI_API_BASE
os.environ["OPENAI_API_VERSION"] = OPENAI_API_VERSION

# ========= Acquire Azure AD Token via Azure Identity =========
scope = "https://cognitiveservices.azure.com/.default"
credential = ClientSecretCredential(
    tenant_id=TENANT_ID,
    client_id=CLIENT_ID,
    client_secret=CLIENT_SECRET
)
token = credential.get_token(scope).token
# Set the token as the OpenAI API key so that the SDK uses it in an Authorization header
os.environ["OPENAI_API_KEY"] = token

print("Azure AD token acquired and OpenAI environment configured.")

# ========= Instantiate LangChain's AzureChatOpenAI =========
llm = AzureChatOpenAI(
    deployment_name=DEPLOYMENT_NAME,
    model_kwargs={"temperature": 0.7}  # adjust temperature or other parameters as needed
)

# ========= Build a LangChain LLMChain =========
prompt_template = PromptTemplate(
    input_variables=["question"],
    template="Please answer the following question in a helpful and concise manner:\n\n{question}"
)
chain = LLMChain(llm=llm, prompt=prompt_template)

# ========= Run the Chain =========
question = "What is the capital of France?"
result = chain.run(question)
print("Chain output:")
print(result)

# ========= Visualize the Chain using LangGraph =========
try:
    from langgraph import Graph
    # Create a graph representation of the chain
    graph = Graph.from_chain(chain)
    # Render the graph (this might open a browser window or render inline if in a notebook)
    graph.render()
except Exception as e:
    print("LangGraph visualization is unavailable or failed:")
    print(e)
