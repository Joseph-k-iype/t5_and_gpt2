import sys
import os
import logging
import chromadb
from langchain_openai import AzureChatOpenAI
from langchain.memory import ConversationBufferMemory
from langchain.document_loaders import CSVLoader
from typing import List, Dict

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '../oaai_client_sdk_core')))
from azoi_embedding_client import EmbeddingClient
from genai_env_setup import OSEnv

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class KnowledgeBase:
    def __init__(self, base_dir: str, knowledge_dir: str):
        self.env = OSEnv(base_dir)
        self.embedding_client = EmbeddingClient(base_dir)
        self.knowledge_dir = knowledge_dir
        self.chroma_client = chromadb.PersistentClient(path="./chroma_db")
        self.collection = self.chroma_client.get_or_create_collection(name="csv_knowledge")

    def retrieve_relevant_documents(self, query: str, top_k: int = 3) -> List[str]:
        """Retrieve top relevant documents from ChromaDB for a query."""
        query_embedding = self.embedding_client.generate_embeddings(query)
        results = self.collection.query(query_embeddings=[query_embedding], n_results=top_k)
        return [res["text"] for res in results["metadatas"]] if results else []

class AzureChatbot:
    def __init__(self, base_dir: str, knowledge_dir: str):
        self.env = OSEnv(base_dir)
        self.knowledge_base = KnowledgeBase(base_dir, knowledge_dir)
        self.llm = AzureChatOpenAI(
            model_name=os.getenv("MODEL_NAME", "gpt-4"),
            azure_endpoint=os.getenv("AZURE_OPENAI_ENDPOINT"),
            azure_ad_token=os.getenv("AZURE_TOKEN")
        )
        self.memory = ConversationBufferMemory()

    def chat(self, message: str) -> str:
        """Process a user message with RAG."""
        relevant_context = self.knowledge_base.retrieve_relevant_documents(message)
        final_prompt = f"Using this context:\n{'\n'.join(relevant_context)}\nAnswer: {message}"
        return self.llm.predict(final_prompt)

def main():
    chatbot = AzureChatbot(os.path.abspath(".."), "knowledge")
    while True:
        user_input = input("You: ")
        if user_input.lower() in ['quit', 'exit', 'bye']:
            break
        print(f"\nBot: {chatbot.chat(user_input)}\n")

if __name__ == "__main__":
    main()
