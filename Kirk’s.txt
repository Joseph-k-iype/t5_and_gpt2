import os
import logging
from pathlib import Path
from dotenv import dotenv_values
from azure.identity import ClientSecretCredential

# Set up logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def is_file_readable(filepath: str) -> bool:
    """Check if a file exists and is readable."""
    if not os.path.isfile(filepath) or not os.access(filepath, os.R_OK):
        raise FileNotFoundError(f"The file '{filepath}' does not exist or is not readable")
    return True

def str_to_bool(s: str) -> bool:
    """Convert string to boolean."""
    return s.lower() == 'true' if isinstance(s, str) else bool(s)

class OSEnv:
    """Manages environment variables, proxies, and authentication."""

    def __init__(self, base_dir: str):
        """Initialize with configuration files and certificate path from env folder."""
        env_dir = os.path.join(base_dir, "env")  # âœ… Reference parent folder's env
        config_file = os.path.join(env_dir, "config.env")
        creds_file = os.path.join(env_dir, "credentials.env")
        certificate_path = os.path.join(env_dir, "cacert.pem")

        self.var_list = []
        self.bulk_set(config_file, True)
        self.bulk_set(creds_file, False)
        self.set_certificate_path(certificate_path)

        if str_to_bool(self.get("PROXY_ENABLED", "False")):
            self.set_proxy()

        if str_to_bool(self.get("SECURED_ENDPOINTS", "False")):
            self.token = self.get_azure_token()
        else:
            self.token = None

    def bulk_set(self, dotenvfile: str, print_val: bool = False) -> None:
        """Load and set environment variables from a dotenv file."""
        if is_file_readable(dotenvfile):
            env_vars = dotenv_values(dotenvfile)
            for key, value in env_vars.items():
                self.set(key, value, print_val)

    def set(self, var_name: str, val: str, print_val: bool = True) -> None:
        """Set an environment variable."""
        os.environ[var_name] = val
        if var_name not in self.var_list:
            self.var_list.append(var_name)
        if print_val:
            logger.info(f"Set {var_name}={val}")

    def get(self, var_name: str, default: str = None) -> str:
        """Retrieve an environment variable."""
        return os.environ.get(var_name, default)

    def set_certificate_path(self, certificate_path: str) -> None:
        """Set the certificate path for SSL verification."""
        if is_file_readable(certificate_path):
            self.set("REQUESTS_CA_BUNDLE", certificate_path)
            self.set("SSL_CERT_FILE", certificate_path)
            self.set("CURL_CA_BUNDLE", certificate_path)

    def set_proxy(self) -> None:
        """Configure proxy settings if enabled."""
        proxy_domain = self.get("HTTPS_PROXY_DOMAIN")
        if proxy_domain:
            proxy_url = f"http://{proxy_domain}"
            self.set("HTTP_PROXY", proxy_url, print_val=False)
            self.set("HTTPS_PROXY", proxy_url, print_val=False)

    def get_azure_token(self) -> str:
        """Retrieve an Azure authentication token."""
        credential = ClientSecretCredential(
            tenant_id=self.get("AZURE_TENANT_ID"),
            client_id=self.get("AZURE_CLIENT_ID"),
            client_secret=self.get("AZURE_CLIENT_SECRET")
        )
        token = credential.get_token("https://cognitiveservices.azure.com/.default")
        self.set("AZURE_TOKEN", token.token, print_val=False)
        return token.token
