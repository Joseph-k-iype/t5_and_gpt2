import requests
from urllib3.util.retry import Retry
from requests.adapters import HTTPAdapter
import urllib3

class ChromaVectorStore:
    """ChromaDB vector store manager with explicit proxy and SSL handling"""
    
    def __init__(self, env: OSEnv):
        """Initialize with proxy and SSL configuration."""
        self.env = env
        self._configure_urllib()
        self._validate_azure_credentials()
        self.embeddings = self._init_embeddings()
        self.vector_store = None
        self.collection_name = None
        self.client = self._init_chroma_client()
        logger.info("ChromaVectorStore initialized successfully")

    def _configure_urllib(self) -> None:
        """Configure urllib3 with SSL verification settings."""
        try:
            cert_path = self.env.get("SSL_CERT_FILE")
            if not cert_path or not os.path.exists(cert_path):
                raise ValueError("SSL certificate path not found")

            # Configure SSL verification
            urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
            
            logger.info("URLLib3 configured with SSL settings")
        except Exception as e:
            logger.error(f"Failed to configure urllib3: {str(e)}")
            raise

    def _get_http_session(self) -> requests.Session:
        """Create and configure requests session with proxy and SSL."""
        try:
            session = requests.Session()
            
            # Configure retries
            retry_strategy = Retry(
                total=3,
                backoff_factor=1,
                status_forcelist=[429, 500, 502, 503, 504],
            )
            
            # Create adapter with retries
            adapter = HTTPAdapter(max_retries=retry_strategy)
            session.mount("https://", adapter)
            session.mount("http://", adapter)
            
            # Configure SSL verification
            cert_path = self.env.get("SSL_CERT_FILE")
            session.verify = cert_path
            
            # Configure proxy if enabled
            if str_to_bool(self.env.get("PROXY_ENABLED", "False")):
                proxy_url = f"http://{self.env.get('AD_USERNAME')}:{self.env.get('AD_USER_PW')}@{self.env.get('HTTPS_PROXY_DOMAIN')}"
                proxies = {
                    "http": proxy_url,
                    "https": proxy_url
                }
                session.proxies = proxies
                
                # Configure no_proxy
                no_proxy = self.env.get("NO_PROXY", "").split(",")
                session.trust_env = False  # Disable environment proxy settings
                session.proxies['no'] = no_proxy
                
                logger.info("Session configured with proxy settings")
            
            return session
            
        except Exception as e:
            logger.error(f"Failed to create HTTP session: {str(e)}")
            raise

    def _init_embeddings(self) -> AzureOpenAIEmbeddings:
        """Initialize Azure OpenAI embeddings with custom session."""
        try:
            # Get Azure AD token
            token = self.env.get_azure_token(force_refresh=True)
            
            # Create custom session
            session = self._get_http_session()
            
            # Initialize embeddings with custom session
            embeddings = AzureOpenAIEmbeddings(
                deployment="text-embedding-1-large",
                model="text-embedding-1-large",
                api_version="2023-05-15",
                azure_endpoint="https://hsbc-multi-wdac-nonprod-use-openai.openai.azure.com",
                azure_ad_token=token,
                openai_api_type="azure_ad",
                client=session,  # Use custom session
                chunk_size=1,  # Process one at a time initially
                max_retries=3,
                timeout=30.0
            )
            
            # Test connection with retry logic
            max_test_retries = 3
            last_error = None
            
            for attempt in range(max_test_retries):
                try:
                    logger.info(f"Testing embeddings connection (attempt {attempt + 1})...")
                    test_embedding = embeddings.embed_query("test")
                    logger.info(f"Successfully connected to Azure OpenAI embeddings. Dimension: {len(test_embedding)}")
                    return embeddings
                except Exception as e:
                    last_error = e
                    logger.warning(f"Test attempt {attempt + 1} failed: {str(e)}")
                    if attempt < max_test_retries - 1:
                        time.sleep(2 ** attempt)
                        # Refresh session and token
                        session = self._get_http_session()
                        token = self.env.get_azure_token(force_refresh=True)
                        embeddings.client = session
                        embeddings.azure_ad_token = token
            
            raise Exception(f"Failed to initialize embeddings after {max_test_retries} attempts. Last error: {str(last_error)}")
            
        except Exception as e:
            logger.error(f"Failed to initialize Azure OpenAI embeddings: {str(e)}")
            logger.error("Full error details:", exc_info=True)
            raise

    def create_collection(self, csv_path: Path, text_columns: List[str], 
                        chunk_size: int = 1000, chunk_overlap: int = 100,
                        separator: str = " | ", batch_size: int = 50) -> None:
        """Create collection with custom session handling."""
        try:
            logger.info(f"Reading CSV file: {csv_path}")
            df = self._read_csv_safely(csv_path)
            
            # Process documents
            logger.info(f"Processing columns: {', '.join(text_columns)}")
            all_documents = []
            total_rows = len(df)
            
            # Process in small batches
            batch_size = min(batch_size, 25)
            for start_idx in range(0, total_rows, batch_size):
                end_idx = min(start_idx + batch_size, total_rows)
                batch_df = df.iloc[start_idx:end_idx]
                
                batch_documents = self._process_csv_multi_column(
                    batch_df, text_columns, chunk_size, chunk_overlap, separator
                )
                all_documents.extend(batch_documents)
                
                logger.info(f"Processed rows {start_idx + 1} to {end_idx} of {total_rows}")
            
            self.collection_name = csv_path.stem.lower()
            persist_directory = self.env.get("CHROMA_PERSIST_DIR", "./chroma_db")
            os.makedirs(persist_directory, exist_ok=True)
            
            # Create with retry logic
            max_retries = 3
            for attempt in range(max_retries):
                try:
                    logger.info(f"Attempt {attempt + 1} to create Chroma collection...")
                    
                    # Start with small batch
                    initial_documents = all_documents[:5]
                    
                    # Refresh session and token before creation
                    self.embeddings.client = self._get_http_session()
                    self.embeddings.azure_ad_token = self.env.get_azure_token(force_refresh=True)
                    
                    self.vector_store = Chroma.from_documents(
                        documents=initial_documents,
                        embedding=self.embeddings,
                        collection_name=self.collection_name,
                        persist_directory=persist_directory,
                        client=self.client
                    )
                    
                    # If successful, add remaining documents in small batches
                    if len(all_documents) > 5:
                        logger.info("Adding remaining documents...")
                        for i in range(5, len(all_documents), 10):
                            batch = all_documents[i:i + 10]
                            
                            # Refresh session periodically
                            if i % 50 == 0:
                                self.embeddings.client = self._get_http_session()
                                self.embeddings.azure_ad_token = self.env.get_azure_token(force_refresh=True)
                            
                            self.vector_store.add_documents(batch)
                            logger.info(f"Added documents {i} to {i + len(batch)}")
                            time.sleep(0.5)
                    
                    logger.info(f"Created collection '{self.collection_name}' with {len(all_documents)} documents")
                    self.vector_store.persist()
                    return
                    
                except Exception as e:
                    if attempt < max_retries - 1:
                        logger.warning(f"Attempt {attempt + 1} failed: {str(e)}. Retrying...")
                        time.sleep(2 ** attempt)
                    else:
                        raise
            
        except Exception as e:
            logger.error(f"Collection creation failed: {str(e)}")
            raise
