import sys
import os
import logging
import chromadb
from dotenv import dotenv_values
from langchain_openai import AzureChatOpenAI
from langchain.memory import ConversationBufferMemory
from langchain.chains import ConversationalRetrievalChain
from langchain.document_loaders import CSVLoader
from typing import List

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '../oaai_client_sdk_core')))
from azoi_embedding_client import EmbeddingClient

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class KnowledgeBase:
    def __init__(self, config_file: str, creds_file: str, cert_file: str, knowledge_dir: str):
        self.env = dotenv_values(config_file)
        self.embedding_client = EmbeddingClient(config_file, creds_file, cert_file)
        self.knowledge_dir = knowledge_dir
        self.chroma_client = chromadb.PersistentClient(path="./chroma_db")
        self.collection = self.chroma_client.get_or_create_collection(name="csv_knowledge")

    def load_csv_documents(self) -> List[str]:
        """Load CSV documents and return their contents as a list."""
        return [f for f in os.listdir(self.knowledge_dir) if f.endswith(".csv")]

    def store_embeddings(self):
        """Generate and store embeddings for CSV documents in ChromaDB."""
        for file in self.load_csv_documents():
            loader = CSVLoader(file_path=os.path.join(self.knowledge_dir, file))
            docs = loader.load()
            for i, doc in enumerate(docs):
                embedding = self.embedding_client.generate_embeddings(doc.page_content)
                self.collection.add(ids=[f"doc_{i}"], embeddings=[embedding], metadatas=[{"source": "csv"}])

class AzureChatbot:
    def __init__(self, config_file: str, creds_file: str, cert_file: str, knowledge_dir: str):
        self.env = dotenv_values(config_file)
        self.knowledge_base = KnowledgeBase(config_file, creds_file, cert_file, knowledge_dir)
        self.llm = AzureChatOpenAI(
            model_name=self.env.get("MODEL_NAME", "gpt-4"),
            azure_endpoint=self.env.get("AZURE_OPENAI_ENDPOINT"),
            azure_ad_token=self.env.get("AZURE_TOKEN")
        )
        self.memory = ConversationBufferMemory()

    def chat(self, message: str) -> str:
        """Process a user message with RAG."""
        return self.llm.predict(message)

def main():
    chatbot = AzureChatbot("config.env", "credentials.env", "cacert.pem", "knowledge")
    while True:
        user_input = input("You: ").strip()
        if user_input.lower() in ['quit', 'exit', 'bye']:
            break
        print(f"\nBot: {chatbot.chat(user_input)}")

if __name__ == "__main__":
    main()
