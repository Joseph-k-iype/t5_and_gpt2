Yes, let's create a test script to verify the SSL and proxy settings before attempting to connect to Azure OpenAI. Here's a diagnostic script:

```python
import os
import requests
import logging
from urllib.parse import urlparse
import ssl
import socket
import certifi

# Set up detailed logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

def test_ssl_cert():
    """Test if the SSL certificate can be loaded and used"""
    try:
        # Try loading the custom cert
        if os.path.exists('cacert.pem'):
            with open('cacert.pem', 'r') as f:
                cert_content = f.read()
            logger.info("Custom certificate file exists and can be read")
            
            # Try creating an SSL context with the cert
            ssl_context = ssl.create_default_context(cafile='cacert.pem')
            logger.info("SSL context created successfully with custom cert")
        else:
            logger.warning("cacert.pem not found!")
            logger.info(f"Default certifi path: {certifi.where()}")
        return True
    except Exception as e:
        logger.error(f"SSL Certificate Error: {str(e)}")
        return False

def test_proxy_connection(test_url="https://www.google.com"):
    """Test if proxy settings are working"""
    try:
        # Get current proxy settings
        http_proxy = os.environ.get('HTTP_PROXY')
        https_proxy = os.environ.get('HTTPS_PROXY')
        logger.info(f"Current proxy settings - HTTP: {http_proxy}, HTTPS: {https_proxy}")

        # Try a test connection
        proxies = {
            'http': http_proxy,
            'https': https_proxy
        }
        
        # First try with proxy if set
        if http_proxy or https_proxy:
            logger.info("Testing connection with proxy...")
            response = requests.get(test_url, 
                                 proxies=proxies, 
                                 verify='cacert.pem' if os.path.exists('cacert.pem') else True,
                                 timeout=10)
            logger.info(f"Proxy connection successful! Status code: {response.status_code}")
        
        # Then try without proxy
        logger.info("Testing connection without proxy...")
        response = requests.get(test_url, 
                              proxies={'http': None, 'https': None}, 
                              verify='cacert.pem' if os.path.exists('cacert.pem') else True,
                              timeout=10)
        logger.info(f"Direct connection successful! Status code: {response.status_code}")
        
        return True
    except requests.exceptions.SSLError as e:
        logger.error(f"SSL Error during connection test: {str(e)}")
        return False
    except requests.exceptions.ProxyError as e:
        logger.error(f"Proxy Error during connection test: {str(e)}")
        return False
    except requests.exceptions.RequestException as e:
        logger.error(f"Connection Error during test: {str(e)}")
        return False

def test_azure_endpoint(endpoint):
    """Test if Azure endpoint is reachable"""
    try:
        parsed_url = urlparse(endpoint)
        hostname = parsed_url.hostname
        port = parsed_url.port or 443
        
        # Try DNS resolution
        logger.info(f"Attempting to resolve hostname: {hostname}")
        ip_address = socket.gethostbyname(hostname)
        logger.info(f"DNS resolution successful. IP: {ip_address}")
        
        # Try socket connection
        sock = socket.create_connection((hostname, port), timeout=10)
        logger.info("Socket connection successful")
        sock.close()
        
        return True
    except socket.gaierror as e:
        logger.error(f"DNS resolution failed: {str(e)}")
        return False
    except socket.timeout as e:
        logger.error(f"Connection timed out: {str(e)}")
        return False
    except Exception as e:
        logger.error(f"Connection test failed: {str(e)}")
        return False

# Run all tests
print("\n=== Running Diagnostic Tests ===\n")

print("1. Testing SSL Certificate...")
ssl_ok = test_ssl_cert()

print("\n2. Testing Proxy Connection...")
proxy_ok = test_proxy_connection()

print("\n3. Testing Azure Endpoint...")
azure_ok = test_azure_endpoint("your_endpoint")  # Replace with your actual endpoint

print("\n=== Test Summary ===")
print(f"SSL Certificate: {'✓' if ssl_ok else '✗'}")
print(f"Proxy Connection: {'✓' if proxy_ok else '✗'}")
print(f"Azure Endpoint: {'✓' if azure_ok else '✗'}")
```

Run this script first, replacing "your_endpoint" with your actual Azure endpoint. This will help us:
1. Verify if the SSL certificate is properly loaded and valid
2. Check if proxy settings are working or if they're causing issues
3. Test basic connectivity to the Azure endpoint

Based on the results, we can then:
1. Try connecting without a proxy if the proxy test fails
2. Use the default SSL certificates if the custom cert fails
3. Identify any network connectivity issues

After you run this, could you share:
1. Which tests passed/failed?
2. Any specific error messages from the logs?
3. Whether you're able to connect to other HTTPS services from the same environment?​​​​​​​​​​​​​​​​
