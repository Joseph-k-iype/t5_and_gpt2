import pandas as pd
from pptx import Presentation
from pptx.util import Pt
import copy

# Function to generate the report name and replace in first slide
def replace_report_name(prs, report_name):
    slide = prs.slides[0]
    for shape in slide.shapes:
        if shape.has_text_frame:
            if "Report Name Analysis" in shape.text:
                shape.text = shape.text.replace("Report Name", report_name)
                for paragraph in shape.text_frame.paragraphs:
                    for run in paragraph.runs:
                        run.font.size = Pt(10)
                        run.font.name = 'Arial'

# Function to add a row to the table by duplicating the last row
def add_row_to_table(table):
    # Get the XML for the last row and add a new row
    last_row = table._tbl.tr_lst[-1]
    new_row = copy.deepcopy(last_row)
    table._tbl.append(new_row)

    # Clear the content of the new row
    for cell in new_row.iterdescendants():
        if cell.tag.endswith('}tc'):  # Table cell
            for text_element in cell.iter('{http://schemas.openxmlformats.org/wordprocessingml/2006/main}t'):
                text_element.getparent().remove(text_element)

# Function to fill in the table in the second slide
def fill_table_in_slide(slide, df):
    table = slide.shapes[0].table  # Assuming the first shape is the table
    processes = df['Process'].unique()
    
    # Start from the second row (first row is header)
    row_idx = 1

    for hop_count, process in enumerate(processes, start=1):
        process_data = df[df['Process'] == process]
        
        # Produced BDE data
        produced_bdes = process_data['Produced BDE'].notna().sum()
        produced_monitored = process_data[(process_data['Produced BDE'].notna()) & (process_data['Monitored'].notna())]['Produced BDE'].nunique()
        boundary_bdes = process_data[(process_data['Flow Type'] != 'Intra Process') & (process_data['Produced BDE'].notna())]['Produced BDE'].nunique()
        boundary_monitored = process_data[(process_data['Flow Type'] != 'Intra Process') & (process_data['Produced BDE'].notna()) & (process_data['Monitored'].notna())]['Produced BDE'].nunique()
        
        # Metrics data for Produced
        produced_metrics = process_data['Produced Metric'].notna().sum()
        produced_metrics_monitored = process_data[(process_data['Produced Metric'].notna()) & (process_data['Monitored'].notna())]['Produced Metric'].nunique()
        
        # Add Produced data to the table if there is data
        if produced_bdes > 0 or produced_metrics > 0:
            if row_idx >= len(table.rows):
                add_row_to_table(table)  # Ensure a new row is added before accessing
            table.cell(row_idx, 0).text = str(hop_count)  # Hop Count
            table.cell(row_idx, 1).text = process  # Process
            table.cell(row_idx, 2).text = 'Produced'  # Consumed or Produced
            table.cell(row_idx, 3).text = str(produced_bdes)  # Total BDEs
            table.cell(row_idx, 4).text = str(produced_monitored)  # Total BDEs Agreed to Monitor
            table.cell(row_idx, 5).text = f"{(produced_monitored / produced_bdes * 100) if produced_bdes > 0 else 0:.2f}%"  # % BDE Monitored
            table.cell(row_idx, 6).text = str(boundary_bdes)  # BDEs at boundary level
            table.cell(row_idx, 7).text = str(boundary_monitored)  # Boundary BDEs agreed to monitor
            table.cell(row_idx, 8).text = f"{(boundary_monitored / boundary_bdes * 100) if boundary_bdes > 0 else 0:.2f}%"  # % Boundary BDE monitored
            table.cell(row_idx, 9).text = ""  # Clear placeholder text
            table.cell(row_idx, 10).text = ""  # Clear placeholder text
            table.cell(row_idx, 11).text = ""  # Clear placeholder text
            table.cell(row_idx, 12).text = str(produced_metrics)  # Produced Metrics
            table.cell(row_idx, 13).text = str(produced_metrics_monitored)  # Produced Metrics Agreed to Monitor
            table.cell(row_idx, 14).text = f"{(produced_metrics_monitored / produced_metrics * 100) if produced_metrics > 0 else 0:.2f}%"  # % Produced Metrics Monitored
            for col in range(len(table.columns)):
                for paragraph in table.cell(row_idx, col).text_frame.paragraphs:
                    for run in paragraph.runs:
                        run.font.size = Pt(10)
                        run.font.name = 'Arial'
            row_idx += 1

        # Consumed BDE data
        consumed_bdes = process_data['Consumed BDE'].notna().sum()
        consumed_monitored = process_data[(process_data['Consumed BDE'].notna()) & (process_data['Monitored'].notna())]['Consumed BDE'].nunique()
        intra_process_bdes = process_data[(process_data['Flow Type'] == 'Intra Process') & (process_data['Consumed BDE'].notna())]['Consumed BDE'].nunique()
        intra_process_monitored = process_data[(process_data['Flow Type'] == 'Intra Process') & (process_data['Consumed BDE'].notna()) & (process_data['Monitored'].notna())]['Consumed BDE'].nunique()
        
        # Metrics data for Consumed
        consumed_metrics = process_data['Consumed Metric'].notna().sum()
        consumed_metrics_monitored = process_data[(process_data['Consumed Metric'].notna()) & (process_data['Monitored'].notna())]['Consumed Metric'].nunique()
        
        # Add Consumed data to the table if there is data
        if consumed_bdes > 0 or consumed_metrics > 0:
            if row_idx >= len(table.rows):
                add_row_to_table(table)  # Ensure a new row is added before accessing
            table.cell(row_idx, 0).text = str(hop_count)  # Hop Count
            table.cell(row_idx, 1).text = process  # Process
            table.cell(row_idx, 2).text = 'Consumed'  # Consumed or Produced
            table.cell(row_idx, 3).text = str(consumed_bdes)  # Total BDEs
            table.cell(row_idx, 4).text = str(consumed_monitored)  # Total BDEs Agreed to Monitor
            table.cell(row_idx, 5).text = f"{(consumed_monitored / consumed_bdes * 100) if consumed_bdes > 0 else 0:.2f}%"  # % BDE Monitored
            table.cell(row_idx, 6).text = ""  # Clear placeholder text
            table.cell(row_idx, 7).text = ""  # Clear placeholder text
            table.cell(row_idx, 8).text = ""  # Clear placeholder text
            table.cell(row_idx, 9).text = str(intra_process_bdes)  # Intra process BDEs
            table.cell(row_idx, 10).text = str(intra_process_monitored)  # Intra Process BDE Agreed to Monitor
            table.cell(row_idx, 11).text = f"{(intra_process_monitored / intra_process_bdes * 100) if intra_process_bdes > 0 else 0:.2f}%"  # % Intra Process BDE Monitored
            table.cell(row_idx, 12).text = str(consumed_metrics)  # Consumed Metrics
            table.cell(row_idx, 13).text = str(consumed_metrics_monitored)  # Consumed Metrics Agreed to Monitor
            table.cell(row_idx, 14).text = f"{(consumed_metrics_monitored / consumed_metrics * 100) if consumed_metrics > 0 else 0:.2f}%"  # % Consumed Metrics Monitored
            for col in range(len(table.columns)):
                for paragraph in table.cell(row_idx, col).text_frame.paragraphs:
                    for run in paragraph.runs:
                        run.font.size = Pt(10)
                        run.font.name = 'Arial'
            row_idx += 1

        # Ensure every process is covered even if there's no produced or consumed data
        if produced_bdes == 0 and consumed_bdes == 0 and produced_metrics == 0 and consumed_metrics == 0:
            if row_idx >= len(table.rows):
                add_row_to_table(table)  # Ensure a new row is added before accessing
            table.cell(row_idx, 0).text = str(hop_count)  # Hop Count
            table.cell(row_idx, 1).text = process  # Process
            table.cell(row_idx, 2).text = "No Data"  # Mark as no data
            for col in range(3, len(table.columns)):
                table.cell(row_idx, col).text = "0"  # Fill remaining cells with 0 or empty
            for col in range(len(table.columns)):
                for paragraph in table.cell(row_idx, col).text_frame.paragraphs:
                    for run in paragraph.runs:
                        run.font.size = Pt(10)
                        run.font.name = 'Arial'
            row_idx += 1

# Main function to generate the PowerPoint report
def create_report(template_path, output_path, report_name):
    # Load the PowerPoint template
    prs = Presentation(template_path)
    
    # Expanded sample data for more comprehensive testing
    data = {
        'Process': ['abc', 'abc', 'def', 'def', 'ghi', 'ghi', 'xyz', 'xyz'],
        'Produced BDE': ['first BDE', None, None, 'second BDE', 'third BDE', None, None, 'fourth BDE'],
        'Consumed BDE': [None, 'second BDE', 'third BDE', None, None, 'fifth BDE', 'sixth BDE', None],
        'Consumed Metric': [None, None, 'first metric', None, None, 'second metric', 'third metric', None],
        'Produced Metric': [None, 'second metric', None, 'third metric', 'fourth metric', None, None, 'fifth metric'],
        'Monitored': ['https://www.abc.com/ousdhf', None, 'https://www.abc.com/ddik', None, 'https://www.xyz.com/mon', None, None, 'https://www.ghi.com/monitored'],
        'Flow Type': ['Inbound Element', 'Intra Process', 'Process Output', 'Intra Process to Process Output', 'Inbound Element', 'Intra Process', 'Intra Process', 'Process Output']
    }
    df = pd.DataFrame(data)
    
    # Replace the report name in the first slide
    replace_report_name(prs, report_name)
    
    # Fill the table in the second slide
    fill_table_in_slide(prs.slides[1], df)
    
    # Save the final PowerPoint
    prs.save(output_path)
    print(f"Report saved as {output_path}")

# Example usage
if __name__ == "__main__":
    TEMPLATE_PATH = "Report Name Analysis.pptx"
    OUTPUT_PATH = "Generated_Report.pptx"
    REPORT_NAME = input("Enter the report name: ")
    
    create_report(TEMPLATE_PATH, OUTPUT_PATH, REPORT_NAME)
