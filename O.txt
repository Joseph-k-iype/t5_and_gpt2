import argparse
import logging
import os
import sys
from fastapi import FastAPI, Depends
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
import uvicorn
from app.api.routes.enhancement import router as enhancement_router
from app.api.routes.tagging import router as tagging_router
from app.api.routes.settings import router as settings_router
from app.api.routes.dashboard import router as dashboard_router
from app.config.environment import get_os_env, str_to_bool

# Set up logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

# Make sure psutil is installed
try:
    import psutil
except ImportError:
    logger.warning("psutil not installed. Installing...")
    import subprocess
    subprocess.check_call([sys.executable, "-m", "pip", "install", "psutil"])
    import psutil

def create_application(proxy_enabled: bool = None, start_chroma: bool = True) -> FastAPI:
    """
    Create the FastAPI application.
    
    Args:
        proxy_enabled: Whether to use proxy for API connections
        start_chroma: Whether to start the ChromaDB server
    
    Returns:
        FastAPI: The application instance
    """
    # Initialize environment with proxy setting
    env = get_os_env(proxy_enabled=proxy_enabled)
    
    # Create database directory
    chroma_dir = os.environ.get("CHROMA_DB_DIR", "./chroma_db")
    os.makedirs(chroma_dir, exist_ok=True)
    logger.info(f"Ensured database directory exists: {chroma_dir}")
    
    # Start ChromaDB server if requested
    if start_chroma:
        try:
            logger.info("Starting ChromaDB server...")
            # Import here to avoid circular imports
            from app.core.chroma_server import get_chroma_server
            chroma_server = get_chroma_server(persistent_dir=chroma_dir)
            success = chroma_server.start()
            if success:
                logger.info("ChromaDB server started successfully")
            else:
                logger.warning("ChromaDB server could not be started")
        except Exception as e:
            logger.error(f"Error starting ChromaDB server: {e}")
            logger.info("Continuing without ChromaDB server - will use fallback mechanisms")
    
    # Create FastAPI app
    app = FastAPI(
        title="Data Element Enhancement and Tagging API",
        description="API for enhancing data element names and descriptions based on ISO/IEC 11179 standards, and tagging with preferred business terms",
        version="1.0.0",
    )
    
    # Configure CORS
    app.add_middleware(
        CORSMiddleware,
        allow_origins=["*"],  # Restrict in production
        allow_credentials=True,
        allow_methods=["*"],
        allow_headers=["*"],
    )
    
    # Include routers
    app.include_router(enhancement_router)
    app.include_router(tagging_router)
    app.include_router(settings_router)
    app.include_router(dashboard_router, prefix="/api")
    
    # Add static files directory for dashboard assets
    static_dir = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), "static")
    os.makedirs(static_dir, exist_ok=True)
    app.mount("/static", StaticFiles(directory=static_dir), name="static")
    
    @app.get("/health")
    async def health_check():
        """Health check endpoint."""
        return {
            "status": "healthy",
            "proxy_enabled": str_to_bool(env.get("PROXY_ENABLED", "False")),
            "azure_endpoint": env.get("AZURE_ENDPOINT", ""),
            "model": env.get("MODEL_NAME", "gpt-4o"),
            "chroma_dir": chroma_dir
        }
    
    @app.get("/")
    async def root():
        """Root endpoint with basic information."""
        return {
            "application": "Data Element Enhancement and Tagging API",
            "version": "1.0.0",
            "status": "running",
            "documentation": "/docs",
            "dashboard": "/api/dashboard",
            "proxy_enabled": str_to_bool(env.get("PROXY_ENABLED", "False"))
        }
    
    return app

def parse_args():
    """Parse command line arguments."""
    parser = argparse.ArgumentParser(description="ISO/IEC 11179 Data Enhancement API")
    parser.add_argument("--proxy", dest="proxy_enabled", action="store_true", 
                        help="Enable proxy for API connections")
    parser.add_argument("--no-proxy", dest="proxy_enabled", action="store_false", 
                        help="Disable proxy for API connections")
    parser.add_argument("--host", type=str, default="0.0.0.0", 
                        help="Host to bind the server to")
    parser.add_argument("--port", type=int, default=8000, 
                        help="Port to bind the server to")
    parser.add_argument("--reload", action="store_true", 
                        help="Enable auto-reload for development")
    parser.add_argument("--config", type=str, default="env/config.env", 
                        help="Path to configuration file")
    parser.add_argument("--creds", type=str, default="env/credentials.env", 
                        help="Path to credentials file")
    parser.add_argument("--cert", type=str, default="env/cacert.pem", 
                        help="Path to SSL certificate file")
    parser.add_argument("--chroma-server", dest="start_chroma", action="store_true",
                        help="Start the ChromaDB server")
    parser.add_argument("--no-chroma-server", dest="start_chroma", action="store_false",
                        help="Don't start the ChromaDB server")
    parser.add_argument("--chroma-dir", type=str, default="./chroma_db",
                        help="Directory for ChromaDB persistent storage")
    parser.add_argument("--chroma-port", type=int, default=8000,
                        help="Port for ChromaDB server")
    
    parser.set_defaults(proxy_enabled=None, start_chroma=True)  # Default values
    
    return parser.parse_args()

# Create a simple app instance for module import cases
app = create_application(start_chroma=False)

if __name__ == "__main__":
    # For local development with command line arguments
    args = parse_args()
    
    # Set ChromaDB directory in environment
    os.environ["CHROMA_DB_DIR"] = args.chroma_dir
    
    # Log startup configuration
    logger.info(f"Starting server with configuration:")
    logger.info(f"  Host: {args.host}")
    logger.info(f"  Port: {args.port}")
    logger.info(f"  Proxy: {args.proxy_enabled}")
    logger.info(f"  Config file: {args.config}")
    logger.info(f"  Credentials file: {args.creds}")
    logger.info(f"  Certificate file: {args.cert}")
    logger.info(f"  Auto-reload: {args.reload}")
    logger.info(f"  Start ChromaDB server: {args.start_chroma}")
    logger.info(f"  ChromaDB directory: {args.chroma_dir}")
    logger.info(f"  ChromaDB port: {args.chroma_port}")
    
    # Create application with command line arguments
    os.environ["ENV_CONFIG_PATH"] = args.config
    os.environ["ENV_CREDS_PATH"] = args.creds
    os.environ["ENV_CERT_PATH"] = args.cert
    
    # Override the default app with command line configured one
    app = create_application(proxy_enabled=args.proxy_enabled, start_chroma=args.start_chroma)
    
    # Run application directly to avoid module import issues with reload
    if args.reload:
        # For reload mode, use string-based import but with proper error handling
        try:
            uvicorn.run(
                "main:app",
                host=args.host,
                port=args.port,
                reload=True
            )
        except ModuleNotFoundError:
            logger.error("Could not run with reload mode - check your PYTHONPATH")
            # Fallback to direct app instance
            uvicorn.run(
                app,
                host=args.host,
                port=args.port
            )
    else:
        # For normal mode, use direct app instance
        uvicorn.run(
            app,
            host=args.host,
            port=args.port
        )
