You're right - I need to show you how to add the workers parameter to your direct Python implementation. Currently, your `main.py` doesn't have a workers parameter in its argument parser.

Here's how to modify your `main.py` to add support for specifying the number of workers:

## Step 1: Add workers parameter to argparse

Find the `parse_args()` function in `main.py` and add the workers parameter:

```python
def parse_args():
    """Parse command line arguments."""
    parser = argparse.ArgumentParser(description="ISO/IEC 11179 Data Enhancement API")
    parser.add_argument("--proxy", dest="proxy_enabled", action="store_true", 
                        help="Enable proxy for API connections")
    parser.add_argument("--no-proxy", dest="proxy_enabled", action="store_false", 
                        help="Disable proxy for API connections")
    parser.add_argument("--host", type=str, default="0.0.0.0", 
                        help="Host to bind the server to")
    parser.add_argument("--port", type=int, default=8000, 
                        help="Port to bind the server to")
    parser.add_argument("--reload", action="store_true", 
                        help="Enable auto-reload for development")
    # Add workers parameter
    parser.add_argument("--workers", type=int, default=1, 
                        help="Number of worker processes (default: 1)")
    parser.add_argument("--config", type=str, default="env/config.env", 
                        help="Path to configuration file")
    parser.add_argument("--creds", type=str, default="env/credentials.env", 
                        help="Path to credentials file")
    parser.add_argument("--cert", type=str, default="env/cacert.pem", 
                        help="Path to SSL certificate file")
    parser.add_argument("--monitoring-interval", type=int, default=300,
                        help="Interval in seconds for system monitoring (0 to disable)")
    
    # PostgreSQL settings
    parser.add_argument("--pg-host", type=str, help="PostgreSQL host")
    parser.add_argument("--pg-port", type=int, help="PostgreSQL port")
    parser.add_argument("--pg-user", type=str, help="PostgreSQL user")
    parser.add_argument("--pg-password", type=str, help="PostgreSQL password")
    parser.add_argument("--pg-db", type=str, help="PostgreSQL database name")
    
    parser.set_defaults(proxy_enabled=None)  # Default values
    
    return parser.parse_args()
```

## Step 2: Modify the uvicorn run calls to use workers

Find the part where uvicorn is started and update it:

```python
if args.reload:
    # For reload mode, use string-based import but with proper error handling
    try:
        uvicorn.run(
            "main:app",
            host=args.host,
            port=args.port,
            reload=True
        )
    except ModuleNotFoundError:
        logger.error("Could not run with reload mode - check your PYTHONPATH")
        # Fallback to direct app instance
        uvicorn.run(
            app,
            host=args.host,
            port=args.port,
            workers=args.workers  # Add workers parameter
        )
else:
    # For normal mode, use direct app instance
    uvicorn.run(
        app,
        host=args.host,
        port=args.port,
        workers=args.workers  # Add workers parameter
    )
```

## Step 3: Update the logging to display the workers setting

Find the part that logs startup configuration and add workers:

```python
# Log startup configuration
logger.info(f"Starting server with configuration:")
logger.info(f"  Host: {args.host}")
logger.info(f"  Port: {args.port}")
logger.info(f"  Workers: {args.workers}")  # Add this line
logger.info(f"  Proxy: {args.proxy_enabled}")
logger.info(f"  Config file: {args.config}")
logger.info(f"  Credentials file: {args.creds}")
logger.info(f"  Certificate file: {args.cert}")
logger.info(f"  Auto-reload: {args.reload}")
logger.info(f"  Monitoring interval: {args.monitoring_interval}s")
```

## Step 4: Use the updated command

Now you can run with the workers parameter:

```bash
python app/main.py --host 0.0.0.0 --port 8000 --no-proxy --workers 16
```

Note that the `--reload` flag and `--workers` may conflict since reload mode typically does not work with multiple workers. If you specify both, you might see a warning, and reload mode may take precedence over multiple workers.​​​​​​​​​​​​​​​​
