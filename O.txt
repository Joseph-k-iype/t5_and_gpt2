def _setup_qa_chain(self):
    """Set up the QA chain for answering questions."""
    try:
        # Check if vector store is initialized
        if self.chroma_manager.vectorstore is None:
            logger.error("Vector store is None, cannot set up QA chain")
            raise ValueError("Vector store not initialized")
        
        logger.info("Setting up QA chain with metadata support...")
        
        # Get retriever with configured k
        try:
            retriever = self.chroma_manager.get_retriever(
                search_kwargs={"k": self.config.k_documents}
            )
        except Exception as e:
            logger.error(f"Failed to get retriever: {e}")
            # Try again with a smaller k value in case that's the issue
            try:
                logger.info("Trying with a smaller k value (k=1)...")
                retriever = self.chroma_manager.get_retriever(
                    search_kwargs={"k": 1}
                )
            except Exception as e2:
                logger.error(f"Failed to get retriever with k=1: {e2}")
                raise ValueError(f"Could not create retriever: {e2}")
        
        # Define RAG prompt template with explicit metadata instructions
        template = """You are an intelligent assistant answering questions based on a knowledge base of documents and their associated metadata.

Use the following pieces of context to answer the user's question. Pay special attention to any metadata fields such as author, date, category, or keywords that might be relevant to the question.

When the user asks about metadata fields like author, date, category, or any other attributes that are not in the main document text, prioritize the information from the metadata.

Context:
{context}

Question: {question}

In your answer, explicitly reference metadata when it helps answer the question. If the question specifically asks about metadata like "who wrote this document" or "what category is this document", make sure to check the metadata fields in the context first.

Answer:"""
        
        qa_prompt = PromptTemplate(
            template=template,
            input_variables=["context", "question"]
        )
        
        # Create QA chain
        logger.info("Creating RetrievalQA chain...")
        self.qa_chain = RetrievalQA.from_chain_type(
            llm=self.llm,
            chain_type="stuff",
            retriever=retriever,
            return_source_documents=True,
            chain_type_kwargs={"prompt": qa_prompt}
        )
        
        logger.info("QA chain with metadata support initialized successfully")
    except Exception as e:
        logger.error(f"Error setting up QA chain: {e}")
        # Set qa_chain to None to indicate it wasn't initialized
        self.qa_chain = None
        raise
