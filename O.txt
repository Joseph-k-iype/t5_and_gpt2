"""
ChromaDB Server - Standalone server implementation for ChromaDB.

This module provides functionality to start and manage a ChromaDB server process,
which can be used for larger-scale vector storage and retrieval operations.
"""

import os
import logging
import threading
import time
import subprocess
import sys
import signal
from pathlib import Path
import chromadb
from chromadb.config import Settings
from typing import Optional

logger = logging.getLogger(__name__)

class ChromaServer:
    """
    ChromaDB server implementation for local or distributed use.
    
    This class provides methods to start and manage a ChromaDB server
    either as a standalone process or embedded in a thread.
    """
    
    def __init__(self, persistent_dir: str = "./data/chroma_db", port: int = 8001):
        """
        Initialize a ChromaDB server.
        
        Args:
            persistent_dir: Directory for persistent storage
            port: Port to run the server on
        """
        self.persistent_dir = os.path.abspath(persistent_dir)
        self.port = port
        self.server = None
        self.server_thread = None
        self.process = None
        self.is_running = False
        self.telemetry_enabled = False
        self._shutdown_requested = False
    
    def start(self, timeout: int = 30) -> bool:
        """
        Start the ChromaDB server in a separate process or thread.
        
        Args:
            timeout: Maximum time to wait for server startup in seconds
            
        Returns:
            bool: True if server started successfully, False otherwise
        """
        if self.is_running:
            logger.info("ChromaDB server is already running")
            return True
        
        try:
            # Ensure directory exists
            os.makedirs(self.persistent_dir, exist_ok=True)
            
            # First attempt: Try to start standalone server using subprocess
            # This is more reliable than the internal server
            try:
                logger.info(f"Starting ChromaDB standalone server on port {self.port}")
                
                # Get Python executable path
                python_exe = sys.executable
                
                # Start the standalone server
                cmd = [
                    python_exe, 
                    "-m", "chromadb.app",
                    "--host", "0.0.0.0",
                    "--port", str(self.port),
                    "--path", self.persistent_dir,
                    "--telemetry-disabled"  # Disable telemetry
                ]
                
                # Start server in detached process
                self.process = subprocess.Popen(
                    cmd,
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE,
                    text=True,
                    preexec_fn=os.setsid if os.name != 'nt' else None
                )
                
                # Wait for server to start
                start_time = time.time()
                while time.time() - start_time < timeout:
                    # Check if process is still running
                    if self.process.poll() is not None:
                        stdout, stderr = self.process.communicate()
                        logger.error(f"ChromaDB server exited with code {self.process.returncode}")
                        logger.error(f"STDOUT: {stdout}")
                        logger.error(f"STDERR: {stderr}")
                        self.process = None
                        break
                    
                    # Try to connect to the server
                    try:
                        client = chromadb.HttpClient(host="localhost", port=self.port)
                        client.heartbeat()
                        logger.info("ChromaDB standalone server started successfully")
                        self.is_running = True
                        return True
                    except Exception:
                        # Not ready yet, wait a bit
                        time.sleep(1)
                
                # If we get here, the server didn't start properly
                if self.process and self.process.poll() is None:
                    logger.warning("ChromaDB server process is running but not responding")
                    # Continue with running process, it might just be slow to start
                    self.is_running = True
                    return True
                
                logger.error("Failed to start ChromaDB standalone server, falling back to internal server")
                
            except Exception as e:
                logger.warning(f"Failed to start standalone server: {e}")
                
            # Fall back to internal server
            try:
                self._shutdown_requested = False
                
                def run_server():
                    try:
                        logger.info(f"Starting internal ChromaDB server on port {self.port}")
                        
                        # Create and start the server
                        settings = Settings(
                            persist_directory=self.persistent_dir,
                            allow_reset=True,
                            anonymized_telemetry=self.telemetry_enabled  # Explicitly disable telemetry
                        )
                        
                        self.server = chromadb.Server(settings=settings)
                        self.server.run(host="0.0.0.0", port=self.port)
                        
                    except Exception as server_e:
                        if not self._shutdown_requested:
                            logger.error(f"Error running internal ChromaDB server: {server_e}")
                        self.is_running = False
                
                # Start server in a thread
                self.server_thread = threading.Thread(target=run_server, daemon=True)
                self.server_thread.start()
                
                # Wait for server to start
                start_time = time.time()
                while time.time() - start_time < timeout:
                    # Try to connect to the server
                    try:
                        client = chromadb.HttpClient(host="localhost", port=self.port)
                        client.heartbeat()
                        logger.info("ChromaDB internal server started successfully")
                        self.is_running = True
                        return True
                    except Exception:
                        # Not ready yet, wait a bit
                        time.sleep(1)
                
                logger.error(f"Failed to start ChromaDB internal server within {timeout} seconds")
                return False
                    
            except Exception as internal_e:
                logger.error(f"Failed to start internal server: {internal_e}")
                return False
            
        except Exception as e:
            logger.error(f"Failed to start ChromaDB server: {e}")
            return False
    
    def stop(self, timeout: int = 10) -> bool:
        """
        Stop the ChromaDB server.
        
        Args:
            timeout: Maximum time to wait for server shutdown in seconds
            
        Returns:
            bool: True if server stopped successfully, False otherwise
        """
        if not self.is_running:
            logger.info("ChromaDB server is not running")
            return True
        
        try:
            self._shutdown_requested = True
            
            if self.process:
                logger.info("Stopping standalone ChromaDB server")
                
                # Terminate the process group (to ensure child processes are also terminated)
                if os.name != 'nt':  # Unix-like systems
                    try:
                        os.killpg(os.getpgid(self.process.pid), signal.SIGTERM)
                    except Exception as e:
                        logger.warning(f"Error terminating process group: {e}")
                        # Fallback to just terminating the process
                        self.process.terminate()
                else:  # Windows
                    self.process.terminate()
                
                # Wait for process to exit
                try:
                    self.process.wait(timeout=timeout)
                except subprocess.TimeoutExpired:
                    logger.warning(f"ChromaDB server did not exit within {timeout} seconds, force killing...")
                    if os.name != 'nt':  # Unix-like systems
                        try:
                            os.killpg(os.getpgid(self.process.pid), signal.SIGKILL)
                        except Exception:
                            # Fallback to just killing the process
                            self.process.kill()
                    else:  # Windows
                        self.process.kill()
                
                self.process = None
                self.is_running = False
                logger.info("ChromaDB standalone server stopped")
                return True
                
            elif self.server:
                logger.info("Stopping internal ChromaDB server")
                try:
                    self.server.stop()
                    
                    # Wait for server thread to exit
                    if self.server_thread and self.server_thread.is_alive():
                        self.server_thread.join(timeout=timeout)
                        if self.server_thread.is_alive():
                            logger.warning(f"Server thread did not exit within {timeout} seconds")
                    
                    self.server = None
                    self.server_thread = None
                    self.is_running = False
                    logger.info("ChromaDB internal server stopped")
                    return True
                except Exception as e:
                    logger.error(f"Error stopping internal ChromaDB server: {e}")
                    self.is_running = False
                    return False
            
            # If we reach here, nothing was running
            self.is_running = False
            return True
                
        except Exception as e:
            logger.error(f"Error stopping ChromaDB server: {e}")
            self.is_running = False
            return False
    
    def restart(self, timeout: int = 30) -> bool:
        """
        Restart the ChromaDB server.
        
        Args:
            timeout: Maximum time to wait for server operations in seconds
            
        Returns:
            bool: True if server restarted successfully, False otherwise
        """
        logger.info("Restarting ChromaDB server")
        self.stop(timeout=timeout//2)
        time.sleep(1)  # Brief pause to ensure clean shutdown
        return self.start(timeout=timeout//2)
    
    def is_healthy(self) -> bool:
        """
        Check if the ChromaDB server is healthy.
        
        Returns:
            bool: True if server is healthy, False otherwise
        """
        if not self.is_running:
            return False
            
        try:
            # Try to connect to the server
            client = chromadb.HttpClient(host="localhost", port=self.port)
            client.heartbeat()
            return True
        except Exception:
            return False

# Singleton instance
_server_instance = None

def get_chroma_server(persistent_dir: str = "./data/chroma_db", port: int = 8001) -> ChromaServer:
    """
    Get or create a ChromaDB server instance.
    
    Args:
        persistent_dir: Directory for persistent storage
        port: Port to run the server on
        
    Returns:
        ChromaServer: The ChromaDB server instance
    """
    global _server_instance
    if _server_instance is None:
        _server_instance = ChromaServer(persistent_dir, port)
    elif (_server_instance.persistent_dir != os.path.abspath(persistent_dir) or 
          _server_instance.port != port):
        # If configuration changed, stop existing server and create a new one
        _server_instance.stop()
        _server_instance = ChromaServer(persistent_dir, port)
    return _server_instance
