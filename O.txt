"""
Vector Store Interface - Abstract base class defining the interface for vector storage backends.

This module provides a common interface that all vector storage implementations must follow,
allowing the application to switch between different vector database backends seamlessly.
"""

from abc import ABC, abstractmethod
from typing import List, Dict, Any, Optional, Union

class VectorStore(ABC):
    """
    Abstract base class for vector storage and retrieval operations.
    
    This interface defines the methods that any vector store implementation must provide,
    allowing the application to work with different vector database backends without
    changing the business logic.
    """
    
    @abstractmethod
    def store_vector(self, id: str, name: str, description: str, embedding: List[float], metadata: Optional[Dict[str, Any]] = None) -> bool:
        """
        Store a single vector in the database.
        
        Args:
            id: Unique identifier for the term
            name: Name of the term
            description: Description of the term
            embedding: Vector embedding as a list of floats
            metadata: Additional metadata as a dictionary
            
        Returns:
            bool: True if successful, False otherwise
        """
        pass
    
    @abstractmethod
    def batch_store_vectors(self, items: List[Dict[str, Any]]) -> int:
        """
        Store multiple vectors in the database.
        
        Args:
            items: List of dictionaries with id, name, description, embedding, and optional metadata
            
        Returns:
            int: Number of items successfully stored
        """
        pass
    
    @abstractmethod
    def find_similar_vectors(self, query_vector: List[float], top_k: int = 5, threshold: float = 0.5) -> List[Dict[str, Any]]:
        """
        Find similar vectors in the database.
        
        Args:
            query_vector: Vector to compare against
            top_k: Number of results to return
            threshold: Minimum similarity threshold (0-1)
            
        Returns:
            List of dictionaries with id, name, description, similarity, and metadata
        """
        pass
    
    @abstractmethod
    def get_all_terms(self) -> List[Dict[str, Any]]:
        """
        Get all business terms from the database.
        
        Returns:
            List of dictionaries with id, name, description, and metadata
        """
        pass
    
    @abstractmethod
    def get_term_by_id(self, term_id: str) -> Optional[Dict[str, Any]]:
        """
        Get a specific business term by ID.
        
        Args:
            term_id: ID of the term to retrieve
            
        Returns:
            Dictionary with term details or None if not found
        """
        pass
    
    @abstractmethod
    def delete_term(self, term_id: str) -> bool:
        """
        Delete a business term from the database.
        
        Args:
            term_id: ID of the term to delete
            
        Returns:
            True if successful, False otherwise
        """
        pass
    
    @abstractmethod
    def compute_cosine_similarity(self, vector1: List[float], vector2: List[float]) -> float:
        """
        Compute cosine similarity between two vectors.
        
        Args:
            vector1: First vector
            vector2: Second vector
            
        Returns:
            float: Cosine similarity between 0 and 1
        """
        pass
    
    @abstractmethod
    def search_terms(self, query: str, limit: int = 20) -> List[Dict[str, Any]]:
        """
        Search for terms by text query.
        
        Args:
            query: Search query
            limit: Maximum number of results
            
        Returns:
            List of matching terms
        """
        pass
    
    @abstractmethod
    def delete_all_terms(self) -> int:
        """
        Delete all terms in the store.
        
        Returns:
            int: Number of terms deleted
        """
        pass
    
    @property
    def store_type(self) -> str:
        """
        Get the type of vector store.
        
        Returns:
            str: Type of vector store (e.g., "postgresql", "chroma")
        """
        return self.__class__.__name__.lower().replace("vectorstore", "")
    
    def health_check(self) -> Dict[str, Any]:
        """
        Check the health of the vector store.
        
        Returns:
            Dict with health status and details
        """
        try:
            # Attempt to get all terms as a basic check
            terms = self.get_all_terms()
            return {
                "status": "healthy",
                "type": self.store_type,
                "term_count": len(terms)
            }
        except Exception as e:
            return {
                "status": "unhealthy",
                "type": self.store_type,
                "error": str(e)
            }
