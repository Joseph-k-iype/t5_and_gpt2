from typing import Dict, Any, List
import re
import logging
from langchain_core.prompts import PromptTemplate
from langchain_core.output_parsers import StrOutputParser
from langchain_openai import AzureChatOpenAI
from app.core.models import DataElement, EnhancementResult

logger = logging.getLogger(__name__)

class EnhancerAgent:
    def __init__(self, llm: AzureChatOpenAI):
        self.llm = llm
        self._setup_enhancement_chain()
    
    def _setup_enhancement_chain(self):
        template = """
        You are an expert in data governance and ISO/IEC 11179 metadata standards. Your task is to enhance the 
        given data element name and description to meet these standards and represent high-quality metadata.
        
        ISO/IEC 11179 standards for data element names (adapted for business-friendly format):
        - Names MUST be in lowercase with spaces between words.
        - Names MUST NOT use technical formatting like camelCase, snake_case or PascalCase
        - Names MUST NOT contain underscores, hyphens, or special characters
        - Names should be clear, unambiguous and self-describing
        - Names should not use acronyms or abbreviations unless they are universally understood
        - Names should be concise yet descriptive
        - Names should use standard terminology in the domain
        - Names should use business language that non-technical users can understand
        
        ISO/IEC 11179 standards for data element descriptions:
        - Descriptions should clearly define what the data element represents
        - Descriptions should be complete, covering the concept fully
        - Descriptions should be precise, specific enough to distinguish from other concepts
        - Descriptions should be objective and factual, not opinion-based
        - Descriptions should use complete sentences with proper grammar and punctuation
        - Descriptions should be written in business language, not technical jargon
        
        Data Element to Enhance:
        - ID: {id}
        - Current Name: {name}
        - Current Description: {description}
        - Example (if provided): {example}
        - Related Process Name (if provided): {process_name}
        - Related Process Description (if provided): {process_description}
        
        Validation Feedback:
        {validation_feedback}
        
        Based on the ISO/IEC 11179 standards and the validation feedback, enhance this data element.
        
        Provide your enhancement as follows:
        1. Enhanced Name: [provide the improved name - MUST be in lowercase with spaces between words]
        2. Enhanced Description: [provide the improved description]
        3. Enhancement Notes: [explain the changes made and how they improve the compliance with standards]
        4. Confidence Score (0.0-1.0): [provide a confidence score for the enhancement]
        
        IMPORTANT: Do not use any special formatting like asterisks (**) or other markdown formatting in your response.
        
        Make the enhancement business-friendly and ensure they make sense in a business context.
        The names should be simple enough for business users to understand without being technical.
        Use the example and process information provided to add context to your enhancements.
        """
        
        self.enhancement_prompt = PromptTemplate(
            input_variables=["id", "name", "description", "example", "process_name", "process_description", "validation_feedback"],
            template=template)
        self.enhancement_chain = self.enhancement_prompt | self.llm | StrOutputParser()
    
    def _parse_enhancement_result(self, result: str)->EnhancementResult:
        enhanced_name = ""
        enhanced_description = ""
        feedback = ""
        confidence = 0.7  # Default confidence
        
        # Clean up result by removing any markdown or special characters
        result = result.replace("**", "").strip()
        
        lines = result.strip().split("\n")
        for line in lines:
            if "Enhanced Name:" in line:
                enhanced_name = line.split("Enhanced Name:")[1].strip()
                # Remove any quotes if present
                enhanced_name = enhanced_name.strip('"\'[]')
                break
        
        description_start = None
        description_end = None
        
        for i, line in enumerate(lines):
            if "Enhanced Description:" in line:
                description_start = i
            elif description_start is not None and "Enhancement Notes:" in line:
                description_end = i
                break
        
        if description_start is not None:
            if description_end is not None:
                description_lines = lines[description_start:description_end]
            else:
                description_lines = lines[description_start:]
            
            for i, line in enumerate(description_lines):
                if "Enhanced Description:" in line:
                    enhanced_description = line.split("Enhanced Description:")[1].strip()
                    enhanced_description += " " + " ".join([l.strip() for l in description_lines[i+1:]])
            
            # Remove any quotes or brackets if present
            enhanced_description = enhanced_description.strip('"\'[]')
        
        notes_start = None
        notes_end = None
        for i, line in enumerate(lines):
            if "Enhancement Notes:" in line:
                notes_start = i
            elif notes_start is not None and "Confidence Score" in line:
                notes_end = i
                break
        
        if notes_start is not None:
            if notes_end is not None:
                feedback_lines = lines[notes_start:notes_end]
            else:
                feedback_lines = lines[notes_start:]
            
            for i, line in enumerate(feedback_lines):
                if "Enhancement Notes:" in line:
                    feedback = line.split("Enhancement Notes:")[1].strip()
                    feedback += " " + " ".join([l.strip() for l in feedback_lines[i+1:]])
        
        for line in lines:
            if "Confidence Score" in line:
                match = re.search(r"(\d+\.\d+)", line)
                if match:
                    try:
                        confidence = float(match.group(1))
                    except ValueError:
                        logger.warning(f"Failed to parse confidence score from: {line}")
        
        # Ensure confidence is within bounds
        confidence = max(0.0, min(1.0, confidence))
        
        return EnhancementResult(
            enhanced_name=enhanced_name,
            enhanced_description=enhanced_description,
            feedback=feedback,
            confidence=confidence
        )
    
    async def enhance(self, data_element: DataElement, validation_feedback: str) -> EnhancementResult:
        """Enhance a data element based on validation feedback."""
        try:
            result = await self.enhancement_chain.ainvoke({
                "id": data_element.id,
                "name": data_element.existing_name,
                "description": data_element.existing_description,
                "example": data_element.example or "Not provided",
                "process_name": data_element.process_name or "Not provided",
                "process_description": data_element.process_description or "Not provided",
                "validation_feedback": validation_feedback
            })
            
            enhancement_result = self._parse_enhancement_result(result)
            
            # Log enhancement result for debugging
            logger.info(f"Enhanced name: {enhancement_result.enhanced_name}")
            logger.info(f"Enhanced description: {enhancement_result.enhanced_description}")
            logger.info(f"Confidence: {enhancement_result.confidence}")
            
            return enhancement_result
        except Exception as e:
            logger.error(f"Error enhancing data element: {e}")
            # Return minimal enhancement in case of error
            return EnhancementResult(
                enhanced_name=data_element.existing_name,
                enhanced_description=data_element.existing_description,
                feedback=f"Error during enhancement: {str(e)}",
                confidence=0.0
            )
