import logging
from typing import Dict, Any
from fastapi import APIRouter, HTTPException, Depends
from app.config.environment import get_os_env, str_to_bool
from app.config.settings import get_llm
from pydantic import BaseModel

logger = logging.getLogger(__name__)
router = APIRouter(prefix="/api/v1/settings", tags=["settings"])

class ProxySettings(BaseModel):
    """Model for proxy settings."""
    enabled: bool


@router.get("/proxy", response_model=ProxySettings)
async def get_proxy_settings():
    """Get the current proxy settings."""
    try:
        env = get_os_env()
        proxy_enabled = str_to_bool(env.get("PROXY_ENABLED", "False"))
        
        return ProxySettings(
            enabled=proxy_enabled
        )
    except Exception as e:
        logger.error(f"Error retrieving proxy settings: {e}")
        raise HTTPException(status_code=500, detail=f"Error retrieving proxy settings: {str(e)}")


@router.post("/proxy", response_model=ProxySettings)
async def update_proxy_settings(settings: ProxySettings):
    """Update the proxy settings."""
    try:
        # Update the environment with new proxy setting
        env = get_os_env(proxy_enabled=settings.enabled)
        
        # Force recreation of LLM client with new proxy settings
        _ = get_llm(proxy_enabled=settings.enabled)
        
        logger.info(f"Proxy settings updated: enabled={settings.enabled}")
        
        return ProxySettings(
            enabled=settings.enabled
        )
    except Exception as e:
        logger.error(f"Error updating proxy settings: {e}")
        raise HTTPException(status_code=500, detail=f"Error updating proxy settings: {str(e)}")


@router.get("/status", response_model=Dict[str, Any])
async def get_system_status():
    """Get the system status and configuration."""
    try:
        env = get_os_env()
        
        # Get basic environment settings
        status = {
            "proxy_enabled": str_to_bool(env.get("PROXY_ENABLED", "False")),
            "azure_endpoint": env.get("AZURE_ENDPOINT", ""),
            "model": env.get("MODEL_NAME", "gpt-4o"),
            "chroma_dir": env.get("CHROMA_DB_DIR", "./chroma_db"),
            "api_version": env.get("API_VERSION", "2023-05-15"),
            "temperature": float(env.get("TEMPERATURE", "0.3")),
            "max_tokens": int(env.get("MAX_TOKENS", "2000")),
            "secured_endpoints": str_to_bool(env.get("SECURED_ENDPOINTS", "False")),
            "similarity_threshold": float(env.get("SIMILARITY_THRESHOLD", "0.5")),
        }
        
        return status
    except Exception as e:
        logger.error(f"Error retrieving system status: {e}")
        raise HTTPException(status_code=500, detail=f"Error retrieving system status: {str(e)}")
