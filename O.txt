# Data Element Enhancement and Tagging System - Setup Instructions

This document provides detailed instructions for setting up and running the Data Element Enhancement and Tagging System.

## Prerequisites

- Python 3.8 or higher
- Azure OpenAI API access
- Azure AD credentials for authentication

## Project Setup

1. Clone the repository or create a new project directory:

```bash
mkdir data-quality-enhancer
cd data-quality-enhancer
```

2. Run the setup script to create the required folders and files:

```bash
python create_env_folders.py
```

This script will create:
- Application directories
- Environment configuration files
- Empty certificate file if needed
- ChromaDB storage directory

3. Install the required dependencies:

```bash
pip install -r requirements.txt
```

## Configuration

Update the environment configuration files in the `env` directory:

### 1. Azure OpenAI Configuration (`env/config.env`)

```
# Azure OpenAI Configuration
MODEL_NAME=gpt-4o
TEMPERATURE=0.3
MAX_TOKENS=2000
API_VERSION=2023-05-15
AZURE_ENDPOINT=https://your-resource-name.openai.azure.com/

# Embedding Model
EMBEDDING_MODEL=text-embedding-3-large

# Network Settings
PROXY_ENABLED=True  # Set to False if not using a proxy
SECURED_ENDPOINTS=True
USE_MANAGED_IDENTITY=False

# Application Settings
LOG_LEVEL=INFO
MAX_ENHANCEMENT_ITERATIONS=5
```

### 2. Azure Credentials (`env/credentials.env`)

```
# Azure Authentication
AZURE_TENANT_ID=your-tenant-id
AZURE_CLIENT_ID=your-client-id
AZURE_CLIENT_SECRET=your-client-secret

# Proxy Authentication (if PROXY_ENABLED=True)
AD_USERNAME=your-ad-username
AD_USER_PW=your-ad-password
HTTPS_PROXY_DOMAIN=your-proxy-domain
```

### 3. SSL Certificate (if required)

If you need to use a custom SSL certificate for API communications, replace the placeholder content in `env/cacert.pem` with your actual certificate.

## Running the Application

Start the application with:

```bash
uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
```

The application will start and be available at:
- API: http://localhost:8000
- API Documentation: http://localhost:8000/docs

## Initial Setup: Import Business Terms

Before using the tagging functionality, you need to import business terms into the system:

1. Prepare a CSV file with two columns: `name` and `description`.

2. Import the terms using the API:

```bash
curl -X POST "http://localhost:8000/api/v1/terms/import" \
  -H "Content-Type: multipart/form-data" \
  -F "file=@sample_business_terms.csv"
```

Or use the Swagger UI at http://localhost:8000/docs to upload the file.

## Troubleshooting

### Proxy Authentication Issues

If you encounter proxy authentication errors:

1. Check if your proxy is HTTP or HTTPS based
2. Make sure your username and password are correctly formatted
3. Update the `HTTPS_PROXY_DOMAIN` with the correct domain

### Azure Authentication Issues

If Azure authentication fails:

1. Verify your tenant ID, client ID, and client secret
2. Check if your Azure account has access to the OpenAI resources
3. Make sure the API version is correct

### ChromaDB Issues

If you encounter ChromaDB errors:

1. Try deleting the `chroma_db` directory and restarting the application
2. Make sure you have the correct version of ChromaDB installed (0.4.22)
3. Check for enough disk space for the vector database

## Directory Structure

```
data-quality-enhancer/
├── env/                         # Environment configuration files
│   ├── config.env               # Application settings
│   ├── credentials.env          # Azure & proxy credentials
│   ├── cacert.pem               # SSL certificate (if needed)
├── app/
│   ├── __init__.py
│   ├── main.py                  # FastAPI application entry point
│   ├── config/                  # Configuration modules
│   ├── api/routes/              # API endpoints
│   ├── core/                    # Core models and functionality
│   ├── agents/                  # Validator and enhancer agents
│   ├── utils/                   # Utility functions
├── chroma_db/                   # ChromaDB persistent storage
├── requirements.txt             # Dependencies
├── create_env_folders.py        # Setup script
```

## Next Steps

After setting up the application, refer to the following files for usage instructions:
- TAGGING_TUTORIAL.md for tagging functionality
- COMPLETE_PIPELINE.md for end-to-end workflow
