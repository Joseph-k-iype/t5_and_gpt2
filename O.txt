<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Data Quality Dashboard</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/PapaParse/5.3.2/papaparse.min.js"></script>
    <style>
        :root {
            --primary-color: #6366f1;
            --secondary-color: #ec4899;
            --accent-color: #8b5cf6;
            --text-color: #334155;
            --light-text: #94a3b8;
            --background: #f8fafc;
            --card-bg: #ffffff;
            --border-color: #e2e8f0;
            --sidebar-width: 240px;
            --header-height: 70px;
            --border-radius: 12px;
            --shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
        }

        body {
            background: linear-gradient(135deg, #f5f7fa 0%, #e4e8ff 100%);
            color: var(--text-color);
            min-height: 100vh;
            overflow-x: hidden;
        }

        .container {
            display: flex;
            width: 100%;
            min-height: 100vh;
            padding: 20px;
        }

        /* Card Style */
        .card {
            background: var(--card-bg);
            border-radius: var(--border-radius);
            box-shadow: var(--shadow);
            padding: 25px;
            margin-bottom: 24px;
            transition: all 0.3s ease;
            position: relative;
        }

        .card:hover {
            transform: translateY(-3px);
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
        }

        .card-title {
            font-size: 1.1rem;
            font-weight: 600;
            margin-bottom: 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .card-title i {
            color: var(--light-text);
            cursor: pointer;
        }

        /* Sidebar */
        .sidebar {
            width: var(--sidebar-width);
            min-height: 100vh;
            height: 100%;
            background: var(--card-bg);
            border-radius: var(--border-radius);
            padding: 25px 20px;
            margin-right: 20px;
            box-shadow: var(--shadow);
            position: sticky;
            top: 20px;
            align-self: flex-start;
        }

        .logo {
            display: flex;
            align-items: center;
            margin-bottom: 40px;
            padding: 0 10px;
        }

        .logo i {
            font-size: 1.5rem;
            color: var(--primary-color);
            margin-right: 10px;
        }

        .logo h1 {
            font-size: 1.5rem;
            font-weight: 700;
            color: var(--text-color);
        }

        .menu-item {
            display: flex;
            align-items: center;
            padding: 12px 15px;
            border-radius: 8px;
            margin-bottom: 5px;
            color: var(--text-color);
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .menu-item:hover, .menu-item.active {
            background: rgba(99, 102, 241, 0.1);
            color: var(--primary-color);
        }

        .menu-item i {
            margin-right: 12px;
            font-size: 1.1rem;
        }

        .menu-item span {
            font-weight: 500;
            font-size: 0.95rem;
        }

        .toggle-btn {
            background: none;
            border: none;
            color: var(--text-color);
            font-size: 1.5rem;
            cursor: pointer;
            display: none;
            position: fixed;
            top: 20px;
            left: 20px;
            z-index: 1001;
            background: var(--card-bg);
            padding: 5px 10px;
            border-radius: 8px;
            box-shadow: var(--shadow);
        }

        /* Main Content */
        .main-content {
            flex: 1;
            display: flex;
            flex-direction: column;
        }

        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 24px;
            padding: 0 10px;
        }

        .header h1 {
            font-size: 1.8rem;
            font-weight: 700;
            color: var(--text-color);
        }

        .date-display {
            font-size: 0.95rem;
            color: var(--light-text);
            font-weight: 500;
            background: var(--card-bg);
            padding: 8px 15px;
            border-radius: 20px;
            box-shadow: var(--shadow);
        }

        .metrics-row {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 24px;
            margin-bottom: 24px;
        }

        .metric-card {
            padding: 20px;
            display: flex;
            flex-direction: column;
        }

        .metric-title {
            font-size: 0.9rem;
            color: var(--light-text);
            margin-bottom: 5px;
        }

        .metric-value {
            font-size: 1.8rem;
            font-weight: 700;
            color: var(--text-color);
            margin-bottom: 5px;
        }

        .metric-trend {
            display: flex;
            align-items: center;
            font-size: 0.85rem;
        }

        .metric-trend.up {
            color: #10b981;
        }

        .metric-trend.down {
            color: #ef4444;
        }

        .metric-trend i {
            margin-right: 5px;
        }

        .icon-container {
            width: 42px;
            height: 42px;
            border-radius: 10px;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-bottom: 15px;
        }

        .icon-container.purple {
            background: rgba(139, 92, 246, 0.15);
            color: #8b5cf6;
        }

        .icon-container.pink {
            background: rgba(236, 72, 153, 0.15);
            color: #ec4899;
        }

        .icon-container.blue {
            background: rgba(59, 130, 246, 0.15);
            color: #3b82f6;
        }

        .icon-container.orange {
            background: rgba(249, 115, 22, 0.15);
            color: #f97316;
        }

        .charts-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 24px;
            margin-bottom: 24px;
        }

        .chart-container {
            height: 350px;
            position: relative;
            overflow: hidden;
        }

        .chart-container.full-width {
            grid-column: 1 / -1;
        }

        .data-table {
            width: 100%;
            border-collapse: collapse;
        }

        .data-table th,
        .data-table td {
            padding: 12px 15px;
            text-align: left;
            border-bottom: 1px solid var(--border-color);
        }

        .data-table th {
            font-weight: 600;
            color: var(--light-text);
            font-size: 0.85rem;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .data-table tbody tr:hover {
            background-color: rgba(99, 102, 241, 0.05);
        }

        .badge {
            display: inline-block;
            padding: 4px 8px;
            border-radius: 6px;
            font-size: 0.75rem;
            font-weight: 500;
        }

        .badge.primary {
            background: rgba(99, 102, 241, 0.15);
            color: var(--primary-color);
        }

        .badge.secondary {
            background: rgba(236, 72, 153, 0.15);
            color: var(--secondary-color);
        }

        .badge.accent {
            background: rgba(139, 92, 246, 0.15);
            color: var(--accent-color);
        }

        .progress-container {
            height: 8px;
            background: #f1f5f9;
            border-radius: 4px;
            overflow: hidden;
            margin-top: 8px;
        }

        .progress-bar {
            height: 100%;
            border-radius: 4px;
        }

        .file-upload {
            margin-top: 15px;
        }

        .file-upload input[type="file"] {
            display: none;
        }

        .file-upload-label {
            display: inline-block;
            padding: 10px 15px;
            background: rgba(99, 102, 241, 0.1);
            color: var(--primary-color);
            border-radius: 6px;
            cursor: pointer;
            font-weight: 500;
            transition: all 0.2s ease;
        }

        .file-upload-label:hover {
            background: rgba(99, 102, 241, 0.2);
        }

        .upload-btn {
            padding: 10px 15px;
            background: var(--primary-color);
            color: white;
            border: none;
            border-radius: 6px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s ease;
            margin-left: 10px;
        }

        .upload-btn:hover {
            background: #4f46e5;
        }

        /* Mobile responsiveness */
        @media (max-width: 1200px) {
            .metrics-row {
                grid-template-columns: repeat(2, 1fr);
            }
            
            .charts-grid {
                grid-template-columns: 1fr;
            }
        }

        @media (max-width: 768px) {
            .container {
                flex-direction: column;
                padding: 10px;
            }
            
            .sidebar {
                width: 100%;
                min-height: auto;
                margin-right: 0;
                margin-bottom: 20px;
                position: relative;
                top: 0;
            }
            
            .toggle-btn {
                display: block;
            }
            
            .main-content {
                width: 100%;
            }
            
            .header {
                flex-direction: column;
                align-items: flex-start;
            }
            
            .header h1 {
                margin-bottom: 10px;
            }
            
            .metrics-row {
                grid-template-columns: 1fr;
            }
            
            .card {
                padding: 15px;
            }
        }
    </style>
</head>
<body>
    <button class="toggle-btn">
        <i class="fas fa-bars"></i>
    </button>

    <div class="container">
        <div class="sidebar">
            <div class="logo">
                <i class="fas fa-chart-line"></i>
                <h1>DataQuality</h1>
            </div>

            <div class="menu-item active">
                <i class="fas fa-tachometer-alt"></i>
                <span>Dashboard</span>
            </div>
        </div>

        <div class="main-content">
            <div class="header">
                <h1>Data Quality Dashboard</h1>
                <div class="date-display" id="current-date">
                    <i class="far fa-calendar-alt"></i>
                    <span>Loading...</span>
                </div>
            </div>

            <div class="metrics-row">
                <div class="card metric-card">
                    <div class="icon-container purple">
                        <i class="fas fa-exclamation-circle"></i>
                    </div>
                    <div class="metric-title">Data Issues</div>
                    <div class="metric-value" id="data-issues-percent">0%</div>
                    <div class="progress-container">
                        <div class="progress-bar" id="data-issues-progress" style="width: 0%; background: #8b5cf6;"></div>
                    </div>
                </div>
                
                <div class="card metric-card">
                    <div class="icon-container pink">
                        <i class="fas fa-tasks"></i>
                    </div>
                    <div class="metric-title">Top Dimension</div>
                    <div class="metric-value" id="top-dimension">-</div>
                    <div class="metric-trend" id="top-dimension-percent">0% of issues</div>
                </div>
                
                <div class="card metric-card">
                    <div class="icon-container blue">
                        <i class="fas fa-database"></i>
                    </div>
                    <div class="metric-title">Total Incidents</div>
                    <div class="metric-value" id="total-incidents">0</div>
                    <div class="metric-trend" id="issue-ratio">0:0 ratio</div>
                </div>
                
                <div class="card metric-card">
                    <div class="icon-container orange">
                        <i class="fas fa-project-diagram"></i>
                    </div>
                    <div class="metric-title">Data Quality Score</div>
                    <div class="metric-value" id="quality-score">0</div>
                    <div class="progress-container">
                        <div class="progress-bar" id="quality-score-progress" style="width: 0%; background: #f97316;"></div>
                    </div>
                </div>
            </div>

            <div class="charts-grid">                
                <div class="card chart-container">
                    <div class="card-title">
                        <span>Data Issue Distribution</span>
                        <i class="fas fa-ellipsis-h"></i>
                    </div>
                    <canvas id="issueDonutChart"></canvas>
                </div>
                
                <div class="card chart-container">
                    <div class="card-title">
                        <span>Quality Dimensions</span>
                        <i class="fas fa-ellipsis-h"></i>
                    </div>
                    <canvas id="dimensionsBarChart"></canvas>
                </div>
            </div>

            <div class="charts-grid">
                <div class="card chart-container">
                    <div class="card-title">
                        <span>Business Impact Assessment</span>
                        <i class="fas fa-ellipsis-h"></i>
                    </div>
                    <canvas id="businessImpactChart"></canvas>
                </div>
                
                <div class="card chart-container">
                    <div class="card-title">
                        <span>Remediation Priority</span>
                        <i class="fas fa-ellipsis-h"></i>
                    </div>
                    <canvas id="priorityChart"></canvas>
                </div>
            </div>

            <div class="card">
                <div class="card-title">
                    <span>Data Quality Dimension Details</span>
                    <i class="fas fa-ellipsis-h"></i>
                </div>
                <table class="data-table">
                    <thead>
                        <tr>
                            <th>Dimension</th>
                            <th>Count</th>
                            <th>Percentage</th>
                            <th>Correlation</th>
                            <th>Status</th>
                        </tr>
                    </thead>
                    <tbody id="dimension-table-body">
                        <!-- Table data will be populated dynamically -->
                    </tbody>
                </table>
            </div>

            <div class="card" id="file-upload-container">
                <div class="card-title">
                    <span>Upload CSV Data</span>
                    <i class="fas fa-ellipsis-h"></i>
                </div>
                <p>Upload your results.csv file to analyze the data:</p>
                <div class="file-upload">
                    <label for="csv-file-input" class="file-upload-label">
                        <i class="fas fa-file-upload"></i>
                        Choose CSV File
                    </label>
                    <input type="file" id="csv-file-input" accept=".csv" />
                    <button id="upload-btn" class="upload-btn">Upload</button>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Toggle sidebar on mobile
        document.querySelector('.toggle-btn').addEventListener('click', function() {
            document.querySelector('.sidebar').classList.toggle('active');
        });

        // Set current date
        const currentDate = new Date();
        document.getElementById('current-date').innerHTML = `
            <i class="far fa-calendar-alt"></i>
            <span>${currentDate.toLocaleDateString('en-US', {
                weekday: 'short',
                day: 'numeric',
                month: 'short',
                year: 'numeric'
            })}</span>
        `;

        // Sample data for trend chart (will be replaced with real data)
        const trendData = {
            labels: Array.from({length: 14}, (_, i) => {
                const date = new Date();
                date.setDate(date.getDate() - (13 - i));
                return date.toLocaleDateString('en-US', {month: 'short', day: 'numeric'});
            })
        };

        // Chart objects
        let issueDonutChart, dimensionsBarChart, businessImpactChart, priorityChart;

        // Function to calculate statistics from raw CSV data
        function calculateStats(data) {
            // Extract relevant columns
            const isDataIssue = data.map(row => row.is_data_issue === 'true' || row.is_data_issue === true);
            const qualityDimensions = data.map(row => row.data_quality_dimension);
            const confidenceScores = data.map(row => parseFloat(row.confidence_score));

            // Basic counts
            const totalIncidents = data.length;
            const dataIssues = isDataIssue.filter(val => val).length;
            const nonDataIssues = totalIncidents - dataIssues;
            const dataIssuePercentage = (dataIssues / totalIncidents) * 100;
            const nonDataIssuePercentage = 100 - dataIssuePercentage;

            // Dimension analysis
            const dimensionCounts = {};
            const dimensionsArray = [];

            // Only count dimensions where is_data_issue is true
            for (let i = 0; i < data.length; i++) {
                if (isDataIssue[i] && qualityDimensions[i]) {
                    const dimension = qualityDimensions[i];
                    dimensionCounts[dimension] = (dimensionCounts[dimension] || 0) + 1;
                    dimensionsArray.push({
                        dimension: dimension,
                        confidence: confidenceScores[i] || 0
                    });
                }
            }

            // Calculate dimension percentages
            const dimensionPercentages = {};
            Object.keys(dimensionCounts).forEach(dimension => {
                dimensionPercentages[dimension] = (dimensionCounts[dimension] / dataIssues) * 100;
            });

            // Find top dimension
            let topDimension = {name: '-', count: 0, percentage: 0};
            Object.keys(dimensionCounts).forEach(dimension => {
                if (dimensionCounts[dimension] > topDimension.count) {
                    topDimension = {
                        name: dimension,
                        count: dimensionCounts[dimension],
                        percentage: dimensionPercentages[dimension]
                    };
                }
            });

            // Generate business impact assessment based on dimension type
            // This is a simulated assessment based on dimension names
            const businessImpact = {
                high: 0,
                medium: 0,
                low: 0
            };
            
            const highImpactKeywords = ['complete', 'accura', 'valid', 'unique'];
            const mediumImpactKeywords = ['consisten', 'time', 'format'];
            
            Object.keys(dimensionCounts).forEach(dimension => {
                const dimensionLower = dimension.toLowerCase();
                let assigned = false;
                
                // Check for high impact keywords
                for (const keyword of highImpactKeywords) {
                    if (dimensionLower.includes(keyword)) {
                        businessImpact.high += dimensionCounts[dimension];
                        assigned = true;
                        break;
                    }
                }
                
                // Check for medium impact keywords if not already assigned
                if (!assigned) {
                    for (const keyword of mediumImpactKeywords) {
                        if (dimensionLower.includes(keyword)) {
                            businessImpact.medium += dimensionCounts[dimension];
                            assigned = true;
                            break;
                        }
                    }
                }
                
                // If not assigned to high or medium, assign to low
                if (!assigned) {
                    businessImpact.low += dimensionCounts[dimension];
                }
            });
            
            // Calculate a data quality score (scaled 0-100)
            // Higher percentage of data issues = lower score
            const qualityScore = Math.max(0, Math.min(100, Math.round(100 - dataIssuePercentage * 0.8)));
            
            // Generate remediation priority matrix based on count and impact
            const priorityMatrix = [];
            Object.keys(dimensionCounts).forEach(dimension => {
                const dimensionLower = dimension.toLowerCase();
                let impact = 'low';
                
                // Determine impact
                for (const keyword of highImpactKeywords) {
                    if (dimensionLower.includes(keyword)) {
                        impact = 'high';
                        break;
                    }
                }
                
                if (impact === 'low') {
                    for (const keyword of mediumImpactKeywords) {
                        if (dimensionLower.includes(keyword)) {
                            impact = 'medium';
                            break;
                        }
                    }
                }
                
                // Calculate priority score (0-100)
                // Based on frequency and impact
                let priorityScore;
                const frequency = dimensionCounts[dimension] / dataIssues;
                
                if (impact === 'high') {
                    priorityScore = 70 + (frequency * 30);
                } else if (impact === 'medium') {
                    priorityScore = 40 + (frequency * 30);
                } else {
                    priorityScore = frequency * 40;
                }
                
                priorityMatrix.push({
                    dimension: dimension,
                    count: dimensionCounts[dimension],
                    impact: impact,
                    priority: Math.round(priorityScore)
                });
            });
            
            // Sort by priority (descending)
            priorityMatrix.sort((a, b) => b.priority - a.priority);

            // Generate random correlation values
            const correlations = {};
            Object.keys(dimensionCounts).forEach(dimension => {
                correlations[dimension] = dimensionCounts[dimension] / dataIssues;
            });

            // Return structured data
            return {
                counts: {
                    total_incidents: totalIncidents,
                    data_issues: dataIssues,
                    non_data_issues: nonDataIssues,
                    data_issue_percentage: dataIssuePercentage,
                    non_data_issue_percentage: nonDataIssuePercentage
                },
                dimensions: {
                    counts: dimensionCounts,
                    percentages: dimensionPercentages,
                    correlations: correlations,
                    top_dimension: topDimension,
                    total_dimensions: Object.keys(dimensionCounts).length
                },
                business: {
                    quality_score: qualityScore,
                    impact: businessImpact,
                    priority_matrix: priorityMatrix
                }
            };
        }

        // Function to update dashboard with calculated stats
        function updateDashboard(stats) {
            // Update metric cards
            document.getElementById('data-issues-percent').textContent = `${stats.counts.data_issue_percentage.toFixed(1)}%`;
            document.getElementById('data-issues-progress').style.width = `${stats.counts.data_issue_percentage}%`;
            
            document.getElementById('top-dimension').textContent = stats.dimensions.top_dimension.name;
            document.getElementById('top-dimension-percent').textContent = 
                `${stats.dimensions.top_dimension.percentage.toFixed(1)}% of issues`;
            
            document.getElementById('total-incidents').textContent = stats.counts.total_incidents;
            
            // Update issue ratio instead of trend
            const ratio = `${stats.counts.data_issues}:${stats.counts.non_data_issues}`;
            document.getElementById('issue-ratio').textContent = `${ratio} ratio`;
            
            // Update quality score if available
            if (stats.business && stats.business.quality_score !== undefined) {
                document.getElementById('quality-score').textContent = stats.business.quality_score;
                document.getElementById('quality-score-progress').style.width = `${stats.business.quality_score}%`;
                
                // Change progress bar color based on score
                const scoreProgressBar = document.getElementById('quality-score-progress');
                if (stats.business.quality_score >= 80) {
                    scoreProgressBar.style.background = '#10b981'; // Green
                } else if (stats.business.quality_score >= 60) {
                    scoreProgressBar.style.background = '#f97316'; // Orange
                } else {
                    scoreProgressBar.style.background = '#ef4444'; // Red
                }
            }

            // Update dimension table
            updateDimensionTable(stats);
            
            // Update charts
            updateCharts(stats);
        }

        // Function to update the dimension table
        function updateDimensionTable(stats) {
            const tableBody = document.getElementById('dimension-table-body');
            tableBody.innerHTML = ''; // Clear existing rows
            
            // Sort dimensions by count (descending)
            const sortedDimensions = Object.keys(stats.dimensions.counts)
                .sort((a, b) => stats.dimensions.counts[b] - stats.dimensions.counts[a]);
            
            sortedDimensions.forEach(dimension => {
                const count = stats.dimensions.counts[dimension];
                const percentage = stats.dimensions.percentages[dimension];
                const correlation = stats.dimensions.correlations[dimension];
                
                // Get priority information if available
                let priority = 'Low';
                let priorityScore = 0;
                
                if (stats.business && stats.business.priority_matrix) {
                    const priorityInfo = stats.business.priority_matrix.find(item => item.dimension === dimension);
                    if (priorityInfo) {
                        priorityScore = priorityInfo.priority;
                        if (priorityScore >= 70) {
                            priority = 'High';
                        } else if (priorityScore >= 40) {
                            priority = 'Medium';
                        }
                    }
                }
                
                const row = document.createElement('tr');
                
                // Create dimension name cell
                const nameCell = document.createElement('td');
                nameCell.textContent = dimension;
                row.appendChild(nameCell);
                
                // Create count cell
                const countCell = document.createElement('td');
                countCell.textContent = count;
                row.appendChild(countCell);
                
                // Create percentage cell
                const percentageCell = document.createElement('td');
                percentageCell.textContent = `${percentage.toFixed(1)}%`;
                row.appendChild(percentageCell);
                
                // Create correlation cell
                const correlationCell = document.createElement('td');
                correlationCell.textContent = correlation.toFixed(2);
                row.appendChild(correlationCell);
                
                // Create status cell
                const statusCell = document.createElement('td');
                let badgeClass = '';
                
                // Determine badge class based on priority
                if (priority === 'High') {
                    badgeClass = 'badge primary';
                } else if (priority === 'Medium') {
                    badgeClass = 'badge secondary';
                } else {
                    badgeClass = 'badge accent';
                }
                
                statusCell.innerHTML = `<span class="${badgeClass}">${priority}</span>`;
                row.appendChild(statusCell);
                
                tableBody.appendChild(row);
            });
        }

        // Initialize or update all charts
        function updateCharts(stats) {
            // 1. Issue Distribution Donut Chart
            const issueCtx = document.getElementById('issueDonutChart').getContext('2d');
            
            // Destroy existing chart if it exists
            if (issueDonutChart) {
                issueDonutChart.destroy();
            }
            
            // Create chart
            issueDonutChart = new Chart(issueCtx, {
                type: 'doughnut',
                data: {
                    labels: ['Data Issues', 'Non-Data Issues'],
                    datasets: [{
                        data: [
                            stats.counts.data_issue_percentage, 
                            stats.counts.non_data_issue_percentage
                        ],
                        backgroundColor: [
                            '#8b5cf6',
                            '#e2e8f0'
                        ],
                        borderColor: '#ffffff',
                        borderWidth: 2,
                        hoverOffset: 6
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    cutout: '70%',
                    layout: {
                        padding: 15
                    },
                    plugins: {
                        legend: {
                            position: 'bottom',
                            labels: {
                                padding: 20,
                                usePointStyle: true,
                                pointStyle: 'circle',
                                boxWidth: 8,
                                font: {
                                    size: 11
                                }
                            }
                        },
                        tooltip: {
                            backgroundColor: 'rgba(255, 255, 255, 0.9)',
                            titleColor: '#334155',
                            bodyColor: '#334155',
                            borderColor: '#e2e8f0',
                            borderWidth: 1,
                            padding: 10,
                            callbacks: {
                                label: function(context) {
                                    const value = context.parsed;
                                    const total = context.dataset.data.reduce((acc, val) => acc + val, 0);
                                    const percentage = (value * 100 / total).toFixed(1);
                                    return `${context.label}: ${percentage}%`;
                                }
                            }
                        }
                    }
                }
            });
            
            // 2. Dimensions Bar Chart
            const dimensionsCtx = document.getElementById('dimensionsBarChart').getContext('2d');
            
            // Destroy existing chart if it exists
            if (dimensionsBarChart) {
                dimensionsBarChart.destroy();
            }
            
            // Sort dimensions by count (descending)
            const sortedDimensions = Object.keys(stats.dimensions.counts)
                .sort((a, b) => stats.dimensions.counts[b] - stats.dimensions.counts[a])
                .slice(0, 5); // Take top 5 dimensions
            
            // Create chart
            dimensionsBarChart = new Chart(dimensionsCtx, {
                type: 'bar',
                data: {
                    labels: sortedDimensions,
                    datasets: [{
                        label: 'Issue Count',
                        data: sortedDimensions.map(d => stats.dimensions.counts[d]),
                        backgroundColor: [
                            '#8b5cf6',
                            '#ec4899',
                            '#6366f1',
                            '#3b82f6',
                            '#10b981'
                        ],
                        borderRadius: 4
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    indexAxis: 'y',
                    layout: {
                        padding: 15
                    },
                    plugins: {
                        legend: {
                            display: false
                        },
                        tooltip: {
                            backgroundColor: 'rgba(255, 255, 255, 0.9)',
                            titleColor: '#334155',
                            bodyColor: '#334155',
                            borderColor: '#e2e8f0',
                            borderWidth: 1,
                            padding: 10,
                            callbacks: {
                                label: function(context) {
                                    const dimension = context.label;
                                    const count = context.parsed.x;
                                    const percentage = stats.dimensions.percentages[dimension].toFixed(1);
                                    return `Count: ${count} (${percentage}% of issues)`;
                                }
                            }
                        }
                    },
                    scales: {
                        x: {
                            beginAtZero: true,
                            grid: {
                                color: 'rgba(226, 232, 240, 0.5)'
                            },
                            ticks: {
                                precision: 0,
                                font: {
                                    size: 11
                                }
                            }
                        },
                        y: {
                            grid: {
                                display: false
                            },
                            ticks: {
                                font: {
                                    size: 11
                                }
                            }
                        }
                    }
                }
            });
            
            // 3. Business Impact Chart
            if (stats.business && stats.business.impact) {
                const businessImpactCtx = document.getElementById('businessImpactChart').getContext('2d');
                
                // Destroy existing chart if it exists
                if (businessImpactChart) {
                    businessImpactChart.destroy();
                }
                
                const impactData = [
                    stats.business.impact.high || 0,
                    stats.business.impact.medium || 0,
                    stats.business.impact.low || 0
                ];
                
                const totalImpact = impactData.reduce((sum, val) => sum + val, 0);
                const impactPercentages = impactData.map(val => totalImpact > 0 ? (val / totalImpact) * 100 : 0);
                
                // Create chart
                businessImpactChart = new Chart(businessImpactCtx, {
                    type: 'pie',
                    data: {
                        labels: ['High Impact', 'Medium Impact', 'Low Impact'],
                        datasets: [{
                            data: impactData,
                            backgroundColor: [
                                '#ef4444', // Red
                                '#f97316', // Orange
                                '#10b981'  // Green
                            ],
                            borderColor: '#ffffff',
                            borderWidth: 2
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        layout: {
                            padding: 15
                        },
                        plugins: {
                            legend: {
                                position: 'bottom',
                                labels: {
                                    padding: 20,
                                    usePointStyle: true,
                                    pointStyle: 'circle',
                                    boxWidth: 8,
                                    font: {
                                        size: 11
                                    }
                                }
                            },
                            tooltip: {
                                backgroundColor: 'rgba(255, 255, 255, 0.9)',
                                titleColor: '#334155',
                                bodyColor: '#334155',
                                borderColor: '#e2e8f0',
                                borderWidth: 1,
                                padding: 10,
                                callbacks: {
                                    label: function(context) {
                                        const index = context.dataIndex;
                                        const count = context.parsed;
                                        const percentage = impactPercentages[index].toFixed(1);
                                        return `${context.label}: ${count} issues (${percentage}%)`;
                                    }
                                }
                            }
                        }
                    }
                });
            }
            
            // 4. Remediation Priority Chart
            if (stats.business && stats.business.priority_matrix) {
                const priorityCtx = document.getElementById('priorityChart').getContext('2d');
                
                // Destroy existing chart if it exists
                if (priorityChart) {
                    priorityChart.destroy();
                }
                
                // Take top 5 priority items
                const topPriorities = stats.business.priority_matrix.slice(0, 5);
                
                // Create chart
                priorityChart = new Chart(priorityCtx, {
                    type: 'bar',
                    data: {
                        labels: topPriorities.map(item => item.dimension),
                        datasets: [{
                            label: 'Priority Score',
                            data: topPriorities.map(item => item.priority),
                            backgroundColor: topPriorities.map(item => {
                                if (item.priority >= 70) return '#ef4444'; // Red (high)
                                if (item.priority >= 40) return '#f97316'; // Orange (medium)
                                return '#10b981'; // Green (low)
                            }),
                            borderRadius: 4
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        indexAxis: 'y',
                        layout: {
                            padding: 15
                        },
                        plugins: {
                            legend: {
                                display: false
                            },
                            tooltip: {
                                backgroundColor: 'rgba(255, 255, 255, 0.9)',
                                titleColor: '#334155',
                                bodyColor: '#334155',
                                borderColor: '#e2e8f0',
                                borderWidth: 1,
                                padding: 10,
                                callbacks: {
                                    label: function(context) {
                                        const index = context.dataIndex;
                                        const item = topPriorities[index];
                                        return [
                                            `Priority Score: ${item.priority}`,
                                            `Impact: ${item.impact.charAt(0).toUpperCase() + item.impact.slice(1)}`,
                                            `Count: ${item.count} issues`
                                        ];
                                    }
                                }
                            }
                        },
                        scales: {
                            x: {
                                beginAtZero: true,
                                max: 100,
                                grid: {
                                    color: 'rgba(226, 232, 240, 0.5)'
                                },
                                ticks: {
                                    precision: 0,
                                    font: {
                                        size: 11
                                    }
                                },
                                title: {
                                    display: true,
                                    text: 'Priority Score',
                                    font: {
                                        size: 11
                                    }
                                }
                            },
                            y: {
                                grid: {
                                    display: false
                                },
                                ticks: {
                                    font: {
                                        size: 11
                                    }
                                }
                            }
                        }
                    }
                });
            }
        }

        // Load and parse CSV file
        function loadCSV(file) {
            if (!file) {
                console.error('No file provided');
                return;
            }
            
            Papa.parse(file, {
                header: true,
                dynamicTyping: true,
                skipEmptyLines: true,
                complete: function(results) {
                    if (results.errors.length > 0) {
                        console.error('CSV parsing errors:', results.errors);
                        alert('There were errors parsing the CSV file. Check console for details.');
                        return;
                    }
                    
                    // Calculate statistics from the CSV data
                    const stats = calculateStats(results.data);
                    
                    // Update the dashboard with the calculated statistics
                    updateDashboard(stats);
                },
                error: function(error) {
                    console.error('Error loading CSV:', error);
                    alert('Failed to load the CSV file: ' + error);
                }
            });
        }

        // Handle manual file upload
        document.addEventListener('DOMContentLoaded', function() {
            // Set up file upload handler
            const uploadBtn = document.getElementById('upload-btn');
            const fileInput = document.getElementById('csv-file-input');
            
            uploadBtn.addEventListener('click', function() {
                if (fileInput.files.length > 0) {
                    loadCSV(fileInput.files[0]);
                } else {
                    alert('Please select a CSV file to upload.');
                }
            });

            // Initialize empty charts to show placeholders
            const emptyStats = {
                counts: {
                    data_issue_percentage: 0,
                    non_data_issue_percentage: 0
                },
                dimensions: {
                    counts: {},
                    percentages: {},
                    correlations: {}
                },
                business: {
                    impact: {
                        high: 0,
                        medium: 0,
                        low: 0
                    },
                    priority_matrix: []
                }
            };
            
            updateCharts(emptyStats);
        });
    </script>
</body>
</html>
    </script>
</body>
</html>
