def __init__(self, persistent_dir: str):
        self.env = get_os_env()
        self.embedding_client = EmbeddingClient()
        self.persistent_dir = persistent_dir
        self.similarity_threshold = float(self.env.get("SIMILARITY_THRESHOLD", "0.5"))  # 50% similarity threshold
        
        # Set up ChromaDB with error handling
        try:
            self.chroma_client = self._setup_chroma_db()
            logger.info("ChromaDB client initialized successfully")
        except Exception as e:
            logger.error(f"Failed to initialize ChromaDB client: {e}")
            # Fall back to in-memory client
            self.chroma_client = chromadb.Client(
                settings=chromadb.Settings(
                    anonymized_telemetry=False,
                    allow_reset=True
                )
            )
            logger.info("Initialized fallback in-memory ChromaDB client")
        
        try:
            # Try to get existing collection
            self.collection = self.chroma_client.get_collection(
                name="business_terms",
                embedding_function=None
            )
            logger.info("Retrieved collection 'business_terms'")
        except Exception as e:
            logger.info(f"Collection not found, creating new one: {e}")
            try:
                # Create new collection
                self.collection = self.chroma_client.create_collection(
                    name="business_terms",
                    metadata={'hnsw:space': "cosine"},  # Explicitly use cosine similarity
                    embedding_function=None
                )
                logger.info("Created new collection 'business_terms'")
            except Exception as create_error:
                logger.error(f"Failed to create collection: {create_error}")
                # Create an empty placeholder collection
                logger.warning("Using fallback empty collection")
                self.collection = None
