def find_similar_vectors(self, query_vector: List[float], top_k: int = 5, threshold: float = 0.5) -> List[Dict[str, Any]]:
        """
        Find similar vectors in the ChromaDB collection.
        
        Args:
            query_vector: Vector to compare against
            top_k: Number of results to return
            threshold: Minimum similarity threshold (0-1)
            
        Returns:
            List of dictionaries with id, name, description, similarity, and metadata
        """
        try:
            # Request more results than needed to ensure we have enough after filtering
            fetch_k = min(top_k * 4, 100)
            
            # Remove query_params argument - not supported in older versions
            result = self.collection.query(
                query_embeddings=[query_vector],
                n_results=fetch_k,
                include=["metadatas", "distances"]
            )
            
            # Process results
            similar_items = []
            if not result or not result["ids"] or not result["ids"][0]:
                return []
                
            for i, id_val in enumerate(result["ids"][0]):
                # ChromaDB returns distance, not similarity
                # Convert to similarity score (1 - distance)
                distance = result["distances"][0][i]
                similarity = 1.0 - distance
                
                # Filter by threshold
                if similarity >= threshold:
                    metadata = result["metadatas"][0][i]
                    
                    # Extract name and description from metadata
                    name = metadata.get("name", "")
                    description = metadata.get("description", "")
                    
                    # Remove name and description from metadata
                    clean_metadata = {k: v for k, v in metadata.items() 
                                    if k not in ["name", "description"]}
                    
                    similar_items.append({
                        "id": id_val,
                        "name": name,
                        "description": description,
                        "similarity": similarity,
                        "metadata": clean_metadata
                    })
            
            # Sort by similarity (highest first)
            similar_items.sort(key=lambda x: x["similarity"], reverse=True)
            
            # Return only up to top_k items
            return similar_items[:top_k]
        except Exception as e:
            logger.error(f"Error finding similar vectors: {e}")
            return []
