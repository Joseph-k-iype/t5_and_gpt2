// DOM Elements
const uploadArea = document.getElementById('upload-area');
const fileInput = document.getElementById('file-input');
const pdfList = document.getElementById('pdf-list');
const metadataList = document.getElementById('metadata-list');
const metadataInfo = document.getElementById('metadata-info');
const processButton = document.getElementById('process-button');
const statusIndicator = document.getElementById('status-indicator');
const statusDot = statusIndicator.querySelector('.status-dot');
const statusText = statusIndicator.querySelector('.status-text');
const chatMessages = document.getElementById('chat-messages');
const chatInput = document.getElementById('chat-input');
const sendButton = document.getElementById('send-button');
const sourcesContainer = document.getElementById('sources-container');
const infoPanel = document.getElementById('info-panel');
const closeInfoButton = document.getElementById('close-info');
const toastContainer = document.getElementById('toast-container');
const processingModal = document.getElementById('processing-modal');
const metadataModal = document.getElementById('metadata-modal');
const closeMetadataModal = document.getElementById('close-metadata-modal');
const metadataPreviewContent = document.getElementById('metadata-preview-content');

// State Variables
let currentSources = [];
let isProcessing = false;
let activeMetadataFile = null;
let metadataColumns = [];

// Initialization
document.addEventListener('DOMContentLoaded', () => {
    loadFiles();
    loadMetadataInfo();
    setupEventListeners();
    adjustTextareaHeight(chatInput);
});

// Setup Event Listeners
function setupEventListeners() {
    // File Upload
    uploadArea.addEventListener('click', () => fileInput.click());
    fileInput.addEventListener('change', handleFileUpload);
    uploadArea.addEventListener('dragover', (e) => {
        e.preventDefault();
        uploadArea.classList.add('drag-over');
    });
    uploadArea.addEventListener('dragleave', () => {
        uploadArea.classList.remove('drag-over');
    });
    uploadArea.addEventListener('drop', handleFileDrop);
    
    // Process Button
    processButton.addEventListener('click', processKnowledgeBase);
    
    // Chat Interactions
    chatInput.addEventListener('input', () => {
        adjustTextareaHeight(chatInput);
        toggleSendButton();
    });
    chatInput.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            sendMessage();
        }
    });
    sendButton.addEventListener('click', sendMessage);
    
    // Info Panel
    closeInfoButton.addEventListener('click', toggleInfoPanel);
    
    // Metadata Modal
    closeMetadataModal.addEventListener('click', () => {
        metadataModal.classList.remove('active');
    });
}

// File Management Functions
async function loadFiles() {
    try {
        const response = await fetch('/files');
        const data = await response.json();
        
        if (data.success) {
            renderPDFList(data.pdf_files);
            renderMetadataList(data.metadata_files);
            
            // Set active metadata if available
            activeMetadataFile = data.active_metadata;
            
            // Show success message if files are loaded
            if (data.pdf_files.length > 0 || data.metadata_files.length > 0) {
                showToast('info', 'Files Loaded', 'Your files have been loaded successfully');
            }
        } else {
            showToast('error', 'Error', data.message);
        }
    } catch (error) {
        console.error('Error loading files:', error);
        showToast('error', 'Error', 'Failed to load files');
    }
}

function renderPDFList(files) {
    pdfList.innerHTML = '';
    
    if (files.length === 0) {
        pdfList.innerHTML = '<p class="empty-state">No PDF documents uploaded yet</p>';
        return;
    }
    
    for (const file of files) {
        const fileItem = document.createElement('div');
        fileItem.className = 'file-item pdf';
        fileItem.innerHTML = `
            <div class="file-info">
                <i class="fas fa-file-pdf file-icon"></i>
                <span class="file-name">${file.name}</span>
            </div>
            <div class="file-actions">
                <button class="delete-file" data-filename="${file.name}" title="Delete file">
                    <i class="fas fa-trash"></i>
                </button>
            </div>
        `;
        pdfList.appendChild(fileItem);
        
        // Add event listener for delete
        const deleteButton = fileItem.querySelector('.delete-file');
        deleteButton.addEventListener('click', () => deleteFile(file.name));
    }
}

function renderMetadataList(files) {
    metadataList.innerHTML = '';
    
    if (files.length === 0) {
        metadataList.innerHTML = '<p class="empty-state">No metadata files uploaded</p>';
        return;
    }
    
    for (const file of files) {
        const fileItem = document.createElement('div');
        fileItem.className = `file-item csv ${file.active ? 'active' : ''}`;
        fileItem.innerHTML = `
            <div class="file-info">
                <i class="fas fa-file-csv file-icon csv"></i>
                <span class="file-name">${file.name}</span>
            </div>
            <div class="file-actions">
                ${!file.active ? `
                    <button class="activate" data-filename="${file.name}" title="Set as active metadata">
                        <i class="fas fa-check-circle"></i>
                    </button>
                ` : ''}
                <button class="preview-metadata" data-filename="${file.name}" title="Preview metadata">
                    <i class="fas fa-eye"></i>
                </button>
                <button class="delete-file" data-filename="${file.name}" title="Delete file">
                    <i class="fas fa-trash"></i>
                </button>
            </div>
        `;
        metadataList.appendChild(fileItem);
        
        // Add event listeners
        const deleteButton = fileItem.querySelector('.delete-file');
        deleteButton.addEventListener('click', () => deleteFile(file.name));
        
        const previewButton = fileItem.querySelector('.preview-metadata');
        previewButton.addEventListener('click', () => previewMetadata(file.name));
        
        if (!file.active) {
            const activateButton = fileItem.querySelector('.activate');
            activateButton.addEventListener('click', () => activateMetadata(file.name));
        }
    }
}

async function loadMetadataInfo() {
    try {
        const response = await fetch('/metadata-info');
        const data = await response.json();
        
        if (data.success) {
            if (data.active) {
                metadataInfo.classList.add('active');
                metadataColumns = data.columns;
                
                metadataInfo.innerHTML = `
                    <h3>Active Metadata: ${data.filename}</h3>
                    <div class="stats">
                        <div class="stat">
                            <div class="stat-value">${data.row_count}</div>
                            <div class="stat-label">Rows</div>
                        </div>
                        <div class="stat">
                            <div class="stat-value">${data.pdf_count}</div>
                            <div class="stat-label">PDFs Linked</div>
                        </div>
                        <div class="stat">
                            <div class="stat-value">${data.columns.length - 1}</div>
                            <div class="stat-label">Metadata Fields</div>
                        </div>
                    </div>
                    <p>Fields: ${data.columns.filter(col => col !== 'pdf_filename').join(', ')}</p>
                    <p>Sample linked PDFs: ${data.linked_pdfs_sample.join(', ')}</p>
                    <button class="button accent-button small-button preview-btn" data-filename="${data.filename}">
                        <i class="fas fa-table"></i> Preview Data
                    </button>
                `;
                
                // Add event listener for preview button
                const previewBtn = metadataInfo.querySelector('.preview-btn');
                previewBtn.addEventListener('click', () => previewMetadata(data.filename));
            } else {
                metadataInfo.classList.remove('active');
                metadataColumns = [];
            }
        }
    } catch (error) {
        console.error('Error loading metadata info:', error);
    }
}

async function handleFileUpload(event) {
    const files = event.target.files;
    await uploadFiles(files);
    fileInput.value = ''; // Reset input
}

async function handleFileDrop(event) {
    event.preventDefault();
    uploadArea.classList.remove('drag-over');
    const files = event.dataTransfer.files;
    await uploadFiles(files);
}

async function uploadFiles(files) {
    for (const file of files) {
        const fileExt = file.name.split('.').pop().toLowerCase();
        if (fileExt !== 'pdf' && fileExt !== 'csv') {
            showToast('error', 'Invalid File', 'Only PDF and CSV files are allowed');
            continue;
        }
        
        const formData = new FormData();
        formData.append('file', file);
        
        try {
            const response = await fetch('/upload', {
                method: 'POST',
                body: formData
            });
            
            const result = await response.json();
            
            if (result.success) {
                const fileType = fileExt === 'pdf' ? 'PDF' : 'Metadata';
                let message = `${file.name} uploaded successfully`;
                
                if (result.warning) {
                    showToast('warning', `${fileType} Warning`, result.message);
                } else {
                    showToast('success', `${fileType} Uploaded`, message);
                }
                
                // Refresh file lists
                loadFiles();
                
                // If it's a metadata file and was set as active, refresh metadata info
                if (result.is_metadata) {
                    loadMetadataInfo();
                }
            } else {
                showToast('error', 'Upload Failed', result.message);
            }
        } catch (error) {
            console.error('Error uploading file:', error);
            showToast('error', 'Upload Error', 'Failed to upload file');
        }
    }
}

async function deleteFile(filename) {
    try {
        const response = await fetch(`/delete/${filename}`, {
            method: 'DELETE'
        });
        
        const result = await response.json();
        
        if (result.success) {
            const fileType = filename.toLowerCase().endsWith('.csv') ? 'Metadata' : 'PDF';
            showToast('success', `${fileType} Deleted`, `${filename} deleted successfully`);
            
            // Refresh file lists
            loadFiles();
            
            // If it might be a metadata file, refresh metadata info
            if (filename.toLowerCase().endsWith('.csv')) {
                loadMetadataInfo();
            }
        } else {
            showToast('error', 'Deletion Failed', result.message);
        }
    } catch (error) {
        console.error('Error deleting file:', error);
        showToast('error', 'Deletion Error', 'Failed to delete file');
    }
}

async function activateMetadata(filename) {
    try {
        const response = await fetch(`/activate-metadata/${filename}`, {
            method: 'POST'
        });
        
        const result = await response.json();
        
        if (result.success) {
            showToast('success', 'Metadata Activated', result.message);
            activeMetadataFile = filename;
            
            // Refresh file lists and metadata info
            loadFiles();
            loadMetadataInfo();
        } else {
            showToast('error', 'Activation Failed', result.message);
        }
    } catch (error) {
        console.error('Error activating metadata:', error);
        showToast('error', 'Activation Error', 'Failed to activate metadata file');
    }
}

async function previewMetadata(filename) {
    try {
        // Show loading in modal
        metadataPreviewContent.innerHTML = `
            <div class="loading-spinner">
                <div class="spinner"></div>
            </div>
        `;
        metadataModal.classList.add('active');
        
        // For a real implementation, you would fetch the CSV content from the server
        // Here we'll simulate with the metadata info
        const response = await fetch('/metadata-info');
        const data = await response.json();
        
        if (data.success && data.active && data.filename === filename) {
            // Build a simple preview table
            let tableHTML = `
                <h3>Metadata Preview: ${filename}</h3>
                <p>This table shows a preview of your metadata file. Each row links to a PDF document via the pdf_filename column.</p>
                <div class="table-container">
                    <table class="metadata-table">
                        <thead>
                            <tr>
                                ${data.columns.map(col => `<th>${col}</th>`).join('')}
                            </tr>
                        </thead>
                        <tbody>
                            <tr><td colspan="${data.columns.length}" style="text-align: center;">Preview data would appear here</td></tr>
                        </tbody>
                    </table>
                </div>
                <div class="metadata-actions">
                    <button class="button accent-button" id="use-metadata-btn">
                        <i class="fas fa-check"></i> Use this metadata
                    </button>
                </div>
            `;
            
            metadataPreviewContent.innerHTML = tableHTML;
            
            // Add event listener for the use button
            document.getElementById('use-metadata-btn').addEventListener('click', () => {
                activateMetadata(filename);
                metadataModal.classList.remove('active');
            });
        } else {
            metadataPreviewContent.innerHTML = `
                <div class="empty-state">
                    <i class="fas fa-exclamation-circle" style="font-size: 32px; color: var(--warning-color); margin-bottom: 10px;"></i>
                    <p>Could not load preview for ${filename}.</p>
                </div>
            `;
        }
    } catch (error) {
        console.error('Error previewing metadata:', error);
        metadataPreviewContent.innerHTML = `
            <div class="empty-state">
                <i class="fas fa-exclamation-circle" style="font-size: 32px; color: var(--error-color); margin-bottom: 10px;"></i>
                <p>Error loading metadata preview.</p>
            </div>
        `;
    }
}

// Knowledge Base Processing
async function processKnowledgeBase() {
    if (isProcessing) return;
    
    // Update UI
    setStatus('processing', 'Processing...');
    showProcessingModal(true);
    isProcessing = true;
    
    try {
        const response = await fetch('/process', {
            method: 'POST'
        });
        
        const result = await response.json();
        
        if (result.success) {
            showToast('success', 'Processing Complete', result.message);
            addSystemMessage(`${result.message}. You can now ask questions about your documents.`);
            setStatus('online', 'Ready');
        } else {
            showToast('error', 'Processing Failed', result.message);
            addSystemMessage('Failed to process knowledge base. Please try again.');
            setStatus('offline', 'Error');
        }
    } catch (error) {
        console.error('Error processing knowledge base:', error);
        showToast('error', 'Processing Error', 'Failed to process knowledge base');
        addSystemMessage('Error processing knowledge base. Please try again later.');
        setStatus('offline', 'Error');
    } finally {
        showProcessingModal(false);
        isProcessing = false;
    }
}

// Chat Functions
function sendMessage() {
    const message = chatInput.value.trim();
    if (!message) return;
    
    // Add user message to chat
    addMessage('user', message);
    
    // Clear input
    chatInput.value = '';
    adjustTextareaHeight(chatInput);
    toggleSendButton();
    
    // Send to server
    askQuestion(message);
}

async function askQuestion(question) {
    setStatus('processing', 'Thinking...');
    
    try {
        const response = await fetch('/ask', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ question })
        });
        
        const result = await response.json();
        
        if (result.success) {
            addMessage('bot', result.answer);
            
            // Update sources
            currentSources = result.sources;
            updateSourcesPanel();
            
            // Show sources panel if there are sources
            if (currentSources.length > 0) {
                infoPanel.classList.add('active');
            }
            
            setStatus('online', 'Ready');
        } else {
            addMessage('bot', 'I encountered an error: ' + result.message);
            setStatus('offline', 'Error');
        }
    } catch (error) {
        console.error('Error asking question:', error);
        addMessage('bot', 'Sorry, I encountered an error while processing your question. Please try again.');
        setStatus('offline', 'Error');
    }
}

function addMessage(type, content) {
    const messageDiv = document.createElement('div');
    messageDiv.className = `message ${type}`;
    
    const currentTime = new Date();
    const formattedTime = `${currentTime.getHours().toString().padStart(2, '0')}:${currentTime.getMinutes().toString().padStart(2, '0')}`;
    
    messageDiv.innerHTML = `
        <div class="message-content">
            <p>${formatMessageContent(content)}</p>
        </div>
        <div class="message-time">${formattedTime}</div>
    `;
    
    chatMessages.appendChild(messageDiv);
    chatMessages.scrollTop = chatMessages.scrollHeight;
}

function addSystemMessage(content) {
    const messageDiv = document.createElement('div');
    messageDiv.className = 'message system';
    
    messageDiv.innerHTML = `
        <div class="message-content">
            <p>${content}</p>
        </div>
    `;
    
    chatMessages.appendChild(messageDiv);
    chatMessages.scrollTop = chatMessages.scrollHeight;
}

function formatMessageContent(content) {
    // Replace new lines with <br> tags
    return content.replace(/\n/g, '<br>');
}

// Sources Panel Functions
function updateSourcesPanel() {
    sourcesContainer.innerHTML = '';
    
    if (currentSources.length === 0) {
        sourcesContainer.innerHTML = '<p class="empty-state">No sources available yet. Ask a question to see information sources.</p>';
        return;
    }
    
    for (const source of currentSources) {
        const sourceItem = document.createElement('div');
        sourceItem.className = 'source-item';
        
        // Check if this source has metadata
        const hasMetadata = source.metadata && Object.keys(source.metadata).length > 0;
        
        let metadataHTML = '';
        if (hasMetadata) {
            metadataHTML = `
                <div class="source-metadata">
                    ${Object.entries(source.metadata).map(([key, value]) => 
                        `<div class="metadata-tag"><span>${key}:</span> ${value}</div>`
                    ).join('')}
                </div>
            `;
        }
        
        sourceItem.innerHTML = `
            <div class="source-header">
                <div>
                    <i class="fas fa-file-pdf"></i> ${source.source}
                </div>
                ${hasMetadata ? '<span class="metadata-badge">Metadata</span>' : ''}
            </div>
            <div class="source-content">${source.content}</div>
            ${metadataHTML}
        `;
        
        sourcesContainer.appendChild(sourceItem);
    }
}

function toggleInfoPanel() {
    infoPanel.classList.toggle('active');
}

// UI Helper Functions
function adjustTextareaHeight(textarea) {
    textarea.style.height = 'auto';
    textarea.style.height = `${Math.min(textarea.scrollHeight, 150)}px`;
}

function toggleSendButton() {
    const hasContent = chatInput.value.trim().length > 0;
    sendButton.disabled = !hasContent;
}

function setStatus(state, text) {
    statusDot.className = 'status-dot';
    statusDot.classList.add(state);
    statusText.textContent = text;
}

function showToast(type, title, message) {
    const toast = document.createElement('div');
    toast.className = `toast ${type}`;
    
    let iconClass = 'fa-info-circle';
    if (type === 'success') iconClass = 'fa-check-circle';
    if (type === 'error') iconClass = 'fa-exclamation-circle';
    if (type === 'warning') iconClass = 'fa-exclamation-triangle';
    
    toast.innerHTML = `
        <div class="toast-icon"><i class="fas ${iconClass}"></i></div>
        <div class="toast-content">
            <div class="toast-title">${title}</div>
            <div class="toast-message">${message}</div>
        </div>
    `;
    
    toastContainer.appendChild(toast);
    
    // Auto remove after 5 seconds
    setTimeout(() => {
        toast.remove();
    }, 5000);
}

function showProcessingModal(show) {
    if (show) {
        processingModal.classList.add('active');
    } else {
        processingModal.classList.remove('active');
    }
}

// Add a responsive menu toggle for mobile devices
function addMobileSupport() {
    const sidebar = document.querySelector('.sidebar');
    
    // Create toggle button
    const toggleButton = document.createElement('button');
    toggleButton.className = 'toggle-sidebar-button';
    toggleButton.innerHTML = '<i class="fas fa-bars"></i>';
    document.body.appendChild(toggleButton);
    
    toggleButton.addEventListener('click', () => {
        sidebar.classList.toggle('active');
    });
    
    // Close sidebar when clicking outside of it on mobile
    document.addEventListener('click', (e) => {
        if (window.innerWidth <= 768 && 
            !sidebar.contains(e.target) && 
            e.target !== toggleButton) {
            sidebar.classList.remove('active');
        }
    });
}

// Check if we're on a mobile device
if (window.innerWidth <= 768) {
    addMobileSupport();
}

// Handle window resize for responsiveness
window.addEventListener('resize', () => {
    if (window.innerWidth <= 768) {
        if (!document.querySelector('.toggle-sidebar-button')) {
            addMobileSupport();
        }
    }
});
