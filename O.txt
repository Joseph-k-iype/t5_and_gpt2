"""
Bootstrap GCP Authentication - Utility for bootstrapping GCP authentication.

This module provides functionality to bootstrap GCP authentication without
having credentials stored locally, by using alternative authentication methods
(instance identity, environment variables, etc.) to access an initial service account.
"""

import os
import json
import logging
import tempfile
import atexit
from typing import Optional, Dict, Any, Tuple
import requests
import traceback

logger = logging.getLogger(__name__)

# Dictionary to track temp files, so we can clean them up on exit
_temp_cred_files = {}

def cleanup_temp_cred_files():
    """Clean up any temporary credential files on application exit."""
    for path in _temp_cred_files.values():
        try:
            if os.path.exists(path):
                os.remove(path)
                logger.info(f"Cleaned up temporary credential file: {path}")
        except Exception as e:
            logger.error(f"Error cleaning up temporary credential file {path}: {e}")

# Register cleanup function to run at exit
atexit.register(cleanup_temp_cred_files)

def get_gcp_metadata_token() -> Optional[str]:
    """
    Try to get a token from GCP instance metadata.
    This will only work when running on GCP VMs or Cloud Run.
    
    Returns:
        str: Access token or None if not available
    """
    try:
        logger.info("Attempting to get token from GCP metadata server...")
        metadata_url = "http://metadata.google.internal/computeMetadata/v1/instance/service-accounts/default/token"
        headers = {"Metadata-Flavor": "Google"}
        response = requests.get(metadata_url, headers=headers, timeout=2)
        
        if response.status_code == 200:
            token_data = response.json()
            token = token_data.get("access_token")
            logger.info("Successfully obtained token from GCP metadata server")
            return token
        logger.info(f"Failed to get token from metadata server: {response.status_code} - {response.text}")
        return None
    except Exception as e:
        logger.debug(f"Could not get metadata token (likely not running on GCP): {e}")
        return None

def get_adc_token() -> Optional[str]:
    """
    Try to get a token from Application Default Credentials.
    This could be from gcloud auth or environment variable.
    
    Returns:
        str: Access token or None if not available
    """
    try:
        logger.info("Attempting to get token from Application Default Credentials...")
        from google.auth.transport.requests import Request
        from google.auth import default
        
        credentials, _ = default(scopes=['https://www.googleapis.com/auth/cloud-platform'])
        
        # Refresh the credentials if necessary
        if hasattr(credentials, 'valid') and not credentials.valid:
            credentials.refresh(Request())
        
        if hasattr(credentials, 'token'):
            logger.info("Successfully obtained token from Application Default Credentials")
            return credentials.token
        
        logger.info("ADC credentials don't have a token attribute")
        return None
    except Exception as e:
        logger.warning(f"Could not get ADC token: {e}")
        return None

def get_env_var_credentials() -> Optional[Tuple[str, str, str]]:
    """
    Try to get credentials from environment variables.
    
    Returns:
        Tuple containing (project_id, client_email, private_key) or None
    """
    try:
        logger.info("Checking for service account details in environment variables...")
        client_email = os.environ.get("GCP_CLIENT_EMAIL")
        private_key = os.environ.get("GCP_PRIVATE_KEY")
        project_id = os.environ.get("GCP_PROJECT_ID")
        
        if all([client_email, private_key, project_id]):
            logger.info("Found service account details in environment variables")
            return (project_id, client_email, private_key)
        
        logger.info("Service account details not found in environment variables")
        return None
    except Exception as e:
        logger.warning(f"Error getting credentials from environment variables: {e}")
        return None

def bootstrap_storage_client():
    """
    Create a GCP Storage client using available auth methods.
    
    Returns:
        storage.Client: Authenticated GCP Storage client
    """
    from google.cloud import storage
    
    # Try different methods to get authentication
    token = get_gcp_metadata_token() or get_adc_token()
    
    if token:
        # Create storage client with the token
        logger.info("Creating storage client with OAuth token")
        from google.auth import credentials
        from google.auth.transport.requests import AuthorizedSession
        
        class TokenCredentials(credentials.Credentials):
            def __init__(self, token):
                self.token = token
                self.expiry = None
                
            def refresh(self, request):
                pass
                
            @property
            def valid(self):
                return True
                
            def apply(self, headers, token=None):
                headers["Authorization"] = f"Bearer {self.token}"
                
        creds = TokenCredentials(token)
        client = storage.Client(credentials=creds)
        return client
    
    # Try with environment variables
    env_creds = get_env_var_credentials()
    if env_creds:
        logger.info("Creating storage client with environment variable credentials")
        project_id, client_email, private_key = env_creds
        
        from google.oauth2 import service_account
        import io
        
        # Create a JSON service account info dictionary
        sa_info = {
            "type": "service_account",
            "project_id": project_id,
            "private_key": private_key,
            "client_email": client_email,
            "token_uri": "https://oauth2.googleapis.com/token"
        }
        
        # Create credentials from dict
        creds = service_account.Credentials.from_service_account_info(
            sa_info, 
            scopes=['https://www.googleapis.com/auth/cloud-platform']
        )
        
        client = storage.Client(credentials=creds, project=project_id)
        return client
    
    # Fall back to default credentials
    try:
        logger.info("Attempting to create storage client with default credentials")
        client = storage.Client()
        logger.info("Successfully created storage client with default credentials")
        return client
    except Exception as e:
        logger.error(f"Could not create storage client with default credentials: {e}")
        logger.error(f"Detailed exception: {traceback.format_exc()}")
        raise

def fetch_service_account_json(bucket_name: str, object_path: str) -> Optional[str]:
    """
    Fetch the service account JSON file from GCP Storage.
    
    Args:
        bucket_name: GCP bucket name
        object_path: Path to service account file in bucket
        
    Returns:
        str: Path to temporary service account file or None if not available
    """
    cache_key = f"{bucket_name}/{object_path}"
    
    # If we've already processed this path, return the cached result
    if cache_key in _temp_cred_files:
        return _temp_cred_files[cache_key]
    
    try:
        logger.info(f"Attempting to fetch service account JSON from gs://{bucket_name}/{object_path}")
        
        # Create a bootstrapped storage client
        storage_client = bootstrap_storage_client()
        
        # Create a temporary file to store the service account
        fd, temp_path = tempfile.mkstemp(suffix='.json')
        os.close(fd)  # Close the file descriptor
        
        logger.info(f"Created temporary file for service account: {temp_path}")
        
        # Download file from GCP
        bucket = storage_client.bucket(bucket_name)
        logger.info(f"Accessing bucket: {bucket_name}")
        
        blob = bucket.blob(object_path)
        logger.info(f"Accessing blob: {object_path}")
        
        # Check if blob exists
        if not blob.exists():
            logger.error(f"Service account file does not exist at gs://{bucket_name}/{object_path}")
            return None
        
        logger.info(f"Downloading service account JSON file...")
        blob.download_to_filename(temp_path)
        
        # Verify the downloaded file
        try:
            with open(temp_path, 'r') as f:
                service_account_data = json.load(f)
                # Check if it looks like a service account file
                required_keys = ["type", "project_id", "private_key", "client_email"]
                if not all(key in service_account_data for key in required_keys):
                    logger.warning("Downloaded JSON doesn't look like a valid service account file")
                else:
                    logger.info("Service account JSON file validated successfully")
        except Exception as e:
            logger.error(f"Error validating service account JSON: {e}")
            # Continue anyway, as it might still work
        
        # Cache the temp path for future requests and cleanup
        _temp_cred_files[cache_key] = temp_path
        
        # Set environment variable to point to this file
        os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = temp_path
        
        logger.info(f"Service account downloaded to {temp_path} and set as GOOGLE_APPLICATION_CREDENTIALS")
        return temp_path
    
    except Exception as e:
        logger.error(f"Error downloading service account from GCP: {e}")
        logger.error(f"Detailed exception: {traceback.format_exc()}")
        return None
