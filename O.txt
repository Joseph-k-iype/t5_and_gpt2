"""
Tagging Agent - Matches enhanced data elements with business terms.
This module provides functionality to semantically match data elements with appropriate
business terms using both LLM-based semantic matching and vector similarity search.
"""

import logging
from typing import Dict, Any, List, Optional, Tuple
from pydantic import BaseModel, Field
from langchain_core.prompts import PromptTemplate
from langchain_core.output_parsers import StrOutputParser
from langchain_openai import AzureChatOpenAI
from app.core.models import TaggingResult, TaggingValidationResult
from app.core.business_terms import BusinessTermManager

logger = logging.getLogger(__name__)

class MatchedTerm(BaseModel):
    """Model representing a matched business term."""
    id: str = Field(..., description="Unique identifier for the business term")
    name: str = Field(..., description="Name of the business term")
    description: str = Field(..., description="Description of the business term")
    confidence: float = Field(..., description="Confidence score of the match")
    category: Optional[str] = Field(None, description="Category of the business term")
    
    def dict(self) -> Dict[str, Any]:
        """Convert to dictionary with non-None values."""
        result = {
            "id": self.id,
            "name": self.name,
            "description": self.description,
            "confidence": self.confidence
        }
        if self.category:
            result["category"] = self.category
        return result

class ContextualMatchResult(BaseModel):
    """Model representing the result of contextual matching."""
    is_match: bool = Field(..., description="Whether the match is contextually correct")
    confidence: float = Field(..., description="Confidence score for the match")
    reasoning: str = Field(..., description="Reasoning for the decision")
    suggested_term_id: Optional[str] = Field(None, description="ID of a better match if any")

class TaggingAgent:
    """Agent for matching data elements with business terms based on LLM matching and vector similarity."""
    
    def __init__(self, llm: AzureChatOpenAI):
        """Initialize the tagging agent with a language model."""
        self.llm = llm
        self.business_term_manager = BusinessTermManager()
        self._setup_llm_matching_chain()
        self._setup_validation_chain()
    
    def _setup_llm_matching_chain(self):
        """Set up the LangChain prompt for LLM-based semantic matching."""
        llm_matching_template = """
        You are a data governance expert responsible for matching data elements to standardized business terms.
        Your task is to find the most semantically appropriate business terms for a given data element.
        
        Data Element:
        - Name: {element_name}
        - Description: {element_description}
        
        Available Business Terms:
        {business_terms}
        
        Your task:
        1. Analyze the data element's semantic meaning
        2. Review all available business terms
        3. Identify the top 3 most semantically appropriate terms for this data element
        4. For each selected term, provide:
           - Term ID
           - Confidence score (0.0-1.0) representing how appropriate the match is
           - Brief justification for why this term is appropriate
        
        Consider:
        - Conceptual alignment (does the term represent the same real-world concept?)
        - Specificity (is the match at the right level of detail?)
        - Domain context (is the term used in the right business context?)
        - Common patterns (e.g., "account number" often maps to "account identifier")
        
        Format your response as follows:
        MATCH 1:
        Term ID: [term ID]
        Confidence: [score between 0.0-1.0]
        Justification: [brief explanation]
        
        MATCH 2:
        Term ID: [term ID]
        Confidence: [score between 0.0-1.0]
        Justification: [brief explanation]
        
        MATCH 3:
        Term ID: [term ID]
        Confidence: [score between 0.0-1.0]
        Justification: [brief explanation]
        """
        
        self.llm_matching_prompt = PromptTemplate(
            input_variables=["element_name", "element_description", "business_terms"],
            template=llm_matching_template)
        
        self.llm_matching_chain = self.llm_matching_prompt | self.llm | StrOutputParser()
    
    def _setup_validation_chain(self):
        """Set up the LangChain prompt for contextual validation."""
        contextual_validation_template = """
        You are a data governance expert specializing in matching data elements with standard business terms.
        Your task is to evaluate whether a suggested business term is contextually appropriate for a given data element.
        
        Data Element:
        - Name: {element_name}
        - Description: {element_description}
        
        Suggested Business Term:
        - Name: {term_name}
        - Description: {term_description}
        - Category: {term_category}
        - Similarity Score: {similarity_score}
        
        Other Potential Terms:
        {other_terms}
        
        Consider the following in your evaluation:
        1. Semantic meaning - do the element and term refer to the same concept?
        2. Domain context - are they used in the same business context?
        3. Level of specificity - is the term at the appropriate level of detail?
        4. Common usage - would business users recognize this mapping as appropriate?
        
        Provide your analysis in the following format:
        1. Contextual Match: [YES/NO]
        2. Confidence (0.0-1.0): [score]
        3. Reasoning: [detailed explanation]
        4. Better Match (if any): [ID of better term from the list or "None"]
        
        Be objective and thorough in your analysis. Focus on business meaning rather than just lexical similarity.
        """
        
        self.contextual_validation_prompt = PromptTemplate(
            input_variables=["element_name", "element_description", "term_name", "term_description", 
                            "term_category", "similarity_score", "other_terms"],
            template=contextual_validation_template)
        
        self.validation_chain = self.contextual_validation_prompt | self.llm | StrOutputParser()
    
    def _format_business_terms_for_llm(self, terms: List[Dict[str, Any]]) -> str:
        """Format business terms for LLM prompt."""
        result = ""
        for i, term in enumerate(terms):
            result += f"TERM {i+1}:\n"
            result += f"ID: {term['id']}\n"
            result += f"Name: {term['name']}\n"
            result += f"Description: {term['description']}\n"
            if term.get('metadata') and term['metadata'].get('category'):
                result += f"Category: {term['metadata']['category']}\n"
            result += "\n"
        return result
    
    def _parse_llm_matches(self, response: str) -> List[Dict[str, Any]]:
        """Parse the LLM response to extract matched terms."""
        matches = []
        current_match = {}
        
        lines = response.strip().split('\n')
        for line in lines:
            line = line.strip()
            if not line:
                continue
                
            if line.startswith("MATCH"):
                # Save previous match if exists
                if current_match and 'id' in current_match and 'confidence' in current_match:
                    matches.append(current_match)
                # Start new match
                current_match = {}
            elif "Term ID:" in line:
                current_match['id'] = line.split("Term ID:")[1].strip()
            elif "Confidence:" in line:
                try:
                    confidence = float(line.split("Confidence:")[1].strip())
                    current_match['confidence'] = max(0.0, min(1.0, confidence))  # Clamp between 0 and 1
                except ValueError:
                    current_match['confidence'] = 0.5  # Default if parsing fails
            elif "Justification:" in line:
                current_match['justification'] = line.split("Justification:")[1].strip()
        
        # Add the last match if it exists
        if current_match and 'id' in current_match and 'confidence' in current_match:
            matches.append(current_match)
        
        return matches
    
    async def llm_tag_element(self, element_id: str, element_name: str, 
                             element_description: str, top_k: int = 3) -> TaggingResult:
        """
        Match a data element with business terms using LLM-based semantic matching.
        
        Args:
            element_id: Unique identifier for the element
            element_name: Enhanced name of the element
            element_description: Enhanced description of the element
            top_k: Number of top matching terms to return
            
        Returns:
            TaggingResult with matching terms and confidence scores
        """
        try:
            # Get all available business terms
            all_terms = self.business_term_manager.get_all_terms()
            
            if not all_terms:
                logger.warning("No business terms found in the repository")
                return TaggingResult(
                    element_id=element_id,
                    element_name=element_name,
                    element_description=element_description,
                    matching_terms=[],
                    confidence_scores=[],
                    modeling_required=True,
                    message="No business terms found in the repository"
                )
            
            # Convert to list of dictionaries
            term_dicts = [term.dict() for term in all_terms]
            
            # Format terms for LLM
            formatted_terms = self._format_business_terms_for_llm(term_dicts)
            
            # Invoke LLM to find matches
            response = await self.llm_matching_chain.ainvoke({
                "element_name": element_name,
                "element_description": element_description,
                "business_terms": formatted_terms
            })
            
            # Parse the matches
            llm_matches = self._parse_llm_matches(response)
            
            if not llm_matches:
                logger.warning(f"LLM didn't return any valid matches for element: {element_name}")
                # Fall back to vector similarity
                return await self.vector_tag_element(element_id, element_name, element_description, top_k)
            
            # Look up the complete term information for each match
            matching_terms = []
            confidence_scores = []
            
            for match in llm_matches:
                term_id = match['id']
                confidence = match['confidence']
                
                # Find the term in our list
                term_info = None
                for term in term_dicts:
                    if term['id'] == term_id:
                        term_info = term
                        break
                
                if term_info:
                    # Create a term entry with similarity score
                    term_entry = {
                        "id": term_info["id"],
                        "name": term_info["name"],
                        "description": term_info["description"],
                        "similarity": confidence  # Using LLM confidence as similarity
                    }
                    
                    # Add category if available
                    if term_info.get("metadata") and term_info["metadata"].get("category"):
                        term_entry["category"] = term_info["metadata"]["category"]
                    
                    matching_terms.append(term_entry)
                    confidence_scores.append(confidence)
            
            # If we don't have enough matches from LLM, fill in with vector similarity
            if len(matching_terms) < top_k:
                remaining_slots = top_k - len(matching_terms)
                logger.info(f"LLM provided {len(matching_terms)} matches, adding {remaining_slots} from vector similarity")
                
                # Get vector matches but exclude the ones we already have
                vector_result = self.business_term_manager.tag_element(
                    element_id=element_id,
                    name=element_name,
                    description=element_description,
                    top_k=top_k * 2  # Get more to filter out duplicates
                )
                
                # Get the IDs of terms we already have
                existing_ids = [term["id"] for term in matching_terms]
                
                # Add unique terms from vector matches
                added = 0
                for i, term in enumerate(vector_result.matching_terms):
                    if term["id"] not in existing_ids and added < remaining_slots:
                        matching_terms.append(term)
                        confidence_scores.append(vector_result.confidence_scores[i])
                        added += 1
            
            # Calculate average confidence
            avg_confidence = sum(confidence_scores) / len(confidence_scores) if confidence_scores else 0
            
            # Determine if modeling is required
            modeling_required = False
            message = f"Found {len(matching_terms)} matching terms using LLM semantic matching"
            
            # If highest confidence is below threshold, suggest modeling
            if not confidence_scores or max(confidence_scores) < 0.5:
                modeling_required = True
                message = f"Low confidence matches (max: {max(confidence_scores) if confidence_scores else 0:.2f}). Consider modeling a new term."
            
            return TaggingResult(
                element_id=element_id,
                element_name=element_name,
                element_description=element_description,
                matching_terms=matching_terms[:top_k],  # Limit to top_k
                confidence_scores=confidence_scores[:top_k],  # Limit to top_k
                modeling_required=modeling_required,
                message=message
            )
                
        except Exception as e:
            logger.error(f"Error in LLM tagging: {e}")
            # Fall back to vector similarity
            logger.info(f"Falling back to vector similarity due to LLM error: {e}")
            return await self.vector_tag_element(element_id, element_name, element_description, top_k)
    
    async def vector_tag_element(self, element_id: str, element_name: str, 
                               element_description: str, top_k: int = 3) -> TaggingResult:
        """
        Match a data element with business terms using vector similarity search.
        
        Args:
            element_id: Unique identifier for the element
            element_name: Enhanced name of the element
            element_description: Enhanced description of the element
            top_k: Number of top matching terms to return
            
        Returns:
            TaggingResult with matching terms and confidence scores
        """
        try:
            # Use the business term manager to find similar terms
            result = self.business_term_manager.tag_element(
                element_id=element_id,
                name=element_name,
                description=element_description,
                top_k=top_k,
                threshold=0.3  # Lower threshold to find more potential matches
            )
            
            return result
                
        except Exception as e:
            logger.error(f"Error in vector tagging: {e}")
            return TaggingResult(
                element_id=element_id,
                element_name=element_name,
                element_description=element_description,
                matching_terms=[],
                confidence_scores=[],
                modeling_required=True,
                message=f"Error during vector tagging: {str(e)}"
            )
    
    async def tag_element(self, element_id: str, element_name: str, element_description: str, 
                         top_k: int = 3, use_llm_first: bool = True) -> TaggingResult:
        """
        Match a data element with appropriate business terms using combined LLM and vector approach.
        
        Args:
            element_id: Unique identifier for the element
            element_name: Enhanced name of the element
            element_description: Enhanced description of the element
            top_k: Number of top matching terms to return
            use_llm_first: Whether to try LLM matching first (default: True)
            
        Returns:
            TaggingResult with matching terms, confidence scores, and validation information
        """
        if use_llm_first:
            # Try LLM-based matching first
            result = await self.llm_tag_element(element_id, element_name, element_description, top_k)
            
            # If LLM matching failed or found no terms, fall back to vector similarity
            if not result.matching_terms:
                logger.info(f"LLM matching found no terms for element: {element_name}, falling back to vector similarity")
                result = await self.vector_tag_element(element_id, element_name, element_description, top_k)
        else:
            # Use vector similarity directly
            result = await self.vector_tag_element(element_id, element_name, element_description, top_k)
        
        return result
    
    async def _validate_contextual_match(self, element_name: str, element_description: str,
                                        term_name: str, term_description: str, term_category: str,
                                        similarity_score: float, other_terms: str) -> ContextualMatchResult:
        """
        Validate if a business term is contextually appropriate for a data element.
        
        Args:
            element_name: Name of the data element
            element_description: Description of the data element
            term_name: Name of the business term
            term_description: Description of the business term
            term_category: Category of the business term
            similarity_score: Vector similarity score
            other_terms: Text describing other potential matches
            
        Returns:
            ContextualMatchResult indicating the validation result
        """
        try:
            result = await self.validation_chain.ainvoke({
                "element_name": element_name,
                "element_description": element_description,
                "term_name": term_name,
                "term_description": term_description,
                "term_category": term_category,
                "similarity_score": f"{similarity_score:.2f}",
                "other_terms": other_terms
            })
            
            # Parse the result
            is_match = False
            confidence = similarity_score  # Default to the vector similarity
            reasoning = ""
            suggested_term_id = None
            
            for line in result.split('\n'):
                if "Contextual Match:" in line:
                    is_match = "YES" in line.upper()
                elif "Confidence" in line and ":" in line:
                    try:
                        confidence_text = line.split(':')[1].strip()
                        confidence_value = float(confidence_text.strip('[]'))
                        confidence = max(0.0, min(1.0, confidence_value))  # Ensure valid range
                    except (ValueError, IndexError):
                        logger.warning(f"Failed to parse confidence from: {line}")
                elif "Reasoning:" in line:
                    reasoning = line.split('Reasoning:')[1].strip()
                elif "Better Match" in line:
                    match_text = line.split(':')[1].strip()
                    if match_text and "None" not in match_text and "[" in match_text:
                        # Extract the ID from the format like "[term-123]"
                        import re
                        id_match = re.search(r'\[([\w-]+)\]', match_text)
                        if id_match:
                            suggested_term_id = id_match.group(1)
            
            return ContextualMatchResult(
                is_match=is_match,
                confidence=confidence,
                reasoning=reasoning,
                suggested_term_id=suggested_term_id
            )
            
        except Exception as e:
            logger.error(f"Error in contextual validation: {e}")
            # Return a default result in case of error
            return ContextualMatchResult(
                is_match=True,  # Default to accepting the match
                confidence=similarity_score,
                reasoning=f"Error during validation: {str(e)}",
                suggested_term_id=None
            )
    
    async def validate_tagging(self, tagging_result: TaggingResult) -> TaggingValidationResult:
        """
        Validate the tagging result and provide feedback.
        
        Args:
            tagging_result: Result of the tagging process
            
        Returns:
            TaggingValidationResult with validation status and suggestions
        """
        return await self.business_term_manager.validate_tagging_with_reasoning(tagging_result)
