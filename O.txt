def answer_question(self, question: str) -> Dict[str, Any]:
    """Answer a question using the RAG approach with metadata support."""
    try:
        # Check if vector store is initialized
        if not self.chroma_manager.vectorstore:
            logger.error("Cannot answer question - vector store not initialized")
            return {
                "question": question,
                "answer": "Error: Knowledge base not initialized. Please process documents first.",
                "sources": []
            }
        
        # Detect if the question is about metadata specifically
        metadata_keywords = ['author', 'wrote', 'written by', 'created by', 'date', 'when', 
                             'category', 'type', 'keywords', 'tags', 'metadata', 'published',
                             'topic', 'classification', 'subject']
        
        is_metadata_question = any(keyword in question.lower() for keyword in metadata_keywords)
        
        # Log metadata detection
        if is_metadata_question:
            logger.info(f"Question detected as metadata-related: {question}")
        
        # Check if qa_chain is initialized
        if not hasattr(self, 'qa_chain') or self.qa_chain is None:
            logger.error("QA chain not initialized")
            # Try to initialize QA chain if possible
            try:
                logger.info("Attempting to initialize QA chain...")
                self._setup_qa_chain()
            except Exception as e:
                logger.error(f"Failed to initialize QA chain: {e}")
                return {
                    "question": question,
                    "answer": "Error: QA system not initialized. Please process documents first.",
                    "sources": []
                }
        
        # Get answer from QA chain
        try:
            # For metadata questions, we might need to augment the query
            if is_metadata_question:
                # Create a more explicit query to help the retriever find relevant metadata
                enhanced_question = f"Find documents and their metadata relevant to: {question}"
                logger.info(f"Using enhanced question for metadata query: {enhanced_question}")
                result = self.qa_chain({"query": enhanced_question})
            else:
                result = self.qa_chain({"query": question})
                
            # Check if we got a non-answer response
            answer = result["result"]
            if "don't know" in answer.lower() or "don't have enough information" in answer.lower():
                logger.warning(f"Got 'don't know' response for question: {question}")
                
                # Check if we have metadata that might help
                metadata_found = False
                for doc in result.get("source_documents", []):
                    if any(k != 'source' for k in doc.metadata.keys()):
                        metadata_found = True
                        break
                
                if metadata_found and is_metadata_question:
                    # Try again with a more specific prompt about metadata
                    logger.info("Trying again with metadata-specific prompt")
                    
                    # Direct prompt to metadata in sources
                    metadata_prompt = f"""I need information about the metadata of documents. 
                    My question is: '{question}'
                    Look specifically at the metadata fields in the documents and tell me about {', '.join(metadata_keywords)}.
                    If you can find any relevant metadata in the documents, please share it."""
                    
                    # Get a direct LLM response focusing on metadata
                    fallback_response = self.generate_response(metadata_prompt)
                    answer = fallback_response
        except Exception as e:
            logger.error(f"Error in QA chain: {e}")
            # Fallback to direct LLM response
            fallback_response = self.generate_response(
                f"The following question was asked, but I couldn't find relevant information in the knowledge base: '{question}'. "
                "Please respond that you don't have enough information in the knowledge base to answer this question."
            )
            return {
                "question": question,
                "answer": fallback_response,
                "sources": []
            }
        
        # Format sources with metadata
        sources = []
        for doc in result.get("source_documents", []):
            # Extract metadata excluding 'source' which is handled separately
            metadata = {k: v for k, v in doc.metadata.items() if k != 'source'}
            
            sources.append({
                "content": doc.page_content[:200] + "..." if len(doc.page_content) > 200 else doc.page_content,
                "source": doc.metadata.get("source", "Unknown"),
                "metadata": metadata  # Include additional metadata from CSV
            })
        
        return {
            "question": question,
            "answer": answer,
            "sources": sources
        }
    except Exception as e:
        logger.error(f"Error answering question: {e}")
        return {
            "question": question,
            "answer": f"Error processing your question: {str(e)}. Please try processing the knowledge base first.",
            "sources": []
        }
