"""
Settings API - Endpoints for retrieving and updating application settings.

This module provides API endpoints for managing application settings such as
proxy configuration, database connections, and vector database selection.
"""

import logging
import os
from typing import Dict, Any, List, Optional
from fastapi import APIRouter, HTTPException, Depends, Query
from app.config.environment import get_os_env, str_to_bool
from app.config.settings import get_llm, get_vector_db_type, get_vector_store, get_app_settings
from app.core.db_manager import DBManager
from pydantic import BaseModel, Field

logger = logging.getLogger(__name__)
router = APIRouter(prefix="/api/v1/settings", tags=["settings"])

class ProxySettings(BaseModel):
    """Model for proxy settings."""
    enabled: bool = Field(..., description="Whether proxy is enabled")
    domain: Optional[str] = Field(None, description="Proxy domain (for display only)")


class DatabaseSettings(BaseModel):
    """Model for database connection settings."""
    host: str = Field(..., description="PostgreSQL host")
    port: int = Field(..., description="PostgreSQL port")
    database: str = Field(..., description="PostgreSQL database name")
    user: str = Field(..., description="PostgreSQL user")
    schema: str = Field(..., description="PostgreSQL schema")
    min_connections: int = Field(..., description="Minimum number of connections")
    max_connections: int = Field(..., description="Maximum number of connections")


class VectorDatabaseSettings(BaseModel):
    """Model for vector database settings."""
    type: str = Field(..., description="Vector database type (postgresql or chroma)")
    chroma_persist_dir: Optional[str] = Field(None, description="ChromaDB persist directory")
    chroma_collection: Optional[str] = Field(None, description="ChromaDB collection name")
    chroma_server_port: Optional[int] = Field(None, description="ChromaDB server port")


class AppSettings(BaseModel):
    """Model for application settings."""
    vector_database: VectorDatabaseSettings = Field(..., description="Vector database settings")
    database: DatabaseSettings = Field(..., description="Database settings")
    model: Dict[str, Any] = Field(..., description="Model settings")
    proxy: ProxySettings = Field(..., description="Proxy settings")
    monitoring_interval: int = Field(..., description="System monitoring interval in seconds")
    similarity_threshold: float = Field(..., description="Similarity threshold for term matching")


@router.get("/proxy", response_model=ProxySettings)
async def get_proxy_settings():
    """Get the current proxy settings."""
    try:
        env = get_os_env()
        proxy_enabled = str_to_bool(env.get("PROXY_ENABLED", "False"))
        
        return ProxySettings(
            enabled=proxy_enabled,
            domain=env.get("HTTPS_PROXY_DOMAIN", "")
        )
    except Exception as e:
        logger.error(f"Error retrieving proxy settings: {e}")
        raise HTTPException(status_code=500, detail=f"Error retrieving proxy settings: {str(e)}")


@router.post("/proxy", response_model=ProxySettings)
async def update_proxy_settings(settings: ProxySettings):
    """
    Update the proxy settings.
    
    Args:
        settings: New proxy settings
        
    Returns:
        Updated proxy settings
    """
    try:
        # Update the environment with new proxy setting
        env = get_os_env(proxy_enabled=settings.enabled)
        
        # Force recreation of LLM client with new proxy settings
        _ = get_llm(proxy_enabled=settings.enabled)
        
        logger.info(f"Proxy settings updated: enabled={settings.enabled}")
        
        return ProxySettings(
            enabled=settings.enabled,
            domain=env.get("HTTPS_PROXY_DOMAIN", "")
        )
    except Exception as e:
        logger.error(f"Error updating proxy settings: {e}")
        raise HTTPException(status_code=500, detail=f"Error updating proxy settings: {str(e)}")


@router.get("/database", response_model=DatabaseSettings)
async def get_database_settings():
    """Get the current database connection settings."""
    try:
        env = get_os_env()
        
        return DatabaseSettings(
            host=env.get("PG_HOST", "localhost"),
            port=int(env.get("PG_PORT", "5432")),
            database=env.get("PG_DB", "metadata_db"),
            user=env.get("PG_USER", "postgres"),
            schema=env.get("PG_SCHEMA", "ai_stitching_platform"),
            min_connections=int(env.get("PG_MIN_CONNECTIONS", "2")),
            max_connections=int(env.get("PG_MAX_CONNECTIONS", "10"))
        )
    except Exception as e:
        logger.error(f"Error retrieving database settings: {e}")
        raise HTTPException(status_code=500, detail=f"Error retrieving database settings: {str(e)}")


@router.get("/vector-database", response_model=VectorDatabaseSettings)
async def get_vector_database_settings():
    """Get the current vector database settings."""
    try:
        env = get_os_env()
        vector_db_type = env.get("VECTOR_DB_TYPE", "postgresql").lower()
        
        if vector_db_type == "chroma":
            return VectorDatabaseSettings(
                type=vector_db_type,
                chroma_persist_dir=env.get("CHROMA_PERSIST_DIR", "./data/chroma_db"),
                chroma_collection=env.get("CHROMA_COLLECTION", "business_terms"),
                chroma_server_port=int(env.get("CHROMA_SERVER_PORT", "8001"))
            )
        else:
            return VectorDatabaseSettings(
                type=vector_db_type
            )
    except Exception as e:
        logger.error(f"Error retrieving vector database settings: {e}")
        raise HTTPException(status_code=500, detail=f"Error retrieving vector database settings: {str(e)}")


@router.post("/vector-database", response_model=VectorDatabaseSettings)
async def update_vector_database_settings(settings: VectorDatabaseSettings):
    """
    Update the vector database settings.
    
    Args:
        settings: New vector database settings
        
    Returns:
        Updated vector database settings
    """
    try:
        # Set the vector database type
        os.environ["VECTOR_DB_TYPE"] = settings.type
        
        if settings.type == "chroma":
            # Set ChromaDB settings
            if settings.chroma_persist_dir:
                os.environ["CHROMA_PERSIST_DIR"] = settings.chroma_persist_dir
            if settings.chroma_collection:
                os.environ["CHROMA_COLLECTION"] = settings.chroma_collection
            if settings.chroma_server_port:
                os.environ["CHROMA_SERVER_PORT"] = str(settings.chroma_server_port)
        
        logger.info(f"Vector database settings updated: type={settings.type}")
        
        # Return updated settings
        env = get_os_env()
        return await get_vector_database_settings()
    except Exception as e:
        logger.error(f"Error updating vector database settings: {e}")
        raise HTTPException(status_code=500, detail=f"Error updating vector database settings: {str(e)}")


@router.get("/database/health", response_model=Dict[str, Any])
async def get_database_health(db: DBManager = Depends(lambda: DBManager())):
    """Get the database health status."""
    try:
        health = db.health_check()
        
        return health
    except Exception as e:
        logger.error(f"Error retrieving database health: {e}")
        raise HTTPException(status_code=500, detail=f"Error retrieving database health: {str(e)}")


@router.get("/vector-database/health", response_model=Dict[str, Any])
async def get_vector_database_health():
    """Get the vector database health status."""
    try:
        vector_store = get_vector_store()
        health = vector_store.health_check()
        
        return health
    except Exception as e:
        logger.error(f"Error retrieving vector database health: {e}")
        raise HTTPException(status_code=500, detail=f"Error retrieving vector database health: {str(e)}")


@router.get("/status", response_model=Dict[str, Any])
async def get_system_status(db: DBManager = Depends(lambda: DBManager())):
    """Get the system status and configuration."""
    try:
        env = get_os_env()
        
        # Get all settings at once
        return get_app_settings()
    except Exception as e:
        logger.error(f"Error retrieving system status: {e}")
        raise HTTPException(status_code=500, detail=f"Error retrieving system status: {str(e)}")


@router.get("/stats", response_model=List[Dict[str, Any]])
async def get_system_stats(limit: int = Query(24, ge=1, le=1000), 
                         db: DBManager = Depends(lambda: DBManager())):
    """
    Get historical system statistics.
    
    Args:
        limit: Number of records to return (1-1000)
        db: Database manager instance
        
    Returns:
        List of system statistics records
    """
    try:
        # Get stats from database
        stats = db.get_system_stats(limit=limit)
        
        return stats
    except Exception as e:
        logger.error(f"Error retrieving system stats: {e}")
        raise HTTPException(status_code=500, detail=f"Error retrieving system stats: {str(e)}")
