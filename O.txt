import os
import logging
import threading
import time
from pathlib import Path
import chromadb
from chromadb.config import Settings
from chromadb.api.fastapi import FastAPI as ChromaFastAPI

logger = logging.getLogger(__name__)

class ChromaServer:
    """Simple ChromaDB server implementation for local use."""
    
    def __init__(self, persistent_dir: str = "./chroma_db", port: int = 8000):
        """
        Initialize a ChromaDB server.
        
        Args:
            persistent_dir: Directory for persistent storage
            port: Port to run the server on
        """
        self.persistent_dir = persistent_dir
        self.port = port
        self.server = None
        self.server_thread = None
        self.is_running = False
    
    def start(self):
        """Start the ChromaDB server in a separate thread."""
        if self.is_running:
            logger.info("ChromaDB server is already running")
            return True
        
        try:
            # Ensure directory exists
            os.makedirs(self.persistent_dir, exist_ok=True)
            
            def run_server():
                try:
                    logger.info(f"Starting ChromaDB server on port {self.port}")
                    
                    # Create and start the server
                    settings = Settings(
                        chroma_api_impl=ChromaFastAPI,
                        persist_directory=self.persistent_dir,
                        allow_reset=True,
                        anonymized_telemetry=False
                    )
                    
                    self.server = chromadb.Server(settings=settings)
                    self.server.run(port=self.port)
                    
                except Exception as e:
                    logger.error(f"Error running ChromaDB server: {e}")
                    self.is_running = False
            
            # Start server in a thread
            self.server_thread = threading.Thread(target=run_server, daemon=True)
            self.server_thread.start()
            
            # Wait a bit to let server start
            time.sleep(2)
            self.is_running = True
            logger.info("ChromaDB server started")
            
            return True
        except Exception as e:
            logger.error(f"Failed to start ChromaDB server: {e}")
            return False
    
    def stop(self):
        """Stop the ChromaDB server."""
        if not self.is_running:
            return
        
        try:
            if self.server:
                logger.info("Stopping ChromaDB server")
                self.server.stop()
                self.is_running = False
                logger.info("ChromaDB server stopped")
        except Exception as e:
            logger.error(f"Error stopping ChromaDB server: {e}")

# Singleton instance
_server_instance = None

def get_chroma_server(persistent_dir: str = "./chroma_db", port: int = 8000):
    """Get or create a ChromaDB server instance."""
    global _server_instance
    if _server_instance is None:
        _server_instance = ChromaServer(persistent_dir, port)
    return _server_instance
