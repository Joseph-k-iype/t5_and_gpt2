"""
GCP Certificate Manager - Utility for fetching certificates from Google Cloud Storage.

This module provides functionality to download SSL certificates from GCP buckets
for use in secure connections without storing them permanently on disk.
"""

import os
import logging
import tempfile
from typing import Optional, Tuple
import atexit

logger = logging.getLogger(__name__)

# Dictionary to track temp files, so we can clean them up on exit
_temp_files = {}

def cleanup_temp_files():
    """Clean up any temporary certificate files on application exit."""
    for path in _temp_files.values():
        try:
            if os.path.exists(path):
                os.remove(path)
                logger.info(f"Cleaned up temporary certificate file: {path}")
        except Exception as e:
            logger.error(f"Error cleaning up temporary file {path}: {e}")

# Register cleanup function to run at exit
atexit.register(cleanup_temp_files)

def is_gcp_path(path: str) -> bool:
    """
    Check if a path is a GCP bucket path.
    
    Args:
        path: Path to check
        
    Returns:
        bool: True if path is a GCP bucket path, False otherwise
    """
    return path.startswith("gs://")

def parse_gcp_path(path: str) -> Tuple[str, str]:
    """
    Parse a GCP bucket path into bucket name and object path.
    
    Args:
        path: GCP path in the format gs://bucket-name/path/to/object
        
    Returns:
        Tuple containing (bucket_name, object_path)
        
    Raises:
        ValueError: If path is not a valid GCP path
    """
    if not is_gcp_path(path):
        raise ValueError(f"Not a valid GCP path: {path}")
    
    # Remove the gs:// prefix
    path = path[5:]
    
    # Split into bucket and object path
    parts = path.split('/', 1)
    if len(parts) < 2:
        raise ValueError(f"Invalid GCP path format: {path}")
    
    bucket_name = parts[0]
    object_path = parts[1]
    
    return bucket_name, object_path

def get_or_download_cert(cert_path: str) -> Optional[str]:
    """
    Get certificate from GCP bucket or local path.
    
    If path is a GCP bucket path (gs://), download to a temporary location.
    If path is a local path, return it unchanged if it exists.
    
    Args:
        cert_path: Path to certificate (local or GCP bucket)
        
    Returns:
        Path to certificate file, or None if not available
    """
    # If we've already processed this path, return the cached result
    if cert_path in _temp_files:
        return _temp_files[cert_path]
    
    # Handle GCP bucket path
    if is_gcp_path(cert_path):
        try:
            from google.cloud import storage
            
            # Parse bucket and object path
            bucket_name, object_path = parse_gcp_path(cert_path)
            
            # Create a temporary file to store the certificate
            fd, temp_path = tempfile.mkstemp(suffix='.pem')
            os.close(fd)  # Close the file descriptor
            
            logger.info(f"Downloading certificate from GCP: {cert_path} to {temp_path}")
            
            # Download file from GCP
            storage_client = storage.Client()
            bucket = storage_client.bucket(bucket_name)
            blob = bucket.blob(object_path)
            blob.download_to_filename(temp_path)
            
            # Cache the temp path for future requests and cleanup
            _temp_files[cert_path] = temp_path
            
            logger.info(f"Certificate downloaded successfully to: {temp_path}")
            return temp_path
        
        except ImportError:
            logger.error("google-cloud-storage library not installed. Install with: pip install google-cloud-storage")
            return None
        except Exception as e:
            logger.error(f"Error downloading certificate from GCP: {e}")
            return None
    
    # For local paths, check if file exists and return the path
    elif os.path.exists(cert_path) and os.access(cert_path, os.R_OK):
        return cert_path
    
    # File not found
    logger.warning(f"Certificate file not found: {cert_path}")
    return None
