/**
 * Enhanced Dashboard for Data Element Enhancement API
 * Provides interactive components and data visualization for system monitoring.
 */

// Chart objects for reuse
const charts = {
    cpuChart: null,
    memoryChart: null,
    dbSizeChart: null,
    jobsChart: null
};

// Initialize dashboard on load
document.addEventListener('DOMContentLoaded', function() {
    // Initialize current time display
    updateClock();
    setInterval(updateClock, 1000);
    
    // Load system metrics
    loadSystemMetrics();
    
    // Load database stats
    loadDatabaseStats();
    
    // Initialize charts
    initializeCharts();
    
    // Set up refresh handlers
    setupRefreshHandlers();
    
    // Load initial job counts
    updateJobCounts();
    
    // Set up interval refreshes
    setInterval(loadSystemMetrics, 30000); // Every 30 seconds
    setInterval(updateJobCounts, 15000);   // Every 15 seconds
});

/**
 * Update the digital clock with current time
 */
function updateClock() {
    const now = new Date();
    const options = { 
        year: 'numeric', 
        month: 'short', 
        day: 'numeric', 
        hour: '2-digit', 
        minute: '2-digit',
        second: '2-digit'
    };
    document.getElementById('current-time').textContent = now.toLocaleString(undefined, options);
}

/**
 * Load system metrics from API
 */
function loadSystemMetrics() {
    fetch('/api/v1/settings/stats?limit=24')
        .then(response => {
            if (!response.ok) {
                throw new Error(`HTTP error! Status: ${response.status}`);
            }
            return response.json();
        })
        .then(data => {
            updateMetricsCharts(data);
        })
        .catch(error => {
            console.error('Error loading system metrics:', error);
            showToast('Failed to load system metrics', 'error');
        });
}

/**
 * Load database statistics
 */
function loadDatabaseStats() {
    fetch('/api/v1/settings/database/health')
        .then(response => {
            if (!response.ok) {
                throw new Error(`HTTP error! Status: ${response.status}`);
            }
            return response.json();
        })
        .then(data => {
            updateDatabaseStats(data);
        })
        .catch(error => {
            console.error('Error loading database stats:', error);
            showToast('Failed to load database statistics', 'error');
        });
}

/**
 * Update database statistics display
 */
function updateDatabaseStats(data) {
    if (data.status !== 'healthy') {
        document.getElementById('database-status').innerHTML = `
            <div class="text-red-500 font-medium">
                <i class="fas fa-exclamation-circle mr-1"></i> Unhealthy
            </div>
            <div class="text-sm text-red-500">${data.error || 'Connection error'}</div>
        `;
        return;
    }
    
    // Format version string
    const versionParts = data.version.split(' ');
    const pgVersion = versionParts.length > 1 ? versionParts[1] : data.version;
    
    // Update database stats display
    document.getElementById('database-status').innerHTML = `
        <div class="text-green-500 font-medium mb-2">
            <i class="fas fa-check-circle mr-1"></i> Connected
        </div>
        <div class="grid grid-cols-2 gap-2 text-sm">
            <div class="font-medium">PostgreSQL:</div>
            <div>${pgVersion}</div>
            
            <div class="font-medium">pgvector:</div>
            <div>${data.vector_enabled ? 'Enabled' : 'Disabled'}</div>
            
            <div class="font-medium">Database Size:</div>
            <div>${data.db_size_mb.toFixed(2)} MB</div>
            
            <div class="font-medium">Terms Count:</div>
            <div>${data.terms_count}</div>
            
            <div class="font-medium">Active Connections:</div>
            <div>${data.active_connections}</div>
        </div>
    `;
}

/**
 * Update job counts display
 */
function updateJobCounts() {
    // Get enhancement jobs
    fetch('/api/dashboard/enhancement-jobs')
        .then(response => response.text())
        .then(html => {
            document.getElementById('enhancement-jobs-container').innerHTML = html;
        })
        .catch(error => {
            console.error('Error loading enhancement jobs:', error);
        });
    
    // Get tagging jobs
    fetch('/api/dashboard/tagging-jobs')
        .then(response => response.text())
        .then(html => {
            document.getElementById('tagging-jobs-container').innerHTML = html;
        })
        .catch(error => {
            console.error('Error loading tagging jobs:', error);
        });
}

/**
 * Initialize charts for metrics visualization
 */
function initializeCharts() {
    // CPU Usage Chart
    const cpuCtx = document.getElementById('cpu-chart').getContext('2d');
    charts.cpuChart = new Chart(cpuCtx, {
        type: 'line',
        data: {
            labels: [],
            datasets: [{
                label: 'CPU Usage (%)',
                data: [],
                borderColor: 'rgb(59, 130, 246)',
                backgroundColor: 'rgba(59, 130, 246, 0.1)',
                fill: true,
                tension: 0.4
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
                y: {
                    beginAtZero: true,
                    max: 100,
                    title: {
                        display: true,
                        text: 'Percentage'
                    }
                },
                x: {
                    title: {
                        display: true,
                        text: 'Time'
                    }
                }
            }
        }
    });
    
    // Memory Usage Chart
    const memoryCtx = document.getElementById('memory-chart').getContext('2d');
    charts.memoryChart = new Chart(memoryCtx, {
        type: 'line',
        data: {
            labels: [],
            datasets: [{
                label: 'Memory Usage (%)',
                data: [],
                borderColor: 'rgb(16, 185, 129)',
                backgroundColor: 'rgba(16, 185, 129, 0.1)',
                fill: true,
                tension: 0.4
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
                y: {
                    beginAtZero: true,
                    max: 100,
                    title: {
                        display: true,
                        text: 'Percentage'
                    }
                },
                x: {
                    title: {
                        display: true,
                        text: 'Time'
                    }
                }
            }
        }
    });
    
    // Jobs Chart
    const jobsCtx = document.getElementById('jobs-chart').getContext('2d');
    charts.jobsChart = new Chart(jobsCtx, {
        type: 'bar',
        data: {
            labels: [],
            datasets: [
                {
                    label: 'Enhancement Jobs',
                    data: [],
                    backgroundColor: 'rgba(59, 130, 246, 0.5)',
                },
                {
                    label: 'Tagging Jobs',
                    data: [],
                    backgroundColor: 'rgba(16, 185, 129, 0.5)',
                }
            ]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
                y: {
                    beginAtZero: true,
                    title: {
                        display: true,
                        text: 'Count'
                    }
                },
                x: {
                    title: {
                        display: true,
                        text: 'Time'
                    }
                }
            }
        }
    });
}

/**
 * Update metrics charts with new data
 */
function updateMetricsCharts(data) {
    if (!data || data.length === 0) return;
    
    // Sort data by timestamp
    data.sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp));
    
    // Format timestamps for display
    const timestamps = data.map(item => {
        const date = new Date(item.timestamp);
        return date.toLocaleTimeString([], {hour: '2-digit', minute: '2-digit'});
    });
    
    // Extract data points
    const cpuData = data.map(item => item.cpu_usage);
    const memoryData = data.map(item => item.memory_usage);
    const enhancementJobsData = data.map(item => item.enhancement_jobs_count);
    const taggingJobsData = data.map(item => item.tagging_jobs_count);
    
    // Update charts
    updateChart(charts.cpuChart, timestamps, cpuData);
    updateChart(charts.memoryChart, timestamps, memoryData);
    
    // Update jobs chart
    charts.jobsChart.data.labels = timestamps;
    charts.jobsChart.data.datasets[0].data = enhancementJobsData;
    charts.jobsChart.data.datasets[1].data = taggingJobsData;
    charts.jobsChart.update();
    
    // Update current metric values
    if (data.length > 0) {
        const latest = data[data.length - 1];
        document.getElementById('current-cpu').textContent = `${latest.cpu_usage.toFixed(1)}%`;
        document.getElementById('current-memory').textContent = `${latest.memory_usage.toFixed(1)}%`;
        document.getElementById('current-enhancement-jobs').textContent = latest.enhancement_jobs_count;
        document.getElementById('current-tagging-jobs').textContent = latest.tagging_jobs_count;
    }
}

/**
 * Update a chart with new data
 */
function updateChart(chart, labels, data) {
    if (!chart) return;
    
    chart.data.labels = labels;
    chart.data.datasets[0].data = data;
    chart.update();
}

/**
 * Set up refresh handlers for buttons
 */
function setupRefreshHandlers() {
    document.querySelectorAll('.refresh-button').forEach(button => {
        button.addEventListener('click', function() {
            const target = this.getAttribute('data-target');
            
            switch (target) {
                case 'system-metrics':
                    loadSystemMetrics();
                    showToast('Refreshing system metrics...', 'info');
                    break;
                    
                case 'database-stats':
                    loadDatabaseStats();
                    showToast('Refreshing database stats...', 'info');
                    break;
                    
                case 'job-counts':
                    updateJobCounts();
                    showToast('Refreshing job counts...', 'info');
                    break;
            }
        });
    });
}

/**
 * Toggle proxy settings
 */
function toggleProxy(enabled) {
    const proxyStatusElement = document.getElementById('proxy-status');
    
    if (proxyStatusElement) {
        proxyStatusElement.innerHTML = `
            <div class="flex items-center">
                <div class="animate-spin mr-2">
                    <i class="fas fa-circle-notch"></i>
                </div>
                <span>Updating proxy settings...</span>
            </div>
        `;
    }
    
    fetch('/api/v1/settings/proxy', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ enabled: enabled })
    })
    .then(response => {
        if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status}`);
        }
        return response.json();
    })
    .then(data => {
        showToast(`Proxy ${data.enabled ? 'enabled' : 'disabled'} successfully`, 'success');
        
        // Refresh components
        document.getElementById('proxy-settings-container').setAttribute('hx-trigger', 'load');
        htmx.process(document.getElementById('proxy-settings-container'));
    })
    .catch(error => {
        console.error('Error updating proxy settings:', error);
        showToast('Failed to update proxy settings', 'error');
        
        // Refresh to show current state
        document.getElementById('proxy-settings-container').setAttribute('hx-trigger', 'load');
        htmx.process(document.getElementById('proxy-settings-container'));
    });
}

/**
 * Show a toast notification
 */
function showToast(message, type = 'info') {
    // Create toast container if it doesn't exist
    let toastContainer = document.getElementById('toast-container');
    if (!toastContainer) {
        toastContainer = document.createElement('div');
        toastContainer.id = 'toast-container';
        toastContainer.className = 'fixed bottom-4 right-4 z-50 flex flex-col space-y-2';
        document.body.appendChild(toastContainer);
    }
    
    // Create toast element
    const toast = document.createElement('div');
    toast.className = 'transform transition-all duration-300 opacity-0 translate-y-4 max-w-xs';
    
    // Set toast style based on type
    let bgColor, icon;
    switch (type) {
        case 'success':
            bgColor = 'bg-green-500';
            icon = 'check-circle';
            break;
        case 'error':
            bgColor = 'bg-red-500';
            icon = 'exclamation-circle';
            break;
        case 'warning':
            bgColor = 'bg-yellow-500';
            icon = 'exclamation-triangle';
            break;
        default:
            bgColor = 'bg-blue-500';
            icon = 'info-circle';
    }
    
    toast.innerHTML = `
        <div class="${bgColor} text-white px-4 py-3 rounded shadow-lg flex items-center">
            <i class="fas fa-${icon} mr-2"></i>
            <span>${message}</span>
        </div>
    `;
    
    // Add to container
    toastContainer.appendChild(toast);
    
    // Animate in
    setTimeout(() => {
        toast.classList.replace('opacity-0', 'opacity-100');
        toast.classList.replace('translate-y-4', 'translate-y-0');
    }, 10);
    
    // Remove after delay
    setTimeout(() => {
        toast.classList.replace('opacity-100', 'opacity-0');
        toast.classList.replace('translate-y-0', 'translate-y-4');
        
        setTimeout(() => {
            toastContainer.removeChild(toast);
        }, 300);
    }, 3000);
}
