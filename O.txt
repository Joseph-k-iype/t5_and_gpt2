import csv
import json
import uuid
import sys
import requests
from pathlib import Path

# Configuration
input_csv_file = sys.argv[1] if len(sys.argv) > 1 else 'input.csv'  # Default to 'input.csv' if no file specified
output_json_file = 'filtered_results.json'
api_endpoint = 'http://127.0.0.1:8000/api/v1/validate'
valid_statuses = ['good', 'needs_improvement']

def process_csv():
    """Process the CSV file and make API calls for each row."""
    # Check if input file exists
    if not Path(input_csv_file).exists():
        print(f"Error: File {input_csv_file} not found.")
        sys.exit(1)
    
    print(f"Starting to process {input_csv_file}...")
    
    # Create an array to store the filtered results
    filtered_results = []
    total_records = 0
    
    # Open and read the CSV file
    with open(input_csv_file, mode='r', encoding='utf-8') as csv_file:
        csv_reader = csv.DictReader(csv_file)
        
        # Check if the required columns exist
        fieldnames = csv_reader.fieldnames
        if 'name' not in fieldnames or 'description' not in fieldnames:
            print("Error: CSV file must contain 'name' and 'description' columns.")
            print(f"Found columns: {fieldnames}")
            sys.exit(1)
        
        # Process each row in the CSV
        for row in csv_reader:
            total_records += 1
            try:
                # Generate a unique ID for this record
                id = str(uuid.uuid4())
                
                # Prepare the data to send to the API
                request_data = {
                    'id': id,
                    'existing_name': row['name'],
                    'existing_description': row['description']
                }
                
                print(f"Processing: {row['name']}")
                
                # Make the API call
                response = requests.post(api_endpoint, json=request_data)
                response.raise_for_status()  # Raise an exception for HTTP errors
                
                response_data = response.json()
                
                # Check if the quality_status is one we want to keep
                if response_data and 'quality_status' in response_data and response_data['quality_status'] in valid_statuses:
                    # Create an object with the original fields and all API response fields
                    result_object = {
                        'existing_name': row['name'],
                        'existing_description': row['description'],
                        **response_data  # Add all the API response fields
                    }
                    
                    # Add to our filtered results
                    filtered_results.append(result_object)
                    print(f"Added to results: {row['name']} - Status: {response_data['quality_status']}")
                
            except Exception as e:
                print(f"Error processing row for {row['name']}: {str(e)}")
    
    # Write the filtered results to a JSON file
    with open(output_json_file, 'w', encoding='utf-8') as json_file:
        json.dump(filtered_results, json_file, indent=2)
    
    print(f"Filtered results saved to {output_json_file}")
    print(f"Total records processed: {total_records}")
    print(f"Records saved: {len(filtered_results)}")

if __name__ == "__main__":
    process_csv()
