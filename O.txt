def validate_metadata_csv(filepath):
    """Validate and preprocess the CSV metadata file.
    
    Args:
        filepath (str): Path to the CSV file
        
    Returns:
        dict: Dictionary mapping PDF filenames to their metadata, or None if validation fails
    """
    try:
        # Read the CSV
        df = pd.read_csv(filepath)
        
        # Check for required column
        if 'pdf_filename' not in df.columns:
            logger.error("CSV metadata file missing required 'pdf_filename' column")
            return None
            
        # Normalize column names (lowercase, replace spaces with underscores)
        df.columns = [col.lower().replace(' ', '_') for col in df.columns]
        
        # Clean pdf_filename values (e.g., remove leading/trailing whitespace)
        df['pdf_filename'] = df['pdf_filename'].str.strip()
        
        # Convert all string columns to strings (in case they're numeric)
        for col in df.columns:
            if col != 'pdf_filename' and df[col].dtype != 'object':
                df[col] = df[col].astype(str)
        
        # Log the columns found
        logger.info(f"Metadata CSV columns: {', '.join(df.columns.tolist())}")
        logger.info(f"Found {len(df)} rows in metadata CSV")
        
        # Check if any filenames are empty
        empty_filenames = df['pdf_filename'].isna().sum()
        if empty_filenames > 0:
            logger.warning(f"Found {empty_filenames} rows with empty pdf_filename values")
            # Filter out rows with empty filenames
            df = df.dropna(subset=['pdf_filename'])
        
        # Convert DataFrame to dictionary for easier processing
        metadata_dict = {}
        for _, row in df.iterrows():
            pdf_name = row['pdf_filename']
            # Extract only metadata fields (exclude pdf_filename)
            metadata = {k: v for k, v in row.items() if k != 'pdf_filename' and pd.notna(v)}
            metadata_dict[pdf_name] = metadata
        
        # Log a sample of the processed metadata
        logger.info(f"Processed metadata for {len(metadata_dict)} PDFs")
        for filename, meta in list(metadata_dict.items())[:2]:  # Log first 2 items only
            logger.info(f"Sample processed metadata for {filename}: {meta}")
            
        return metadata_dict
    except Exception as e:
        logger.error(f"Error validating metadata CSV: {e}")
        return None
