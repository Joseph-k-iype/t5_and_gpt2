import logging
import os
from typing import Dict, Any, List
from fastapi import APIRouter, HTTPException, Request, Depends
from fastapi.responses import HTMLResponse
from fastapi.templating import Jinja2Templates
from fastapi.staticfiles import StaticFiles
from app.config.environment import get_os_env, str_to_bool
from app.core.db_manager import DBManager
from app.api.routes.enhancement import enhancement_jobs
from app.api.routes.tagging import tagging_jobs
from app.core.models import EnhancementStatus
import psutil
import time
from datetime import datetime

logger = logging.getLogger(__name__)
router = APIRouter(tags=["dashboard"])

# Set up templates
templates_dir = os.path.join(os.path.dirname(os.path.dirname(os.path.dirname(__file__))), "templates")
os.makedirs(templates_dir, exist_ok=True)
templates = Jinja2Templates(directory=templates_dir)

# Create the templates directory and dashboard.html if they don't exist
dashboard_html_path = os.path.join(templates_dir, "dashboard.html")
if not os.path.exists(dashboard_html_path):
    # Create a basic dashboard template
    with open(dashboard_html_path, "w") as f:
        f.write("""<!DOCTYPE html>
<html>
<head>
    <title>Data Element Enhancement API Dashboard</title>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://unpkg.com/htmx.org@1.9.2"></script>
    <script src="https://unpkg.com/alpinejs@3.12.3/dist/cdn.min.js" defer></script>
    <style>
        [x-cloak] { display: none !important; }
    </style>
</head>
<body class="bg-gray-100">
    <div class="min-h-screen">
        <nav class="bg-blue-600 text-white p-4">
            <div class="container mx-auto flex justify-between items-center">
                <h1 class="text-2xl font-bold">Data Element Enhancement API</h1>
                <div>
                    <span id="current-time" class="text-sm"></span>
                </div>
            </div>
        </nav>
        
        <div class="container mx-auto p-4">
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mb-6">
                <!-- System Status Card -->
                <div class="bg-white rounded-lg shadow p-4">
                    <h2 class="text-lg font-semibold mb-2">System Status</h2>
                    <div id="system-status" hx-get="/api/dashboard/system-status" hx-trigger="load, every 10s" hx-swap="innerHTML">
                        Loading...
                    </div>
                </div>
                
                <!-- Proxy Settings Card -->
                <div class="bg-white rounded-lg shadow p-4">
                    <h2 class="text-lg font-semibold mb-2">Proxy Settings</h2>
                    <div id="proxy-settings" hx-get="/api/dashboard/proxy-status" hx-trigger="load, every 10s" hx-swap="innerHTML">
                        Loading...
                    </div>
                </div>
                
                <!-- PostgreSQL Status Card -->
                <div class="bg-white rounded-lg shadow p-4">
                    <h2 class="text-lg font-semibold mb-2">PostgreSQL Status</h2>
                    <div id="postgres-status" hx-get="/api/dashboard/postgres-status" hx-trigger="load, every 10s" hx-swap="innerHTML">
                        Loading...
                    </div>
                </div>
            </div>
            
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-4">
                <!-- Active Enhancement Jobs -->
                <div class="bg-white rounded-lg shadow p-4">
                    <h2 class="text-lg font-semibold mb-2">Active Enhancement Jobs</h2>
                    <div id="enhancement-jobs" hx-get="/api/dashboard/enhancement-jobs" hx-trigger="load, every 5s" hx-swap="innerHTML">
                        Loading...
                    </div>
                </div>
                
                <!-- Active Tagging Jobs -->
                <div class="bg-white rounded-lg shadow p-4">
                    <h2 class="text-lg font-semibold mb-2">Active Tagging Jobs</h2>
                    <div id="tagging-jobs" hx-get="/api/dashboard/tagging-jobs" hx-trigger="load, every 5s" hx-swap="innerHTML">
                        Loading...
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <script>
        // Update current time
        function updateTime() {
            const now = new Date();
            document.getElementById('current-time').textContent = now.toLocaleString();
        }
        
        setInterval(updateTime, 1000);
        updateTime();
        
        // Toggle proxy setting
        function toggleProxy(enabled) {
            fetch('/api/v1/settings/proxy', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ enabled: enabled })
            })
            .then(response => response.json())
            .then(data => {
                // Refresh the proxy status component
                document.getElementById('proxy-settings').setAttribute('hx-trigger', 'load');
                htmx.process(document.getElementById('proxy-settings'));
            })
            .catch(error => {
                console.error('Error toggling proxy:', error);
                alert('Error toggling proxy setting. See console for details.');
            });
        }
    </script>
</body>
</html>""")
    logger.info(f"Created dashboard template at {dashboard_html_path}")


@router.get("/dashboard", response_class=HTMLResponse)
async def get_dashboard(request: Request):
    """Render the dashboard UI."""
    return templates.TemplateResponse("dashboard.html", {"request": request})


@router.get("/dashboard/system-status", response_class=HTMLResponse)
async def get_system_status_component():
    """Get the system status component for the dashboard."""
    try:
        # Get system metrics
        cpu_percent = psutil.cpu_percent(interval=0.1)
        memory = psutil.virtual_memory()
        memory_percent = memory.percent
        
        # Get uptime
        uptime = time.time() - psutil.boot_time()
        uptime_str = f"{int(uptime // 86400)}d {int((uptime % 86400) // 3600)}h {int((uptime % 3600) // 60)}m"
        
        # Format HTML response
        html = f"""
        <div class="grid grid-cols-2 gap-2">
            <div>
                <p class="text-sm font-medium text-gray-600">CPU Usage</p>
                <div class="w-full bg-gray-200 rounded-full h-2.5">
                    <div class="bg-blue-600 h-2.5 rounded-full" style="width: {cpu_percent}%"></div>
                </div>
                <p class="text-xs mt-1">{cpu_percent}%</p>
            </div>
            <div>
                <p class="text-sm font-medium text-gray-600">Memory Usage</p>
                <div class="w-full bg-gray-200 rounded-full h-2.5">
                    <div class="bg-blue-600 h-2.5 rounded-full" style="width: {memory_percent}%"></div>
                </div>
                <p class="text-xs mt-1">{memory_percent}% ({memory.used // (1024*1024)} MB / {memory.total // (1024*1024)} MB)</p>
            </div>
        </div>
        <div class="mt-2">
            <p class="text-sm"><span class="font-medium text-gray-600">System Uptime:</span> {uptime_str}</p>
            <p class="text-sm"><span class="font-medium text-gray-600">Server Time:</span> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
        </div>
        """
        return HTMLResponse(content=html)
    except Exception as e:
        logger.error(f"Error retrieving system status: {e}")
        return HTMLResponse(content=f"<p class='text-red-500'>Error retrieving system status: {str(e)}</p>")


@router.get("/dashboard/proxy-status", response_class=HTMLResponse)
async def get_proxy_status_component():
    """Get the proxy status component for the dashboard."""
    try:
        env = get_os_env()
        proxy_enabled = str_to_bool(env.get("PROXY_ENABLED", "False"))
        
        proxy_domain = env.get("HTTPS_PROXY_DOMAIN", "Not configured")
        
        # Format HTML response with toggle buttons
        html = f"""
        <div>
            <p class="text-sm mb-2"><span class="font-medium text-gray-600">Proxy Status:</span> 
                <span class="{'text-green-600 font-medium' if proxy_enabled else 'text-gray-500'}">
                    {"Enabled" if proxy_enabled else "Disabled"}
                </span>
            </p>
            <p class="text-sm mb-3"><span class="font-medium text-gray-600">Proxy Domain:</span> {proxy_domain}</p>
            
            <div class="flex space-x-2">
                <button onclick="toggleProxy(true)" 
                        class="{'bg-blue-600 text-white' if proxy_enabled else 'bg-gray-200 text-gray-700'} px-3 py-1 rounded text-sm">
                    Enable
                </button>
                <button onclick="toggleProxy(false)" 
                        class="{'bg-blue-600 text-white' if not proxy_enabled else 'bg-gray-200 text-gray-700'} px-3 py-1 rounded text-sm">
                    Disable
                </button>
            </div>
        </div>
        """
        return HTMLResponse(content=html)
    except Exception as e:
        logger.error(f"Error retrieving proxy status: {e}")
        return HTMLResponse(content=f"<p class='text-red-500'>Error retrieving proxy status: {str(e)}</p>")


@router.get("/dashboard/postgres-status", response_class=HTMLResponse)
async def get_postgres_status_component():
    """Get the PostgreSQL status component for the dashboard."""
    try:
        # Get database status from DB manager
        db_manager = DBManager()
        db_health = db_manager.health_check()
        
        status_color = "text-green-600 font-medium" if db_health["status"] == "healthy" else "text-red-500 font-medium"
        
        # Format HTML response
        html = f"""
        <div>
            <p class="text-sm mb-2">
                <span class="font-medium text-gray-600">Database Status:</span> 
                <span class="{status_color}">
                    {db_health["status"].capitalize()}
                </span>
            </p>
            """
        
        if db_health["status"] == "healthy":
            html += f"""
            <p class="text-sm mb-2"><span class="font-medium text-gray-600">PostgreSQL Version:</span> {db_health["version"].split()[1]}</p>
            <p class="text-sm mb-2"><span class="font-medium text-gray-600">pgvector Extension:</span> {'Enabled' if db_health["vector_enabled"] else 'Disabled'}</p>
            <p class="text-sm mb-2"><span class="font-medium text-gray-600">Database Size:</span> {db_health["db_size_mb"]:.2f} MB</p>
            <p class="text-sm mb-2"><span class="font-medium text-gray-600">Business Terms:</span> {db_health["terms_count"]}</p>
            <p class="text-sm"><span class="font-medium text-gray-600">Active Connections:</span> {db_health["active_connections"]}</p>
            """
        else:
            html += f"""
            <p class="text-sm text-red-500">Error: {db_health.get("error", "Unknown error")}</p>
            """
        
        html += "</div>"
        return HTMLResponse(content=html)
    except Exception as e:
        logger.error(f"Error retrieving PostgreSQL status: {e}")
        return HTMLResponse(content=f"<p class='text-red-500'>Error retrieving PostgreSQL status: {str(e)}</p>")


@router.get("/dashboard/enhancement-jobs", response_class=HTMLResponse)
async def get_enhancement_jobs_component():
    """Get the enhancement jobs component for the dashboard."""
    try:
        if not enhancement_jobs:
            return HTMLResponse(content="<p class='text-sm text-gray-500'>No active enhancement jobs</p>")
        
        jobs_html = ""
        for job_id, job in enhancement_jobs.items():
            status = job["status"]
            status_color = {
                EnhancementStatus.PENDING: "bg-yellow-100 text-yellow-800",
                EnhancementStatus.IN_PROGRESS: "bg-blue-100 text-blue-800",
                EnhancementStatus.COMPLETED: "bg-green-100 text-green-800",
                EnhancementStatus.FAILED: "bg-red-100 text-red-800"
            }.get(status, "bg-gray-100 text-gray-800")
            
            element_name = job["request"]["data_element"]["existing_name"]
            
            jobs_html += f"""
            <div class="border rounded p-2 mb-2">
                <div class="flex justify-between items-center">
                    <div class="text-sm font-medium">{element_name}</div>
                    <div class="text-xs px-2 py-1 rounded {status_color}">{status.value}</div>
                </div>
                <div class="text-xs text-gray-500 mt-1">ID: {job_id}</div>
            </div>
            """
        
        html = f"""
        <div class="max-h-64 overflow-y-auto">
            {jobs_html}
        </div>
        <div class="mt-2 text-xs text-gray-500">Total: {len(enhancement_jobs)} jobs</div>
        """
        return HTMLResponse(content=html)
    except Exception as e:
        logger.error(f"Error retrieving enhancement jobs: {e}")
        return HTMLResponse(content=f"<p class='text-red-500'>Error retrieving enhancement jobs: {str(e)}</p>")


@router.get("/dashboard/tagging-jobs", response_class=HTMLResponse)
async def get_tagging_jobs_component():
    """Get the tagging jobs component for the dashboard."""
    try:
        if not tagging_jobs:
            return HTMLResponse(content="<p class='text-sm text-gray-500'>No active tagging jobs</p>")
        
        jobs_html = ""
        for job_id, job in tagging_jobs.items():
            element_name = job["tagging_result"]["element_name"]
            terms_count = len(job["tagging_result"]["matching_terms"])
            modeling_required = job["tagging_result"]["modeling_required"]
            
            status_color = "bg-green-100 text-green-800"
            status_text = f"{terms_count} terms matched"
            
            if modeling_required:
                status_color = "bg-yellow-100 text-yellow-800"
                status_text = "Modeling required"
            
            jobs_html += f"""
            <div class="border rounded p-2 mb-2">
                <div class="flex justify-between items-center">
                    <div class="text-sm font-medium">{element_name}</div>
                    <div class="text-xs px-2 py-1 rounded {status_color}">{status_text}</div>
                </div>
                <div class="text-xs text-gray-500 mt-1">ID: {job_id}</div>
            </div>
            """
        
        html = f"""
        <div class="max-h-64 overflow-y-auto">
            {jobs_html}
        </div>
        <div class="mt-2 text-xs text-gray-500">Total: {len(tagging_jobs)} jobs</div>
        """
        return HTMLResponse(content=html)
    except Exception as e:
        logger.error(f"Error retrieving tagging jobs: {e}")
        return HTMLResponse(content=f"<p class='text-red-500'>Error retrieving tagging jobs: {str(e)}</p>")
