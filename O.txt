import os
import logging
import threading
import time
import subprocess
import sys
from pathlib import Path
import chromadb
from chromadb.config import Settings

logger = logging.getLogger(__name__)

class ChromaServer:
    """Simple ChromaDB server implementation for local use."""
    
    def __init__(self, persistent_dir: str = "./chroma_db", port: int = 8000):
        """
        Initialize a ChromaDB server.
        
        Args:
            persistent_dir: Directory for persistent storage
            port: Port to run the server on
        """
        self.persistent_dir = persistent_dir
        self.port = port
        self.server = None
        self.server_thread = None
        self.process = None
        self.is_running = False
    
    def start(self):
        """Start the ChromaDB server in a separate thread."""
        if self.is_running:
            logger.info("ChromaDB server is already running")
            return True
        
        try:
            # Ensure directory exists
            os.makedirs(self.persistent_dir, exist_ok=True)
            
            # First attempt: Try to start standalone server using subprocess
            # This is more reliable than the internal server
            try:
                logger.info(f"Starting ChromaDB standalone server on port {self.port}")
                
                # Get Python executable path
                python_exe = sys.executable
                
                # Start the standalone server
                cmd = [
                    python_exe, 
                    "-m", "chromadb.app",
                    "--host", "0.0.0.0",
                    "--port", str(self.port),
                    "--path", self.persistent_dir
                ]
                
                # Start server in detached process
                self.process = subprocess.Popen(
                    cmd,
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE,
                    text=True
                )
                
                # Wait a bit for server to start
                time.sleep(3)
                
                # Check if process is still running
                if self.process.poll() is None:
                    logger.info("ChromaDB standalone server started successfully")
                    self.is_running = True
                    return True
                else:
                    stdout, stderr = self.process.communicate()
                    logger.error(f"ChromaDB server exited with code {self.process.returncode}")
                    logger.error(f"STDOUT: {stdout}")
                    logger.error(f"STDERR: {stderr}")
                    self.process = None
                    raise RuntimeError("ChromaDB server failed to start")
                
            except Exception as e:
                logger.warning(f"Failed to start standalone server: {e}")
                
                # Fall back to internal server
                try:
                    def run_server():
                        try:
                            logger.info(f"Starting internal ChromaDB server on port {self.port}")
                            
                            # Create and start the server
                            settings = Settings(
                                persist_directory=self.persistent_dir,
                                allow_reset=True,
                                anonymized_telemetry=False
                            )
                            
                            self.server = chromadb.Server(settings=settings)
                            self.server.run(host="0.0.0.0", port=self.port)
                            
                        except Exception as server_e:
                            logger.error(f"Error running internal ChromaDB server: {server_e}")
                            self.is_running = False
                    
                    # Start server in a thread
                    self.server_thread = threading.Thread(target=run_server, daemon=True)
                    self.server_thread.start()
                    
                    # Wait a bit to let server start
                    time.sleep(3)
                    self.is_running = True
                    logger.info("ChromaDB internal server started")
                    
                    return True
                    
                except Exception as internal_e:
                    logger.error(f"Failed to start internal server: {internal_e}")
                    return False
            
        except Exception as e:
            logger.error(f"Failed to start ChromaDB server: {e}")
            return False
    
    def stop(self):
        """Stop the ChromaDB server."""
        if not self.is_running:
            return
        
        try:
            if self.process:
                logger.info("Stopping standalone ChromaDB server")
                self.process.terminate()
                try:
                    self.process.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    self.process.kill()
                self.process = None
                self.is_running = False
                logger.info("ChromaDB standalone server stopped")
                
            elif self.server:
                logger.info("Stopping internal ChromaDB server")
                self.server.stop()
                self.is_running = False
                logger.info("ChromaDB internal server stopped")
                
        except Exception as e:
            logger.error(f"Error stopping ChromaDB server: {e}")

# Singleton instance
_server_instance = None

def get_chroma_server(persistent_dir: str = "./chroma_db", port: int = 8000):
    """Get or create a ChromaDB server instance."""
    global _server_instance
    if _server_instance is None:
        _server_instance = ChromaServer(persistent_dir, port)
    return _server_instance
