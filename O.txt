"""
GSUtil Certificate Manager - Uses gsutil command to fetch certificates from GCP.

This module provides a simpler approach to download SSL certificates from GCP buckets 
using the gsutil command line tool, which already respects proxy settings.
"""

import os
import logging
import tempfile
import subprocess
import atexit
from typing import Optional

logger = logging.getLogger(__name__)

# Global variable to track the temporary file for cleanup
_temp_cert_file = None

def cleanup_temp_cert():
    """Clean up the temporary certificate file on application exit."""
    global _temp_cert_file
    if _temp_cert_file and os.path.exists(_temp_cert_file):
        try:
            os.remove(_temp_cert_file)
            logger.info(f"Cleaned up temporary certificate file: {_temp_cert_file}")
        except Exception as e:
            logger.error(f"Error cleaning up temporary certificate file: {e}")

# Register cleanup function to run at exit
atexit.register(cleanup_temp_cert)

def is_gcp_path(path: str) -> bool:
    """
    Check if a path is a GCP bucket path.
    
    Args:
        path: Path to check
        
    Returns:
        bool: True if path is a GCP bucket path, False otherwise
    """
    return path.startswith("gs://")

def check_gsutil_installed() -> bool:
    """
    Check if gsutil is installed and available.
    
    Returns:
        bool: True if gsutil is available, False otherwise
    """
    try:
        result = subprocess.run(
            ["gsutil", "--version"], 
            stdout=subprocess.PIPE, 
            stderr=subprocess.PIPE,
            check=False,
            text=True
        )
        return result.returncode == 0
    except FileNotFoundError:
        logger.error("gsutil command not found. Make sure Google Cloud SDK is installed and in your PATH")
        return False
    except Exception as e:
        logger.error(f"Error checking gsutil: {e}")
        return False

def fetch_certificate(gcp_path: str) -> Optional[str]:
    """
    Fetch certificate from GCP bucket using gsutil command.
    
    Args:
        gcp_path: GCP bucket path (gs://bucket-name/path/to/cert.pem)
        
    Returns:
        str: Path to temporary certificate file, or None if download failed
    """
    global _temp_cert_file
    
    # Return existing temp file if already downloaded
    if _temp_cert_file and os.path.exists(_temp_cert_file):
        logger.info(f"Using existing temporary certificate: {_temp_cert_file}")
        return _temp_cert_file
    
    # Validate GCP path
    if not is_gcp_path(gcp_path):
        logger.error(f"Not a valid GCP path: {gcp_path}")
        return None
    
    # Check if gsutil is installed
    if not check_gsutil_installed():
        return None
    
    try:
        # Create a temporary file
        fd, temp_path = tempfile.mkstemp(suffix='.pem')
        os.close(fd)  # Close the file descriptor
        
        logger.info(f"Downloading certificate from {gcp_path} to {temp_path} using gsutil...")
        
        # Run gsutil command to copy the file
        result = subprocess.run(
            ["gsutil", "cp", gcp_path, temp_path],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            check=False,
            text=True
        )
        
        if result.returncode != 0:
            logger.error(f"Failed to download certificate: {result.stderr}")
            if os.path.exists(temp_path):
                os.remove(temp_path)
            return None
        
        if not os.path.exists(temp_path) or os.path.getsize(temp_path) == 0:
            logger.error("Certificate file was not downloaded or is empty")
            if os.path.exists(temp_path):
                os.remove(temp_path)
            return None
        
        # Store the temp path for cleanup
        _temp_cert_file = temp_path
        
        logger.info(f"Certificate downloaded successfully to: {temp_path}")
        return temp_path
        
    except Exception as e:
        logger.error(f"Error downloading certificate using gsutil: {e}")
        if 'temp_path' in locals() and os.path.exists(temp_path):
            os.remove(temp_path)
        return None

def get_or_download_cert(cert_path: str) -> Optional[str]:
    """
    Get certificate from GCP bucket or local path.
    
    If path is a GCP bucket path (gs://), download to a temporary location with gsutil.
    If path is a local path, return it unchanged if it exists.
    
    Args:
        cert_path: Path to certificate (local or GCP bucket)
        
    Returns:
        Path to certificate file, or None if not available
    """
    # Handle GCP bucket path
    if is_gcp_path(cert_path):
        return fetch_certificate(cert_path)
    
    # For local paths, check if file exists and return the path
    elif os.path.exists(cert_path) and os.access(cert_path, os.R_OK):
        return cert_path
    
    # File not found
    logger.warning(f"Certificate file not found: {cert_path}")
    return None
