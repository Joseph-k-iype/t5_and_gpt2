import argparse
import logging
import os
from fastapi import FastAPI, Depends
from fastapi.middleware.cors import CORSMiddleware
import uvicorn
from app.api.routes.enhancement import router as enhancement_router
from app.api.routes.tagging import router as tagging_router
from app.config.environment import get_os_env

# Set up logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

def create_application(proxy_enabled: bool = None) -> FastAPI:
    """
    Create the FastAPI application.
    
    Args:
        proxy_enabled: Whether to use proxy for API connections
    
    Returns:
        FastAPI: The application instance
    """
    # Initialize environment with proxy setting
    env = get_os_env(proxy_enabled=proxy_enabled)
    
    # Create FastAPI app
    app = FastAPI(
        title="Data Element Enhancement and Tagging API",
        description="API for enhancing data element names and descriptions based on ISO/IEC 11179 standards, and tagging with preferred business terms",
        version="1.0.0",
    )
    
    # Configure CORS
    app.add_middleware(
        CORSMiddleware,
        allow_origins=["*"],  # Restrict in production
        allow_credentials=True,
        allow_methods=["*"],
        allow_headers=["*"],
    )
    
    # Include routers
    app.include_router(enhancement_router)
    app.include_router(tagging_router)
    
    @app.get("/health")
    async def health_check():
        """Health check endpoint."""
        return {
            "status": "healthy",
            "proxy_enabled": str_to_bool(env.get("PROXY_ENABLED", "False")),
            "azure_endpoint": env.get("AZURE_ENDPOINT", ""),
            "model": env.get("MODEL_NAME", "gpt-4o")
        }
    
    @app.get("/")
    async def root():
        """Root endpoint with basic information."""
        return {
            "application": "Data Element Enhancement and Tagging API",
            "version": "1.0.0",
            "status": "running",
            "documentation": "/docs",
            "proxy_enabled": str_to_bool(env.get("PROXY_ENABLED", "False"))
        }
    
    return app

# Helper function for boolean conversion
def str_to_bool(s: str) -> bool:
    """Convert string to boolean."""
    return s.lower() in ('true', 't', 'yes', 'y', '1')

def parse_args():
    """Parse command line arguments."""
    parser = argparse.ArgumentParser(description="ISO/IEC 11179 Data Enhancement API")
    parser.add_argument("--proxy", dest="proxy_enabled", action="store_true", 
                        help="Enable proxy for API connections")
    parser.add_argument("--no-proxy", dest="proxy_enabled", action="store_false", 
                        help="Disable proxy for API connections")
    parser.add_argument("--host", type=str, default="0.0.0.0", 
                        help="Host to bind the server to")
    parser.add_argument("--port", type=int, default=8000, 
                        help="Port to bind the server to")
    parser.add_argument("--reload", action="store_true", 
                        help="Enable auto-reload for development")
    parser.add_argument("--config", type=str, default="env/config.env", 
                        help="Path to configuration file")
    parser.add_argument("--creds", type=str, default="env/credentials.env", 
                        help="Path to credentials file")
    parser.add_argument("--cert", type=str, default="env/cacert.pem", 
                        help="Path to SSL certificate file")
    
    parser.set_defaults(proxy_enabled=None)  # Default to None to use config file setting
    
    return parser.parse_args()

app = None

def get_app():
    """Get the FastAPI application."""
    global app
    if app is None:
        args = parse_args()
        app = create_application(proxy_enabled=args.proxy_enabled)
    return app

if __name__ == "__main__":
    # For local development with command line arguments
    args = parse_args()
    
    # Log startup configuration
    logger.info(f"Starting server with configuration:")
    logger.info(f"  Host: {args.host}")
    logger.info(f"  Port: {args.port}")
    logger.info(f"  Proxy: {args.proxy_enabled}")
    logger.info(f"  Config file: {args.config}")
    logger.info(f"  Credentials file: {args.creds}")
    logger.info(f"  Certificate file: {args.cert}")
    logger.info(f"  Auto-reload: {args.reload}")
    
    # Create application with command line arguments
    os.environ["ENV_CONFIG_PATH"] = args.config
    os.environ["ENV_CREDS_PATH"] = args.creds
    os.environ["ENV_CERT_PATH"] = args.cert
    
    app = create_application(proxy_enabled=args.proxy_enabled)
    
    # Run server
    uvicorn.run(
        "main:app", 
        host=args.host, 
        port=args.port, 
        reload=args.reload
    )
