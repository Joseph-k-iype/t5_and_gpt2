/**
 * Dashboard Utilities
 * 
 * JavaScript utilities for the Data Element Enhancement API Dashboard
 */

// Update current time
function updateTime() {
    const now = new Date();
    document.getElementById('current-time').textContent = now.toLocaleString();
}

// Toggle proxy setting
function toggleProxy(enabled) {
    const proxyBtn = document.getElementById('proxy-btn');
    if (proxyBtn) proxyBtn.disabled = true;
    
    // Show loading toast
    showToast('Updating proxy settings...', 'info');
    
    fetch('/api/v1/settings/proxy', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ enabled: enabled })
    })
    .then(response => response.json())
    .then(data => {
        // Refresh the proxy status component
        refreshComponent('proxy-settings');
        
        // Also refresh the system status as it shows proxy status
        refreshComponent('system-status');
        
        // Show success toast
        showToast(`Proxy ${enabled ? 'enabled' : 'disabled'} successfully`, 'success');
        
        if (proxyBtn) proxyBtn.disabled = false;
    })
    .catch(error => {
        console.error('Error toggling proxy:', error);
        showToast('Error toggling proxy setting', 'error');
        if (proxyBtn) proxyBtn.disabled = false;
    });
}

// Restart ChromaDB server
function restartChromaDB() {
    const restartBtn = document.getElementById('restart-chromadb-btn');
    if (restartBtn) restartBtn.disabled = true;
    
    // Show loading toast
    showToast('Restarting ChromaDB server...', 'info');
    
    fetch('/api/dashboard/restart-chroma', {
        method: 'POST'
    })
    .then(response => response.text())
    .then(data => {
        // Show result
        const resultElement = document.getElementById('chromadb-restart-result');
        if (resultElement) {
            resultElement.innerHTML = data;
            resultElement.classList.remove('hidden');
            
            // Hide after 5 seconds
            setTimeout(() => {
                resultElement.classList.add('hidden');
            }, 5000);
        }
        
        // Refresh the ChromaDB status component
        refreshComponent('chromadb-status');
        
        // Show success toast
        showToast('ChromaDB server restarted', 'success');
        
        if (restartBtn) restartBtn.disabled = false;
    })
    .catch(error => {
        console.error('Error restarting ChromaDB:', error);
        showToast('Error restarting ChromaDB server', 'error');
        if (restartBtn) restartBtn.disabled = false;
    });
}

// Refresh a component by ID
function refreshComponent(componentId) {
    const component = document.getElementById(componentId);
    if (component) {
        component.setAttribute('hx-trigger', 'load');
        htmx.process(component);
    }
}

// Show a toast notification
function showToast(message, type = 'info') {
    // Create toast element if it doesn't exist
    let toast = document.getElementById('toast');
    if (!toast) {
        toast = document.createElement('div');
        toast.id = 'toast';
        toast.className = 'toast';
        document.body.appendChild(toast);
    }
    
    // Set toast type
    toast.className = `toast toast-${type}`;
    
    // Set message with icon
    let icon = '';
    switch (type) {
        case 'success':
            icon = '<i class="fas fa-check-circle mr-2"></i>';
            break;
        case 'error':
            icon = '<i class="fas fa-exclamation-circle mr-2"></i>';
            break;
        case 'warning':
            icon = '<i class="fas fa-exclamation-triangle mr-2"></i>';
            break;
        default:
            icon = '<i class="fas fa-info-circle mr-2"></i>';
    }
    
    toast.innerHTML = `${icon}${message}`;
    
    // Show toast
    setTimeout(() => {
        toast.classList.add('show');
    }, 100);
    
    // Hide toast after 3 seconds
    setTimeout(() => {
        toast.classList.remove('show');
    }, 3000);
}

// Copy text to clipboard
function copyToClipboard(text) {
    navigator.clipboard.writeText(text).then(() => {
        showToast('Copied to clipboard', 'success');
    }).catch(err => {
        console.error('Failed to copy text: ', err);
        showToast('Failed to copy to clipboard', 'error');
    });
}

// Initialize dashboard
document.addEventListener('DOMContentLoaded', function() {
    // Set up time updates
    setInterval(updateTime, 1000);
    updateTime();
    
    // Attach event handlers to refresh buttons
    document.querySelectorAll('.refresh-button').forEach(button => {
        button.addEventListener('click', function() {
            const target = this.getAttribute('data-target');
            if (target) {
                refreshComponent(target);
            }
        });
    });
});
