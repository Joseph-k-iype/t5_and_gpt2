"""
Dashboard API - Endpoints for rendering the dashboard and its components.

This module provides API endpoints for rendering the system dashboard
and its individual components using HTMX for dynamic content updates.
"""

import logging
import os
from typing import Dict, Any, List, Optional
from fastapi import APIRouter, HTTPException, Request, Depends
from fastapi.responses import HTMLResponse
from fastapi.templating import Jinja2Templates
from fastapi.staticfiles import StaticFiles
from app.config.environment import get_os_env, str_to_bool
from app.core.db_manager import DBManager
from app.config.settings import get_vector_store, get_vector_db_type
from app.api.routes.enhancement import enhancement_jobs
from app.api.routes.tagging import tagging_jobs
from app.core.models import EnhancementStatus
import psutil
import time
from datetime import datetime

logger = logging.getLogger(__name__)
router = APIRouter(tags=["dashboard"])

# Set up templates
templates_dir = os.path.join(os.path.dirname(os.path.dirname(os.path.dirname(__file__))), "templates")
os.makedirs(templates_dir, exist_ok=True)
templates = Jinja2Templates(directory=templates_dir)

# Create the templates directory and dashboard.html if they don't exist
dashboard_html_path = os.path.join(templates_dir, "dashboard.html")
if not os.path.exists(dashboard_html_path):
    # Create a basic dashboard template - template is in the file, but for production
    # you would have this already in your templates directory
    logger.info(f"Dashboard template not found at {dashboard_html_path}. Using default template.")

@router.get("/dashboard", response_class=HTMLResponse)
async def get_dashboard(request: Request):
    """
    Render the dashboard UI.
    
    Args:
        request: FastAPI request object
        
    Returns:
        HTML response with the dashboard
    """
    return templates.TemplateResponse("dashboard.html", {"request": request})


@router.get("/dashboard/system-status", response_class=HTMLResponse)
async def get_system_status_component():
    """
    Get the system status component for the dashboard.
    
    Returns:
        HTML component for system status
    """
    try:
        # Get system metrics
        cpu_percent = psutil.cpu_percent(interval=0.1)
        memory = psutil.virtual_memory()
        memory_percent = memory.percent
        
        # Get uptime
        uptime = time.time() - psutil.boot_time()
        uptime_str = f"{int(uptime // 86400)}d {int((uptime % 86400) // 3600)}h {int((uptime % 3600) // 60)}m"
        
        # Format HTML response
        html = f"""
        <div class="grid grid-cols-2 gap-2">
            <div>
                <p class="text-sm font-medium text-gray-600">CPU Usage</p>
                <div class="w-full bg-gray-200 rounded-full h-2.5">
                    <div class="bg-blue-600 h-2.5 rounded-full" style="width: {cpu_percent}%"></div>
                </div>
                <p class="text-xs mt-1">{cpu_percent}%</p>
            </div>
            <div>
                <p class="text-sm font-medium text-gray-600">Memory Usage</p>
                <div class="w-full bg-gray-200 rounded-full h-2.5">
                    <div class="bg-blue-600 h-2.5 rounded-full" style="width: {memory_percent}%"></div>
                </div>
                <p class="text-xs mt-1">{memory_percent}% ({memory.used // (1024*1024)} MB / {memory.total // (1024*1024)} MB)</p>
            </div>
        </div>
        <div class="mt-2">
            <p class="text-sm"><span class="font-medium text-gray-600">System Uptime:</span> {uptime_str}</p>
            <p class="text-sm"><span class="font-medium text-gray-600">Server Time:</span> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
        </div>
        """
        return HTMLResponse(content=html)
    except Exception as e:
        logger.error(f"Error retrieving system status: {e}")
        return HTMLResponse(content=f"<p class='text-red-500'>Error retrieving system status: {str(e)}</p>")


@router.get("/dashboard/proxy-status", response_class=HTMLResponse)
async def get_proxy_status_component():
    """
    Get the proxy status component for the dashboard.
    
    Returns:
        HTML component for proxy status
    """
    try:
        env = get_os_env()
        proxy_enabled = str_to_bool(env.get("PROXY_ENABLED", "False"))
        
        proxy_domain = env.get("HTTPS_PROXY_DOMAIN", "Not configured")
        
        # Format HTML response with toggle buttons
        html = f"""
        <div>
            <p class="text-sm mb-2"><span class="font-medium text-gray-600">Proxy Status:</span> 
                <span class="{'text-green-600 font-medium' if proxy_enabled else 'text-gray-500'}">
                    {"Enabled" if proxy_enabled else "Disabled"}
                </span>
            </p>
            <p class="text-sm mb-3"><span class="font-medium text-gray-600">Proxy Domain:</span> {proxy_domain}</p>
            
            <div class="flex space-x-2">
                <button onclick="toggleProxy(true)" 
                        class="{'bg-blue-600 text-white' if proxy_enabled else 'bg-gray-200 text-gray-700'} px-3 py-1 rounded text-sm">
                    Enable
                </button>
                <button onclick="toggleProxy(false)" 
                        class="{'bg-blue-600 text-white' if not proxy_enabled else 'bg-gray-200 text-gray-700'} px-3 py-1 rounded text-sm">
                    Disable
                </button>
            </div>
        </div>
        """
        return HTMLResponse(content=html)
    except Exception as e:
        logger.error(f"Error retrieving proxy status: {e}")
        return HTMLResponse(content=f"<p class='text-red-500'>Error retrieving proxy status: {str(e)}</p>")


@router.get("/dashboard/postgres-status", response_class=HTMLResponse)
async def get_postgres_status_component():
    """
    Get the PostgreSQL status component for the dashboard.
    
    Returns:
        HTML component for PostgreSQL status
    """
    try:
        # Get database status from DB manager
        db_manager = DBManager()
        db_health = db_manager.health_check()
        
        status_color = "text-green-600 font-medium" if db_health["status"] == "healthy" else "text-red-500 font-medium"
        
        # Format HTML response
        html = f"""
        <div>
            <p class="text-sm mb-2">
                <span class="font-medium text-gray-600">Database Status:</span> 
                <span class="{status_color}">
                    {db_health["status"].capitalize()}
                </span>
            </p>
            """
        
        if db_health["status"] == "healthy":
            html += f"""
            <p class="text-sm mb-2"><span class="font-medium text-gray-600">PostgreSQL Version:</span> {db_health["version"].split()[1]}</p>
            <p class="text-sm mb-2"><span class="font-medium text-gray-600">pgvector Extension:</span> {'Enabled' if db_health["vector_enabled"] else 'Disabled'}</p>
            <p class="text-sm mb-2"><span class="font-medium text-gray-600">Database Size:</span> {db_health["db_size_mb"]:.2f} MB</p>
            <p class="text-sm mb-2"><span class="font-medium text-gray-600">Business Terms:</span> {db_health["terms_count"]}</p>
            <p class="text-sm"><span class="font-medium text-gray-600">Active Connections:</span> {db_health["active_connections"]}</p>
            """
        else:
            html += f"""
            <p class="text-sm text-red-500">Error: {db_health.get("error", "Unknown error")}</p>
            """
        
        html += "</div>"
        return HTMLResponse(content=html)
    except Exception as e:
        logger.error(f"Error retrieving PostgreSQL status: {e}")
        return HTMLResponse(content=f"<p class='text-red-500'>Error retrieving PostgreSQL status: {str(e)}</p>")


@router.get("/dashboard/vector-database", response_class=HTMLResponse)
async def get_vector_database_component():
    """
    Get the vector database status component for the dashboard.
    
    Returns:
        HTML component for vector database status
    """
    try:
        env = get_os_env()
        vector_db_type = env.get("VECTOR_DB_TYPE", "postgresql").lower()
        
        if vector_db_type == "chroma":
            # For ChromaDB
            persist_dir = env.get("CHROMA_PERSIST_DIR", "./data/chroma_db")
            collection_name = env.get("CHROMA_COLLECTION", "business_terms")
            
            # Get stats from ChromaDB
            from app.core.vector_store_chroma import ChromaDBVectorStore
            store = ChromaDBVectorStore(collection_name=collection_name, persist_dir=persist_dir)
            terms = store.get_all_terms()
            terms_count = len(terms)
            
            html = f"""
            <div>
                <p class="text-sm mb-2">
                    <span class="font-medium text-gray-600">Vector Database:</span> 
                    <span class="text-blue-600 font-medium">ChromaDB</span>
                </p>
                <p class="text-sm mb-2"><span class="font-medium text-gray-600">Persist Directory:</span> {persist_dir}</p>
                <p class="text-sm mb-2"><span class="font-medium text-gray-600">Collection:</span> {collection_name}</p>
                <p class="text-sm mb-2"><span class="font-medium text-gray-600">Terms Count:</span> {terms_count}</p>
                
                <div class="mt-3">
                    <button onclick="switchVectorDB('postgresql')" class="bg-gray-200 hover:bg-gray-300 text-gray-700 px-3 py-1 rounded text-sm">
                        Switch to PostgreSQL
                    </button>
                </div>
            </div>
            """
        else:
            # For PostgreSQL
            from app.core.vector_store_pg import PostgreSQLVectorStore
            store = PostgreSQLVectorStore()
            
            # Get database status from DB manager
            db_manager = DBManager()
            db_health = db_manager.health_check()
            
            if db_health["status"] == "healthy":
                html = f"""
                <div>
                    <p class="text-sm mb-2">
                        <span class="font-medium text-gray-600">Vector Database:</span> 
                        <span class="text-green-600 font-medium">PostgreSQL + pgvector</span>
                    </p>
                    <p class="text-sm mb-2"><span class="font-medium text-gray-600">PostgreSQL Version:</span> {db_health["version"].split()[1]}</p>
                    <p class="text-sm mb-2"><span class="font-medium text-gray-600">pgvector Extension:</span> {'Enabled' if db_health["vector_enabled"] else 'Disabled'}</p>
                    <p class="text-sm mb-2"><span class="font-medium text-gray-600">Schema:</span> {db_manager.schema_name}</p>
                    <p class="text-sm mb-2"><span class="font-medium text-gray-600">Terms Count:</span> {db_health["terms_count"]}</p>
                    
                    <div class="mt-3">
                        <button onclick="switchVectorDB('chroma')" class="bg-gray-200 hover:bg-gray-300 text-gray-700 px-3 py-1 rounded text-sm">
                            Switch to ChromaDB
                        </button>
                    </div>
                </div>
                """
            else:
                html = f"""
                <div>
                    <p class="text-sm mb-2">
                        <span class="font-medium text-gray-600">Vector Database:</span> 
                        <span class="text-red-500 font-medium">PostgreSQL + pgvector (Unhealthy)</span>
                    </p>
                    <p class="text-sm text-red-500">Error: {db_health.get("error", "Unknown error")}</p>
                    
                    <div class="mt-3">
                        <button onclick="switchVectorDB('chroma')" class="bg-gray-200 hover:bg-gray-300 text-gray-700 px-3 py-1 rounded text-sm">
                            Switch to ChromaDB
                        </button>
                    </div>
                </div>
                """
        
        return HTMLResponse(content=html)
    except Exception as e:
        logger.error(f"Error retrieving vector database status: {e}")
        return HTMLResponse(content=f"<p class='text-red-500'>Error retrieving vector database status: {str(e)}</p>")


@router.get("/dashboard/enhancement-jobs", response_class=HTMLResponse)
async def get_enhancement_jobs_component():
    """
    Get the enhancement jobs component for the dashboard.
    
    Returns:
        HTML component for enhancement jobs
    """
    try:
        if not enhancement_jobs:
            return HTMLResponse(content="<p class='text-sm text-gray-500'>No active enhancement jobs</p>")
        
        jobs_html = ""
        for job_id, job in enhancement_jobs.items():
            status = job["status"]
            status_color = {
                EnhancementStatus.PENDING: "bg-yellow-100 text-yellow-800",
                EnhancementStatus.IN_PROGRESS: "bg-blue-100 text-blue-800",
                EnhancementStatus.COMPLETED: "bg-green-100 text-green-800",
                EnhancementStatus.FAILED: "bg-red-100 text-red-800"
            }.get(status, "bg-gray-100 text-gray-800")
            
            # Extract element name from request or result
            element_name = ""
            if job.get("request") and job["request"].get("data_element"):
                element_name = job["request"]["data_element"].get("existing_name", "")
            elif job.get("result"):
                element_name = job["result"].get("existing_name", "")
                if not element_name:
                    element_name = job["result"].get("enhanced_name", "")
            
            jobs_html += f"""
            <div class="border rounded p-2 mb-2">
                <div class="flex justify-between items-center">
                    <div class="text-sm font-medium">{element_name}</div>
                    <div class="text-xs px-2 py-1 rounded {status_color}">{status.value}</div>
                </div>
                <div class="text-xs text-gray-500 mt-1">ID: {job_id}</div>
            </div>
            """
        
        html = f"""
        <div class="max-h-64 overflow-y-auto">
            {jobs_html}
        </div>
        <div class="mt-2 text-xs text-gray-500">Total: {len(enhancement_jobs)} jobs</div>
        """
        return HTMLResponse(content=html)
    except Exception as e:
        logger.error(f"Error retrieving enhancement jobs: {e}")
        return HTMLResponse(content=f"<p class='text-red-500'>Error retrieving enhancement jobs: {str(e)}</p>")


@router.get("/dashboard/tagging-jobs", response_class=HTMLResponse)
async def get_tagging_jobs_component():
    """
    Get the tagging jobs component for the dashboard.
    
    Returns:
        HTML component for tagging jobs
    """
    try:
        if not tagging_jobs:
            return HTMLResponse(content="<p class='text-sm text-gray-500'>No active tagging jobs</p>")
        
        jobs_html = ""
        for job_id, job in tagging_jobs.items():
            element_name = job["tagging_result"]["element_name"]
            terms_count = len(job["tagging_result"]["matching_terms"])
            modeling_required = job["tagging_result"]["modeling_required"]
            
            status_color = "bg-green-100 text-green-800"
            status_text = f"{terms_count} terms matched"
            
            if modeling_required:
                status_color = "bg-yellow-100 text-yellow-800"
                status_text = "Modeling required"
            
            jobs_html += f"""
            <div class="border rounded p-2 mb-2">
                <div class="flex justify-between items-center">
                    <div class="text-sm font-medium">{element_name}</div>
                    <div class="text-xs px-2 py-1 rounded {status_color}">{status_text}</div>
                </div>
                <div class="text-xs text-gray-500 mt-1">ID: {job_id}</div>
            </div>
            """
        
        html = f"""
        <div class="max-h-64 overflow-y-auto">
            {jobs_html}
        </div>
        <div class="mt-2 text-xs text-gray-500">Total: {len(tagging_jobs)} jobs</div>
        """
        return HTMLResponse(content=html)
    except Exception as e:
        logger.error(f"Error retrieving tagging jobs: {e}")
        return HTMLResponse(content=f"<p class='text-red-500'>Error retrieving tagging jobs: {str(e)}</p>")


@router.get("/dashboard/vector-database-stats", response_class=HTMLResponse)
async def get_vector_database_stats_component():
    """
    Get vector database statistics component for the dashboard.
    
    Returns:
        HTML component with vector database statistics
    """
    try:
        vector_store = get_vector_store()
        health = vector_store.health_check()
        
        # Get basic info
        vector_db_type = get_vector_db_type()
        terms_count = health.get("term_count", 0)
        
        # HTML for stats
        html = f"""
        <div>
            <h3 class="font-medium text-lg mb-2">Vector Database Stats</h3>
            <div class="grid grid-cols-2 gap-3">
                <div>
                    <p class="text-sm font-medium text-gray-600">Type</p>
                    <p class="text-lg">{vector_db_type.capitalize()}</p>
                </div>
                <div>
                    <p class="text-sm font-medium text-gray-600">Term Count</p>
                    <p class="text-lg">{terms_count}</p>
                </div>
                <div>
                    <p class="text-sm font-medium text-gray-600">Status</p>
                    <p class="text-lg {health['status'] == 'healthy' and 'text-green-600' or 'text-red-500'}">{health["status"].capitalize()}</p>
                </div>
            </div>
        </div>
        """
        
        # Add additional stats based on vector DB type
        if vector_db_type == "postgresql":
            db_manager = DBManager()
            db_health = db_manager.health_check()
            
            if db_health["status"] == "healthy":
                html += f"""
                <div class="mt-4">
                    <h4 class="font-medium text-md mb-1">PostgreSQL Details</h4>
                    <div class="text-sm">
                        <p><span class="font-medium text-gray-600">Version:</span> {db_health["version"].split()[1]}</p>
                        <p><span class="font-medium text-gray-600">pgvector:</span> {"Enabled" if db_health["vector_enabled"] else "Disabled"}</p>
                        <p><span class="font-medium text-gray-600">Database Size:</span> {db_health["db_size_mb"]:.2f} MB</p>
                        <p><span class="font-medium text-gray-600">Active Connections:</span> {db_health["active_connections"]}</p>
                    </div>
                </div>
                """
        
        elif vector_db_type == "chroma":
            env = get_os_env()
            html += f"""
            <div class="mt-4">
                <h4 class="font-medium text-md mb-1">ChromaDB Details</h4>
                <div class="text-sm">
                    <p><span class="font-medium text-gray-600">Persist Directory:</span> {env.get('CHROMA_PERSIST_DIR', './data/chroma_db')}</p>
                    <p><span class="font-medium text-gray-600">Collection:</span> {env.get('CHROMA_COLLECTION', 'business_terms')}</p>
                </div>
            </div>
            """
        
        return HTMLResponse(content=html)
    except Exception as e:
        logger.error(f"Error retrieving vector database stats: {e}")
        return HTMLResponse(content=f"<p class='text-red-500'>Error retrieving vector database stats: {str(e)}</p>")
