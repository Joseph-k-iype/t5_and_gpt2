"""
Bootstrap GCP Authentication - Utility for bootstrapping GCP authentication.

This module provides functionality to bootstrap GCP authentication without
having credentials stored locally, by using alternative authentication methods
(instance identity, environment variables, etc.) to access an initial service account.
"""

import os
import json
import logging
import tempfile
import atexit
from typing import Optional, Dict, Any
import requests

logger = logging.getLogger(__name__)

# Dictionary to track temp files, so we can clean them up on exit
_temp_cred_files = {}

def cleanup_temp_cred_files():
    """Clean up any temporary credential files on application exit."""
    for path in _temp_cred_files.values():
        try:
            if os.path.exists(path):
                os.remove(path)
                logger.info(f"Cleaned up temporary credential file: {path}")
        except Exception as e:
            logger.error(f"Error cleaning up temporary credential file {path}: {e}")

# Register cleanup function to run at exit
atexit.register(cleanup_temp_cred_files)

def get_gcp_metadata_token() -> Optional[str]:
    """
    Try to get a token from GCP instance metadata.
    This will only work when running on GCP VMs or Cloud Run.
    
    Returns:
        str: Access token or None if not available
    """
    try:
        metadata_url = "http://metadata.google.internal/computeMetadata/v1/instance/service-accounts/default/token"
        headers = {"Metadata-Flavor": "Google"}
        response = requests.get(metadata_url, headers=headers, timeout=2)
        
        if response.status_code == 200:
            token_data = response.json()
            return token_data.get("access_token")
        return None
    except Exception as e:
        logger.debug(f"Could not get metadata token: {e}")
        return None

def get_adc_token() -> Optional[str]:
    """
    Try to get a token from Application Default Credentials.
    This could be from gcloud auth or environment variable.
    
    Returns:
        str: Access token or None if not available
    """
    try:
        from google.auth.transport.requests import Request
        from google.auth import default
        
        credentials, _ = default(scopes=['https://www.googleapis.com/auth/cloud-platform'])
        
        # Refresh the credentials if necessary
        if not credentials.valid:
            credentials.refresh(Request())
        
        return credentials.token
    except Exception as e:
        logger.debug(f"Could not get ADC token: {e}")
        return None

def bootstrap_storage_client():
    """
    Create a GCP Storage client using available auth methods.
    
    Returns:
        storage.Client: Authenticated GCP Storage client
    """
    from google.cloud import storage
    
    # Try different methods to get authentication
    token = get_gcp_metadata_token() or get_adc_token()
    
    if token:
        # Create storage client with the token
        from google.auth import credentials
        from google.auth.transport.requests import AuthorizedSession
        
        class TokenCredentials(credentials.Credentials):
            def __init__(self, token):
                self.token = token
                self.expiry = None
                
            def refresh(self, request):
                pass
                
            @property
            def valid(self):
                return True
                
            def apply(self, headers, token=None):
                headers["Authorization"] = f"Bearer {self.token}"
                
        creds = TokenCredentials(token)
        client = storage.Client(credentials=creds)
        return client
    
    # Fall back to default credentials
    try:
        client = storage.Client()
        return client
    except Exception as e:
        logger.error(f"Could not create storage client with default credentials: {e}")
        raise

def fetch_service_account_json(bucket_name: str, object_path: str) -> Optional[str]:
    """
    Fetch the service account JSON file from GCP Storage.
    
    Args:
        bucket_name: GCP bucket name
        object_path: Path to service account file in bucket
        
    Returns:
        str: Path to temporary service account file or None if not available
    """
    cache_key = f"{bucket_name}/{object_path}"
    
    # If we've already processed this path, return the cached result
    if cache_key in _temp_cred_files:
        return _temp_cred_files[cache_key]
    
    try:
        # Create a bootstrapped storage client
        storage_client = bootstrap_storage_client()
        
        # Create a temporary file to store the service account
        fd, temp_path = tempfile.mkstemp(suffix='.json')
        os.close(fd)  # Close the file descriptor
        
        logger.info(f"Downloading service account from gs://{bucket_name}/{object_path} to {temp_path}")
        
        # Download file from GCP
        bucket = storage_client.bucket(bucket_name)
        blob = bucket.blob(object_path)
        blob.download_to_filename(temp_path)
        
        # Cache the temp path for future requests and cleanup
        _temp_cred_files[cache_key] = temp_path
        
        # Set environment variable to point to this file
        os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = temp_path
        
        logger.info(f"Service account downloaded and set as GOOGLE_APPLICATION_CREDENTIALS")
        return temp_path
    
    except Exception as e:
        logger.error(f"Error downloading service account from GCP: {e}")
        return None
