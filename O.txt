#!/usr/bin/env python
"""
Migration Utility - Tool for migrating data between ChromaDB and PostgreSQL vector stores.

This script provides utilities for migrating business terms and their embeddings
between ChromaDB and PostgreSQL vector stores in either direction.

Usage:
    python migrate_from_chroma.py --direction [chroma_to_pg | pg_to_chroma] 
                                 [--chroma-dir ./data/chroma_db] 
                                 [--chroma-collection business_terms]
                                 [--batch-size 100]
                                 [--pg-host localhost]
                                 [--pg-port 5432]
                                 [--pg-user postgres]
                                 [--pg-password postgres]
                                 [--pg-db metadata_db]
"""

import os
import sys
import argparse
import logging
import time
import json
from typing import List, Dict, Any, Optional

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('migration.log')
    ]
)

logger = logging.getLogger(__name__)

# Add the parent directory to path for importing modules
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

def set_environment_variables(args):
    """
    Set environment variables from command line arguments.
    
    Args:
        args: Command line arguments
    """
    # Set PostgreSQL environment variables if provided
    if args.pg_host:
        os.environ["PG_HOST"] = args.pg_host
    if args.pg_port:
        os.environ["PG_PORT"] = str(args.pg_port)
    if args.pg_user:
        os.environ["PG_USER"] = args.pg_user
    if args.pg_password:
        os.environ["PG_PASSWORD"] = args.pg_password
    if args.pg_db:
        os.environ["PG_DB"] = args.pg_db
    
    # Set ChromaDB environment variables
    os.environ["CHROMA_PERSIST_DIR"] = args.chroma_dir
    os.environ["CHROMA_COLLECTION"] = args.chroma_collection

def migrate_from_chroma_to_postgres(args):
    """
    Migrate data from ChromaDB to PostgreSQL.
    
    Args:
        args: Command line arguments
    """
    from app.core.vector_store_chroma import ChromaDBVectorStore
    from app.core.vector_store_pg import PostgreSQLVectorStore
    from app.core.embedding import EmbeddingClient, MyDocument
    
    logger.info(f"Starting migration from ChromaDB to PostgreSQL")
    logger.info(f"ChromaDB directory: {args.chroma_dir}")
    logger.info(f"ChromaDB collection: {args.chroma_collection}")
    logger.info(f"PostgreSQL host: {os.environ.get('PG_HOST', 'localhost')}")
    logger.info(f"PostgreSQL database: {os.environ.get('PG_DB', 'metadata_db')}")
    
    # Initialize vector stores
    chroma_store = ChromaDBVectorStore(
        collection_name=args.chroma_collection,
        persist_dir=args.chroma_dir
    )
    pg_store = PostgreSQLVectorStore()
    
    # Get all terms from ChromaDB
    terms = chroma_store.get_all_terms()
    total_terms = len(terms)
    logger.info(f"Found {total_terms} terms in ChromaDB")
    
    if not terms:
        logger.warning("No terms found in ChromaDB, nothing to migrate")
        return
    
    # Get embedding client
    embedding_client = EmbeddingClient()
    
    # Process in batches
    batch_size = args.batch_size
    total_migrated = 0
    
    for batch_start in range(0, total_terms, batch_size):
        batch_end = min(batch_start + batch_size, total_terms)
        current_batch = terms[batch_start:batch_end]
        logger.info(f"Processing batch {batch_start//batch_size + 1}/{(total_terms + batch_size - 1)//batch_size} ({len(current_batch)} terms)")
        
        # Prepare batch data for PostgreSQL
        batch = []
        for term in current_batch:
            term_id = term["id"]
            name = term["name"]
            description = term["description"]
            metadata = term.get("metadata", {})
            
            # Generate embedding (needed explicitly for PostgreSQL)
            doc = MyDocument(
                id=term_id,
                text=f"{name}. {description}"
            )
            
            doc_with_embedding = embedding_client.generate_embeddings(doc)
            
            if not doc_with_embedding.embedding:
                logger.warning(f"Skipping term without embedding: {name}")
                continue
            
            batch.append({
                "id": term_id,
                "name": name,
                "description": description,
                "embedding": doc_with_embedding.embedding,
                "metadata": metadata
            })
        
        # Store batch in PostgreSQL
        if batch:
            start_time = time.time()
            try:
                inserted = pg_store.batch_store_vectors(batch)
                total_migrated += inserted
                duration = time.time() - start_time
                logger.info(f"Migrated {inserted} terms in {duration:.2f}s ({inserted/duration:.2f} terms/sec)")
            except Exception as e:
                logger.error(f"Error migrating batch: {e}")
        
    logger.info(f"Migration summary: {total_migrated}/{total_terms} terms migrated from ChromaDB to PostgreSQL")

def migrate_from_postgres_to_chroma(args):
    """
    Migrate data from PostgreSQL to ChromaDB.
    
    Args:
        args: Command line arguments
    """
    from app.core.vector_store_chroma import ChromaDBVectorStore
    from app.core.vector_store_pg import PostgreSQLVectorStore
    from app.core.embedding import EmbeddingClient, MyDocument
    
    logger.info(f"Starting migration from PostgreSQL to ChromaDB")
    logger.info(f"PostgreSQL host: {os.environ.get('PG_HOST', 'localhost')}")
    logger.info(f"PostgreSQL database: {os.environ.get('PG_DB', 'metadata_db')}")
    logger.info(f"ChromaDB directory: {args.chroma_dir}")
    logger.info(f"ChromaDB collection: {args.chroma_collection}")
    
    # Initialize vector stores
    chroma_store = ChromaDBVectorStore(
        collection_name=args.chroma_collection,
        persist_dir=args.chroma_dir
    )
    pg_store = PostgreSQLVectorStore()
    
    # Get all terms from PostgreSQL
    terms = pg_store.get_all_terms()
    total_terms = len(terms)
    logger.info(f"Found {total_terms} terms in PostgreSQL")
    
    if not terms:
        logger.warning("No terms found in PostgreSQL, nothing to migrate")
        return
    
    # Get embedding client
    embedding_client = EmbeddingClient()
    
    # Process in batches
    batch_size = args.batch_size
    total_migrated = 0
    
    for batch_start in range(0, total_terms, batch_size):
        batch_end = min(batch_start + batch_size, total_terms)
        current_batch = terms[batch_start:batch_end]
        logger.info(f"Processing batch {batch_start//batch_size + 1}/{(total_terms + batch_size - 1)//batch_size} ({len(current_batch)} terms)")
        
        # Prepare batch data for ChromaDB
        batch = []
        for term in current_batch:
            term_id = term["id"]
            name = term["name"]
            description = term["description"]
            metadata = term.get("metadata", {})
            
            # Generate embedding for ChromaDB
            doc = MyDocument(
                id=term_id,
                text=f"{name}. {description}"
            )
            
            doc_with_embedding = embedding_client.generate_embeddings(doc)
            
            if not doc_with_embedding.embedding:
                logger.warning(f"Skipping term without embedding: {name}")
                continue
            
            batch.append({
                "id": term_id,
                "name": name,
                "description": description,
                "embedding": doc_with_embedding.embedding,
                "metadata": metadata
            })
        
        # Store batch in ChromaDB
        if batch:
            start_time = time.time()
            try:
                inserted = chroma_store.batch_store_vectors(batch)
                total_migrated += inserted
                duration = time.time() - start_time
                logger.info(f"Migrated {inserted} terms in {duration:.2f}s ({inserted/duration:.2f} terms/sec)")
            except Exception as e:
                logger.error(f"Error migrating batch: {e}")
    
    logger.info(f"Migration summary: {total_migrated}/{total_terms} terms migrated from PostgreSQL to ChromaDB")

def parse_args():
    """
    Parse command line arguments.
    
    Returns:
        argparse.Namespace: Parsed arguments
    """
    parser = argparse.ArgumentParser(description="Migrate vector data between ChromaDB and PostgreSQL")
    parser.add_argument("--direction", choices=["pg_to_chroma", "chroma_to_pg"], required=True,
                       help="Migration direction")
    parser.add_argument("--chroma-dir", default="./data/chroma_db",
                       help="ChromaDB persistent directory")
    parser.add_argument("--chroma-collection", default="business_terms",
                       help="ChromaDB collection name")
    parser.add_argument("--batch-size", type=int, default=100,
                       help="Batch size for processing terms")
    
    # PostgreSQL settings
    parser.add_argument("--pg-host", type=str, help="PostgreSQL host")
    parser.add_argument("--pg-port", type=int, help="PostgreSQL port")
    parser.add_argument("--pg-user", type=str, help="PostgreSQL user")
    parser.add_argument("--pg-password", type=str, help="PostgreSQL password")
    parser.add_argument("--pg-db", type=str, help="PostgreSQL database name")
    
    return parser.parse_args()

def main():
    """Main entry point for the migration script."""
    args = parse_args()
    
    # Set environment variables
    set_environment_variables(args)
    
    try:
        # Run migration based on direction
        if args.direction == "pg_to_chroma":
            migrate_from_postgres_to_chroma(args)
        else:
            migrate_from_chroma_to_postgres(args)
    except Exception as e:
        logger.error(f"Migration failed: {e}", exc_info=True)
        sys.exit(1)

if __name__ == "__main__":
    main()
