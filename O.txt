<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Data Quality Dashboard</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/PapaParse/5.3.2/papaparse.min.js"></script>
    <style>
        :root {
            --primary-color: #6C5CE7;
            --accent-color: #a29bfe;
            --text-color: #2c3e50;
            --light-text: #ecf0f1;
            --background: #f8f9fa;
            --card-bg: rgba(255, 255, 255, 0.25);
            --sidebar-width: 250px;
            --header-height: 60px;
            --border-radius: 15px;
            --shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.15);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        body {
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
            color: var(--text-color);
            min-height: 100vh;
            overflow-x: hidden;
        }

        .container {
            display: flex;
            width: 100%;
            min-height: 100vh;
        }

        /* Glassmorphic Card Style */
        .glass-card {
            background: var(--card-bg);
            backdrop-filter: blur(16px) saturate(180%);
            -webkit-backdrop-filter: blur(16px) saturate(180%);
            border-radius: var(--border-radius);
            border: 1px solid rgba(255, 255, 255, 0.18);
            box-shadow: var(--shadow);
            padding: 20px;
            margin-bottom: 20px;
            transition: all 0.3s ease;
        }

        .glass-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 12px 40px 0 rgba(31, 38, 135, 0.20);
        }

        /* Sidebar */
        .sidebar {
            width: var(--sidebar-width);
            height: 100vh;
            background: rgba(108, 92, 231, 0.9);
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px);
            padding: 20px;
            color: var(--light-text);
            position: fixed;
            z-index: 1000;
            transition: all 0.3s ease;
        }

        .sidebar-header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin-bottom: 30px;
        }

        .sidebar-header h1 {
            font-size: 1.5rem;
            font-weight: 600;
        }

        .sidebar-menu {
            margin-top: 40px;
        }

        .menu-item {
            display: flex;
            align-items: center;
            padding: 12px 15px;
            border-radius: 10px;
            margin-bottom: 10px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .menu-item:hover, .menu-item.active {
            background: rgba(255, 255, 255, 0.2);
        }

        .menu-item i {
            margin-right: 15px;
            font-size: 1.2rem;
        }

        .toggle-btn {
            background: none;
            border: none;
            color: var(--light-text);
            font-size: 1.5rem;
            cursor: pointer;
            display: none;
        }

        /* Main Content */
        .main-content {
            flex: 1;
            margin-left: var(--sidebar-width);
            padding: 20px;
            transition: all 0.3s ease;
        }

        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .title-section h1 {
            font-size: 2rem;
            font-weight: 700;
            margin-bottom: 5px;
        }

        .title-section p {
            color: #7f8c8d;
        }

        .dashboard-cards {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 20px;
        }

        .stat-card {
            text-align: center;
        }

        .stat-card h2 {
            font-size: 2.5rem;
            font-weight: 700;
            color: var(--primary-color);
            margin-bottom: 10px;
        }

        .stat-card p {
            color: #7f8c8d;
            font-size: 1rem;
        }

        .charts-container {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(500px, 1fr));
            gap: 20px;
            margin-bottom: 20px;
        }

        .chart-container {
            height: 300px;
            position: relative;
        }

        .table-container {
            width: 100%;
            overflow-x: auto;
        }

        table {
            width: 100%;
            border-collapse: collapse;
        }

        thead {
            background: rgba(108, 92, 231, 0.1);
        }

        th, td {
            padding: 15px;
            text-align: left;
            border-bottom: 1px solid rgba(0, 0, 0, 0.05);
        }

        th {
            font-weight: 600;
        }

        tr:hover {
            background: rgba(108, 92, 231, 0.05);
        }

        /* Mobile responsiveness */
        @media (max-width: 768px) {
            .sidebar {
                transform: translateX(-100%);
            }

            .sidebar.active {
                transform: translateX(0);
            }

            .main-content {
                margin-left: 0;
            }

            .toggle-btn {
                display: block;
                position: fixed;
                top: 15px;
                left: 15px;
                z-index: 1001;
                background: var(--primary-color);
                padding: 5px 10px;
                border-radius: 5px;
            }

            .charts-container {
                grid-template-columns: 1fr;
            }
        }

        /* Loader */
        .loader-container {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100%;
            width: 100%;
            position: absolute;
            top: 0;
            left: 0;
            background: rgba(255, 255, 255, 0.8);
            z-index: 1000;
        }

        .loader {
            border: 5px solid #f3f3f3;
            border-top: 5px solid var(--primary-color);
            border-radius: 50%;
            width: 50px;
            height: 50px;
            animation: spin 2s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* Progress Bar */
        .progress-container {
            width: 100%;
            height: 8px;
            background: rgba(0, 0, 0, 0.05);
            border-radius: 4px;
            overflow: hidden;
            margin-top: 5px;
        }

        .progress-bar {
            height: 100%;
            background: var(--primary-color);
            border-radius: 4px;
        }

        /* Badge */
        .badge {
            background: var(--primary-color);
            color: white;
            padding: 3px 8px;
            border-radius: 10px;
            font-size: 0.8em;
        }

        .badge.high {
            background: #2ecc71;
        }

        .badge.medium {
            background: #f39c12;
        }

        .badge.low {
            background: #e74c3c;
        }

        /* Empty State */
        .empty-state {
            text-align: center;
            padding: 40px;
            color: #7f8c8d;
        }

        .empty-state i {
            font-size: 5rem;
            margin-bottom: 20px;
            color: #bdc3c7;
        }
    </style>
</head>
<body>
    <button class="toggle-btn">
        <i class="fas fa-bars"></i>
    </button>

    <div class="container">
        <div class="sidebar">
            <div class="sidebar-header">
                <h1>Data Quality</h1>
            </div>

            <div class="sidebar-menu">
                <div class="menu-item active">
                    <i class="fas fa-tachometer-alt"></i>
                    <span>Dashboard</span>
                </div>
                <div class="menu-item">
                    <i class="fas fa-chart-pie"></i>
                    <span>Data Issues</span>
                </div>
                <div class="menu-item">
                    <i class="fas fa-chart-bar"></i>
                    <span>Dimensions</span>
                </div>
                <div class="menu-item">
                    <i class="fas fa-star"></i>
                    <span>Confidence</span>
                </div>
                <div class="menu-item">
                    <i class="fas fa-cog"></i>
                    <span>Settings</span>
                </div>
            </div>
        </div>

        <div class="main-content">
            <div class="header">
                <div class="title-section">
                    <h1>Data Quality Dashboard</h1>
                    <p>Overview of data quality issues and dimensions</p>
                </div>
                <div class="date">
                    <p id="current-date"></p>
                </div>
            </div>

            <div class="dashboard-cards">
                <div class="glass-card stat-card">
                    <h2 id="data-issues-percent">0%</h2>
                    <p>Data Issues</p>
                    <div class="progress-container">
                        <div class="progress-bar" id="data-issues-progress" style="width: 0%"></div>
                    </div>
                </div>
                <div class="glass-card stat-card">
                    <h2 id="non-data-issues-percent">0%</h2>
                    <p>Non-Data Issues</p>
                    <div class="progress-container">
                        <div class="progress-bar" id="non-data-issues-progress" style="width: 0%"></div>
                    </div>
                </div>
                <div class="glass-card stat-card">
                    <h2 id="total-incidents">0</h2>
                    <p>Total Incidents</p>
                </div>
                <div class="glass-card stat-card">
                    <h2 id="avg-confidence">0.00</h2>
                    <p>Avg. Confidence Score</p>
                </div>
            </div>

            <div class="charts-container">
                <div class="glass-card">
                    <h3>Issue Type Distribution</h3>
                    <div class="chart-container">
                        <canvas id="issueChart"></canvas>
                    </div>
                </div>
                <div class="glass-card">
                    <h3>Data Quality Dimensions</h3>
                    <div class="chart-container">
                        <canvas id="dimensionChart"></canvas>
                    </div>
                </div>
            </div>

            <div class="charts-container">
                <div class="glass-card">
                    <h3>Confidence Score by Issue Type</h3>
                    <div class="chart-container">
                        <canvas id="confidenceChart"></canvas>
                    </div>
                </div>
                <div class="glass-card">
                    <h3>Quality Dimension by Confidence</h3>
                    <div class="chart-container">
                        <canvas id="dimensionConfidenceChart"></canvas>
                    </div>
                </div>
            </div>

            <div class="glass-card">
                <h3>Data Quality Dimension Details</h3>
                <div class="table-container">
                    <table id="dimension-table">
                        <thead>
                            <tr>
                                <th>Dimension</th>
                                <th>Count</th>
                                <th>Percentage</th>
                                <th>Avg. Confidence</th>
                            </tr>
                        </thead>
                        <tbody>
                            <!-- Table rows will be added dynamically -->
                        </tbody>
                    </table>
                </div>
            </div>
            
            <!-- File upload container for testing -->
            <div class="glass-card" id="file-upload-container">
                <h3>Upload CSV File</h3>
                <p>If the results.csv file isn't automatically found, upload it here:</p>
                <div style="margin-top: 15px;">
                    <input type="file" id="csv-file-input" accept=".csv" />
                    <button id="upload-btn" class="upload-btn" style="margin-left: 10px; padding: 5px 15px; background: var(--primary-color); color: white; border: none; border-radius: 5px; cursor: pointer;">Upload</button>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Toggle sidebar on mobile
        document.querySelector('.toggle-btn').addEventListener('click', function() {
            document.querySelector('.sidebar').classList.toggle('active');
        });

        // Set current date
        const currentDate = new Date();
        document.getElementById('current-date').textContent = currentDate.toLocaleDateString('en-US', {
            weekday: 'long',
            year: 'numeric',
            month: 'long',
            day: 'numeric'
        });

        // Chart objects to be updated later
        let issueChart, dimensionChart, confidenceChart, dimConfChart;

        // Function to calculate statistics from raw CSV data
        function calculateStats(data) {
            // Extract relevant columns
            const isDataIssue = data.map(row => row.is_data_issue === 'true' || row.is_data_issue === true);
            const qualityDimensions = data.map(row => row.data_quality_dimension);
            const confidenceScores = data.map(row => parseFloat(row.confidence_score));

            // Basic counts
            const totalIncidents = data.length;
            const dataIssues = isDataIssue.filter(val => val).length;
            const nonDataIssues = totalIncidents - dataIssues;
            const dataIssuePercentage = (dataIssues / totalIncidents) * 100;
            const nonDataIssuePercentage = 100 - dataIssuePercentage;

            // Dimension analysis
            const dimensionCounts = {};
            const dimensionsArray = [];

            // Only count dimensions where is_data_issue is true
            for (let i = 0; i < data.length; i++) {
                if (isDataIssue[i] && qualityDimensions[i]) {
                    const dimension = qualityDimensions[i];
                    dimensionCounts[dimension] = (dimensionCounts[dimension] || 0) + 1;
                    dimensionsArray.push({
                        dimension: dimension,
                        confidence: confidenceScores[i]
                    });
                }
            }

            // Calculate dimension percentages
            const dimensionPercentages = {};
            Object.keys(dimensionCounts).forEach(dimension => {
                dimensionPercentages[dimension] = (dimensionCounts[dimension] / dataIssues) * 100;
            });

            // Confidence score analysis
            function calculateMean(arr) {
                if (arr.length === 0) return 0;
                return arr.reduce((sum, val) => sum + val, 0) / arr.length;
            }

            function calculateMedian(arr) {
                if (arr.length === 0) return 0;
                const sorted = [...arr].sort((a, b) => a - b);
                const mid = Math.floor(sorted.length / 2);
                return sorted.length % 2 === 0 ? (sorted[mid - 1] + sorted[mid]) / 2 : sorted[mid];
            }

            function calculateStd(arr, mean) {
                if (arr.length <= 1) return 0;
                const variance = arr.reduce((sum, val) => sum + Math.pow(val - mean, 2), 0) / arr.length;
                return Math.sqrt(variance);
            }

            // Overall confidence
            const overallMean = calculateMean(confidenceScores.filter(score => !isNaN(score)));
            const overallMedian = calculateMedian(confidenceScores.filter(score => !isNaN(score)));
            const overallStd = calculateStd(confidenceScores.filter(score => !isNaN(score)), overallMean);

            // Data issues confidence
            const dataIssueScores = [];
            const nonDataIssueScores = [];

            for (let i = 0; i < data.length; i++) {
                if (!isNaN(confidenceScores[i])) {
                    if (isDataIssue[i]) {
                        dataIssueScores.push(confidenceScores[i]);
                    } else {
                        nonDataIssueScores.push(confidenceScores[i]);
                    }
                }
            }

            const dataIssuesMean = calculateMean(dataIssueScores);
            const dataIssuesMedian = calculateMedian(dataIssueScores);
            const dataIssuesStd = calculateStd(dataIssueScores, dataIssuesMean);

            const nonDataIssuesMean = calculateMean(nonDataIssueScores);
            const nonDataIssuesMedian = calculateMedian(nonDataIssueScores);
            const nonDataIssuesStd = calculateStd(nonDataIssueScores, nonDataIssuesMean);

            // Confidence by dimension
            const dimensionConfidence = {};
            Object.keys(dimensionCounts).forEach(dimension => {
                const scores = dimensionsArray
                    .filter(item => item.dimension === dimension)
                    .map(item => item.confidence);
                
                dimensionConfidence[dimension] = calculateMean(scores);
            });

            // Return structured data
            return {
                counts: {
                    total_incidents: totalIncidents,
                    data_issues: dataIssues,
                    non_data_issues: nonDataIssues,
                    data_issue_percentage: dataIssuePercentage,
                    non_data_issue_percentage: nonDataIssuePercentage
                },
                dimensions: {
                    counts: dimensionCounts,
                    percentages: dimensionPercentages
                },
                confidence: {
                    overall: {
                        mean: overallMean,
                        median: overallMedian,
                        std: overallStd
                    },
                    data_issues: {
                        mean: dataIssuesMean,
                        median: dataIssuesMedian,
                        std: dataIssuesStd
                    },
                    non_data_issues: {
                        mean: nonDataIssuesMean,
                        median: nonDataIssuesMedian,
                        std: nonDataIssuesStd
                    }
                },
                dimension_confidence: {
                    mean: dimensionConfidence
                }
            };
        }

        // Function to update dashboard with calculated stats
        function updateDashboard(stats) {
            // Update dashboard statistics
            document.getElementById('data-issues-percent').textContent = `${stats.counts.data_issue_percentage.toFixed(1)}%`;
            document.getElementById('non-data-issues-percent').textContent = `${stats.counts.non_data_issue_percentage.toFixed(1)}%`;
            document.getElementById('total-incidents').textContent = stats.counts.total_incidents;
            document.getElementById('avg-confidence').textContent = stats.confidence.overall.mean.toFixed(2);

            // Update progress bars
            document.getElementById('data-issues-progress').style.width = `${stats.counts.data_issue_percentage}%`;
            document.getElementById('non-data-issues-progress').style.width = `${stats.counts.non_data_issue_percentage}%`;

            // Populate dimension table
            const tableBody = document.querySelector('#dimension-table tbody');
            tableBody.innerHTML = ''; // Clear existing rows
            
            Object.keys(stats.dimensions.counts).forEach(dimension => {
                const row = document.createElement('tr');
                
                const dimensionCell = document.createElement('td');
                dimensionCell.textContent = dimension;
                
                const countCell = document.createElement('td');
                countCell.textContent = stats.dimensions.counts[dimension];
                
                const percentageCell = document.createElement('td');
                percentageCell.textContent = `${stats.dimensions.percentages[dimension].toFixed(2)}%`;
                
                const confidenceCell = document.createElement('td');
                const confidenceValue = stats.dimension_confidence.mean[dimension];
                
                let badgeClass = '';
                if (confidenceValue >= 0.85) {
                    badgeClass = 'high';
                } else if (confidenceValue >= 0.80) {
                    badgeClass = 'medium';
                } else {
                    badgeClass = 'low';
                }
                
                confidenceCell.innerHTML = `<span class="badge ${badgeClass}">${confidenceValue.toFixed(2)}</span>`;
                
                row.appendChild(dimensionCell);
                row.appendChild(countCell);
                row.appendChild(percentageCell);
                row.appendChild(confidenceCell);
                
                tableBody.appendChild(row);
            });

            // Initialize or update charts
            updateCharts(stats);
        }

        // Initialize or update all charts
        function updateCharts(stats) {
            // 1. Issue Type Distribution Pie Chart
            const issueCtx = document.getElementById('issueChart').getContext('2d');
            
            // Destroy existing chart if it exists
            if (issueChart) {
                issueChart.destroy();
            }
            
            issueChart = new Chart(issueCtx, {
                type: 'doughnut',
                data: {
                    labels: ['Data Issues', 'Non-Data Issues'],
                    datasets: [{
                        data: [stats.counts.data_issue_percentage, stats.counts.non_data_issue_percentage],
                        backgroundColor: [
                            'rgba(108, 92, 231, 0.8)',
                            'rgba(162, 155, 254, 0.8)'
                        ],
                        borderColor: [
                            'rgba(108, 92, 231, 1)',
                            'rgba(162, 155, 254, 1)'
                        ],
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'bottom'
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    return `${context.label}: ${context.raw.toFixed(1)}%`;
                                }
                            }
                        }
                    }
                }
            });

            // 2. Data Quality Dimensions Bar Chart
            const dimensionCtx = document.getElementById('dimensionChart').getContext('2d');
            
            // Destroy existing chart if it exists
            if (dimensionChart) {
                dimensionChart.destroy();
            }
            
            dimensionChart = new Chart(dimensionCtx, {
                type: 'bar',
                data: {
                    labels: Object.keys(stats.dimensions.counts),
                    datasets: [{
                        label: 'Count',
                        data: Object.values(stats.dimensions.counts),
                        backgroundColor: 'rgba(108, 92, 231, 0.8)',
                        borderColor: 'rgba(108, 92, 231, 1)',
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    },
                    plugins: {
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    const dimension = context.label;
                                    const count = context.raw;
                                    const percentage = stats.dimensions.percentages[dimension];
                                    return `Count: ${count} (${percentage.toFixed(1)}%)`;
                                }
                            }
                        }
                    }
                }
            });

            // 3. Confidence Score by Issue Type
            const confidenceCtx = document.getElementById('confidenceChart').getContext('2d');
            
            // Destroy existing chart if it exists
            if (confidenceChart) {
                confidenceChart.destroy();
            }
            
            confidenceChart = new Chart(confidenceCtx, {
                type: 'bar',
                data: {
                    labels: ['Overall', 'Data Issues', 'Non-Data Issues'],
                    datasets: [{
                        label: 'Average Confidence',
                        data: [
                            stats.confidence.overall.mean,
                            stats.confidence.data_issues.mean,
                            stats.confidence.non_data_issues.mean
                        ],
                        backgroundColor: [
                            'rgba(52, 152, 219, 0.8)',
                            'rgba(46, 204, 113, 0.8)',
                            'rgba(231, 76, 60, 0.8)'
                        ],
                        borderColor: [
                            'rgba(52, 152, 219, 1)',
                            'rgba(46, 204, 113, 1)',
                            'rgba(231, 76, 60, 1)'
                        ],
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true,
                            max: 1.0
                        }
                    },
                    plugins: {
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    return `Confidence: ${context.raw.toFixed(2)}`;
                                }
                            }
                        }
                    }
                }
            });

            // 4. Confidence by Dimension
            const dimConfCtx = document.getElementById('dimensionConfidenceChart').getContext('2d');
            
            // Destroy existing chart if it exists
            if (dimConfChart) {
                dimConfChart.destroy();
            }
            
            dimConfChart = new Chart(dimConfCtx, {
                type: 'radar',
                data: {
                    labels: Object.keys(stats.dimension_confidence.mean),
                    datasets: [{
                        label: 'Confidence Score',
                        data: Object.values(stats.dimension_confidence.mean),
                        backgroundColor: 'rgba(108, 92, 231, 0.2)',
                        borderColor: 'rgba(108, 92, 231, 1)',
                        borderWidth: 2,
                        pointBackgroundColor: 'rgba(108, 92, 231, 1)',
                        pointRadius: 5
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        r: {
                            beginAtZero: false,
                            min: 0.7,
                            max: 1.0
                        }
                    }
                }
            });
        }

        // Load and parse CSV file
        function loadCSV(file) {
            const config = {
                header: true,
                dynamicTyping: true,
                skipEmptyLines: true,
                complete: function(results) {
                    if (results.errors.length > 0) {
                        console.error('CSV parsing errors:', results.errors);
                        alert('There were errors parsing the CSV file. Check console for details.');
                        return;
                    }
                    
                    // Calculate statistics from the CSV data
                    const stats = calculateStats(results.data);
                    
                    // Update the dashboard with the calculated statistics
                    updateDashboard(stats);
                },
                error: function(error) {
                    console.error('Error loading CSV:', error);
                    alert('Failed to load the CSV file: ' + error);
                }
            };
            
            if (file) {
                // Parse the file directly
                Papa.parse(file, config);
            } else {
                // Try to download results.csv
                config.download = true;
                Papa.parse('results.csv', config);
            }
        }

        // Handle manual file upload
        document.addEventListener('DOMContentLoaded', function() {
            // Try to load results.csv automatically
            loadCSV();
            
            // Set up file upload handler
            const uploadBtn = document.getElementById('upload-btn');
            const fileInput = document.getElementById('csv-file-input');
            
            uploadBtn.addEventListener('click', function() {
                if (fileInput.files.length > 0) {
                    loadCSV(fileInput.files[0]);
                } else {
                    alert('Please select a CSV file to upload.');
                }
            });
        });
    </script>
</body>
</html>
