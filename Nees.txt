import logging
from typing import List, Dict, Any, Optional
from pydantic import BaseModel, Field
from azure.identity import DefaultAzureCredential, get_bearer_token_provider
from openai import AzureOpenAI
from app.config.environment import get_os_env

logger = logging.getLogger(__name__)

class MyDocument(BaseModel):
    """Model representing a document with its embedding."""
    id: str = ""
    text: str = ""
    embedding: List[float] = Field(default_factory=list)
    metadata: Dict[str, Any] = Field(default_factory=dict)

class EmbeddingClient:
    """Client for generating embeddings for documents."""
    
    def __init__(self, azure_api_version: str = "2023-05-15", embeddings_model: str = "text-embedding-3-large"):
        """Initialize the embedding client."""
        self.env = get_os_env()
        self.azure_api_version = azure_api_version
        self.embeddings_model = embeddings_model
        self.direct_azure_client = self._get_direct_azure_client()
    
    def _get_direct_azure_client(self):
        """Get the Azure OpenAI client for generating embeddings."""
        try:
            token_provider = get_bearer_token_provider(
                self.env.credential,
                "https://cognitiveservices.azure.com/.default"
            )
            azure_endpoint = self.env.get("AZURE_ENDPOINT", "")
            
            return AzureOpenAI(
                azure_endpoint=azure_endpoint,
                api_version=self.azure_api_version,
                azure_ad_token_provider=token_provider
            )
        except Exception as e:
            logger.error(f"Error initializing Azure OpenAI client: {e}")
            raise
    
    def generate_embedding(self, text: str) -> List[float]:
        """Generate an embedding for a single text."""
        try:
            response = self.direct_azure_client.embeddings.create(
                model=self.embeddings_model,
                input=text
            )
            return response.data[0].embedding
        except Exception as e:
            logger.error(f"Error generating embedding: {e}")
            raise
    
    def generate_embeddings_for_document(self, doc: MyDocument) -> MyDocument:
        """Generate embeddings for a document and update it."""
        try:
            doc.embedding = self.generate_embedding(doc.text)
            return doc
        except Exception as e:
            logger.error(f"Error generating embeddings for document: {e}")
            return doc
