from typing import Dict, Any, List
import re
from langchain.prompts import PromptTemplate
from langchain.chains import LLMChain
from langchain.chat_models import AzureChatOpenAI
from app.core.models import DataElement, EnhancementResult

class EnhancerAgent:
    """Agent for enhancing data elements to meet ISO/IEC 11179 standards."""
    
    def __init__(self, llm: AzureChatOpenAI):
        self.llm = llm
        self._setup_enhancement_chain()
    
    def _setup_enhancement_chain(self):
        """Set up the enhancement chain with the language model."""
        template = """
        You are an expert in data governance and ISO/IEC 11179 metadata standards. Your task is to enhance 
        the given data element name and description to meet these standards and represent high-quality metadata.
        
        ISO/IEC 11179 standards for data element names:
        - Names should be clear, unambiguous, and self-describing
        - Names should follow a consistent pattern (typically object_qualifier_property)
        - Names should not use acronyms or abbreviations unless they are widely understood
        - Names should be concise yet descriptive
        - Names should use standard terminology in the domain
        
        ISO/IEC 11179 standards for data element descriptions:
        - Descriptions should clearly define what the data element represents
        - Descriptions should be complete, covering the concept fully
        - Descriptions should be precise, specific enough to distinguish from other concepts
        - Descriptions should be objective and factual, not opinion-based
        - Descriptions should use complete sentences with proper grammar and punctuation
        
        Data Element to Enhance:
        - Current Name: {name}
        - Current Description: {description}
        - Example (if provided): {example}
        - Related Process Name (if provided): {process_name}
        - Related Process Description (if provided): {process_description}
        
        Validation Feedback:
        {validation_feedback}
        
        Based on the ISO/IEC 11179 standards and the validation feedback, enhance this data element.
        
        Provide your enhancement as follows:
        1. Enhanced Name: [provide the improved name]
        2. Enhanced Description: [provide the improved description]
        3. Enhancement Notes: [explain the changes made and how they improve compliance with standards]
        4. Confidence Score (0.0-1.0): [your confidence in the quality of the enhancement]
        
        Make the enhancements business-friendly and ensure they make sense in a business context.
        Use the example and process information provided to add context to your enhancements.
        """
        
        self.enhancement_prompt = PromptTemplate(
            input_variables=["name", "description", "example", "process_name", "process_description", "validation_feedback"],
            template=template
        )
        
        self.enhancement_chain = LLMChain(
            llm=self.llm,
            prompt=self.enhancement_prompt,
            verbose=True
        )
    
    def _parse_enhancement_result(self, result: str) -> EnhancementResult:
        """Parse the enhancement result from the LLM output."""
        enhanced_name = ""
        enhanced_description = ""
        feedback = ""
        confidence_score = 0.7  # Default if parsing fails
        
        lines = result.strip().split('\n')
        
        # Extract enhanced name
        for line in lines:
            if "Enhanced Name:" in line:
                enhanced_name = line.split("Enhanced Name:")[1].strip()
                break
        
        # Extract enhanced description
        description_start = None
        description_end = None
        for i, line in enumerate(lines):
            if "Enhanced Description:" in line:
                description_start = i
            elif description_start is not None and "Enhancement Notes:" in line:
                description_end = i
                break
        
        if description_start is not None:
            if description_end is not None:
                description_lines = lines[description_start:description_end]
            else:
                description_lines = lines[description_start:]
                
            # Find where the actual description starts
            for i, line in enumerate(description_lines):
                if "Enhanced Description:" in line:
                    enhanced_description = line.split("Enhanced Description:")[1].strip()
                    # Add remaining lines if any
                    enhanced_description += " " + " ".join([l.strip() for l in description_lines[i+1:]])
                    break
        
        # Extract enhancement notes/feedback
        notes_start = None
        notes_end = None
        for i, line in enumerate(lines):
            if "Enhancement Notes:" in line:
                notes_start = i
            elif notes_start is not None and "Confidence Score" in line:
                notes_end = i
                break
        
        if notes_start is not None:
            if notes_end is not None:
                feedback_lines = lines[notes_start:notes_end]
            else:
                feedback_lines = lines[notes_start:]
                
            # Find where the actual notes start
            for i, line in enumerate(feedback_lines):
                if "Enhancement Notes:" in line:
                    feedback = line.split("Enhancement Notes:")[1].strip()
                    # Add remaining lines if any
                    feedback += " " + " ".join([l.strip() for l in feedback_lines[i+1:]])
                    break
        
        # Extract confidence score
        for line in lines:
            if "Confidence Score" in line:
                match = re.search(r'(\d+\.\d+)', line)
                if match:
                    try:
                        confidence_score = float(match.group(1))
                        # Ensure it's in range 0-1
                        confidence_score = max(0.0, min(1.0, confidence_score))
                    except ValueError:
                        pass
                break
        
        return EnhancementResult(
            enhanced_name=enhanced_name,
            enhanced_description=enhanced_description,
            feedback=feedback,
            confidence_score=confidence_score
        )
    
    async def enhance(self, data_element: DataElement, validation_feedback: str) -> EnhancementResult:
        """
        Enhance a data element to meet ISO/IEC 11179 standards based on validation feedback.
        """
        result = await self.enhancement_chain.arun(
            name=data_element.existing_name,
            description=data_element.existing_description,
            example=data_element.example or "Not provided",
            process_name=data_element.process_name or "Not provided",
            process_description=data_element.process_description or "Not provided",
            validation_feedback=validation_feedback
        )
        
        return self._parse_enhancement_result(result)
