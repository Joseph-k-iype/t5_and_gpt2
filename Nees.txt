from typing import Optional
from langchain.chat_models import AzureChatOpenAI
from azure.identity import DefaultAzureCredential, get_bearer_token_provider
from app.config.environment import get_os_env

def get_llm() -> AzureChatOpenAI:
    """Get the language model for the application."""
    env = get_os_env()
    
    try:
        token_provider = get_bearer_token_provider(
            env._get_credential(),
            "https://cognitiveservices.azure.com/.default"
        )
        
        model_name = env.get("MODEL_NAME", "gpt-4o")
        temperature = float(env.get("TEMPERATURE", "0.3"))  # Lower temperature for more deterministic outputs
        max_tokens = int(env.get("MAX_TOKENS", "2000"))
        api_version = env.get("API_VERSION", "2023-05-15")
        azure_endpoint = env.get("AZURE_ENDPOINT", "")
        
        return AzureChatOpenAI(
            model_name=model_name,
            temperature=temperature,
            max_tokens=max_tokens,
            api_version=api_version,
            azure_endpoint=azure_endpoint,
            azure_ad_token_provider=token_provider
        )
    except Exception as e:
        # Provide a fallback option for development or testing
        from langchain.chat_models import ChatOpenAI
        import os
        
        api_key = os.environ.get("OPENAI_API_KEY")
        if not api_key:
            raise ValueError("Neither Azure OpenAI nor OpenAI API key is available")
        
        return ChatOpenAI(
            model_name="gpt-4o",
            temperature=0.3,
            max_tokens=2000
        )
