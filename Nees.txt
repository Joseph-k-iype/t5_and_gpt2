import uuid
from typing import Dict, Any, List, Optional, cast
from langchain.chat_models import AzureChatOpenAI
from langgraph.graph import StateGraph
from pydantic import BaseModel, Field
from app.core.models import (
    DataElement, 
    EnhancedDataElement, 
    ValidationResult, 
    EnhancementResult, 
    DataQualityStatus
)
from app.agents.validator_agent import ValidatorAgent
from app.agents.enhancer_agent import EnhancerAgent

# Define workflow state
class WorkflowState(BaseModel):
    """State for the data enhancement workflow."""
    data_element: DataElement
    enhanced_data: Optional[EnhancedDataElement] = None
    validation_result: Optional[ValidationResult] = None
    enhancement_result: Optional[EnhancementResult] = None
    iterations: int = 0
    max_iterations: int = 5
    is_complete: bool = False
    error: Optional[str] = None

class DataEnhancementWorkflow:
    """LangGraph workflow for enhancing data elements."""
    
    def __init__(self, llm: AzureChatOpenAI):
        self.llm = llm
        self.validator = ValidatorAgent(llm)
        self.enhancer = EnhancerAgent(llm)
        self.graph = self._build_graph()
    
    async def _validate_data(self, state: Dict[str, Any]) -> Dict[str, Any]:
        """Validate the data element."""
        try:
            state_obj = WorkflowState(**state)
            
            # If there's enhanced data, validate that
            if state_obj.enhanced_data:
                validation_result = await self.validator.validate(DataElement(
                    existing_name=state_obj.enhanced_data.enhanced_name,
                    existing_description=state_obj.enhanced_data.enhanced_description,
                    example=state_obj.data_element.example,
                    process_name=state_obj.data_element.process_name,
                    process_description=state_obj.data_element.process_description
                ))
            else:
                # Otherwise validate the original data
                validation_result = await self.validator.validate(state_obj.data_element)
            
            # Update state with validation result
            state_obj.validation_result = validation_result
            
            # If this is a subsequent iteration, update the enhanced data with validation feedback
            if state_obj.enhanced_data and state_obj.iterations > 0:
                state_obj.enhanced_data.validation_feedback.append(validation_result.feedback)
                state_obj.enhanced_data.quality_status = validation_result.quality_status
            
            return state_obj.dict()
        except Exception as e:
            state["error"] = f"Validation error: {str(e)}"
            state["is_complete"] = True
            return state
    
    async def _enhance_data(self, state: Dict[str, Any]) -> Dict[str, Any]:
        """Enhance the data element."""
        try:
            state_obj = WorkflowState(**state)
            
            # Get validation feedback
            validation_feedback = state_obj.validation_result.feedback
            if state_obj.validation_result.suggested_improvements:
                validation_feedback += "\n\nSuggested improvements:\n" + "\n".join(
                    state_obj.validation_result.suggested_improvements
                )
            
            # Use the enhancer to improve the data
            enhancement_result = await self.enhancer.enhance(
                state_obj.data_element, 
                validation_feedback
            )
            state_obj.enhancement_result = enhancement_result
            
            # Create or update enhanced data
            if not state_obj.enhanced_data:
                state_obj.enhanced_data = EnhancedDataElement(
                    **state_obj.data_element.dict(),
                    enhanced_name=enhancement_result.enhanced_name,
                    enhanced_description=enhancement_result.enhanced_description,
                    quality_status=state_obj.validation_result.quality_status,
                    enhancement_iterations=1,
                    enhancement_feedback=[enhancement_result.feedback],
                    validation_feedback=[state_obj.validation_result.feedback]
                )
            else:
                state_obj.enhanced_data.enhanced_name = enhancement_result.enhanced_name
                state_obj.enhanced_data.enhanced_description = enhancement_result.enhanced_description
                state_obj.enhanced_data.enhancement_iterations += 1
                state_obj.enhanced_data.enhancement_feedback.append(enhancement_result.feedback)
            
            # Increment iteration counter
            state_obj.iterations += 1
            
            return state_obj.dict()
        except Exception as e:
            state["error"] = f"Enhancement error: {str(e)}"
            state["is_complete"] = True
            return state
    
    def _should_enhance(self, state: Dict[str, Any]) -> str:
        """Determine if the data needs enhancement."""
        state_obj = WorkflowState(**state)
        
        # Check if we've hit the maximum number of iterations
        if state_obj.iterations >= state_obj.max_iterations:
            return "complete"
        
        # Check validation result
        if state_obj.validation_result.quality_status == DataQualityStatus.GOOD:
            return "complete"
        
        # Otherwise, continue enhancing
        return "enhance"
    
    async def _complete_workflow(self, state: Dict[str, Any]) -> Dict[str, Any]:
        """Mark the workflow as complete."""
        state_obj = WorkflowState(**state)
        state_obj.is_complete = True
        return state_obj.dict()
    
    def _build_graph(self) -> StateGraph:
        """Build the LangGraph workflow."""
        workflow = StateGraph(WorkflowState)
        
        # Add nodes
        workflow.add_node("validate", self._validate_data)
        workflow.add_node("enhance", self._enhance_data)
        workflow.add_node("complete", self._complete_workflow)
        
        # Add conditional edges
        workflow.add_conditional_edges(
            "validate",
            self._should_enhance,
            {
                "enhance": "enhance",
                "complete": "complete"
            }
        )
        
        # Add remaining edges
        workflow.add_edge("enhance", "validate")
        workflow.add_edge("complete", None)  # End of workflow
        
        # Set entrypoint
        workflow.set_entry_point("validate")
        
        return workflow.compile()
    
    async def run(self, data_element: DataElement, max_iterations: int = 5) -> EnhancedDataElement:
        """
        Run the data enhancement workflow on a data element.
        
        Args:
            data_element: The data element to enhance
            max_iterations: Maximum number of enhancement iterations to perform
        
        Returns:
            Enhanced data element
        """
        initial_state = WorkflowState(
            data_element=data_element,
            max_iterations=max_iterations
        )
        
        # Run the workflow
        result = await self.graph.arun(initial_state.dict())
        
        # Convert result back to WorkflowState
        final_state = WorkflowState(**result)
        
        if final_state.error:
            raise ValueError(final_state.error)
        
        if not final_state.enhanced_data:
            # If no enhancement was performed, create an enhanced data element from the original
            return EnhancedDataElement(
                **data_element.dict(),
                enhanced_name=data_element.existing_name,
                enhanced_description=data_element.existing_description,
                quality_status=final_state.validation_result.quality_status if final_state.validation_result else DataQualityStatus.GOOD,
                enhancement_iterations=0,
                validation_feedback=[final_state.validation_result.feedback] if final_state.validation_result else []
            )
        
        return final_state.enhanced_data
