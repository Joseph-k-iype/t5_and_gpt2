from typing import Dict, Any, List, Tuple
import re
from langchain.prompts import PromptTemplate
from langchain.chains import LLMChain
from langchain.chat_models import AzureChatOpenAI
from app.core.models import DataElement, ValidationResult, DataQualityStatus
from app.utils.iso_standards import ISO11179Validator

class ValidatorAgent:
    """Agent for validating data elements against ISO/IEC 11179 standards."""
    
    def __init__(self, llm: AzureChatOpenAI):
        self.llm = llm
        self.iso_validator = ISO11179Validator()
        self._setup_validation_chain()
    
    def _setup_validation_chain(self):
        """Set up the validation chain with the language model."""
        template = """
        You are an expert in data governance and ISO/IEC 11179 metadata standards. Your task is to evaluate 
        if the given data element name and description adhere to these standards and represent high-quality metadata.
        
        ISO/IEC 11179 standards for data element names:
        - Names should be clear, unambiguous, and self-describing
        - Names should follow a consistent pattern (typically object_qualifier_property)
        - Names should not use acronyms or abbreviations unless they are widely understood
        - Names should be concise yet descriptive
        - Names should use standard terminology in the domain
        
        ISO/IEC 11179 standards for data element descriptions:
        - Descriptions should clearly define what the data element represents
        - Descriptions should be complete, covering the concept fully
        - Descriptions should be precise, specific enough to distinguish from other concepts
        - Descriptions should be objective and factual, not opinion-based
        - Descriptions should use complete sentences with proper grammar and punctuation
        
        Data Element:
        - Name: {name}
        - Description: {description}
        - Example (if provided): {example}
        - Related Process Name (if provided): {process_name}
        - Related Process Description (if provided): {process_description}
        
        Based on the ISO/IEC 11179 standards, evaluate the quality of this data element.
        
        Provide your evaluation as follows:
        1. Is the name valid according to standards? Yes/No
        2. Detailed feedback on the name
        3. Is the description valid according to standards? Yes/No
        4. Detailed feedback on the description
        5. Overall quality status: "GOOD", "NEEDS_IMPROVEMENT", or "POOR"
        6. List of specific improvements that could be made
        
        Please be thorough and specific in your feedback, as it will be used to improve the data element.
        """
        
        self.validation_prompt = PromptTemplate(
            input_variables=["name", "description", "example", "process_name", "process_description"],
            template=template
        )
        
        self.validation_chain = LLMChain(
            llm=self.llm,
            prompt=self.validation_prompt,
            verbose=True
        )
    
    def _parse_validation_result(self, result: str) -> ValidationResult:
        """Parse the validation result from the LLM output."""
        lines = result.strip().split('\n')
        
        is_name_valid = "yes" in lines[0].lower()
        is_desc_valid = False
        
        for line in lines:
            if line.startswith("3.") and "yes" in line.lower():
                is_desc_valid = True
        
        # Determine quality status
        quality_status = DataQualityStatus.POOR
        for line in lines:
            if "Overall quality status:" in line:
                if "GOOD" in line:
                    quality_status = DataQualityStatus.GOOD
                elif "NEEDS_IMPROVEMENT" in line:
                    quality_status = DataQualityStatus.NEEDS_IMPROVEMENT
                break
        
        # Extract suggested improvements
        improvements = []
        improvements_section = False
        for line in lines:
            if "6. List of specific improvements" in line:
                improvements_section = True
                continue
            if improvements_section and line.strip() and "- " in line:
                improvements.append(line.strip())
        
        # Extract feedback
        feedback_lines = []
        for i, line in enumerate(lines):
            if i > 0 and "Detailed feedback on the name" in line:
                feedback_lines.append(line)
            elif i > 0 and "Detailed feedback on the description" in line:
                feedback_lines.append(line)
            elif i > 0 and line.strip() and not line.startswith("1.") and not line.startswith("3.") and not line.startswith("5.") and not line.startswith("6."):
                feedback_lines.append(line)
        
        feedback = "\n".join(feedback_lines)
        
        return ValidationResult(
            is_valid=is_name_valid and is_desc_valid,
            quality_status=quality_status,
            feedback=feedback,
            suggested_improvements=improvements
        )
    
    async def validate(self, data_element: DataElement) -> ValidationResult:
        """
        Validate a data element against ISO/IEC 11179 standards.
        First applies rule-based validation, then uses LLM for deeper analysis.
        """
        # First, apply rule-based validation
        name_valid, name_feedback = self.iso_validator.validate_name(data_element.existing_name)
        desc_valid, desc_feedback = self.iso_validator.validate_description(data_element.existing_description)
        
        # If rule-based validation fails, return immediately
        if not name_valid or not desc_valid:
            feedback = ""
            if not name_valid:
                feedback += f"Name validation failed: {name_feedback}\n"
            if not desc_valid:
                feedback += f"Description validation failed: {desc_feedback}"
            
            return ValidationResult(
                is_valid=False,
                quality_status=DataQualityStatus.POOR,
                feedback=feedback.strip(),
                suggested_improvements=["Fix basic validation issues before proceeding with deeper analysis."]
            )
        
        # If rule-based validation passes, use LLM for deeper analysis
        result = await self.validation_chain.arun(
            name=data_element.existing_name,
            description=data_element.existing_description,
            example=data_element.example or "Not provided",
            process_name=data_element.process_name or "Not provided",
            process_description=data_element.process_description or "Not provided"
        )
        
        return self._parse_validation_result(result)
