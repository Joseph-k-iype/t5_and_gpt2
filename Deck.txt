import { useState, useCallback } from 'react';
import { API_CONFIG } from '../utils/apiUtils';

export const useAPI = () => {
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const apiCall = useCallback(async (endpoint, method = 'GET', data = null) => {
    setLoading(true);
    setError(null);
    
    try {
      // No timeout controller - let queries run as long as needed
      const config = {
        method,
        headers: API_CONFIG.headers,
        // No signal/timeout - seamless data transfer
      };
      
      if (data) {
        config.body = JSON.stringify(data);
      }
      
      console.log(`API Call: ${method} ${API_CONFIG.baseURL}/api${endpoint}`);
      console.log('Request config:', { ...config, body: data ? 'Data provided' : 'No body' });
      
      const response = await fetch(`${API_CONFIG.baseURL}/api${endpoint}`, config);
      
      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`HTTP ${response.status}: ${errorText || response.statusText}`);
      }
      
      const result = await response.json();
      console.log('API Response received successfully');
      console.log('Response size:', JSON.stringify(result).length, 'characters');
      
      return result;
    } catch (error) {
      // Enhanced error handling without timeout concerns
      let errorMessage = 'An unknown error occurred';
      
      if (error.name === 'TypeError' && error.message.includes('fetch')) {
        errorMessage = 'Network connection error. Please check if the backend is running and accessible.';
      } else if (error.message.includes('HTTP')) {
        errorMessage = error.message;
      } else if (error.name === 'SyntaxError') {
        errorMessage = 'Invalid response format from server. Please check backend logs.';
      } else {
        errorMessage = error.message || 'Request failed due to unknown error';
      }
      
      console.error('API Error Details:', {
        name: error.name,
        message: error.message,
        stack: error.stack
      });
      
      const apiError = new Error(errorMessage);
      setError(apiError);
      throw apiError;
    } finally {
      setLoading(false);
    }
  }, []);

  return { apiCall, loading, error };
};
