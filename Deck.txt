"""
Enhanced Flask Backend API for FalkorDB Business Intelligence
Focuses on business reports, vector search, and simplified query handling
Uses o3-mini's built-in reasoning capabilities properly.
"""

from flask import Flask, request, jsonify
from flask_cors import CORS
import os
import json
import time
from typing import Dict, Any, List, Optional
import logging
from datetime import datetime
from functools import wraps

# Import the enhanced FalkorDB engine
try:
    from falkordb_graphrag_searchengine import EnhancedGraphRAGEngine, EnterpriseConfig
except ImportError as e:
    print(f"Warning: Could not import enhanced engine: {e}")
    print("Please ensure falkordb_graphrag_searchengine.py is updated with the enhanced version")
    EnhancedGraphRAGEngine = None
    EnterpriseConfig = None

app = Flask(__name__)

# Enhanced CORS configuration
CORS(app, 
     origins=["http://localhost:3000", "http://localhost:3001", "http://127.0.0.1:3000", "http://127.0.0.1:3001"],
     supports_credentials=True,
     allow_headers=["Content-Type", "Authorization", "X-Frontend-Port"],
     methods=["GET", "POST", "PUT", "DELETE", "OPTIONS"])

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Global engine instance
engine = None
engine_config = None
system_info = {
    'initialized': False,
    'initialization_time': None,
    'features': [],
    'version': '3.0.0-enhanced-business-intelligence'
}

def timing_decorator(f):
    """Decorator to measure function execution time"""
    @wraps(f)
    def wrapper(*args, **kwargs):
        start_time = time.time()
        result = f(*args, **kwargs)
        execution_time = time.time() - start_time
        logger.info(f"{f.__name__} executed in {execution_time:.2f} seconds")
        return result
    return wrapper

def initialize_enhanced_engine():
    """Initialize the enhanced FalkorDB business intelligence engine"""
    global engine, engine_config, system_info
    
    if not EnhancedGraphRAGEngine:
        logger.error("Enhanced engine class not available")
        return False
    
    try:
        logger.info("Initializing Enhanced FalkorDB Business Intelligence Engine...")
        
        # Load configuration
        config = EnterpriseConfig()
        config.validate()
        engine_config = config
        
        # Initialize enhanced engine
        engine = EnhancedGraphRAGEngine(
            openai_api_key=config.openai_api_key,
            openai_base_url=config.openai_base_url,
            falkordb_host=config.falkordb_host,
            falkordb_port=config.falkordb_port,
            graph_name=config.graph_name
        )
        
        # Update system info
        system_info.update({
            'initialized': True,
            'initialization_time': datetime.now().isoformat(),
            'features': [
                'Business Intelligence Reports',
                'Vector Similarity Search',
                'Schema-Aware Queries',
                'o3-mini Built-in Reasoning',
                'Strategic Follow-up Generation',
                'Executive Summary Generation',
                'Risk Assessment',
                'Opportunity Analysis',
                'Query Validation',
                'Simple Reliable Cypher Generation'
            ],
            'database_info': {
                'host': config.falkordb_host,
                'port': config.falkordb_port,
                'graph_name': config.graph_name,
                'query_language': 'openCypher',
                'vector_search_enabled': engine.vector_store is not None,
                'business_intelligence': True
            }
        })
        
        logger.info("Enhanced FalkorDB Business Intelligence engine initialized successfully")
        return True
        
    except Exception as e:
        logger.error(f"Failed to initialize enhanced engine: {e}")
        system_info.update({
            'initialized': False,
            'error': str(e),
            'timestamp': datetime.now().isoformat()
        })
        return False

# Health and system endpoints
@app.route('/api/health', methods=['GET'])
def health_check():
    """Enhanced health check with business intelligence features"""
    return jsonify({
        'status': 'healthy',
        'service': 'FalkorDB Enhanced Business Intelligence API',
        'version': system_info['version'],
        'engine_initialized': engine is not None,
        'system_info': system_info,
        'timestamp': datetime.now().isoformat(),
        'supported_features': {
            'business_intelligence': True,
            'vector_search': engine.vector_store is not None if engine else False,
            'schema_aware_queries': True,
            'o3_mini_reasoning': True,
            'executive_summaries': True,
            'strategic_analysis': True,
            'risk_assessment': True,
            'follow_up_questions': True,
            'query_validation': True,
            'simple_reliable_queries': True
        }
    })

@app.route('/api/connection/test', methods=['GET'])
def test_connection():
    """Enhanced connection test with business intelligence validation"""
    if not engine:
        return jsonify({
            'status': 'failed',
            'error': 'Enhanced business intelligence engine not initialized',
            'system_info': system_info
        }), 500
    
    try:
        result = engine.test_connection()
        
        # Add enhanced system information
        result.update({
            'enhanced_features': system_info['features'],
            'business_intelligence': True,
            'system_version': system_info['version'],
            'vector_search_available': engine.vector_store is not None,
            'query_validation': True
        })
        
        return jsonify(result)
    except Exception as e:
        logger.error(f"Enhanced connection test failed: {e}")
        return jsonify({
            'status': 'failed',
            'error': str(e),
            'system_info': system_info
        }), 500

@app.route('/api/graph/info', methods=['GET'])
def get_enhanced_graph_info():
    """Get comprehensive graph information with business intelligence features"""
    if not engine:
        return jsonify({'error': 'Enhanced business intelligence engine not initialized'}), 500
    
    try:
        info = engine.get_graph_info()
        
        # Add business intelligence capabilities information
        info.update({
            'business_intelligence_capabilities': {
                'executive_summaries': True,
                'strategic_analysis': True,
                'risk_assessment': True,
                'opportunity_identification': True,
                'follow_up_question_generation': True,
                'vector_similarity_search': info.get('enhanced_features', {}).get('vector_search', False),
                'schema_aware_query_generation': True,
                'business_report_formatting': True,
                'query_validation': True,
                'simple_reliable_queries': True
            },
            'ai_capabilities': {
                'model': 'OpenAI o3-mini',
                'built_in_reasoning': True,
                'reasoning_effort': 'medium',
                'business_focused_prompts': True,
                'structured_output_generation': True
            },
            'system_info': system_info
        })
        
        return jsonify(info)
    except Exception as e:
        logger.error(f"Enhanced graph info retrieval failed: {e}")
        return jsonify({'error': str(e)}), 500

# Enhanced business intelligence search endpoints
@app.route('/api/search', methods=['POST'])
@timing_decorator
def business_search():
    """Simple business intelligence search"""
    if not engine:
        return jsonify({'error': 'Enhanced business intelligence engine not initialized'}), 500
    
    try:
        data = request.get_json()
        query = data.get('query', '')
        thread_id = data.get('thread_id', 'default')
        
        if not query:
            return jsonify({'error': 'Query is required'}), 400
        
        logger.info(f"Processing business intelligence query: {query[:100]}...")
        
        # Use enhanced engine for business intelligence search
        result = engine.simple_business_query(query)
        
        return jsonify({
            'result': result,
            'query': query,
            'thread_id': thread_id,
            'analysis_type': 'business_intelligence',
            'timestamp': datetime.now().isoformat(),
            'features_used': [
                'o3-mini reasoning',
                'business report formatting',
                'schema-aware queries',
                'query validation'
            ],
            'vector_search_used': engine.vector_store is not None
        })
    except Exception as e:
        logger.error(f"Business intelligence search failed: {e}")
        return jsonify({
            'error': str(e),
            'error_type': 'business_search_failure',
            'suggestions': [
                'Try a more specific business question',
                'Check if FalkorDB is running and accessible',
                'Verify your graph contains relevant data',
                'Use simpler language in your query'
            ]
        }), 500

@app.route('/api/search/followups', methods=['POST'])
@timing_decorator
def business_search_with_followups():
    """Business intelligence search with strategic follow-up questions"""
    if not engine:
        return jsonify({'error': 'Enhanced business intelligence engine not initialized'}), 500
    
    try:
        data = request.get_json()
        query = data.get('query', '')
        thread_id = data.get('thread_id', 'default')
        
        if not query:
            return jsonify({'error': 'Query is required'}), 400
        
        logger.info(f"Processing business intelligence analysis with follow-ups: {query[:100]}...")
        
        start_time = time.time()
        
        # Use enhanced engine with business intelligence and follow-ups
        result, followups = engine.search_with_business_intelligence(query)
        
        execution_time = time.time() - start_time
        
        # Enhanced response with business intelligence metadata
        response = {
            'result': result,
            'followups': followups,
            'query': query,
            'thread_id': thread_id,
            'analysis_metadata': {
                'analysis_type': 'enhanced_business_intelligence',
                'ai_model': 'o3-mini',
                'reasoning_approach': 'built_in_reasoning',
                'response_time': round(execution_time, 2),
                'features_enabled': [
                    'business_report_formatting',
                    'strategic_follow_ups',
                    'executive_summaries',
                    'risk_assessment',
                    'opportunity_analysis',
                    'query_validation',
                    'schema_aware_generation'
                ]
            },
            'business_capabilities': {
                'executive_summary': True,
                'strategic_implications': True,
                'risk_assessment': True,
                'recommended_actions': True,
                'follow_up_generation': True,
                'vector_search_enhancement': engine.vector_store is not None
            },
            'timestamp': datetime.now().isoformat()
        }
        
        logger.info(f"Business intelligence analysis completed in {execution_time:.2f} seconds")
        return jsonify(response)
        
    except Exception as e:
        logger.error(f"Business intelligence analysis with follow-ups failed: {e}")
        return jsonify({
            'error': str(e),
            'error_type': 'business_intelligence_failure',
            'timestamp': datetime.now().isoformat(),
            'suggestions': [
                'Check if FalkorDB is running and accessible',
                'Verify OpenAI API key is valid and has o3-mini access',
                'Try a more specific business question',
                'Check backend logs for detailed error information',
                'Ensure your graph contains relevant business data',
                'Try breaking down complex questions into simpler parts'
            ]
        }), 500

# Schema and analysis endpoints
@app.route('/api/analyze/schema', methods=['GET'])
@timing_decorator
def analyze_business_schema():
    """Perform business-focused schema analysis"""
    if not engine:
        return jsonify({'error': 'Enhanced business intelligence engine not initialized'}), 500
    
    try:
        # Get comprehensive schema information
        schema_info = engine.get_graph_info()
        
        return jsonify({
            'schema_analysis': schema_info,
            'analysis_type': 'business_focused_schema_analysis',
            'capabilities': system_info['features'],
            'business_context': 'Schema analyzed for business intelligence opportunities',
            'timestamp': datetime.now().isoformat()
        })
    except Exception as e:
        logger.error(f"Business schema analysis failed: {e}")
        return jsonify({'error': str(e)}), 500

# Specialized business intelligence endpoints
@app.route('/api/intelligence/business', methods=['POST'])
@timing_decorator
def specialized_business_analysis():
    """Dedicated business intelligence analysis endpoint"""
    if not engine:
        return jsonify({'error': 'Enhanced business intelligence engine not initialized'}), 500
    
    try:
        data = request.get_json()
        business_question = data.get('question', '')
        focus_area = data.get('focus_area', 'strategic')  # strategic, operational, risk, financial
        thread_id = data.get('thread_id', 'business_intelligence')
        
        if not business_question:
            return jsonify({'error': 'Business question is required'}), 400
        
        logger.info(f"Processing specialized business analysis: {business_question[:100]}...")
        
        # Enhanced business question formatting for specific focus areas
        focus_prompts = {
            'strategic': "Focus on strategic implications, competitive advantages, and long-term business impact.",
            'operational': "Focus on operational efficiency, process improvements, and resource optimization.",
            'risk': "Focus on risk assessment, potential threats, and mitigation strategies.",
            'financial': "Focus on financial implications, cost impacts, and revenue opportunities."
        }
        
        enhanced_question = f"""
        Business Analysis Request - {focus_area.title()} Focus:
        
        Question: {business_question}
        
        Analysis Focus: {focus_prompts.get(focus_area, focus_prompts['strategic'])}
        
        Please provide a comprehensive business analysis with executive summary, key findings, 
        strategic implications, risks/opportunities, and recommended actions.
        """
        
        result, followups = engine.search_with_business_intelligence(enhanced_question)
        
        return jsonify({
            'business_analysis': result,
            'strategic_followups': followups,
            'original_question': business_question,
            'focus_area': focus_area,
            'analysis_metadata': {
                'analysis_type': 'specialized_business_intelligence',
                'focus_area': focus_area,
                'ai_model': 'o3-mini',
                'reasoning_approach': 'built_in_reasoning',
                'vector_search_used': engine.vector_store is not None
            },
            'timestamp': datetime.now().isoformat()
        })
        
    except Exception as e:
        logger.error(f"Specialized business analysis failed: {e}")
        return jsonify({'error': str(e)}), 500

# Query validation endpoint
@app.route('/api/validate/query', methods=['POST'])
def validate_query():
    """Validate openCypher query for FalkorDB compatibility"""
    if not engine:
        return jsonify({'error': 'Enhanced business intelligence engine not initialized'}), 500
    
    try:
        data = request.get_json()
        query = data.get('query', '')
        
        if not query:
            return jsonify({'error': 'Query is required'}), 400
        
        # Validate query using enhanced validator
        is_safe = engine.validator.is_safe_query(query)
        
        validation_result = {
            'valid': is_safe,
            'query': query,
            'safe_for_falkordb': is_safe,
            'recommendations': [
                'Use simple MATCH patterns',
                'Avoid complex path traversals',
                'Use standard aggregations (count, sum, avg)',
                'Include proper WHERE clauses',
                'Use ORDER BY and LIMIT for meaningful results'
            ]
        }
        
        if not is_safe:
            validation_result['issues'] = [
                'Query may be too complex for reliable execution',
                'Consider simplifying the query pattern',
                'Avoid multiple variable length paths',
                'Use standard openCypher functions only'
            ]
        
        return jsonify({
            'validation_result': validation_result,
            'timestamp': datetime.now().isoformat()
        })
    except Exception as e:
        logger.error(f"Query validation failed: {e}")
        return jsonify({'error': str(e)}), 500

# System capabilities endpoint
@app.route('/api/capabilities', methods=['GET'])
def get_system_capabilities():
    """Get comprehensive system capabilities information"""
    return jsonify({
        'system_capabilities': {
            'business_intelligence': {
                'enabled': True,
                'features': [
                    'Executive Summary Generation',
                    'Strategic Analysis & Implications',
                    'Risk Assessment & Opportunity Identification',
                    'Recommended Action Plans',
                    'Follow-up Question Generation',
                    'Business Report Formatting'
                ],
                'description': 'Comprehensive business intelligence analysis with structured reporting'
            },
            'ai_reasoning': {
                'enabled': True,
                'model': 'OpenAI o3-mini',
                'features': [
                    'Built-in reasoning capabilities',
                    'Medium reasoning effort setting',
                    'Business-focused prompt optimization',
                    'Structured output generation',
                    'Strategic thinking patterns'
                ]
            },
            'database_features': {
                'enabled': True,
                'features': [
                    'FalkorDB openCypher compatibility',
                    'Schema-aware query generation', 
                    'Vector similarity search (if configured)',
                    'Business context extraction',
                    'Simple, reliable query patterns',
                    'Query validation and safety checks'
                ]
            },
            'query_generation': {
                'enabled': True,
                'approach': 'simple_and_reliable',
                'features': [
                    'Schema-aware query construction',
                    'Business-focused patterns',
                    'Validation and safety checks',
                    'Standard openCypher compliance',
                    'Error prevention and handling'
                ]
            },
            'vector_search': {
                'enabled': engine.vector_store is not None if engine else False,
                'features': [
                    'Semantic similarity search',
                    'Context enhancement',
                    'Related content discovery',
                    'FalkorDB native vector support'
                ] if engine and engine.vector_store else ['Not configured']
            }
        },
        'system_info': system_info,
        'timestamp': datetime.now().isoformat()
    })

# Error handlers
@app.errorhandler(404)
def not_found(error):
    return jsonify({
        'error': 'Endpoint not found',
        'available_endpoints': [
            '/api/health',
            '/api/connection/test',
            '/api/graph/info',
            '/api/search',
            '/api/search/followups',
            '/api/analyze/schema',
            '/api/intelligence/business',
            '/api/validate/query',
            '/api/capabilities'
        ]
    }), 404

@app.errorhandler(500)
def internal_error(error):
    return jsonify({
        'error': 'Internal server error',
        'timestamp': datetime.now().isoformat(),
        'system_status': system_info
    }), 500

# Development endpoints (only in debug mode)
if app.debug:
    @app.route('/api/debug/system', methods=['GET'])
    def debug_system_info():
        """Debug endpoint for system information"""
        return jsonify({
            'system_info': system_info,
            'engine_status': engine is not None,
            'config_status': engine_config is not None,
            'vector_search_status': engine.vector_store is not None if engine else False,
            'environment_variables': {
                'OPENAI_API_KEY': 'SET' if os.getenv('OPENAI_API_KEY') else 'NOT SET',
                'FALKORDB_HOST': os.getenv('FALKORDB_HOST', 'localhost'),
                'FALKORDB_PORT': os.getenv('FALKORDB_PORT', '6379'),
                'GRAPH_NAME': os.getenv('GRAPH_NAME', 'test_cor')
            }
        })

if __name__ == '__main__':
    print("🚀 Starting Enhanced FalkorDB Business Intelligence API...")
    print("=" * 70)
    print(f"🔧 Version: {system_info['version']}")
    print(f"💼 Focus: Business Intelligence & Strategic Analysis")
    print(f"🤖 AI Model: OpenAI o3-mini with Built-in Reasoning")
    print(f"📊 Features: Business Reports, Vector Search, Strategic Follow-ups")
    print(f"🔍 Query Approach: Simple, Schema-Aware, Business-Focused")
    print(f"✅ Query Validation: Enabled")
    print("=" * 70)
    
    if initialize_enhanced_engine():
        print("✅ Enhanced business intelligence engine initialized successfully")
        print(f"📋 Features: {', '.join(system_info['features'])}")
        print(f"🔍 Vector Search: {'✅ Enabled' if engine.vector_store else '❌ Not configured'}")
        print("🚀 Starting Flask server...")
        print("📡 CORS enabled for ports 3000 and 3001")
        print("=" * 70)
        
        # Run with enhanced configuration
        app.run(
            debug=True, 
            host='0.0.0.0', 
            port=5000,
            threaded=True
        )
    else:
        print("❌ Failed to initialize enhanced business intelligence engine")
        print("Please check your configuration:")
        print("- OPENAI_API_KEY environment variable")
        print("- FalkorDB server running on specified host/port")
        print("- falkordb_graphrag_searchengine.py file updated with enhanced version")
        print("- All required Python dependencies installed")
        exit(1)
