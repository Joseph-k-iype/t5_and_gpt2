import re

# Compile regex patterns once for better performance
WHITESPACE_PATTERN = re.compile(r'\s+')
CONTROL_CHAR_PATTERN = re.compile(r'[\x00-\x1f\x7f-\x9f\ufffd]')
LINE_ENDING_PATTERN = re.compile(r'\r\n|\r|\n')

def ultra_clean_text(text: Any) -> str:
    """
    Ultra-robust text cleaning using regex for maximum performance.
    Best for high-volume text processing.
    """
    if pd.isna(text) or text is None:
        return ""
    
    try:
        # Convert to string first
        if not isinstance(text, str):
            text = str(text)
        
        # Replace line endings with spaces (most specific first)
        text = LINE_ENDING_PATTERN.sub(' ', text)
        
        # Replace non-breaking spaces
        text = text.replace('\xa0', ' ')
        
        # Remove control characters and replacement characters
        text = CONTROL_CHAR_PATTERN.sub('', text)
        
        # Encode and decode with error handling
        text = text.encode('utf-8', errors='ignore').decode('utf-8', errors='ignore')
        
        # Normalize whitespace efficiently
        text = WHITESPACE_PATTERN.sub(' ', text).strip()
        
        # Truncate if too long (for database field limits)
        if len(text) > 10000:
            text = text[:9997] + "..."
        
        return text
        
    except Exception as e:
        logger.warning(f"Text cleaning error: {e}, returning empty string")
        return ""
