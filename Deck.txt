// In graphrag_app/frontend/src/hooks/useFormatters.js

import { useMemo } from 'react';
import { TrendingUp, Target, Lightbulb, Shield, Brain } from 'lucide-react';

export const useFormatters = () => {
  const formatAdvancedInsight = useMemo(() => (text) => {
    // Define the sections we expect from the backend
    const sectionHeaders = [
      "Executive Summary", "Strategic Analysis", "Recommendations",
      "Risk Assessment", "Technical Analysis",
    ];

    const sectionConfig = {
      "Executive Summary": { icon: <TrendingUp className="w-5 h-5 mr-2 text-blue-600" />, style: "bg-blue-50 border-l-4 border-blue-400" },
      "Strategic Analysis": { icon: <Target className="w-5 h-5 mr-2 text-purple-600" />, style: "bg-purple-50 border-l-4 border-purple-400" },
      "Recommendations": { icon: <Lightbulb className="w-5 h-5 mr-2 text-amber-600" />, style: "bg-amber-50 border-l-4 border-amber-400" },
      "Risk Assessment": { icon: <Shield className="w-5 h-5 mr-2 text-red-600" />, style: "bg-red-50 border-l-4 border-red-400" },
      "Technical Analysis": { icon: <Brain className="w-5 h-5 mr-2 text-green-600" />, style: "bg-green-50 border-l-4 border-green-400" },
    };

    // Regex to split the text by "### <HeaderText>"
    const regex = new RegExp(`(###\\s*(?:${sectionHeaders.join('|')}))`, 'i');
    const parts = text.split(regex).filter(part => part.trim());

    if (parts.length <= 1) {
      return <p className="text-gray-700 leading-relaxed whitespace-pre-wrap">{text}</p>;
    }

    const sections = [];
    for (let i = 0; i < parts.length; i += 2) {
      const headerText = parts[i].replace(/###\s*/, '').trim();
      const content = (parts[i + 1] || "").trim();
      const matchedHeader = Object.keys(sectionConfig).find(h => h.toLowerCase() === headerText.toLowerCase());

      if (matchedHeader) {
        sections.push({ title: matchedHeader, content });
      }
    }

    const renderContent = (content) => {
      const lines = content.split('\n').filter(line => line.trim() !== '');
      if (lines.some(line => line.trim().startsWith('*') || line.trim().startsWith('-'))) {
        return (
          <ul className="list-disc list-inside space-y-2">
            {lines.map((line, index) => (
              <li key={index} className="text-gray-700 leading-relaxed">
                {line.replace(/^[\s*-]+\s*/, '')}
              </li>
            ))}
          </ul>
        );
      }
      return <p className="text-gray-700 leading-relaxed whitespace-pre-wrap">{content}</p>;
    };

    return sections.map((section, index) => (
      <div key={index} className="mb-6">
        <h3 className="text-lg font-semibold text-gray-800 mb-3 flex items-center">
          {sectionConfig[section.title].icon}
          {section.title}
        </h3>
        <div className={`${sectionConfig[section.title].style} p-4 rounded-r-lg`}>
          {renderContent(section.content)}
        </div>
      </div>
    ));
  }, []);

  const categorizeQuestions = useMemo(() => (questions) => {
    // This function remains the same, it's already well-implemented.
    const categories = { strategic: [], operational: [], technical: [], risk: [] };
    questions.forEach(question => {
      const lowerQ = question.toLowerCase();
      if (lowerQ.includes('strategic') || lowerQ.includes('business') || lowerQ.includes('impact')) categories.strategic.push(question);
      else if (lowerQ.includes('risk') || lowerQ.includes('vulnerab') || lowerQ.includes('threat')) categories.risk.push(question);
      else if (lowerQ.includes('technic') || lowerQ.includes('cypher') || lowerQ.includes('query')) categories.technical.push(question);
      else categories.operational.push(question);
    });
    return categories;
  }, []);

  return { formatAdvancedInsight, categorizeQuestions };
};
