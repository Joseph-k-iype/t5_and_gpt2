"""
Enhanced Flask Backend API for FalkorDB Business Intelligence - NO TIMEOUT VERSION
Optimized for seamless data transfer and long-running complex analyses
"""

from flask import Flask, request, jsonify, stream_template
from flask_cors import CORS
import os
import json
import time
from typing import Dict, Any, List, Optional
import logging
from datetime import datetime
from functools import wraps
import threading

# Import the enhanced FalkorDB engine
try:
    from graphrag import EnhancedGraphRAGEngine, EnterpriseConfig
except ImportError as e:
    print(f"Warning: Could not import enhanced engine: {e}")
    print("Please ensure falkordb_graphrag_searchengine.py is updated with the enhanced version")
    EnhancedGraphRAGEngine = None
    EnterpriseConfig = None

app = Flask(__name__)

# Enhanced CORS configuration with no timeout restrictions
CORS(app, 
     origins=["http://localhost:3000", "http://localhost:3001", "http://127.0.0.1:3000", "http://127.0.0.1:3001"],
     supports_credentials=True,
     allow_headers=["Content-Type", "Authorization", "X-Frontend-Port"],
     methods=["GET", "POST", "PUT", "DELETE", "OPTIONS"])

# Configure logging for long-running operations
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Disable Flask's default timeout warnings
import warnings
warnings.filterwarnings("ignore", message=".*timeout.*", category=UserWarning)

# Global engine instance
engine = None
engine_config = None
system_info = {
    'initialized': False,
    'initialization_time': None,
    'features': [],
    'version': '3.1.0-no-timeout-seamless-transfer',
    'supports_long_running_queries': True,
    'timeout_disabled': True
}

def timing_decorator(f):
    """Decorator to measure function execution time without timeout limits"""
    @wraps(f)
    def wrapper(*args, **kwargs):
        start_time = time.time()
        logger.info(f"Starting {f.__name__} - no timeout restrictions")
        result = f(*args, **kwargs)
        execution_time = time.time() - start_time
        logger.info(f"{f.__name__} completed in {execution_time:.2f} seconds")
        return result
    return wrapper

def long_running_operation(f):
    """Decorator for long-running operations with progress logging"""
    @wraps(f)
    def wrapper(*args, **kwargs):
        start_time = time.time()
        operation_name = f.__name__
        
        logger.info(f"üöÄ Starting long-running operation: {operation_name}")
        logger.info("‚è±Ô∏è  No timeout limits - operation will complete naturally")
        
        try:
            result = f(*args, **kwargs)
            execution_time = time.time() - start_time
            logger.info(f"‚úÖ {operation_name} completed successfully in {execution_time:.2f} seconds")
            return result
        except Exception as e:
            execution_time = time.time() - start_time
            logger.error(f"‚ùå {operation_name} failed after {execution_time:.2f} seconds: {e}")
            raise
    return wrapper

def initialize_enhanced_engine():
    """Initialize the enhanced FalkorDB business intelligence engine"""
    global engine, engine_config, system_info
    
    if not EnhancedGraphRAGEngine:
        logger.error("Enhanced engine class not available")
        return False
    
    try:
        logger.info("Initializing Enhanced FalkorDB Business Intelligence Engine...")
        logger.info("üîß Configuration: No timeout limits for seamless operation")
        
        # Load configuration
        config = EnterpriseConfig()
        config.validate()
        engine_config = config
        
        # Initialize enhanced engine
        engine = EnhancedGraphRAGEngine(
            openai_api_key=config.openai_api_key,
            openai_base_url=config.openai_base_url,
            falkordb_host=config.falkordb_host,
            falkordb_port=config.falkordb_port,
            graph_name=config.graph_name
        )
        
        # Update system info
        system_info.update({
            'initialized': True,
            'initialization_time': datetime.now().isoformat(),
            'features': [
                'Business Intelligence Reports',
                'Vector Similarity Search',
                'Schema-Aware Queries',
                'o3-mini Built-in Reasoning',
                'Strategic Follow-up Generation',
                'Executive Summary Generation',
                'Risk Assessment',
                'Opportunity Analysis',
                'Query Validation',
                'Simple Reliable Cypher Generation',
                'No Timeout Restrictions',
                'Long-Running Query Support',
                'Seamless Data Transfer'
            ],
            'database_info': {
                'host': config.falkordb_host,
                'port': config.falkordb_port,
                'graph_name': config.graph_name,
                'query_language': 'openCypher',
                'vector_search_enabled': engine.vector_store is not None,
                'business_intelligence': True,
                'timeout_disabled': True,
                'supports_complex_analysis': True
            }
        })
        
        logger.info("‚úÖ Enhanced FalkorDB Business Intelligence engine initialized successfully")
        logger.info("‚ö° Long-running queries supported with no timeout limits")
        return True
        
    except Exception as e:
        logger.error(f"Failed to initialize enhanced engine: {e}")
        system_info.update({
            'initialized': False,
            'error': str(e),
            'timestamp': datetime.now().isoformat()
        })
        return False

# Health and system endpoints
@app.route('/api/health', methods=['GET'])
def health_check():
    """Enhanced health check with no-timeout capabilities"""
    return jsonify({
        'status': 'healthy',
        'service': 'FalkorDB Enhanced Business Intelligence API - No Timeout',
        'version': system_info['version'],
        'engine_initialized': engine is not None,
        'system_info': system_info,
        'timestamp': datetime.now().isoformat(),
        'performance_features': {
            'timeout_disabled': True,
            'long_running_queries': True,
            'seamless_data_transfer': True,
            'complex_analysis_support': True,
            'unlimited_processing_time': True
        },
        'supported_features': {
            'business_intelligence': True,
            'vector_search': engine.vector_store is not None if engine else False,
            'schema_aware_queries': True,
            'o3_mini_reasoning': True,
            'executive_summaries': True,
            'strategic_analysis': True,
            'risk_assessment': True,
            'follow_up_questions': True,
            'query_validation': True,
            'simple_reliable_queries': True,
            'no_timeout_limits': True
        }
    })

@app.route('/api/connection/test', methods=['GET'])
def test_connection():
    """Enhanced connection test with no-timeout validation"""
    if not engine:
        return jsonify({
            'status': 'failed',
            'error': 'Enhanced business intelligence engine not initialized',
            'system_info': system_info
        }), 500
    
    try:
        logger.info("üîç Testing connection with no timeout restrictions...")
        result = engine.test_connection()
        
        # Add enhanced system information
        result.update({
            'enhanced_features': system_info['features'],
            'business_intelligence': True,
            'system_version': system_info['version'],
            'vector_search_available': engine.vector_store is not None,
            'query_validation': True,
            'timeout_disabled': True,
            'long_running_support': True,
            'seamless_transfer': True
        })
        
        logger.info("‚úÖ Connection test completed successfully")
        return jsonify(result)
    except Exception as e:
        logger.error(f"Enhanced connection test failed: {e}")
        return jsonify({
            'status': 'failed',
            'error': str(e),
            'system_info': system_info
        }), 500

# Enhanced business intelligence search endpoints with no timeout
@app.route('/api/search/followups', methods=['POST'])
@long_running_operation
@timing_decorator
def business_search_with_followups():
    """Business intelligence search with strategic follow-ups - NO TIMEOUT LIMITS"""
    if not engine:
        return jsonify({'error': 'Enhanced business intelligence engine not initialized'}), 500
    
    try:
        data = request.get_json()
        query = data.get('query', '')
        thread_id = data.get('thread_id', 'default')
        
        if not query:
            return jsonify({'error': 'Query is required'}), 400
        
        logger.info(f"üöÄ Processing business intelligence analysis (NO TIMEOUT): {query[:100]}...")
        logger.info("‚è±Ô∏è  Operation will complete naturally without time restrictions")
        
        start_time = time.time()
        
        # Log progress for long operations
        def log_progress():
            elapsed = time.time() - start_time
            if elapsed > 30:  # Log every 30 seconds for long operations
                logger.info(f"‚è≥ Analysis in progress... {elapsed:.0f}s elapsed (no timeout)")
                threading.Timer(30.0, log_progress).start()
        
        # Start progress logging for long operations
        threading.Timer(30.0, log_progress).start()
        
        # Use enhanced engine with business intelligence and follow-ups
        result, followups = engine.search_with_business_intelligence(query)
        
        execution_time = time.time() - start_time
        
        # Enhanced response with business intelligence metadata
        response = {
            'result': result,
            'followups': followups,
            'query': query,
            'thread_id': thread_id,
            'analysis_metadata': {
                'analysis_type': 'enhanced_business_intelligence',
                'ai_model': 'o3-mini',
                'reasoning_approach': 'built_in_reasoning',
                'response_time': round(execution_time, 2),
                'timeout_disabled': True,
                'seamless_transfer': True,
                'features_enabled': [
                    'business_report_formatting',
                    'strategic_follow_ups',
                    'executive_summaries',
                    'risk_assessment',
                    'opportunity_analysis',
                    'query_validation',
                    'schema_aware_generation',
                    'no_timeout_restrictions'
                ]
            },
            'business_capabilities': {
                'executive_summary': True,
                'strategic_implications': True,
                'risk_assessment': True,
                'recommended_actions': True,
                'follow_up_generation': True,
                'vector_search_enhancement': engine.vector_store is not None,
                'unlimited_processing_time': True
            },
            'performance_info': {
                'execution_time_seconds': execution_time,
                'timeout_disabled': True,
                'complex_query_support': True,
                'seamless_data_transfer': True
            },
            'timestamp': datetime.now().isoformat()
        }
        
        logger.info(f"‚úÖ Business intelligence analysis completed in {execution_time:.2f} seconds")
        logger.info(f"üìä Response size: {len(json.dumps(response))} characters")
        
        return jsonify(response)
        
    except Exception as e:
        execution_time = time.time() - start_time if 'start_time' in locals() else 0
        logger.error(f"‚ùå Business intelligence analysis failed after {execution_time:.2f}s: {e}")
        return jsonify({
            'error': str(e),
            'error_type': 'business_intelligence_failure',
            'execution_time': execution_time,
            'timeout_disabled': True,
            'timestamp': datetime.now().isoformat(),
            'suggestions': [
                'Check if FalkorDB is running and accessible',
                'Verify OpenAI API key is valid and has o3-mini access',
                'Check backend logs for detailed error information',
                'Ensure your graph contains relevant business data',
                'Complex analyses are supported - no timeout restrictions apply'
            ]
        }), 500

@app.route('/api/search', methods=['POST'])
@long_running_operation
@timing_decorator
def business_search():
    """Simple business intelligence search - NO TIMEOUT LIMITS"""
    if not engine:
        return jsonify({'error': 'Enhanced business intelligence engine not initialized'}), 500
    
    try:
        data = request.get_json()
        query = data.get('query', '')
        thread_id = data.get('thread_id', 'default')
        
        if not query:
            return jsonify({'error': 'Query is required'}), 400
        
        logger.info(f"üöÄ Processing business intelligence query (NO TIMEOUT): {query[:100]}...")
        
        start_time = time.time()
        
        # Use enhanced engine for business intelligence search
        result = engine.simple_business_query(query)
        
        execution_time = time.time() - start_time
        
        response = {
            'result': result,
            'query': query,
            'thread_id': thread_id,
            'analysis_type': 'business_intelligence',
            'timestamp': datetime.now().isoformat(),
            'execution_time': execution_time,
            'timeout_disabled': True,
            'features_used': [
                'o3-mini reasoning',
                'business report formatting',
                'schema-aware queries',
                'query validation',
                'no timeout restrictions'
            ],
            'vector_search_used': engine.vector_store is not None
        }
        
        logger.info(f"‚úÖ Business query completed in {execution_time:.2f} seconds")
        return jsonify(response)
        
    except Exception as e:
        logger.error(f"‚ùå Business intelligence search failed: {e}")
        return jsonify({
            'error': str(e),
            'error_type': 'business_search_failure',
            'timeout_disabled': True,
            'suggestions': [
                'Check if FalkorDB is running and accessible',
                'Verify your graph contains relevant data',
                'Try a more specific business question',
                'Complex analyses are fully supported without timeout limits'
            ]
        }), 500

# System capabilities endpoint
@app.route('/api/capabilities', methods=['GET'])
def get_system_capabilities():
    """Get comprehensive system capabilities with no-timeout features"""
    return jsonify({
        'system_capabilities': {
            'business_intelligence': {
                'enabled': True,
                'features': [
                    'Executive Summary Generation',
                    'Strategic Analysis & Implications',
                    'Risk Assessment & Opportunity Identification',
                    'Recommended Action Plans',
                    'Follow-up Question Generation',
                    'Business Report Formatting'
                ],
                'description': 'Comprehensive business intelligence analysis with structured reporting'
            },
            'performance_optimization': {
                'enabled': True,
                'features': [
                    'No timeout restrictions',
                    'Long-running query support',
                    'Seamless data transfer',
                    'Complex analysis capabilities',
                    'Unlimited processing time',
                    'Progress logging for long operations'
                ],
                'description': 'Optimized for complex, time-intensive graph analyses'
            },
            'ai_reasoning': {
                'enabled': True,
                'model': 'OpenAI o3-mini',
                'features': [
                    'Built-in reasoning capabilities',
                    'Medium reasoning effort setting',
                    'Business-focused prompt optimization',
                    'Structured output generation',
                    'Strategic thinking patterns'
                ]
            },
            'database_features': {
                'enabled': True,
                'features': [
                    'FalkorDB openCypher compatibility',
                    'Schema-aware query generation', 
                    'Vector similarity search (if configured)',
                    'Business context extraction',
                    'Simple, reliable query patterns',
                    'Query validation and safety checks',
                    'Enhanced query cleaning'
                ]
            },
            'vector_search': {
                'enabled': engine.vector_store is not None if engine else False,
                'features': [
                    'Semantic similarity search',
                    'Context enhancement',
                    'Related content discovery',
                    'FalkorDB native vector support'
                ] if engine and engine.vector_store else ['Not configured']
            }
        },
        'system_info': system_info,
        'performance_guarantees': {
            'no_timeout_limits': True,
            'seamless_data_transfer': True,
            'complex_query_support': True,
            'unlimited_processing_time': True,
            'progress_monitoring': True
        },
        'timestamp': datetime.now().isoformat()
    })

# Error handlers with timeout information
@app.errorhandler(404)
def not_found(error):
    return jsonify({
        'error': 'Endpoint not found',
        'timeout_info': 'All endpoints support unlimited processing time',
        'available_endpoints': [
            '/api/health',
            '/api/connection/test',
            '/api/graph/info',
            '/api/search',
            '/api/search/followups',
            '/api/capabilities'
        ]
    }), 404

@app.errorhandler(500)
def internal_error(error):
    return jsonify({
        'error': 'Internal server error',
        'timeout_info': 'Error not related to timeout - no timeout limits applied',
        'timestamp': datetime.now().isoformat(),
        'system_status': system_info
    }), 500

# Configure Flask for long-running operations
app.config['SEND_FILE_MAX_AGE_DEFAULT'] = 0
app.config['TIMEOUT'] = None  # Disable any Flask timeouts

if __name__ == '__main__':
    print("üöÄ Starting Enhanced FalkorDB Business Intelligence API - NO TIMEOUT VERSION")
    print("=" * 80)
    print(f"üîß Version: {system_info['version']}")
    print(f"üíº Focus: Business Intelligence & Strategic Analysis")
    print(f"ü§ñ AI Model: OpenAI o3-mini with Built-in Reasoning")
    print(f"üìä Features: Business Reports, Vector Search, Strategic Follow-ups")
    print(f"üîç Query Approach: Simple, Schema-Aware, Business-Focused")
    print(f"‚úÖ Query Validation: Enabled")
    print(f"‚è±Ô∏è  TIMEOUT: DISABLED - Unlimited processing time for complex analyses")
    print(f"üîÑ Seamless Data Transfer: ENABLED")
    print(f"üß† Long-Running Queries: FULLY SUPPORTED")
    print("=" * 80)
    
    if initialize_enhanced_engine():
        print("‚úÖ Enhanced business intelligence engine initialized successfully")
        print(f"üìã Features: {', '.join(system_info['features'])}")
        print(f"üîç Vector Search: {'‚úÖ Enabled' if engine.vector_store else '‚ùå Not configured'}")
        print("üöÄ Starting Flask server with NO TIMEOUT RESTRICTIONS...")
        print("üì° CORS enabled for ports 3000 and 3001")
        print("‚è±Ô∏è  Complex queries will complete without time limits")
        print("üîÑ Seamless data transfer between frontend and backend")
        print("=" * 80)
        
        # Run with enhanced configuration for long-running operations
        app.run(
            debug=True, 
            host='0.0.0.0', 
            port=5000,
            threaded=True,
            # No timeout restrictions
            use_reloader=False  # Disable reloader for stability with long operations
        )
    else:
        print("‚ùå Failed to initialize enhanced business intelligence engine")
        print("Please check your configuration:")
        print("- OPENAI_API_KEY environment variable")
        print("- FalkorDB server running on specified host/port")
        print("- falkordb_graphrag_searchengine.py file updated with enhanced version")
        print("- All required Python dependencies installed")
        exit(1)
