# SPARQL Query to filter on a specific report and get full graph for all discovered classes

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

# Method 1: Two-step approach (recommended)
# Step 1: Discover all classes mentioned in relation to the specific report
CONSTRUCT {
  ?s ?p ?o .
}
WHERE {
  # Replace with your specific report URI
  VALUES ?specificReport { <http://example.org/report123> }
  
  {
    # Find all classes mentioned in the report's triples
    SELECT DISTINCT ?discoveredClass WHERE {
      {
        # Classes where the report is the subject
        ?specificReport ?pred ?obj .
        ?obj rdf:type ?discoveredClass .
      }
      UNION
      {
        # Classes where the report is the object
        ?subj ?pred ?specificReport .
        ?subj rdf:type ?discoveredClass .
      }
      UNION
      {
        # Direct type of the report itself
        ?specificReport rdf:type ?discoveredClass .
      }
      UNION
      {
        # Classes mentioned as objects in report's properties
        ?specificReport ?pred ?discoveredClass .
        ?discoveredClass rdf:type rdfs:Class .
      }
      UNION
      {
        # Classes mentioned as objects in report's properties (OWL)
        ?specificReport ?pred ?discoveredClass .
        ?discoveredClass rdf:type <http://www.w3.org/2002/07/owl#Class> .
      }
    }
  }
  
  # Step 2: Get ALL triples for ALL instances of the discovered classes
  ?s rdf:type ?discoveredClass .
  ?s ?p ?o .
}

---

# Method 2: Alternative with explicit class collection
CONSTRUCT {
  ?instance ?property ?value .
  ?discoveredClass ?classProp ?classValue .
}
WHERE {
  VALUES ?specificReport { <http://example.org/report123> }
  
  # Collect all classes referenced by the specific report
  {
    # Direct references to entities with types
    ?specificReport ?reportProp ?entity .
    ?entity rdf:type ?discoveredClass .
    
    # Get all instances of these classes and their complete data
    ?instance rdf:type ?discoveredClass .
    ?instance ?property ?value .
  }
  UNION
  {
    # Also include the class definitions themselves
    ?specificReport ?reportProp ?entity .
    ?entity rdf:type ?discoveredClass .
    ?discoveredClass ?classProp ?classValue .
  }
}

---

# Method 3: Using FILTER with collected classes
SELECT ?subject ?predicate ?object
WHERE {
  VALUES ?specificReport { <http://example.org/report123> }
  
  # Subquery to collect all relevant classes
  {
    SELECT DISTINCT ?relevantClass WHERE {
      {
        ?specificReport ?p1 ?obj .
        ?obj rdf:type ?relevantClass .
      }
      UNION
      {
        ?subj ?p2 ?specificReport .
        ?subj rdf:type ?relevantClass .
      }
      UNION
      {
        ?specificReport rdf:type ?relevantClass .
      }
    }
  }
  
  # Get all triples for instances of relevant classes
  ?subject rdf:type ?relevantClass .
  ?subject ?predicate ?object .
}

---

# Method 4: Comprehensive approach including nested relationships
CONSTRUCT {
  ?s ?p ?o .
}
WHERE {
  VALUES ?specificReport { <http://example.org/report123> }
  
  {
    # Level 1: Direct entities referenced by the report
    ?specificReport ?directProp ?directEntity .
    ?directEntity rdf:type ?directClass .
    
    # Get all instances of these direct classes
    ?s rdf:type ?directClass .
    ?s ?p ?o .
  }
  UNION
  {
    # Level 2: Entities referenced by entities referenced by the report
    ?specificReport ?directProp ?directEntity .
    ?directEntity ?nestedProp ?nestedEntity .
    ?nestedEntity rdf:type ?nestedClass .
    
    # Get all instances of these nested classes
    ?s rdf:type ?nestedClass .
    ?s ?p ?o .
  }
  UNION
  {
    # Include the report's own class instances
    ?specificReport rdf:type ?reportClass .
    ?s rdf:type ?reportClass .
    ?s ?p ?o .
  }
}

---

# Method 5: Simple and efficient version
CONSTRUCT {
  ?allInstances ?prop ?val .
}
WHERE {
  # Your specific report
  VALUES ?myReport { <http://example.org/report123> }
  
  # Find entities connected to this report and their types
  {
    ?myReport ?connects ?connectedEntity .
    ?connectedEntity rdf:type ?entityType .
  }
  UNION
  {
    ?connectedEntity ?connects ?myReport .
    ?connectedEntity rdf:type ?entityType .
  }
  
  # Get ALL instances of those types and their complete information
  ?allInstances rdf:type ?entityType .
  ?allInstances ?prop ?val .
}

---

# Usage Example:
# If you have a report about employees and projects:
# 1. The query finds that your report references instances of Employee and Project classes
# 2. It then returns ALL employees and ALL projects in your dataset with all their properties
# 3. Not just the ones mentioned in your specific report

# To use:
# 1. Replace <http://example.org/report123> with your actual report URI
# 2. Run the query to get complete class graphs
# 3. Choose Method 1 for most cases, Method 4 for deeper nested relationships
