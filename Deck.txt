#!/usr/bin/env python3
"""
TTL Files Merger using rdflib
Combines multiple TTL files with proper RDF semantics
"""

import os
import glob
import sys
from rdflib import Graph

def merge_ttl_files_rdflib(input_pattern, output_file, output_format="turtle"):
    """
    Merge multiple TTL files using rdflib for proper RDF handling
    
    Args:
        input_pattern: Pattern to match TTL files (e.g., "*.ttl" or "data/*.ttl")
        output_file: Output filename for the merged file
        output_format: Output format ("turtle", "xml", "n3", "nt", "json-ld")
    """
    
    # Create a new graph to hold merged data
    merged_graph = Graph()
    
    # Get list of TTL files
    ttl_files = glob.glob(input_pattern)
    
    if not ttl_files:
        print(f"❌ No TTL files found matching pattern: {input_pattern}")
        return False
    
    print(f"🔍 Found {len(ttl_files)} TTL files to merge:")
    for file in ttl_files:
        print(f"   📄 {file}")
    
    successful_files = 0
    total_triples = 0
    
    # Process each file
    for ttl_file in ttl_files:
        try:
            print(f"\n📖 Processing: {ttl_file}")
            
            # Create temporary graph for this file
            temp_graph = Graph()
            
            # Parse the TTL file
            temp_graph.parse(ttl_file, format="turtle")
            
            file_triples = len(temp_graph)
            print(f"   ✅ Loaded {file_triples} triples")
            
            # Add to merged graph (automatically handles duplicates)
            merged_graph += temp_graph
            
            successful_files += 1
            total_triples += file_triples
            
        except Exception as e:
            print(f"   ❌ Error processing {ttl_file}: {e}")
            continue
    
    if successful_files == 0:
        print("❌ No files were successfully processed")
        return False
    
    # Write the merged file
    try:
        print(f"\n💾 Writing merged data to: {output_file}")
        
        # Serialize the merged graph
        merged_graph.serialize(destination=output_file, format=output_format)
        
        unique_triples = len(merged_graph)
        duplicates_removed = total_triples - unique_triples
        
        print(f"\n✅ Successfully merged {successful_files}/{len(ttl_files)} files!")
        print(f"   📊 Total triples processed: {total_triples:,}")
        print(f"   🔗 Unique triples in output: {unique_triples:,}")
        if duplicates_removed > 0:
            print(f"   🔄 Duplicate triples removed: {duplicates_removed:,}")
        print(f"   📁 Output format: {output_format}")
        
        return True
        
    except Exception as e:
        print(f"❌ Error writing merged file: {e}")
        return False

def list_namespaces(ttl_files):
    """List all namespaces found in the TTL files"""
    print("\n🏷️  Analyzing namespaces...")
    
    all_namespaces = set()
    
    for ttl_file in ttl_files:
        try:
            temp_graph = Graph()
            temp_graph.parse(ttl_file, format="turtle")
            
            for prefix, namespace in temp_graph.namespaces():
                all_namespaces.add((prefix, str(namespace)))
                
        except Exception as e:
            print(f"   ❌ Error analyzing {ttl_file}: {e}")
    
    if all_namespaces:
        print(f"   Found {len(all_namespaces)} unique namespaces:")
        for prefix, namespace in sorted(all_namespaces):
            print(f"     {prefix}: <{namespace}>")
    else:
        print("   No namespaces found")

def validate_ttl_files(input_pattern):
    """Validate TTL files before merging"""
    print("🔍 Validating TTL files...")
    
    ttl_files = glob.glob(input_pattern)
    valid_files = []
    
    for ttl_file in ttl_files:
        try:
            temp_graph = Graph()
            temp_graph.parse(ttl_file, format="turtle")
            print(f"   ✅ {ttl_file} - Valid ({len(temp_graph)} triples)")
            valid_files.append(ttl_file)
        except Exception as e:
            print(f"   ❌ {ttl_file} - Invalid: {e}")
    
    return valid_files

def main():
    """Main function with enhanced options"""
    
    print("🐢 TTL Files Merger (using rdflib)")
    print("=" * 40)
    
    # Default values
    input_pattern = "*.ttl"
    output_file = "merged.ttl"
    output_format = "turtle"
    
    # Parse command line arguments
    if len(sys.argv) >= 2:
        input_pattern = sys.argv[1]
    if len(sys.argv) >= 3:
        output_file = sys.argv[2]
    if len(sys.argv) >= 4:
        output_format = sys.argv[3]
    
    # Validate output format
    valid_formats = ["turtle", "xml", "n3", "nt", "json-ld", "trig"]
    if output_format not in valid_formats:
        print(f"❌ Invalid output format: {output_format}")
        print(f"   Valid formats: {', '.join(valid_formats)}")
        return
    
    # Check if files exist
    ttl_files = glob.glob(input_pattern)
    if not ttl_files:
        print(f"❌ No files found matching: {input_pattern}")
        print("\n💡 Usage examples:")
        print("   python merge_ttl.py                    # Merge all *.ttl files")
        print("   python merge_ttl.py 'data/*.ttl'       # Merge files in data/ folder")
        print("   python merge_ttl.py '*.ttl' output.ttl # Specify output file")
        print("   python merge_ttl.py '*.ttl' out.rdf xml # Output as RDF/XML")
        return
    
    # Optional: Validate files first
    print(f"📂 Input pattern: {input_pattern}")
    print(f"📄 Output file: {output_file}")
    print(f"📝 Output format: {output_format}")
    
    # Validate files
    valid_files = validate_ttl_files(input_pattern)
    if not valid_files:
        print("❌ No valid TTL files found")
        return
    
    # Show namespaces
    list_namespaces(valid_files)
    
    # Perform the merge
    success = merge_ttl_files_rdflib(input_pattern, output_file, output_format)
    
    if success:
        print(f"\n🎉 Merge completed successfully!")
        print(f"   📁 Output file: {output_file}")
        
        # Show file size
        if os.path.exists(output_file):
            size = os.path.getsize(output_file)
            if size < 1024:
                size_str = f"{size} bytes"
            elif size < 1024 * 1024:
                size_str = f"{size / 1024:.1f} KB"
            else:
                size_str = f"{size / (1024 * 1024):.1f} MB"
            print(f"   📏 File size: {size_str}")

if __name__ == "__main__":
    # Check if rdflib is installed
    try:
        import rdflib
        main()
    except ImportError:
        print("❌ rdflib not found. Install it with:")
        print("   pip install rdflib")
        print("\n   Or install with additional features:")
        print("   pip install rdflib[json-ld]  # For JSON-LD support")
