import os
import sys
from flask import Flask, render_template, request, jsonify, send_from_directory
import logging
from werkzeug.utils import secure_filename

# Import your RAG chatbot components
from your_rag_module import RAGChatbot, ChatbotConfig

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')
logger = logging.getLogger(__name__)

# Define paths
ENV_DIR = "env"
CONFIG_PATH = f"{ENV_DIR}/config.env"
CREDS_PATH = f"{ENV_DIR}/credentials.env"
CERT_PATH = f"{ENV_DIR}/cacert.pem"
UPLOAD_FOLDER = "./knowledge_base"
ALLOWED_EXTENSIONS = {'pdf'}

# Initialize Flask app
app = Flask(__name__)
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER
app.config['MAX_CONTENT_LENGTH'] = 16 * 1024 * 1024  # 16 MB max upload

# Create upload folder if it doesn't exist
os.makedirs(UPLOAD_FOLDER, exist_ok=True)

# Initialize chatbot
chatbot_config = ChatbotConfig(
    pdf_directory=UPLOAD_FOLDER,
    vector_store_dir="./vector_db"
)

try:
    chatbot = RAGChatbot(CONFIG_PATH, CREDS_PATH, CERT_PATH, chatbot_config)
    logger.info("RAG Chatbot initialized successfully!")
except Exception as e:
    logger.error(f"Error initializing chatbot: {e}")
    chatbot = None


def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS


@app.route('/')
def index():
    """Serve the main chat interface."""
    return render_template('index.html')


@app.route('/uploads/<filename>')
def uploaded_file(filename):
    """Serve uploaded files."""
    return send_from_directory(app.config['UPLOAD_FOLDER'], filename)


@app.route('/upload', methods=['POST'])
def upload_file():
    """Handle file uploads."""
    if 'file' not in request.files:
        return jsonify({'success': False, 'message': 'No file part'}), 400
    
    file = request.files['file']
    if file.filename == '':
        return jsonify({'success': False, 'message': 'No file selected'}), 400
    
    if file and allowed_file(file.filename):
        filename = secure_filename(file.filename)
        file_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
        file.save(file_path)
        
        return jsonify({
            'success': True, 
            'message': f'File uploaded successfully',
            'filename': filename
        })
    
    return jsonify({'success': False, 'message': 'Invalid file type. Only PDF files are allowed'}), 400


@app.route('/process', methods=['POST'])
def process_knowledge_base():
    """Process the knowledge base."""
    global chatbot
    
    if chatbot is None:
        return jsonify({'success': False, 'message': 'Chatbot not initialized'}), 500
    
    try:
        success = chatbot.process_knowledge_base()
        if success:
            return jsonify({'success': True, 'message': 'Knowledge base processed successfully'})
        else:
            return jsonify({'success': False, 'message': 'Failed to process knowledge base'}), 500
    except Exception as e:
        logger.error(f"Error processing knowledge base: {e}")
        return jsonify({'success': False, 'message': f'Error: {str(e)}'}), 500


@app.route('/ask', methods=['POST'])
def ask_question():
    """Answer a question using the chatbot."""
    global chatbot
    
    if chatbot is None:
        return jsonify({'success': False, 'message': 'Chatbot not initialized'}), 500
    
    data = request.json
    question = data.get('question', '')
    
    if not question:
        return jsonify({'success': False, 'message': 'No question provided'}), 400
    
    try:
        result = chatbot.answer_question(question)
        return jsonify({
            'success': True,
            'question': result['question'],
            'answer': result['answer'],
            'sources': result['sources']
        })
    except Exception as e:
        logger.error(f"Error answering question: {e}")
        return jsonify({'success': False, 'message': f'Error: {str(e)}'}), 500


@app.route('/files', methods=['GET'])
def list_files():
    """List all files in the knowledge base directory."""
    try:
        files = []
        for filename in os.listdir(app.config['UPLOAD_FOLDER']):
            if os.path.isfile(os.path.join(app.config['UPLOAD_FOLDER'], filename)) and allowed_file(filename):
                files.append(filename)
        
        return jsonify({'success': True, 'files': files})
    except Exception as e:
        logger.error(f"Error listing files: {e}")
        return jsonify({'success': False, 'message': f'Error: {str(e)}'}), 500


@app.route('/delete/<filename>', methods=['DELETE'])
def delete_file(filename):
    """Delete a file from the knowledge base."""
    try:
        file_path = os.path.join(app.config['UPLOAD_FOLDER'], secure_filename(filename))
        if os.path.exists(file_path):
            os.remove(file_path)
            return jsonify({'success': True, 'message': f'File {filename} deleted successfully'})
        else:
            return jsonify({'success': False, 'message': f'File {filename} not found'}), 404
    except Exception as e:
        logger.error(f"Error deleting file: {e}")
        return jsonify({'success': False, 'message': f'Error: {str(e)}'}), 500


if __name__ == '__main__':
    app.run(debug=True)
