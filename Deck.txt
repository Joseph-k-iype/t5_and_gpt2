#!/usr/bin/env python3
"""
Preprocessing script for DataElements.csv to create unified DataElement nodes
with data_element_type attribute distinguishing BusinessDataElement vs ReportMetric
"""

import pandas as pd
import os

def preprocess_data_elements(input_file="DataElements.csv", output_dir="./"):
    """
    Process DataElements.csv to create a unified DataElements.csv with both BusinessDataElement and ReportMetric
    using data_element_type attribute to distinguish them
    """
    
    print(f"Reading {input_file}...")
    df = pd.read_csv(input_file)
    print(f"Loaded {len(df)} rows")
    
    all_elements = []
    
    # Process consumed BusinessDataElements
    consumed_bde = df[df['consumedbde'].notna() & (df['consumedbde'] != '')].copy()
    if not consumed_bde.empty:
        consumed_bde_records = []
        for _, row in consumed_bde.iterrows():
            consumed_bde_records.append({
                'elementid': row['consumedbde'],
                'name': row['consumedbdename'] if pd.notna(row['consumedbdename']) else row['consumedbde'],
                'description': row['consumedbdedescription'] if pd.notna(row['consumedbdedescription']) else 'Business data element',
                'type': 'DataElement',
                'data_element_type': 'BusinessDataElement',
                'sourceMap': row['map'],
                'direction': 'consumed'
            })
        all_elements.extend(consumed_bde_records)
        print(f"Found {len(consumed_bde_records)} consumed BusinessDataElements")
    
    # Process produced BusinessDataElements  
    produced_bde = df[df['producedbde'].notna() & (df['producedbde'] != '')].copy()
    if not produced_bde.empty:
        produced_bde_records = []
        for _, row in produced_bde.iterrows():
            produced_bde_records.append({
                'elementid': row['producedbde'],
                'name': row['producedbde'],  # Using ID as name since no specific name field
                'description': row['producedbdedescription'] if pd.notna(row['producedbdedescription']) else 'Business data element',
                'type': 'DataElement',
                'data_element_type': 'BusinessDataElement',
                'sourceMap': row['map'],
                'direction': 'produced'
            })
        all_elements.extend(produced_bde_records)
        print(f"Found {len(produced_bde_records)} produced BusinessDataElements")
    
    # Process consumed ReportMetrics
    consumed_rm = df[df['consumedrm'].notna() & (df['consumedrm'] != '')].copy()
    if not consumed_rm.empty:
        consumed_rm_records = []
        for _, row in consumed_rm.iterrows():
            consumed_rm_records.append({
                'elementid': row['consumedrm'],
                'name': row['consumedemname'] if pd.notna(row['consumedemname']) else row['consumedrm'],
                'description': row['consumedrmdescription'] if pd.notna(row['consumedrmdescription']) else 'Report metric',
                'type': 'DataElement',
                'data_element_type': 'ReportMetric',
                'sourceMap': row['map'],
                'direction': 'consumed'
            })
        all_elements.extend(consumed_rm_records)
        print(f"Found {len(consumed_rm_records)} consumed ReportMetrics")
    
    # Process produced ReportMetrics
    produced_rm = df[df['producedrm'].notna() & (df['producedrm'] != '')].copy()
    if not produced_rm.empty:
        produced_rm_records = []
        for _, row in produced_rm.iterrows():
            produced_rm_records.append({
                'elementid': row['producedrm'],
                'name': row['producedrm'],  # Using ID as name since no specific name field
                'description': row['producedrmdescription'] if pd.notna(row['producedrmdescription']) else 'Report metric',
                'type': 'DataElement',
                'data_element_type': 'ReportMetric',
                'sourceMap': row['map'],
                'direction': 'produced'
            })
        all_elements.extend(produced_rm_records)
        print(f"Found {len(produced_rm_records)} produced ReportMetrics")
    
    # Create unified DataFrame
    if all_elements:
        unified_df = pd.DataFrame(all_elements)
        
        # Remove duplicates based on elementid, keeping first occurrence
        original_count = len(unified_df)
        unified_df = unified_df.drop_duplicates(subset=['elementid'], keep='first')
        deduplicated_count = len(unified_df)
        
        if original_count != deduplicated_count:
            print(f"Removed {original_count - deduplicated_count} duplicate elements")
    else:
        unified_df = pd.DataFrame(columns=['elementid', 'name', 'description', 'type', 'data_element_type', 'sourceMap', 'direction'])
    
    # Save the unified file
    output_file = os.path.join(output_dir, "DataElements.csv")
    unified_df.to_csv(output_file, index=False)
    
    print(f"Saved {len(unified_df)} unified DataElements to {output_file}")
    
    # Create summary report
    if not unified_df.empty:
        summary = {
            'original_rows': len(df),
            'total_data_elements': len(unified_df),
            'business_data_elements': len(unified_df[unified_df['data_element_type'] == 'BusinessDataElement']),
            'report_metrics': len(unified_df[unified_df['data_element_type'] == 'ReportMetric']),
            'consumed_elements': len(unified_df[unified_df['direction'] == 'consumed']),
            'produced_elements': len(unified_df[unified_df['direction'] == 'produced'])
        }
    else:
        summary = {
            'original_rows': len(df),
            'total_data_elements': 0,
            'business_data_elements': 0,
            'report_metrics': 0,
            'consumed_elements': 0,
            'produced_elements': 0
        }
    
    print("\n" + "="*50)
    print("UNIFIED DATA ELEMENT PREPROCESSING SUMMARY")
    print("="*50)
    for key, value in summary.items():
        print(f"{key.replace('_', ' ').title()}: {value:,}")
    
    print("\nOutput Structure:")
    print("✅ Single DataElements.csv file created")
    print("✅ data_element_type attribute distinguishes BusinessDataElement vs ReportMetric")
    print("✅ direction attribute distinguishes consumed vs produced")
    print("✅ Ready for unified CONSUMES_DATA_ELEMENT and PRODUCES_DATA_ELEMENT relationships")
    print("="*50)
    
    return unified_df

if __name__ == "__main__":
    import sys
    
    input_file = sys.argv[1] if len(sys.argv) > 1 else "DataElements.csv"
    output_dir = sys.argv[2] if len(sys.argv) > 2 else "./"
    
    if not os.path.exists(input_file):
        print(f"Error: Input file {input_file} not found")
        sys.exit(1)
        
    preprocess_data_elements(input_file, output_dir)
