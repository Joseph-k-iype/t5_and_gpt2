#!/usr/bin/env python3
"""
TTL (Turtle) Files Merger
Combines multiple TTL files while properly handling namespace prefixes
"""

import os
import glob
import re
from collections import OrderedDict

def merge_ttl_files(input_pattern, output_file):
    """
    Merge multiple TTL files into one, handling prefixes intelligently
    
    Args:
        input_pattern: Pattern to match TTL files (e.g., "*.ttl" or "data/*.ttl")
        output_file: Output filename for the merged TTL file
    """
    
    # Store all unique prefixes
    prefixes = OrderedDict()
    
    # Store all triples (non-prefix content)
    triples_content = []
    
    # Get list of TTL files
    ttl_files = glob.glob(input_pattern)
    
    if not ttl_files:
        print(f"No TTL files found matching pattern: {input_pattern}")
        return
    
    print(f"Found {len(ttl_files)} TTL files to merge:")
    for file in ttl_files:
        print(f"  - {file}")
    
    # Process each file
    for ttl_file in ttl_files:
        print(f"\nProcessing: {ttl_file}")
        
        try:
            with open(ttl_file, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # Split content into lines
            lines = content.split('\n')
            
            current_triples = []
            
            for line in lines:
                line = line.strip()
                
                # Skip empty lines and comments for now (we'll add them back)
                if not line or line.startswith('#'):
                    if line:  # Keep non-empty comments
                        current_triples.append(line)
                    continue
                
                # Check if line is a prefix declaration
                if line.startswith('@prefix') or line.startswith('PREFIX'):
                    # Extract prefix
                    if line.startswith('@prefix'):
                        # Turtle syntax: @prefix prefix: <uri> .
                        match = re.match(r'@prefix\s+(\w*:)\s+<([^>]+)>\s*\.', line)
                        if match:
                            prefix_name, uri = match.groups()
                            prefixes[prefix_name] = f"@prefix {prefix_name} <{uri}> ."
                    else:
                        # SPARQL syntax: PREFIX prefix: <uri>
                        match = re.match(r'PREFIX\s+(\w*:)\s+<([^>]+)>', line)
                        if match:
                            prefix_name, uri = match.groups()
                            prefixes[prefix_name] = f"@prefix {prefix_name} <{uri}> ."
                else:
                    # This is triple data
                    current_triples.append(line)
            
            # Add the triples from this file
            if current_triples:
                triples_content.append(f"# Content from: {ttl_file}")
                triples_content.extend(current_triples)
                triples_content.append("")  # Add blank line between files
        
        except Exception as e:
            print(f"Error processing {ttl_file}: {e}")
            continue
    
    # Write the merged file
    try:
        with open(output_file, 'w', encoding='utf-8') as f:
            # Write header comment
            f.write("# Merged TTL file\n")
            f.write(f"# Created by merging {len(ttl_files)} files\n")
            f.write("# Source files:\n")
            for file in ttl_files:
                f.write(f"#   - {file}\n")
            f.write("\n")
            
            # Write all unique prefixes first
            if prefixes:
                f.write("# Namespace prefixes\n")
                for prefix_line in prefixes.values():
                    f.write(prefix_line + "\n")
                f.write("\n")
            
            # Write all triples
            for line in triples_content:
                f.write(line + "\n")
        
        print(f"\nâœ… Successfully merged {len(ttl_files)} files into: {output_file}")
        print(f"   - Found {len(prefixes)} unique namespace prefixes")
        print(f"   - Combined {len([l for l in triples_content if l and not l.startswith('#')])} lines of triples")
        
    except Exception as e:
        print(f"Error writing merged file: {e}")

def main():
    """Main function with example usage"""
    
    # Example usage - modify these paths as needed
    input_pattern = "*.ttl"  # All TTL files in current directory
    output_file = "merged_data.ttl"
    
    # You can also specify a directory pattern:
    # input_pattern = "data/*.ttl"  # All TTL files in 'data' directory
    
    print("TTL Files Merger")
    print("================")
    
    # Check if we should use custom paths
    import sys
    if len(sys.argv) >= 2:
        input_pattern = sys.argv[1]
    if len(sys.argv) >= 3:
        output_file = sys.argv[2]
    
    merge_ttl_files(input_pattern, output_file)

if __name__ == "__main__":
    main()
