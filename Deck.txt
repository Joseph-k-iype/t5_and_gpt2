import React from 'react';
import { 
  FileText, 
  Clock, 
  CheckCircle, 
  Zap, 
  TrendingUp,
  Target,
  Lightbulb,
  Shield,
  BarChart3,
  Users,
  Award
} from 'lucide-react';

const BusinessReport = ({ data, query, timestamp, metadata }) => {
  const parseBusinessReport = (reportData) => {
    // If data is already structured, use it
    if (typeof reportData === 'object' && reportData.title) {
      return reportData;
    }
    
    // Parse plain text into business sections
    const sections = reportData.split('\n\n');
    let title = "Business Intelligence Report";
    let executiveSummary = "";
    let keyFindings = [];
    let businessImplications = "";
    let recommendations = [];
    
    // Extract title from query context
    if (query) {
      if (query.toLowerCase().includes('risk')) {
        title = "Risk Assessment Report";
      } else if (query.toLowerCase().includes('relationship') || query.toLowerCase().includes('network')) {
        title = "Network Analysis Report";
      } else if (query.toLowerCase().includes('performance') || query.toLowerCase().includes('efficiency')) {
        title = "Performance Analysis Report";
      } else if (query.toLowerCase().includes('customer') || query.toLowerCase().includes('client')) {
        title = "Customer Intelligence Report";
      } else if (query.toLowerCase().includes('strategic') || query.toLowerCase().includes('business')) {
        title = "Strategic Business Analysis";
      } else if (query.toLowerCase().includes('operational') || query.toLowerCase().includes('process')) {
        title = "Operational Analysis Report";
      }
    }
    
    // Parse sections
    sections.forEach((section, index) => {
      const lowerSection = section.toLowerCase();
      const cleanSection = section.trim();
      
      if (index === 0 || lowerSection.includes('summary') || lowerSection.includes('overview')) {
        executiveSummary = cleanSection;
      } else if (lowerSection.includes('finding') || lowerSection.includes('key') || lowerSection.includes('observation')) {
        // Split into bullet points if it's a list
        const points = cleanSection.split('\n').filter(line => line.trim());
        keyFindings.push(...points);
      } else if (lowerSection.includes('implication') || lowerSection.includes('impact') || lowerSection.includes('effect')) {
        businessImplications = cleanSection;
      } else if (lowerSection.includes('recommend') || lowerSection.includes('suggest') || lowerSection.includes('action') || lowerSection.includes('next steps')) {
        const points = cleanSection.split('\n').filter(line => line.trim());
        recommendations.push(...points);
      } else if (cleanSection.length > 20) {
        // Add to findings if it's substantial content
        keyFindings.push(cleanSection);
      }
    });
    
    return {
      title,
      executiveSummary: executiveSummary || "Analysis completed successfully with actionable insights identified.",
      keyFindings: keyFindings.length > 0 ? keyFindings : [reportData],
      businessImplications: businessImplications || "",
      recommendations: recommendations.length > 0 ? recommendations : [],
      analysisConfidence: "High",
      generatedAt: timestamp
    };
  };

  const formatFindings = (findings) => {
    if (!Array.isArray(findings)) return [findings];
    
    return findings.map(finding => {
      // Clean up bullet points and numbering
      let cleaned = finding.replace(/^[\d\-\•\*]+\.?\s*/, '').trim();
      if (cleaned.length < 10) return null;
      return cleaned;
    }).filter(Boolean);
  };

  const formatRecommendations = (recommendations) => {
    if (!Array.isArray(recommendations)) return [recommendations];
    
    return recommendations.map(rec => {
      let cleaned = rec.replace(/^[\d\-\•\*]+\.?\s*/, '').trim();
      if (cleaned.length < 10) return null;
      return cleaned;
    }).filter(Boolean);
  };

  const report = parseBusinessReport(data);
  const formattedFindings = formatFindings(report.keyFindings);
  const formattedRecommendations = formatRecommendations(report.recommendations);

  return (
    <div className="bg-white rounded-2xl border border-gray-200 shadow-lg overflow-hidden">
      {/* Report Header */}
      <div className="bg-gradient-to-r from-blue-600 to-blue-700 text-white p-6">
        <div className="flex items-start justify-between">
          <div className="flex-1">
            <div className="flex items-center mb-2">
              <FileText className="w-6 h-6 mr-3" />
              <h1 className="text-2xl font-bold">{report.title}</h1>
            </div>
            <p className="text-blue-100 text-sm mb-3">
              Analysis Query: "{query}"
            </p>
            <div className="flex items-center text-sm text-blue-200 space-x-4">
              <div className="flex items-center">
                <Clock className="w-4 h-4 mr-1" />
                {new Date(timestamp).toLocaleDateString()} at {new Date(timestamp).toLocaleTimeString()}
              </div>
              <div className="flex items-center">
                <Award className="w-4 h-4 mr-1" />
                Confidence: {report.analysisConfidence}
              </div>
              {metadata?.total_agents && (
                <div className="flex items-center">
                  <Zap className="w-4 h-4 mr-1" />
                  {metadata.total_agents} AI Agents
                </div>
              )}
            </div>
          </div>
          <div className="flex flex-col space-y-2">
            <div className="bg-green-500 text-white px-3 py-1 rounded-full text-xs font-medium flex items-center">
              <CheckCircle className="w-3 h-3 mr-1" />
              Validated
            </div>
            <div className="bg-blue-500 text-white px-3 py-1 rounded-full text-xs font-medium flex items-center">
              <Users className="w-3 h-3 mr-1" />
              Multi-Agent
            </div>
          </div>
        </div>
      </div>

      {/* Report Content */}
      <div className="p-6 space-y-8">
        {/* Executive Summary */}
        {report.executiveSummary && (
          <section>
            <div className="flex items-center mb-4">
              <TrendingUp className="w-5 h-5 mr-3 text-blue-600" />
              <h2 className="text-xl font-semibold text-gray-800">Executive Summary</h2>
            </div>
            <div className="bg-blue-50 border-l-4 border-blue-400 p-5 rounded-r-lg">
              <p className="text-gray-700 leading-relaxed text-lg">
                {report.executiveSummary}
              </p>
            </div>
          </section>
        )}

        {/* Key Findings */}
        {formattedFindings.length > 0 && (
          <section>
            <div className="flex items-center mb-4">
              <BarChart3 className="w-5 h-5 mr-3 text-green-600" />
              <h2 className="text-xl font-semibold text-gray-800">Key Findings</h2>
            </div>
            <div className="bg-green-50 border border-green-200 rounded-lg p-5">
              <div className="space-y-4">
                {formattedFindings.map((finding, index) => (
                  <div key={index} className="flex items-start">
                    <div className="bg-green-500 text-white rounded-full w-6 h-6 flex items-center justify-center text-xs font-bold mr-3 mt-1 flex-shrink-0">
                      {index + 1}
                    </div>
                    <p className="text-gray-700 leading-relaxed">{finding}</p>
                  </div>
                ))}
              </div>
            </div>
          </section>
        )}

        {/* Business Implications */}
        {report.businessImplications && (
          <section>
            <div className="flex items-center mb-4">
              <Target className="w-5 h-5 mr-3 text-purple-600" />
              <h2 className="text-xl font-semibold text-gray-800">Business Implications</h2>
            </div>
            <div className="bg-purple-50 border-l-4 border-purple-400 p-5 rounded-r-lg">
              <p className="text-gray-700 leading-relaxed">
                {report.businessImplications}
              </p>
            </div>
          </section>
        )}

        {/* Strategic Recommendations */}
        {formattedRecommendations.length > 0 && (
          <section>
            <div className="flex items-center mb-4">
              <Lightbulb className="w-5 h-5 mr-3 text-amber-600" />
              <h2 className="text-xl font-semibold text-gray-800">Strategic Recommendations</h2>
            </div>
            <div className="bg-amber-50 border border-amber-200 rounded-lg p-5">
              <div className="space-y-4">
                {formattedRecommendations.map((recommendation, index) => (
                  <div key={index} className="flex items-start">
                    <Lightbulb className="w-5 h-5 text-amber-600 mr-3 mt-1 flex-shrink-0" />
                    <p className="text-gray-700 leading-relaxed">{recommendation}</p>
                  </div>
                ))}
              </div>
            </div>
          </section>
        )}

        {/* Risk Assessment (if applicable) */}
        {(query && query.toLowerCase().includes('risk')) && (
          <section>
            <div className="flex items-center mb-4">
              <Shield className="w-5 h-5 mr-3 text-red-600" />
              <h2 className="text-xl font-semibold text-gray-800">Risk Assessment</h2>
            </div>
            <div className="bg-red-50 border-l-4 border-red-400 p-5 rounded-r-lg">
              <p className="text-gray-700 leading-relaxed">
                Risk factors and mitigation strategies have been identified and incorporated into the recommendations above.
              </p>
            </div>
          </section>
        )}
      </div>

      {/* Report Footer */}
      <div className="bg-gray-50 px-6 py-4 border-t border-gray-200">
        <div className="flex items-center justify-between text-sm text-gray-600">
          <div className="flex items-center space-x-6">
            <span className="flex items-center">
              <CheckCircle className="w-4 h-4 mr-1 text-green-500" />
              FalkorDB Platform
            </span>
            <span className="flex items-center">
              <Shield className="w-4 h-4 mr-1 text-blue-500" />
              Business Intelligence
            </span>
            <span className="flex items-center">
              <Users className="w-4 h-4 mr-1 text-purple-500" />
              Multi-Agent Analysis
            </span>
          </div>
          <div className="text-xs text-gray-500">
            Report ID: {metadata?.analysis_type || 'business-intelligence'}-{Date.now().toString().slice(-6)}
          </div>
        </div>
      </div>
    </div>
  );
};

export default React.memo(BusinessReport);
