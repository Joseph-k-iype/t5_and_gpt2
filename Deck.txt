import React, { useState, useEffect } from 'react';
import SearchInput from './SearchInput';
import { ConnectionStatus } from '../ui';
import { useSearchContext } from '../../contexts/SearchContext';
import { useConnectionContext } from '../../contexts/ConnectionContext';
import { Brain, Database, Zap, Clock, CheckCircle, Activity } from 'lucide-react';

const SearchInterface = () => {
  const { 
    query, 
    setQuery, 
    hasSearched, 
    loading, 
    performAdvancedSearch 
  } = useSearchContext();
  
  const { connectionStatus, testConnection } = useConnectionContext();
  const [queryStartTime, setQueryStartTime] = useState(null);
  const [elapsedTime, setElapsedTime] = useState(0);

  // Track elapsed time for active queries
  useEffect(() => {
    let interval;
    if (loading) {
      if (!queryStartTime) {
        setQueryStartTime(Date.now());
      }
      interval = setInterval(() => {
        if (queryStartTime) {
          setElapsedTime(Math.floor((Date.now() - queryStartTime) / 1000));
        }
      }, 1000);
    } else {
      setQueryStartTime(null);
      setElapsedTime(0);
    }
    
    return () => {
      if (interval) clearInterval(interval);
    };
  }, [loading, queryStartTime]);

  const formatElapsedTime = (seconds) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return mins > 0 ? `${mins}m ${secs}s` : `${secs}s`;
  };

  const getProgressMessage = () => {
    if (elapsedTime < 5) return "Initializing AI analysis...";
    if (elapsedTime < 15) return "Processing graph schema...";
    if (elapsedTime < 30) return "Generating optimized queries...";
    if (elapsedTime < 60) return "Performing deep graph analysis...";
    if (elapsedTime < 120) return "Reasoning about business implications...";
    if (elapsedTime < 180) return "Synthesizing strategic insights...";
    return "Complex analysis in progress - will complete naturally...";
  };

  return (
    <>
      <div className={`transition-all duration-700 ${hasSearched ? 'mb-8' : 'mt-20 mb-32'}`}>
        {!hasSearched && (
          <div className="text-center mb-12">
            <h2 className="text-4xl md:text-5xl font-light text-gray-800 mb-4">
              Advanced Graph Intelligence
            </h2>
            <p className="text-lg text-gray-600 max-w-2xl mx-auto mb-6">
              Experience multi-agent AI reasoning for complex graph analysis. Ask sophisticated questions and get comprehensive business insights.
            </p>
            
            {/* No timeout guarantee */}
            <div className="flex items-center justify-center space-x-6 text-sm text-gray-500 mb-4">
              <div className="flex items-center">
                <Clock className="w-4 h-4 mr-2 text-green-600" />
                <span>No timeout limits</span>
              </div>
              <div className="flex items-center">
                <Database className="w-4 h-4 mr-2 text-blue-600" />
                <span>Seamless data transfer</span>
              </div>
              <div className="flex items-center">
                <Brain className="w-4 h-4 mr-2 text-purple-600" />
                <span>Complex analysis supported</span>
              </div>
            </div>
          </div>
        )}
        
        <SearchInput
          query={query}
          onQueryChange={setQuery}
          onSearch={performAdvancedSearch}
          isLoading={loading}
        />
        
        {/* Enhanced loading state with progress information */}
        {loading && (
          <div className="mt-6">
            <div className="bg-white/60 backdrop-blur-sm rounded-xl border border-white/30 p-6 text-center">
              <div className="flex items-center justify-center mb-4">
                <div className="relative">
                  <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
                  <Brain className="absolute inset-0 m-auto w-6 h-6 text-blue-600" />
                </div>
              </div>
              
              <h3 className="text-lg font-semibold text-gray-800 mb-2">
                Business Intelligence Analysis in Progress
              </h3>
              
              <p className="text-gray-600 mb-4">
                {getProgressMessage()}
              </p>
              
              <div className="flex items-center justify-center space-x-6 text-sm text-gray-500 mb-4">
                <div className="flex items-center">
                  <Activity className="w-4 h-4 mr-2" />
                  <span>Running for {formatElapsedTime(elapsedTime)}</span>
                </div>
                <div className="flex items-center">
                  <CheckCircle className="w-4 h-4 mr-2 text-green-600" />
                  <span>No timeout restrictions</span>
                </div>
              </div>
              
              {/* Progress indicators */}
              <div className="space-y-3">
                <div className="flex items-center justify-between text-xs text-gray-600">
                  <span>Analysis phases</span>
                  <span className="font-mono">{Math.min(Math.floor(elapsedTime / 30) + 1, 6)}/6</span>
                </div>
                
                <div className="w-full bg-gray-200 rounded-full h-2">
                  <div 
                    className="bg-gradient-to-r from-blue-500 to-purple-500 h-2 rounded-full transition-all duration-1000"
                    style={{ 
                      width: `${Math.min((elapsedTime / 180) * 100, 95)}%` // Max at 95% until complete
                    }}
                  ></div>
                </div>
                
                <div className="grid grid-cols-3 gap-4 mt-4 text-xs">
                  <div className={`flex items-center ${elapsedTime >= 5 ? 'text-green-600' : 'text-gray-400'}`}>
                    <CheckCircle className="w-3 h-3 mr-1" />
                    Schema Analysis
                  </div>
                  <div className={`flex items-center ${elapsedTime >= 30 ? 'text-green-600' : 'text-gray-400'}`}>
                    <CheckCircle className="w-3 h-3 mr-1" />
                    Query Generation
                  </div>
                  <div className={`flex items-center ${elapsedTime >= 60 ? 'text-green-600' : 'text-gray-400'}`}>
                    <CheckCircle className="w-3 h-3 mr-1" />
                    Data Processing
                  </div>
                  <div className={`flex items-center ${elapsedTime >= 90 ? 'text-green-600' : 'text-gray-400'}`}>
                    <CheckCircle className="w-3 h-3 mr-1" />
                    AI Reasoning
                  </div>
                  <div className={`flex items-center ${elapsedTime >= 120 ? 'text-green-600' : 'text-gray-400'}`}>
                    <CheckCircle className="w-3 h-3 mr-1" />
                    Business Analysis
                  </div>
                  <div className={`flex items-center ${elapsedTime >= 150 ? 'text-green-600' : 'text-gray-400'}`}>
                    <CheckCircle className="w-3 h-3 mr-1" />
                    Report Generation
                  </div>
                </div>
              </div>
              
              {/* Reassurance message for long-running queries */}
              {elapsedTime > 60 && (
                <div className="mt-4 p-3 bg-blue-50 rounded-lg border border-blue-200">
                  <p className="text-sm text-blue-800">
                    <strong>Complex Analysis Detected:</strong> Your query is generating comprehensive insights. 
                    The system will complete the analysis naturally without any timeout restrictions.
                  </p>
                </div>
              )}
              
              {elapsedTime > 180 && (
                <div className="mt-2 p-3 bg-green-50 rounded-lg border border-green-200">
                  <p className="text-sm text-green-800">
                    <strong>Deep Analysis in Progress:</strong> This level of analysis provides the most thorough 
                    business intelligence. Please wait while the AI completes its comprehensive reasoning.
                  </p>
                </div>
              )}
            </div>
          </div>
        )}
        
        <div className="md:hidden mt-4">
          <ConnectionStatus status={connectionStatus} onRetry={testConnection} />
        </div>
      </div>
      
      {/* System capabilities indicator */}
      {!hasSearched && !loading && (
        <div className="text-center mt-8">
          <div className="inline-flex items-center px-4 py-2 bg-white/50 backdrop-blur-sm rounded-full border border-white/30 text-sm text-gray-600">
            <Zap className="w-4 h-4 mr-2 text-yellow-500" />
            Powered by FalkorDB + OpenAI o3-mini â€¢ Unlimited processing time
          </div>
        </div>
      )}
    </>
  );
};

export default SearchInterface;
