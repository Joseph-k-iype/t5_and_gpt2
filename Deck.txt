import React from 'react';
import { 
  Lightbulb, 
  Target, 
  BarChart3, 
  Brain, 
  Shield, 
  ChevronRight,
  TrendingUp,
  DollarSign,
  Users,
  AlertTriangle,
  Settings,
  Zap,
  Award,
  Compass,
  Activity,
  CheckCircle
} from 'lucide-react';

const FollowUpQuestions = ({ questions, onQuestionSelect, isLoading, metadata }) => {
  
  if (!questions || questions.length === 0) return null;
  
  const categorizeBusinessQuestions = (questions) => {
    const categories = {
      strategic: { 
        questions: [], 
        icon: Target, 
        color: 'purple', 
        label: 'Strategic Analysis',
        description: 'Long-term planning and competitive positioning'
      },
      operational: { 
        questions: [], 
        icon: Settings, 
        color: 'blue', 
        label: 'Operational Insights',
        description: 'Process optimization and efficiency'
      },
      financial: { 
        questions: [], 
        icon: DollarSign, 
        color: 'green', 
        label: 'Financial Impact',
        description: 'Cost, revenue, and investment analysis'
      },
      risk: { 
        questions: [], 
        icon: Shield, 
        color: 'red', 
        label: 'Risk Assessment',
        description: 'Threat identification and mitigation'
      },
      opportunity: { 
        questions: [], 
        icon: TrendingUp, 
        color: 'orange', 
        label: 'Growth Opportunities',
        description: 'Market expansion and innovation'
      },
      competitive: { 
        questions: [], 
        icon: Zap, 
        color: 'indigo', 
        label: 'Competitive Intelligence',
        description: 'Market positioning and benchmarking'
      }
    };
    
    questions.forEach(question => {
      const lowerQ = question.toLowerCase();
      
      // Strategic questions
      if (lowerQ.includes('strategic') || lowerQ.includes('long-term') || 
          lowerQ.includes('competitive advantage') || lowerQ.includes('market position') ||
          lowerQ.includes('business model') || lowerQ.includes('growth strategy') ||
          lowerQ.includes('vision') || lowerQ.includes('roadmap')) {
        categories.strategic.questions.push(question);
      }
      // Financial questions  
      else if (lowerQ.includes('cost') || lowerQ.includes('revenue') || lowerQ.includes('financial') ||
               lowerQ.includes('profit') || lowerQ.includes('budget') || lowerQ.includes('investment') ||
               lowerQ.includes('roi') || lowerQ.includes('pricing') || lowerQ.includes('economic')) {
        categories.financial.questions.push(question);
      }
      // Risk questions
      else if (lowerQ.includes('risk') || lowerQ.includes('threat') || lowerQ.includes('vulnerability') ||
               lowerQ.includes('security') || lowerQ.includes('compliance') || lowerQ.includes('mitigation') ||
               lowerQ.includes('failure') || lowerQ.includes('challenge')) {
        categories.risk.questions.push(question);
      }
      // Opportunity questions
      else if (lowerQ.includes('opportunity') || lowerQ.includes('potential') || lowerQ.includes('expansion') ||
               lowerQ.includes('growth') || lowerQ.includes('market') || lowerQ.includes('innovation') ||
               lowerQ.includes('develop') || lowerQ.includes('improve')) {
        categories.opportunity.questions.push(question);
      }
      // Operational questions
      else if (lowerQ.includes('operational') || lowerQ.includes('process') || lowerQ.includes('efficiency') ||
               lowerQ.includes('performance') || lowerQ.includes('optimization') || lowerQ.includes('workflow') ||
               lowerQ.includes('implement') || lowerQ.includes('execute')) {
        categories.operational.questions.push(question);
      }
      // Competitive questions
      else if (lowerQ.includes('competitive') || lowerQ.includes('competitor') || lowerQ.includes('benchmark') ||
               lowerQ.includes('industry') || lowerQ.includes('market share') || lowerQ.includes('compare')) {
        categories.competitive.questions.push(question);
      }
      // Default to strategic if no clear category
      else {
        categories.strategic.questions.push(question);
      }
    });
    
    return categories;
  };
  
  const categorized = categorizeBusinessQuestions(questions);
  
  const getColorClasses = (color) => {
    const colorMap = {
      purple: { 
        bg: 'bg-purple-50', 
        border: 'border-purple-200', 
        icon: 'text-purple-600',
        hover: 'hover:bg-purple-100',
        badge: 'bg-purple-100 text-purple-800'
      },
      blue: { 
        bg: 'bg-blue-50', 
        border: 'border-blue-200', 
        icon: 'text-blue-600',
        hover: 'hover:bg-blue-100',
        badge: 'bg-blue-100 text-blue-800'
      },
      green: { 
        bg: 'bg-green-50', 
        border: 'border-green-200', 
        icon: 'text-green-600',
        hover: 'hover:bg-green-100',
        badge: 'bg-green-100 text-green-800'
      },
      red: { 
        bg: 'bg-red-50', 
        border: 'border-red-200', 
        icon: 'text-red-600',
        hover: 'hover:bg-red-100',
        badge: 'bg-red-100 text-red-800'
      },
      orange: { 
        bg: 'bg-orange-50', 
        border: 'border-orange-200', 
        icon: 'text-orange-600',
        hover: 'hover:bg-orange-100',
        badge: 'bg-orange-100 text-orange-800'
      },
      indigo: { 
        bg: 'bg-indigo-50', 
        border: 'border-indigo-200', 
        icon: 'text-indigo-600',
        hover: 'hover:bg-indigo-100',
        badge: 'bg-indigo-100 text-indigo-800'
      }
    };
    return colorMap[color] || colorMap.blue;
  };
  
  return (
    <div className="mb-6">
      <h3 className="text-sm font-medium text-gray-600 mb-4 flex items-center">
        <Lightbulb className="w-4 h-4 mr-2" />
        Strategic Follow-up Analysis
        {metadata?.ai_model && (
          <span className="ml-2 text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded-full flex items-center">
            <Brain className="w-3 h-3 mr-1" />
            {metadata.ai_model} Intelligence
          </span>
        )}
      </h3>
      
      <div className="grid gap-4">
        {Object.entries(categorized).map(([categoryKey, categoryData]) => {
          if (categoryData.questions.length === 0) return null;
          
          const IconComponent = categoryData.icon;
          const colors = getColorClasses(categoryData.color);
          
          return (
            <div key={categoryKey} className={`${colors.bg} ${colors.border} border rounded-xl p-4 transition-all duration-200 hover:shadow-md`}>
              <div className="flex items-center justify-between mb-3">
                <div className="flex items-center">
                  <IconComponent className={`w-4 h-4 mr-2 ${colors.icon}`} />
                  <div>
                    <span className="text-sm font-medium text-gray-700">{categoryData.label}</span>
                    <p className="text-xs text-gray-500 mt-0.5">{categoryData.description}</p>
                  </div>
                </div>
                <span className={`${colors.badge} px-2 py-1 rounded-full text-xs font-medium`}>
                  {categoryData.questions.length}
                </span>
              </div>
              
              <div className="space-y-2">
                {categoryData.questions.slice(0, 3).map((question, index) => {
                  const cleanQuestion = question.replace(/^\d+\.\s*/, '').trim();
                  if (!cleanQuestion.includes('?')) return null;
                  
                  return (
                    <button
                      key={`${categoryKey}-${index}`}
                      onClick={() => onQuestionSelect(cleanQuestion)}
                      disabled={isLoading}
                      className={`group text-left p-3 bg-white/70 ${colors.hover} border border-white/50 rounded-lg transition-all duration-200 backdrop-blur-sm hover:shadow-md disabled:opacity-50 disabled:cursor-not-allowed w-full transform hover:scale-[1.01]`}
                    >
                      <div className="flex items-center justify-between">
                        <span className="text-sm text-gray-700 group-hover:text-gray-900 pr-2 leading-relaxed">
                          {cleanQuestion}
                        </span>
                        <ChevronRight className="w-4 h-4 text-gray-400 group-hover:text-gray-600 flex-shrink-0 transition-transform group-hover:translate-x-1" />
                      </div>
                    </button>
                  );
                })}
                
                {/* Show count if more questions available */}
                {categoryData.questions.length > 3 && (
                  <div className="text-xs text-gray-500 italic pl-3 pt-1">
                    <Compass className="w-3 h-3 inline mr-1" />
                    +{categoryData.questions.length - 3} more {categoryData.label.toLowerCase()} questions available
                  </div>
                )}
              </div>
            </div>
          );
        })}
      </div>
      
      {/* Analysis metadata */}
      {metadata && (
        <div className="mt-4 p-3 bg-gray-50 rounded-lg border border-gray-200">
          <div className="text-xs text-gray-600 flex items-center justify-between flex-wrap gap-2">
            <div className="flex items-center space-x-4">
              {metadata.reasoning_approach && (
                <span className="flex items-center">
                  <Brain className="w-3 h-3 mr-1" />
                  {metadata.reasoning_approach.replace(/_/g, ' ')}
                </span>
              )}
              {metadata.response_time && (
                <span className="flex items-center">
                  <Activity className="w-3 h-3 mr-1" />
                  {metadata.response_time}s analysis
                </span>
              )}
              {metadata.features_enabled && (
                <span className="flex items-center">
                  <Award className="w-3 h-3 mr-1" />
                  {metadata.features_enabled.length} features
                </span>
              )}
            </div>
            <span className="text-xs bg-green-100 text-green-800 px-2 py-1 rounded-full flex items-center">
              <CheckCircle className="w-3 h-3 mr-1" />
              Business Intelligence Ready
            </span>
          </div>
          
          {/* Feature indicators */}
          {metadata.features_enabled && (
            <div className="mt-2 flex flex-wrap gap-1">
              {metadata.features_enabled.slice(0, 4).map((feature, index) => (
                <span 
                  key={index} 
                  className="inline-flex items-center px-2 py-0.5 bg-blue-100 text-blue-700 text-xs rounded"
                >
                  {feature.replace(/_/g, ' ')}
                </span>
              ))}
              {metadata.features_enabled.length > 4 && (
                <span className="inline-flex items-center px-2 py-0.5 bg-gray-100 text-gray-600 text-xs rounded">
                  +{metadata.features_enabled.length - 4} more
                </span>
              )}
            </div>
          )}
        </div>
      )}
    </div>
  );
};

export default React.memo(FollowUpQuestions);
