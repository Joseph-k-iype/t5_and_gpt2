"""
Flask Backend API for FalkorDB Graph RAG Search Engine
"""

from flask import Flask, request, jsonify
from flask_cors import CORS
import os
import json
import asyncio
from typing import Dict, Any
import logging

# Import the existing FalkorDB engine
from paste import EnhancedGraphRAGEngine, EnterpriseConfig

app = Flask(__name__)
CORS(app)

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Global engine instance
engine = None

def initialize_engine():
    """Initialize the FalkorDB engine"""
    global engine
    try:
        config = EnterpriseConfig()
        config.validate()
        
        engine = EnhancedGraphRAGEngine(
            openai_api_key=config.openai_api_key,
            openai_base_url=config.openai_base_url,
            falkordb_host=config.falkordb_host,
            falkordb_port=config.falkordb_port,
            graph_name=config.graph_name
        )
        logger.info("FalkorDB engine initialized successfully")
        return True
    except Exception as e:
        logger.error(f"Failed to initialize engine: {e}")
        return False

@app.route('/api/health', methods=['GET'])
def health_check():
    """Health check endpoint"""
    return jsonify({
        'status': 'healthy',
        'service': 'FalkorDB Graph RAG API',
        'engine_initialized': engine is not None
    })

@app.route('/api/connection/test', methods=['GET'])
def test_connection():
    """Test FalkorDB connection"""
    if not engine:
        return jsonify({'error': 'Engine not initialized'}), 500
    
    try:
        result = engine.test_connection()
        return jsonify(result)
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/graph/info', methods=['GET'])
def get_graph_info():
    """Get graph information"""
    if not engine:
        return jsonify({'error': 'Engine not initialized'}), 500
    
    try:
        info = engine.get_graph_info()
        return jsonify(info)
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/search', methods=['POST'])
def search():
    """Basic search endpoint"""
    if not engine:
        return jsonify({'error': 'Engine not initialized'}), 500
    
    try:
        data = request.get_json()
        query = data.get('query', '')
        thread_id = data.get('thread_id', 'default')
        
        if not query:
            return jsonify({'error': 'Query is required'}), 400
        
        result = engine.search_sync(query, thread_id)
        
        return jsonify({
            'result': result,
            'query': query,
            'thread_id': thread_id
        })
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/search/followups', methods=['POST'])
def search_with_followups():
    """Search with follow-up questions"""
    if not engine:
        return jsonify({'error': 'Engine not initialized'}), 500
    
    try:
        data = request.get_json()
        query = data.get('query', '')
        thread_id = data.get('thread_id', 'default')
        
        if not query:
            return jsonify({'error': 'Query is required'}), 400
        
        result, followups = engine.search_with_followups_sync(query, thread_id)
        
        return jsonify({
            'result': result,
            'followups': followups,
            'query': query,
            'thread_id': thread_id
        })
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/chat/history', methods=['GET'])
def get_chat_history():
    """Get chat history for a thread"""
    thread_id = request.args.get('thread_id', 'default')
    
    # This would typically come from a database
    # For now, return empty history
    return jsonify({
        'thread_id': thread_id,
        'messages': []
    })

@app.route('/api/threads', methods=['GET'])
def get_threads():
    """Get all chat threads"""
    # This would typically come from a database
    # For now, return a default thread
    return jsonify({
        'threads': [
            {
                'id': 'default',
                'name': 'Default Session',
                'created_at': '2025-01-01T00:00:00Z',
                'updated_at': '2025-01-01T00:00:00Z'
            }
        ]
    })

@app.route('/api/threads', methods=['POST'])
def create_thread():
    """Create a new chat thread"""
    data = request.get_json()
    name = data.get('name', 'New Session')
    
    # Generate a simple thread ID
    import uuid
    thread_id = str(uuid.uuid4())[:8]
    
    return jsonify({
        'id': thread_id,
        'name': name,
        'created_at': '2025-01-01T00:00:00Z',
        'updated_at': '2025-01-01T00:00:00Z'
    })

if __name__ == '__main__':
    print("üîß Initializing FalkorDB Graph RAG API...")
    
    if initialize_engine():
        print("‚úÖ Engine initialized successfully")
        print("üöÄ Starting Flask server...")
        app.run(debug=True, host='0.0.0.0', port=5000)
    else:
        print("‚ùå Failed to initialize engine")
        print("Please check your environment variables:")
        print("- OPENAI_API_KEY")
        print("- FALKORDB_HOST (optional, defaults to localhost)")
        print("- FALKORDB_PORT (optional, defaults to 6379)")
        print("- GRAPH_NAME (optional, defaults to test_cor)")
