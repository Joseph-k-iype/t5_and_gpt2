import React, { useState, useEffect, useRef } from 'react';
import { Send, Database, MessageSquare, Settings, Activity, Info, Plus, Sidebar, Menu, X } from 'lucide-react';

const API_BASE = 'http://localhost:5000/api';

// Utility function for API calls
const apiCall = async (endpoint, method = 'GET', data = null) => {
  const config = {
    method,
    headers: {
      'Content-Type': 'application/json',
    },
  };
  
  if (data) {
    config.body = JSON.stringify(data);
  }
  
  const response = await fetch(`${API_BASE}${endpoint}`, config);
  return await response.json();
};

// Message Component
const Message = ({ message, isUser, timestamp }) => (
  <div className={`flex ${isUser ? 'justify-end' : 'justify-start'} mb-4`}>
    <div className={`max-w-3xl px-4 py-3 rounded-2xl ${
      isUser 
        ? 'bg-gradient-to-r from-blue-500 to-purple-500 text-white ml-auto shadow-lg'
        : 'bg-white/70 backdrop-blur-sm border border-gray-200 text-gray-800 shadow-md'
    }`}>
      <div className="text-sm leading-relaxed whitespace-pre-wrap">{message}</div>
      {timestamp && (
        <div className={`text-xs mt-2 ${isUser ? 'text-blue-100' : 'text-gray-500'}`}>
          {new Date(timestamp).toLocaleTimeString()}
        </div>
      )}
    </div>
  </div>
);

// Follow-up Questions Component
const FollowUpQuestions = ({ questions, onQuestionSelect }) => {
  if (!questions || questions.length === 0) return null;
  
  return (
    <div className="mb-4">
      <div className="text-sm text-gray-600 mb-2">üí° Follow-up questions:</div>
      <div className="space-y-2">
        {questions.slice(0, 5).map((question, index) => {
          const cleanQuestion = question.replace(/^\d+\.\s*/, '').trim();
          if (!cleanQuestion.includes('?')) return null;
          
          return (
            <button
              key={index}
              onClick={() => onQuestionSelect(cleanQuestion)}
              className="block w-full text-left px-3 py-2 text-sm bg-gray-50/80 hover:bg-gray-100/80 border border-gray-200 rounded-lg transition-all duration-200 text-gray-700 hover:text-gray-900 shadow-sm hover:shadow-md"
            >
              {cleanQuestion}
            </button>
          );
        })}
      </div>
    </div>
  );
};

// Sidebar Component
const SidebarComponent = ({ isOpen, onClose, connectionStatus, graphInfo }) => (
  <div className={`fixed inset-y-0 left-0 z-50 w-80 bg-white/95 backdrop-blur-xl border-r border-gray-200 shadow-xl transform transition-transform duration-300 ${
    isOpen ? 'translate-x-0' : '-translate-x-full'
  }`}>
    <div className="flex items-center justify-between p-4 border-b border-gray-200">
      <h2 className="text-lg font-semibold text-gray-800">FalkorDB RAG</h2>
      <button onClick={onClose} className="p-2 hover:bg-gray-100 rounded-lg transition-colors">
        <X className="w-5 h-5 text-gray-600" />
      </button>
    </div>
    
    <div className="p-4 space-y-4">
      {/* Connection Status */}
      <div className="bg-gray-50/80 rounded-lg p-3 border border-gray-200 shadow-sm">
        <div className="flex items-center space-x-2 mb-2">
          <Activity className="w-4 h-4 text-green-500" />
          <span className="text-sm font-medium text-gray-800">Connection Status</span>
        </div>
        <div className="text-xs text-gray-600">
          {connectionStatus?.status === 'connected' ? (
            <span className="text-green-600">‚úÖ Connected to {connectionStatus.database}</span>
          ) : (
            <span className="text-red-600">‚ùå Disconnected</span>
          )}
        </div>
      </div>
      
      {/* Graph Info */}
      {graphInfo && (
        <div className="bg-gray-50/80 rounded-lg p-3 border border-gray-200 shadow-sm">
          <div className="flex items-center space-x-2 mb-2">
            <Database className="w-4 h-4 text-blue-500" />
            <span className="text-sm font-medium text-gray-800">Graph Database</span>
          </div>
          <div className="text-xs text-gray-600 space-y-1">
            <div>Type: {graphInfo.database_type}</div>
            <div>Language: {graphInfo.query_language}</div>
            <div>Validation: ‚úÖ Enabled</div>
          </div>
        </div>
      )}
      
      {/* Features */}
      <div className="bg-gray-50/80 rounded-lg p-3 border border-gray-200 shadow-sm">
        <div className="flex items-center space-x-2 mb-2">
          <Settings className="w-4 h-4 text-purple-500" />
          <span className="text-sm font-medium text-gray-800">Features</span>
        </div>
        <div className="text-xs text-gray-600 space-y-1">
          <div>üîß Query Validation</div>
          <div>ü§î Follow-up Questions</div>
          <div>üîç Indirect Path Exploration</div>
          <div>üìä Business Intelligence</div>
        </div>
      </div>
    </div>
  </div>
);

// Main App Component
const FalkorDBApp = () => {
  const [messages, setMessages] = useState([]);
  const [inputValue, setInputValue] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [sidebarOpen, setSidebarOpen] = useState(false);
  const [connectionStatus, setConnectionStatus] = useState(null);
  const [graphInfo, setGraphInfo] = useState(null);
  const [currentThread, setCurrentThread] = useState('default');
  const messagesEndRef = useRef(null);
  
  // Auto-scroll to bottom
  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };
  
  useEffect(() => {
    scrollToBottom();
  }, [messages]);
  
  // Initialize connection and graph info
  useEffect(() => {
    const initializeApp = async () => {
      try {
        const [connectionResult, infoResult] = await Promise.all([
          apiCall('/connection/test'),
          apiCall('/graph/info')
        ]);
        
        setConnectionStatus(connectionResult);
        setGraphInfo(infoResult);
        
        // Add welcome message
        setMessages([{
          id: 1,
          text: "üîß Welcome to FalkorDB Graph RAG Search Engine\n\nI'm ready to help you analyze your graph data using validated openCypher queries. What would you like to explore?",
          isUser: false,
          timestamp: new Date().toISOString()
        }]);
      } catch (error) {
        console.error('Failed to initialize app:', error);
        setMessages([{
          id: 1,
          text: "‚ùå Failed to connect to FalkorDB. Please check your backend connection.",
          isUser: false,
          timestamp: new Date().toISOString()
        }]);
      }
    };
    
    initializeApp();
  }, []);
  
  const handleSendMessage = async (messageText = inputValue) => {
    if (!messageText.trim() || isLoading) return;
    
    const userMessage = {
      id: Date.now(),
      text: messageText,
      isUser: true,
      timestamp: new Date().toISOString()
    };
    
    setMessages(prev => [...prev, userMessage]);
    setInputValue('');
    setIsLoading(true);
    
    try {
      const response = await apiCall('/search/followups', 'POST', {
        query: messageText,
        thread_id: currentThread
      });
      
      if (response.error) {
        throw new Error(response.error);
      }
      
      const aiMessage = {
        id: Date.now() + 1,
        text: response.result,
        isUser: false,
        timestamp: new Date().toISOString(),
        followups: response.followups
      };
      
      setMessages(prev => [...prev, aiMessage]);
    } catch (error) {
      const errorMessage = {
        id: Date.now() + 1,
        text: `‚ùå Error: ${error.message}`,
        isUser: false,
        timestamp: new Date().toISOString()
      };
      
      setMessages(prev => [...prev, errorMessage]);
    } finally {
      setIsLoading(false);
    }
  };
  
  const handleKeyPress = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };
  
  const handleFollowUpSelect = (question) => {
    handleSendMessage(question);
  };
  
  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 via-white to-gray-100">
      {/* Overlay */}
      {sidebarOpen && (
        <div 
          className="fixed inset-0 bg-black/20 z-40 lg:hidden"
          onClick={() => setSidebarOpen(false)}
        />
      )}
      
      {/* Sidebar */}
      <SidebarComponent 
        isOpen={sidebarOpen}
        onClose={() => setSidebarOpen(false)}
        connectionStatus={connectionStatus}
        graphInfo={graphInfo}
      />
      
      {/* Main Content */}
      <div className="flex flex-col h-screen">
        {/* Header */}
        <header className="bg-white/80 backdrop-blur-xl border-b border-gray-200 px-4 py-3 shadow-sm">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-3">
              <button
                onClick={() => setSidebarOpen(true)}
                className="p-2 hover:bg-gray-100 rounded-lg transition-colors"
              >
                <Menu className="w-5 h-5 text-gray-600" />
              </button>
              <div className="flex items-center space-x-2">
                <Database className="w-6 h-6 text-blue-500" />
                <div>
                  <h1 className="text-lg font-semibold text-gray-800">FalkorDB Graph RAG</h1>
                  <p className="text-xs text-gray-500">Validated openCypher Intelligence</p>
                </div>
              </div>
            </div>
            
            <div className="flex items-center space-x-2">
              <div className={`flex items-center space-x-1 px-2 py-1 rounded-full text-xs ${
                connectionStatus?.status === 'connected' 
                  ? 'bg-green-100 text-green-700 border border-green-200' 
                  : 'bg-red-100 text-red-700 border border-red-200'
              }`}>
                <div className={`w-2 h-2 rounded-full ${
                  connectionStatus?.status === 'connected' ? 'bg-green-500' : 'bg-red-500'
                }`} />
                {connectionStatus?.status === 'connected' ? 'Connected' : 'Disconnected'}
              </div>
            </div>
          </div>
        </header>
        
        {/* Chat Area */}
        <div className="flex-1 overflow-hidden">
          <div className="h-full flex flex-col max-w-6xl mx-auto">
            {/* Messages */}
            <div className="flex-1 overflow-y-auto px-4 py-6 space-y-4">
              {messages.map((message) => (
                <div key={message.id}>
                  <Message
                    message={message.text}
                    isUser={message.isUser}
                    timestamp={message.timestamp}
                  />
                  {!message.isUser && message.followups && (
                    <FollowUpQuestions
                      questions={message.followups}
                      onQuestionSelect={handleFollowUpSelect}
                    />
                  )}
                </div>
              ))}
              
              {isLoading && (
                <div className="flex justify-start mb-4">
                  <div className="bg-white/70 backdrop-blur-sm border border-gray-200 text-gray-800 px-4 py-3 rounded-2xl shadow-md">
                    <div className="flex items-center space-x-2">
                      <div className="flex space-x-1">
                        <div className="w-2 h-2 bg-blue-500 rounded-full animate-bounce" />
                        <div className="w-2 h-2 bg-blue-500 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }} />
                        <div className="w-2 h-2 bg-blue-500 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }} />
                      </div>
                      <span className="text-sm">Analyzing with FalkorDB...</span>
                    </div>
                  </div>
                </div>
              )}
              
              <div ref={messagesEndRef} />
            </div>
            
            {/* Input Area */}
            <div className="p-4 border-t border-gray-200 bg-white/80 backdrop-blur-xl shadow-sm">
              <div className="flex items-end space-x-3 max-w-4xl mx-auto">
                <div className="flex-1 relative">
                  <textarea
                    value={inputValue}
                    onChange={(e) => setInputValue(e.target.value)}
                    onKeyPress={handleKeyPress}
                    placeholder="Ask me about your graph data..."
                    className="w-full px-4 py-3 bg-white/90 backdrop-blur-sm border border-gray-300 rounded-2xl text-gray-800 placeholder-gray-500 resize-none focus:outline-none focus:ring-2 focus:ring-blue-500/50 focus:border-blue-500 transition-all duration-200 shadow-sm"
                    rows="1"
                    style={{ minHeight: '50px', maxHeight: '150px' }}
                  />
                </div>
                <button
                  onClick={() => handleSendMessage()}
                  disabled={!inputValue.trim() || isLoading}
                  className="p-3 bg-gradient-to-r from-blue-500 to-purple-500 hover:from-blue-600 hover:to-purple-600 disabled:from-gray-400 disabled:to-gray-400 disabled:cursor-not-allowed text-white rounded-2xl transition-all duration-200 transform hover:scale-105 disabled:hover:scale-100 shadow-md hover:shadow-lg"
                >
                  <Send className="w-5 h-5" />
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default FalkorDBApp;
