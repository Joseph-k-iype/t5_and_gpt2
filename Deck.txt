// DOM Elements
const uploadArea = document.getElementById('upload-area');
const fileInput = document.getElementById('file-input');
const fileList = document.getElementById('file-list');
const processButton = document.getElementById('process-button');
const statusIndicator = document.getElementById('status-indicator');
const statusDot = statusIndicator.querySelector('.status-dot');
const statusText = statusIndicator.querySelector('.status-text');
const chatMessages = document.getElementById('chat-messages');
const chatInput = document.getElementById('chat-input');
const sendButton = document.getElementById('send-button');
const sourcesContainer = document.getElementById('sources-container');
const infoPanel = document.getElementById('info-panel');
const closeInfoButton = document.getElementById('close-info');
const toastContainer = document.getElementById('toast-container');
const processingModal = document.getElementById('processing-modal');

// State Variables
let currentSources = [];
let isProcessing = false;

// Initialization
document.addEventListener('DOMContentLoaded', () => {
    loadFiles();
    setupEventListeners();
    adjustTextareaHeight(chatInput);
});

// Setup Event Listeners
function setupEventListeners() {
    // File Upload
    uploadArea.addEventListener('click', () => fileInput.click());
    fileInput.addEventListener('change', handleFileUpload);
    uploadArea.addEventListener('dragover', (e) => {
        e.preventDefault();
        uploadArea.classList.add('drag-over');
    });
    uploadArea.addEventListener('dragleave', () => {
        uploadArea.classList.remove('drag-over');
    });
    uploadArea.addEventListener('drop', handleFileDrop);
    
    // Process Button
    processButton.addEventListener('click', processKnowledgeBase);
    
    // Chat Interactions
    chatInput.addEventListener('input', () => {
        adjustTextareaHeight(chatInput);
        toggleSendButton();
    });
    chatInput.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            sendMessage();
        }
    });
    sendButton.addEventListener('click', sendMessage);
    
    // Info Panel
    closeInfoButton.addEventListener('click', toggleInfoPanel);
}

// File Management Functions
async function loadFiles() {
    try {
        const response = await fetch('/files');
        const data = await response.json();
        
        if (data.success) {
            renderFileList(data.files);
        } else {
            showToast('error', 'Error', data.message);
        }
    } catch (error) {
        console.error('Error loading files:', error);
        showToast('error', 'Error', 'Failed to load files');
    }
}

function renderFileList(files) {
    fileList.innerHTML = '';
    
    if (files.length === 0) {
        fileList.innerHTML = '<p class="empty-state">No documents uploaded yet</p>';
        return;
    }
    
    for (const file of files) {
        const fileItem = document.createElement('div');
        fileItem.className = 'file-item';
        fileItem.innerHTML = `
            <div class="file-info">
                <i class="fas fa-file-pdf file-icon"></i>
                <span class="file-name">${file}</span>
            </div>
            <div class="file-actions">
                <button class="delete-file" data-filename="${file}">
                    <i class="fas fa-trash"></i>
                </button>
            </div>
        `;
        fileList.appendChild(fileItem);
        
        // Add event listener for delete
        const deleteButton = fileItem.querySelector('.delete-file');
        deleteButton.addEventListener('click', () => deleteFile(file));
    }
}

async function handleFileUpload(event) {
    const files = event.target.files;
    await uploadFiles(files);
    fileInput.value = ''; // Reset input
}

async function handleFileDrop(event) {
    event.preventDefault();
    uploadArea.classList.remove('drag-over');
    const files = event.dataTransfer.files;
    await uploadFiles(files);
}

async function uploadFiles(files) {
    for (const file of files) {
        if (!file.name.toLowerCase().endsWith('.pdf')) {
            showToast('error', 'Invalid File', 'Only PDF files are allowed');
            continue;
        }
        
        const formData = new FormData();
        formData.append('file', file);
        
        try {
            const response = await fetch('/upload', {
                method: 'POST',
                body: formData
            });
            
            const result = await response.json();
            
            if (result.success) {
                showToast('success', 'Upload Successful', `${file.name} uploaded successfully`);
                loadFiles(); // Refresh file list
            } else {
                showToast('error', 'Upload Failed', result.message);
            }
        } catch (error) {
            console.error('Error uploading file:', error);
            showToast('error', 'Upload Error', 'Failed to upload file');
        }
    }
}

async function deleteFile(filename) {
    try {
        const response = await fetch(`/delete/${filename}`, {
            method: 'DELETE'
        });
        
        const result = await response.json();
        
        if (result.success) {
            showToast('success', 'File Deleted', `${filename} deleted successfully`);
            loadFiles(); // Refresh file list
        } else {
            showToast('error', 'Deletion Failed', result.message);
        }
    } catch (error) {
        console.error('Error deleting file:', error);
        showToast('error', 'Deletion Error', 'Failed to delete file');
    }
}

// Knowledge Base Processing
async function processKnowledgeBase() {
    if (isProcessing) return;
    
    // Update UI
    setStatus('processing', 'Processing...');
    showProcessingModal(true);
    isProcessing = true;
    
    try {
        const response = await fetch('/process', {
            method: 'POST'
        });
        
        const result = await response.json();
        
        if (result.success) {
            showToast('success', 'Processing Complete', 'Knowledge base processed successfully');
            addSystemMessage('Knowledge base processed successfully. You can now ask questions about your documents.');
            setStatus('online', 'Ready');
        } else {
            showToast('error', 'Processing Failed', result.message);
            addSystemMessage('Failed to process knowledge base. Please try again.');
            setStatus('offline', 'Error');
        }
    } catch (error) {
        console.error('Error processing knowledge base:', error);
        showToast('error', 'Processing Error', 'Failed to process knowledge base');
        addSystemMessage('Error processing knowledge base. Please try again later.');
        setStatus('offline', 'Error');
    } finally {
        showProcessingModal(false);
        isProcessing = false;
    }
}

// Chat Functions
function sendMessage() {
    const message = chatInput.value.trim();
    if (!message) return;
    
    // Add user message to chat
    addMessage('user', message);
    
    // Clear input
    chatInput.value = '';
    adjustTextareaHeight(chatInput);
    toggleSendButton();
    
    // Send to server
    askQuestion(message);
}

async function askQuestion(question) {
    setStatus('processing', 'Thinking...');
    
    try {
        const response = await fetch('/ask', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ question })
        });
        
        const result = await response.json();
        
        if (result.success) {
            addMessage('bot', result.answer);
            
            // Update sources
            currentSources = result.sources;
            updateSourcesPanel();
            
            // Show sources panel if there are sources
            if (currentSources.length > 0) {
                infoPanel.classList.add('active');
            }
            
            setStatus('online', 'Ready');
        } else {
            addMessage('bot', 'I encountered an error: ' + result.message);
            setStatus('offline', 'Error');
        }
    } catch (error) {
        console.error('Error asking question:', error);
        addMessage('bot', 'Sorry, I encountered an error while processing your question. Please try again.');
        setStatus('offline', 'Error');
    }
}

function addMessage(type, content) {
    const messageDiv = document.createElement('div');
    messageDiv.className = `message ${type}`;
    
    const currentTime = new Date();
    const formattedTime = `${currentTime.getHours().toString().padStart(2, '0')}:${currentTime.getMinutes().toString().padStart(2, '0')}`;
    
    messageDiv.innerHTML = `
        <div class="message-content">
            <p>${formatMessageContent(content)}</p>
        </div>
        <div class="message-time">${formattedTime}</div>
    `;
    
    chatMessages.appendChild(messageDiv);
    chatMessages.scrollTop = chatMessages.scrollHeight;
}

function addSystemMessage(content) {
    const messageDiv = document.createElement('div');
    messageDiv.className = 'message system';
    
    messageDiv.innerHTML = `
        <div class="message-content">
            <p>${content}</p>
        </div>
    `;
    
    chatMessages.appendChild(messageDiv);
    chatMessages.scrollTop = chatMessages.scrollHeight;
}

function formatMessageContent(content) {
    // Replace new lines with <br> tags
    return content.replace(/\n/g, '<br>');
}

// Sources Panel Functions
function updateSourcesPanel() {
    sourcesContainer.innerHTML = '';
    
    if (currentSources.length === 0) {
        sourcesContainer.innerHTML = '<p class="empty-state">No sources available yet. Ask a question to see information sources.</p>';
        return;
    }
    
    for (const source of currentSources) {
        const sourceItem = document.createElement('div');
        sourceItem.className = 'source-item';
        sourceItem.innerHTML = `
            <div class="source-header">
                <i class="fas fa-file-pdf"></i> ${source.source}
            </div>
            <div class="source-content">${source.content}</div>
        `;
        sourcesContainer.appendChild(sourceItem);
    }
}

function toggleInfoPanel() {
    infoPanel.classList.toggle('active');
}

// UI Helper Functions
function adjustTextareaHeight(textarea) {
    textarea.style.height = 'auto';
    textarea.style.height = `${Math.min(textarea.scrollHeight, 150)}px`;
}

function toggleSendButton() {
    const hasContent = chatInput.value.trim().length > 0;
    sendButton.disabled = !hasContent;
}

function setStatus(state, text) {
    statusDot.className = 'status-dot';
    statusDot.classList.add(state);
    statusText.textContent = text;
}

function showToast(type, title, message) {
    const toast = document.createElement('div');
    toast.className = `toast ${type}`;
    
    let iconClass = 'fa-info-circle';
    if (type === 'success') iconClass = 'fa-check-circle';
    if (type === 'error') iconClass = 'fa-exclamation-circle';
    
    toast.innerHTML = `
        <div class="toast-icon"><i class="fas ${iconClass}"></i></div>
        <div class="toast-content">
            <div class="toast-title">${title}</div>
            <div class="toast-message">${message}</div>
        </div>
    `;
    
    toastContainer.appendChild(toast);
    
    // Auto remove after 5 seconds
    setTimeout(() => {
        toast.remove();
    }, 5000);
}

function showProcessingModal(show) {
    if (show) {
        processingModal.classList.add('active');
    } else {
        processingModal.classList.remove('active');
    }
}

// Add a responsive menu toggle for mobile devices
function addMobileSupport() {
    const sidebar = document.querySelector('.sidebar');
    
    // Create toggle button
    const toggleButton = document.createElement('button');
    toggleButton.className = 'toggle-sidebar-button';
    toggleButton.innerHTML = '<i class="fas fa-bars"></i>';
    document.body.appendChild(toggleButton);
    
    toggleButton.addEventListener('click', () => {
        sidebar.classList.toggle('active');
    });
    
    // Close sidebar when clicking outside of it on mobile
    document.addEventListener('click', (e) => {
        if (window.innerWidth <= 768 && 
            !sidebar.contains(e.target) && 
            e.target !== toggleButton) {
            sidebar.classList.remove('active');
        }
    });
}

// Check if we're on a mobile device
if (window.innerWidth <= 768) {
    addMobileSupport();
}

// Handle window resize for responsiveness
window.addEventListener('resize', () => {
    if (window.innerWidth <= 768) {
        if (!document.querySelector('.toggle-sidebar-button')) {
            addMobileSupport();
        }
    }
});
