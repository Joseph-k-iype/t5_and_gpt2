import React from 'react';
import { 
  FileText, 
  Clock, 
  CheckCircle, 
  Zap, 
  Database, 
  Shield, 
  Network, 
  Brain,
  TrendingUp,
  Target,
  Lightbulb,
  AlertTriangle,
  DollarSign,
  Users,
  BarChart3,
  Star,
  Award
} from 'lucide-react';

const BusinessReport = ({ data, query, timestamp, metadata }) => {
  // Parse the business report data to extract structured sections
  const parseBusinessReport = (reportText) => {
    const sections = {
      executiveSummary: '',
      keyFindings: [],
      strategicImplications: [],
      risksOpportunities: [],
      recommendedActions: [],
      technicalNotes: ''
    };

    if (!reportText) return sections;

    const lines = reportText.split('\n');
    let currentSection = null;
    let currentContent = [];

    for (const line of lines) {
      const trimmedLine = line.trim();
      
      // Skip empty lines and markdown headers
      if (!trimmedLine || trimmedLine.startsWith('#')) {
        if (trimmedLine.includes('Executive Summary')) {
          if (currentSection && currentContent.length > 0) {
            sections[currentSection] = currentContent.join('\n').trim();
          }
          currentSection = 'executiveSummary';
          currentContent = [];
        } else if (trimmedLine.includes('Key Findings')) {
          if (currentSection && currentContent.length > 0) {
            sections[currentSection] = currentContent.join('\n').trim();
          }
          currentSection = 'keyFindings';
          currentContent = [];
        } else if (trimmedLine.includes('Strategic Implications')) {
          if (currentSection && currentContent.length > 0) {
            sections[currentSection] = currentContent.join('\n').trim();
          }
          currentSection = 'strategicImplications';
          currentContent = [];
        } else if (trimmedLine.includes('Risks') || trimmedLine.includes('Opportunities')) {
          if (currentSection && currentContent.length > 0) {
            sections[currentSection] = currentContent.join('\n').trim();
          }
          currentSection = 'risksOpportunities';
          currentContent = [];
        } else if (trimmedLine.includes('Recommended Actions')) {
          if (currentSection && currentContent.length > 0) {
            sections[currentSection] = currentContent.join('\n').trim();
          }
          currentSection = 'recommendedActions';
          currentContent = [];
        } else if (trimmedLine.includes('Technical')) {
          if (currentSection && currentContent.length > 0) {
            sections[currentSection] = currentContent.join('\n').trim();
          }
          currentSection = 'technicalNotes';
          currentContent = [];
        }
        continue;
      }
      
      // Add content to current section
      if (currentSection) {
        currentContent.push(trimmedLine);
      }
    }

    // Add the last section
    if (currentSection && currentContent.length > 0) {
      sections[currentSection] = currentContent.join('\n').trim();
    }

    // Convert text sections to bullet arrays where appropriate
    ['keyFindings', 'strategicImplications', 'risksOpportunities', 'recommendedActions'].forEach(section => {
      if (sections[section]) {
        const bullets = sections[section]
          .split('\n')
          .map(line => line.replace(/^[â€¢\-\*]\s*/, '').trim())
          .filter(line => line.length > 0);
        sections[section] = bullets;
      }
    });

    return sections;
  };

  const reportSections = parseBusinessReport(data);

  const formatBulletPoint = (text, index) => {
    if (!text) return null;
    return (
      <li key={index} className="flex items-start space-x-3 text-gray-700 leading-relaxed mb-2">
        <span className="w-2 h-2 bg-blue-500 rounded-full mt-2 flex-shrink-0"></span>
        <span>{text}</span>
      </li>
    );
  };

  const renderSection = (title, content, icon, bgColor, borderColor) => {
    if (!content || (Array.isArray(content) && content.length === 0)) return null;

    return (
      <div className={`mb-6 ${bgColor} border-l-4 ${borderColor} rounded-r-lg p-6 shadow-sm hover:shadow-md transition-shadow duration-200`}>
        <h3 className="text-lg font-semibold text-gray-800 mb-4 flex items-center">
          {icon}
          {title}
        </h3>
        {Array.isArray(content) ? (
          <ul className="space-y-2">
            {content.map((item, index) => formatBulletPoint(item, index))}
          </ul>
        ) : (
          <p className="text-gray-700 leading-relaxed">{content}</p>
        )}
      </div>
    );
  };

  // Fallback for non-structured reports
  const renderFallbackReport = () => {
    const paragraphs = data.split('\n\n').filter(p => p.trim());
    return (
      <div className="space-y-4">
        {paragraphs.map((paragraph, index) => (
          <p key={index} className="text-gray-700 leading-relaxed">
            {paragraph.trim()}
          </p>
        ))}
      </div>
    );
  };

  const hasStructuredData = reportSections.executiveSummary || 
                           reportSections.keyFindings.length > 0 ||
                           reportSections.strategicImplications.length > 0;

  return (
    <div className="bg-white/90 backdrop-blur-xl rounded-2xl border border-white/30 shadow-xl p-6 mb-6 business-report">
      {/* Header Section */}
      <div className="flex items-start justify-between mb-6 pb-4 border-b border-gray-200">
        <div className="flex-1">
          <h2 className="text-xl font-bold text-gray-800 mb-2 flex items-center">
            <FileText className="w-6 h-6 mr-2 text-blue-600" />
            Business Intelligence Report
          </h2>
          <p className="text-sm text-gray-600 mb-2 font-medium">"{query}"</p>
          <div className="flex items-center text-xs text-gray-500 space-x-4 flex-wrap">
            <div className="flex items-center">
              <Clock className="w-4 h-4 mr-1" />
              {new Date(timestamp).toLocaleString()}
            </div>
            {metadata?.analysis_type && (
              <div className="flex items-center">
                <Brain className="w-4 h-4 mr-1" />
                {metadata.analysis_type.replace(/_/g, ' ')}
              </div>
            )}
            {metadata?.response_time && (
              <div className="flex items-center">
                <Zap className="w-4 h-4 mr-1" />
                {metadata.response_time}s
              </div>
            )}
            {metadata?.ai_model && (
              <div className="flex items-center">
                <Award className="w-4 h-4 mr-1" />
                {metadata.ai_model}
              </div>
            )}
          </div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="bg-green-100 text-green-800 px-3 py-1 rounded-full text-xs font-medium flex items-center">
            <CheckCircle className="w-3 h-3 mr-1" />
            FalkorDB Powered
          </div>
          <div className="bg-purple-100 text-purple-800 px-3 py-1 rounded-full text-xs font-medium flex items-center">
            <Star className="w-3 h-3 mr-1" />
            AI Business Intelligence
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="space-y-6">
        {hasStructuredData ? (
          <>
            {/* Executive Summary */}
            {reportSections.executiveSummary && renderSection(
              "Executive Summary",
              reportSections.executiveSummary,
              <TrendingUp className="w-5 h-5 mr-2 text-blue-600" />,
              "bg-blue-50",
              "border-blue-400"
            )}

            {/* Key Findings */}
            {reportSections.keyFindings.length > 0 && renderSection(
              "Key Findings",
              reportSections.keyFindings,
              <BarChart3 className="w-5 h-5 mr-2 text-green-600" />,
              "bg-green-50",
              "border-green-400"
            )}

            {/* Strategic Implications */}
            {reportSections.strategicImplications.length > 0 && renderSection(
              "Strategic Implications",
              reportSections.strategicImplications,
              <Target className="w-5 h-5 mr-2 text-purple-600" />,
              "bg-purple-50",
              "border-purple-400"
            )}

            {/* Risks & Opportunities */}
            {reportSections.risksOpportunities.length > 0 && renderSection(
              "Risks & Opportunities",
              reportSections.risksOpportunities,
              <AlertTriangle className="w-5 h-5 mr-2 text-amber-600" />,
              "bg-amber-50",
              "border-amber-400"
            )}

            {/* Recommended Actions */}
            {reportSections.recommendedActions.length > 0 && renderSection(
              "Recommended Actions",
              reportSections.recommendedActions,
              <Lightbulb className="w-5 h-5 mr-2 text-orange-600" />,
              "bg-orange-50",
              "border-orange-400"
            )}

            {/* Technical Notes */}
            {reportSections.technicalNotes && renderSection(
              "Technical Notes",
              reportSections.technicalNotes,
              <Database className="w-5 h-5 mr-2 text-gray-600" />,
              "bg-gray-50",
              "border-gray-400"
            )}
          </>
        ) : (
          renderFallbackReport()
        )}
      </div>

      {/* Footer with capabilities and features used */}
      <div className="mt-6 pt-4 border-t border-gray-200">
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-xs text-gray-500 mb-3">
          <div className="flex items-center">
            <Database className="w-3 h-3 mr-1" />
            FalkorDB Engine
          </div>
          <div className="flex items-center">
            <Brain className="w-3 h-3 mr-1" />
            o3-mini Reasoning
          </div>
          <div className="flex items-center">
            <Shield className="w-3 h-3 mr-1" />
            Query Validation
          </div>
          <div className="flex items-center">
            <Network className="w-3 h-3 mr-1" />
            Graph Analysis
          </div>
        </div>
        
        {/* Analysis Features Used */}
        {metadata?.features_used && (
          <div className="flex flex-wrap gap-2">
            {metadata.features_used.map((feature, index) => (
              <span 
                key={index} 
                className="inline-flex items-center px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded-md"
              >
                {feature}
              </span>
            ))}
          </div>
        )}
        
        {/* Vector Search Indicator */}
        {metadata?.vector_search_used && (
          <div className="mt-2">
            <span className="inline-flex items-center px-2 py-1 bg-green-100 text-green-800 text-xs rounded-md">
              <Network className="w-3 h-3 mr-1" />
              Vector Search Enhanced
            </span>
          </div>
        )}
      </div>
    </div>
  );
};

export default React.memo(BusinessReport);
