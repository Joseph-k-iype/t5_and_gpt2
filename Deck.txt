# ORIGINAL SELECT QUERY (Large/Complex Example)
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX org: <http://www.w3.org/ns/org#>
PREFIX geo: <http://www.w3.org/2003/01/geo/wgs84_pos#>
PREFIX ex: <http://example.org/>

SELECT DISTINCT ?person ?personName ?personAge ?company ?companyName ?companyType 
                ?department ?deptName ?project ?projectName ?projectStatus
                ?manager ?managerName ?location ?city ?country ?salary
WHERE {
    # Person details
    ?person rdf:type foaf:Person .
    ?person foaf:name ?personName .
    ?person ex:age ?personAge .
    ?person ex:salary ?salary .
    
    # Company affiliation
    ?person org:memberOf ?company .
    ?company rdf:type org:Organization .
    ?company foaf:name ?companyName .
    ?company ex:type ?companyType .
    
    # Department information
    ?person org:memberOf ?department .
    ?department rdf:type org:OrganizationalUnit .
    ?department org:unitOf ?company .
    ?department rdfs:label ?deptName .
    
    # Project assignments
    ?person ex:assignedTo ?project .
    ?project rdf:type ex:Project .
    ?project rdfs:label ?projectName .
    ?project ex:status ?projectStatus .
    
    # Manager relationship
    ?person org:reportsTo ?manager .
    ?manager rdf:type foaf:Person .
    ?manager foaf:name ?managerName .
    
    # Location information
    ?company ex:hasOffice ?location .
    ?location geo:lat ?lat .
    ?location geo:long ?long .
    ?location ex:city ?city .
    ?location ex:country ?country .
    
    # Filters
    FILTER(?personAge >= 25 && ?personAge <= 65)
    FILTER(?salary > 50000)
    FILTER(?companyType = "Technology")
    FILTER(?projectStatus IN ("Active", "Planning"))
    FILTER(?country = "USA")
}
ORDER BY ?companyName ?deptName ?personName
LIMIT 1000

# ============================================================================
# CONVERTED CONSTRUCT QUERY
# ============================================================================

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX org: <http://www.w3.org/ns/org#>
PREFIX geo: <http://www.w3.org/2003/01/geo/wgs84_pos#>
PREFIX ex: <http://example.org/>

CONSTRUCT {
    # Person triples
    ?person rdf:type foaf:Person .
    ?person foaf:name ?personName .
    ?person ex:age ?personAge .
    ?person ex:salary ?salary .
    
    # Company triples
    ?company rdf:type org:Organization .
    ?company foaf:name ?companyName .
    ?company ex:type ?companyType .
    
    # Department triples
    ?department rdf:type org:OrganizationalUnit .
    ?department rdfs:label ?deptName .
    ?department org:unitOf ?company .
    
    # Project triples
    ?project rdf:type ex:Project .
    ?project rdfs:label ?projectName .
    ?project ex:status ?projectStatus .
    
    # Manager triples
    ?manager rdf:type foaf:Person .
    ?manager foaf:name ?managerName .
    
    # Location triples
    ?location geo:lat ?lat .
    ?location geo:long ?long .
    ?location ex:city ?city .
    ?location ex:country ?country .
    
    # Relationship triples
    ?person org:memberOf ?company .
    ?person org:memberOf ?department .
    ?person ex:assignedTo ?project .
    ?person org:reportsTo ?manager .
    ?company ex:hasOffice ?location .
}
WHERE {
    # Person details
    ?person rdf:type foaf:Person .
    ?person foaf:name ?personName .
    ?person ex:age ?personAge .
    ?person ex:salary ?salary .
    
    # Company affiliation
    ?person org:memberOf ?company .
    ?company rdf:type org:Organization .
    ?company foaf:name ?companyName .
    ?company ex:type ?companyType .
    
    # Department information
    ?person org:memberOf ?department .
    ?department rdf:type org:OrganizationalUnit .
    ?department org:unitOf ?company .
    ?department rdfs:label ?deptName .
    
    # Project assignments
    ?person ex:assignedTo ?project .
    ?project rdf:type ex:Project .
    ?project rdfs:label ?projectName .
    ?project ex:status ?projectStatus .
    
    # Manager relationship
    ?person org:reportsTo ?manager .
    ?manager rdf:type foaf:Person .
    ?manager foaf:name ?managerName .
    
    # Location information
    ?company ex:hasOffice ?location .
    ?location geo:lat ?lat .
    ?location geo:long ?long .
    ?location ex:city ?city .
    ?location ex:country ?country .
    
    # Same filters as original
    FILTER(?personAge >= 25 && ?personAge <= 65)
    FILTER(?salary > 50000)
    FILTER(?companyType = "Technology")
    FILTER(?projectStatus IN ("Active", "Planning"))
    FILTER(?country = "USA")
}

# ============================================================================
# TRANSFORMATION PRINCIPLES
# ============================================================================

# 1. REMOVE these clauses from SELECT:
#    - SELECT DISTINCT ?var1 ?var2 ...
#    - ORDER BY
#    - LIMIT/OFFSET
#    - GROUP BY/HAVING (if present)

# 2. ADD CONSTRUCT clause with:
#    - All entity type assertions: ?entity rdf:type ?Type
#    - All property assertions: ?entity ?property ?value
#    - All relationship assertions: ?entity1 ?relationship ?entity2

# 3. KEEP these parts unchanged:
#    - PREFIX declarations
#    - WHERE clause (entire pattern matching)
#    - FILTER conditions
#    - OPTIONAL clauses
#    - UNION clauses

# 4. ORGANIZE CONSTRUCT triples by:
#    - Entity types first
#    - Properties second
#    - Relationships last

# ============================================================================
# HANDLING SPECIAL CASES
# ============================================================================

# For queries with OPTIONAL:
CONSTRUCT {
    ?person rdf:type foaf:Person .
    ?person foaf:name ?name .
    ?person foaf:email ?email .      # May not exist for all persons
    ?person ex:phone ?phone .        # May not exist for all persons
}
WHERE {
    ?person rdf:type foaf:Person .
    ?person foaf:name ?name .
    OPTIONAL { ?person foaf:email ?email }
    OPTIONAL { ?person ex:phone ?phone }
}

# For queries with UNION:
CONSTRUCT {
    ?entity rdf:type ?type .
    ?entity rdfs:label ?label .
    ?entity ex:identifier ?id .
}
WHERE {
    {
        ?entity rdf:type ex:Person .
        ?entity foaf:name ?label .
        ?entity ex:personId ?id .
        BIND(ex:Person AS ?type)
    }
    UNION
    {
        ?entity rdf:type ex:Organization .
        ?entity org:name ?label .
        ?entity ex:orgId ?id .
        BIND(ex:Organization AS ?type)
    }
}

# For aggregated data (GROUP BY in SELECT):
# Note: CONSTRUCT doesn't support aggregation directly
# You may need to materialize aggregated values first or use a different approach

# For computed values:
CONSTRUCT {
    ?person rdf:type foaf:Person .
    ?person ex:name ?name .
    ?person ex:fullName ?fullName .
    ?person ex:salaryRange ?range .
}
WHERE {
    ?person rdf:type foaf:Person .
    ?person foaf:firstName ?fname .
    ?person foaf:lastName ?lname .
    ?person ex:salary ?salary .
    
    BIND(CONCAT(?fname, " ", ?lname) AS ?fullName)
    BIND(
        IF(?salary < 50000, "Low",
           IF(?salary < 100000, "Medium", "High")
        ) AS ?range
    )
    BIND(?fullName AS ?name)
}
