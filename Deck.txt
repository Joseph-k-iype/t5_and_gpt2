import React, { useCallback, useState, useEffect } from 'react';
import { Search, Loader2, Brain, Zap, Clock, Database } from 'lucide-react';

const SearchInput = ({ 
  query, 
  onQueryChange, 
  onSearch, 
  isLoading, 
  placeholder = "Ask complex questions about your graph data..." 
}) => {
  const [analysisTime, setAnalysisTime] = useState(0);

  // Timer for showing analysis duration
  useEffect(() => {
    let interval;
    if (isLoading) {
      setAnalysisTime(0);
      interval = setInterval(() => {
        setAnalysisTime(prev => prev + 1);
      }, 1000);
    } else {
      setAnalysisTime(0);
    }
    
    return () => {
      if (interval) clearInterval(interval);
    };
  }, [isLoading]);

  const handleKeyPress = useCallback((e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      onSearch();
    }
  }, [onSearch]);

  const formatTime = (seconds) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return mins > 0 ? `${mins}m ${secs}s` : `${secs}s`;
  };

  const getLoadingMessage = () => {
    if (analysisTime < 10) return "Initializing AI analysis...";
    if (analysisTime < 30) return "Processing graph data...";
    if (analysisTime < 60) return "Performing deep reasoning...";
    if (analysisTime < 120) return "Analyzing complex relationships...";
    return "Complex analysis in progress...";
  };

  return (
    <div className="relative group">
      <div className="absolute inset-0 bg-gradient-to-r from-blue-400 to-purple-400 rounded-2xl blur-lg opacity-20 group-hover:opacity-30 transition-opacity"></div>
      <div className="relative bg-white/80 backdrop-blur-xl rounded-2xl border border-white/30 shadow-xl hover:shadow-2xl transition-all duration-300">
        <div className="flex items-center p-4">
          <Search className="w-6 h-6 text-gray-400 mr-4 flex-shrink-0" />
          <input
            type="text"
            value={query}
            onChange={(e) => onQueryChange(e.target.value)}
            onKeyPress={handleKeyPress}
            placeholder={isLoading ? "Analysis in progress..." : placeholder}
            className="flex-1 text-lg bg-transparent border-none outline-none text-gray-800 placeholder-gray-500"
            disabled={isLoading}
          />
          
          {isLoading && (
            <div className="flex items-center mr-2">
              <div className="flex flex-col items-end">
                <div className="flex items-center">
                  <Loader2 className="w-5 h-5 text-blue-500 animate-spin mr-2" />
                  <Brain className="w-4 h-4 text-purple-500 mr-2" />
                  <span className="text-sm font-medium text-gray-700">
                    {formatTime(analysisTime)}
                  </span>
                </div>
                <span className="text-xs text-gray-500 mt-1">
                  {getLoadingMessage()}
                </span>
              </div>
            </div>
          )}
          
          <button
            onClick={onSearch}
            disabled={!query.trim() || isLoading}
            className="ml-2 px-6 py-2 bg-gradient-to-r from-blue-500 to-purple-500 hover:from-blue-600 hover:to-purple-600 disabled:from-gray-400 disabled:to-gray-400 text-white rounded-xl font-medium transition-all duration-200 disabled:cursor-not-allowed flex items-center"
          >
            {isLoading ? (
              <React.Fragment>
                <Database className="w-4 h-4 mr-1" />
                Analyzing...
              </React.Fragment>
            ) : (
              <React.Fragment>
                <Zap className="w-4 h-4 mr-1" />
                Analyze
              </React.Fragment>
            )}
          </button>
        </div>
        
        {/* Progress indicator for long-running queries */}
        {isLoading && (
          <div className="px-4 pb-3">
            <div className="bg-gray-200 rounded-full h-1 overflow-hidden">
              <div 
                className="bg-gradient-to-r from-blue-500 to-purple-500 h-full transition-all duration-1000 ease-out"
                style={{ 
                  width: `${Math.min(analysisTime * 2, 100)}%`,
                  animation: 'pulse 2s infinite'
                }}
              ></div>
            </div>
            <div className="flex items-center justify-between mt-2 text-xs text-gray-600">
              <div className="flex items-center">
                <Clock className="w-3 h-3 mr-1" />
                <span>No timeout limits - analysis will complete</span>
              </div>
              <span className="font-mono">
                {formatTime(analysisTime)}
              </span>
            </div>
          </div>
        )}
      </div>
      
      {/* Informational message for first-time users */}
      {!isLoading && query.length === 0 && (
        <div className="mt-3 text-center">
          <p className="text-sm text-gray-500">
            ⚡ No timeout limits • Complex analyses supported • 
            <span className="text-blue-600"> AI reasoning with o3-mini</span>
          </p>
        </div>
      )}
    </div>
  );
};

export default React.memo(SearchInput);
