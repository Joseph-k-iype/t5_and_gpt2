import { useState, useCallback, useRef } from 'react';
import { useAPI } from './useAPI';

export const useSearch = () => {
  const [query, setQuery] = useState('');
  const [results, setResults] = useState([]);
  const [hasSearched, setHasSearched] = useState(false);
  const { apiCall, loading } = useAPI();
  const resultsRef = useRef(null);
  const [currentQueryStart, setCurrentQueryStart] = useState(null);

  const performAdvancedSearch = useCallback(async (searchQuery = query) => {
    if (!searchQuery.trim() || loading) return;
    
    setHasSearched(true);
    setCurrentQueryStart(Date.now());
    const searchId = `search_${Date.now()}`;
    
    try {
      console.log('üöÄ Starting advanced search with unlimited processing time...');
      console.log('Query:', searchQuery);
      console.log('‚è±Ô∏è  No timeout restrictions - query will complete naturally');
      
      // Make API call with no timeout restrictions
      const response = await apiCall('/search/followups', 'POST', {
        query: searchQuery,
        thread_id: 'default',
        enable_advanced_reasoning: true,
        max_agents: 5
      });
      
      const processingTime = Date.now() - currentQueryStart;
      console.log(`‚úÖ Advanced search completed in ${(processingTime / 1000).toFixed(2)} seconds`);
      
      if (response.error) {
        throw new Error(response.error);
      }
      
      const newResult = {
        id: searchId,
        query: searchQuery,
        result: response.result || 'No analysis results returned',
        followups: response.followups || [],
        timestamp: new Date().toISOString(),
        processingTime: processingTime,
        metadata: {
          analysis_type: response.analysis_metadata?.analysis_type || 'advanced_multi_agent_reasoning',
          ai_model: response.analysis_metadata?.ai_model || 'o3-mini',
          reasoning_approach: response.analysis_metadata?.reasoning_approach || 'built_in_reasoning',
          total_agents: 5,
          response_time: response.analysis_metadata?.response_time,
          timeout_disabled: response.analysis_metadata?.timeout_disabled || true,
          seamless_transfer: response.analysis_metadata?.seamless_transfer || true,
          features_enabled: response.analysis_metadata?.features_enabled || [],
          cypher_queries: response.cypher_queries,
          indirect_relationships: response.indirect_relationships,
          vector_search_used: response.business_capabilities?.vector_search_enhancement || false,
          unlimited_processing: true
        }
      };
      
      setResults(prev => [newResult, ...prev]);
      setQuery('');
      
      // Scroll to results smoothly
      setTimeout(() => {
        resultsRef.current?.scrollIntoView({ behavior: 'smooth' });
      }, 100);
      
    } catch (error) {
      const processingTime = Date.now() - currentQueryStart;
      console.error('‚ùå Advanced search failed after', (processingTime / 1000).toFixed(2), 'seconds:', error);
      
      // Enhanced error handling with no timeout blame
      let errorMessage = error.message;
      let troubleshootingInfo = [];
      
      if (error.message.includes('fetch')) {
        errorMessage = 'Network connection error - please check backend connectivity';
        troubleshootingInfo = [
          'Verify Flask backend is running on port 5000',
          'Check if FalkorDB is accessible',
          'Ensure network connectivity between frontend and backend'
        ];
      } else if (error.message.includes('timeout')) {
        // This shouldn't happen with our no-timeout setup, but just in case
        errorMessage = 'Processing interrupted - this should not happen with timeout disabled';
        troubleshootingInfo = [
          'This error suggests a configuration issue',
          'Timeout should be disabled in the current setup',
          'Please check API configuration and backend logs'
        ];
      } else {
        troubleshootingInfo = [
          'Check backend logs for detailed error information',
          'Verify FalkorDB connection and data availability',
          'Ensure OpenAI API key is valid and has o3-mini access',
          'Try a more specific or simpler question if the issue persists'
        ];
      }
      
      const errorResult = {
        id: searchId,
        query: searchQuery,
        result: `‚ùå Analysis Failed: ${errorMessage}

üîß **Troubleshooting Information:**
${troubleshootingInfo.map(tip => `‚Ä¢ ${tip}`).join('\n')}

‚è±Ô∏è  **Processing Time:** ${(processingTime / 1000).toFixed(2)} seconds (no timeout applied)

üîç **System Status:**
‚Ä¢ Timeout Restrictions: Disabled ‚úÖ
‚Ä¢ Complex Query Support: Enabled ‚úÖ
‚Ä¢ Seamless Data Transfer: Enabled ‚úÖ

üìù **What to try:**
‚Ä¢ Check the browser console for detailed error logs
‚Ä¢ Verify backend services are running and accessible
‚Ä¢ Try breaking down complex questions into simpler parts
‚Ä¢ Check if your graph contains relevant data for the query

üí° **Note:** This error is not related to timeout limits, as they have been disabled for seamless operation.`,
        followups: [
          "What is the current system status and connectivity?",
          "Can you show me basic graph information?",
          "What node types are available in the graph?",
          "How can I verify the backend connection?"
        ],
        timestamp: new Date().toISOString(),
        processingTime: processingTime,
        isError: true,
        metadata: {
          error_type: 'system_error',
          error_details: error.message,
          processing_time_seconds: processingTime / 1000,
          timeout_was_disabled: true,
          seamless_transfer_attempted: true,
          troubleshooting_performed: true
        }
      };
      
      setResults(prev => [errorResult, ...prev]);
    } finally {
      setCurrentQueryStart(null);
    }
  }, [query, loading, apiCall, currentQueryStart]);

  const handleFollowUpSelect = useCallback((question) => {
    console.log('üîÑ Processing follow-up question:', question);
    setQuery(question);
    performAdvancedSearch(question);
  }, [performAdvancedSearch]);

  const initializeWelcomeMessage = useCallback((connectionStatus) => {
    const systemStatus = connectionStatus?.status === 'connected';
    
    const welcomeMessage = `üöÄ FalkorDB Intelligence System ${systemStatus ? 'Online' : 'Offline'}

${systemStatus ? 
  `‚úÖ **Multi-agent reasoning system is active and ready for complex graph analysis.**

üîß **Enhanced Capabilities:**
‚Ä¢ Advanced query validation and optimization
‚Ä¢ Multi-hop relationship exploration with unlimited processing time
‚Ä¢ Business intelligence synthesis with no timeout restrictions
‚Ä¢ Strategic recommendation engine with seamless data transfer
‚Ä¢ Risk assessment capabilities with complex analysis support
‚Ä¢ Vector search enhancement (${connectionStatus.vector_search_available ? 'enabled' : 'not configured'})

‚è±Ô∏è  **Performance Guarantees:**
‚Ä¢ No timeout limits - complex analyses supported
‚Ä¢ Seamless data transfer between frontend and backend
‚Ä¢ Unlimited processing time for comprehensive insights
‚Ä¢ Real-time progress tracking for long-running queries

üí° **Ready for Complex Analysis:**
Ask sophisticated questions about your graph data. The system will process them naturally without any time restrictions, providing comprehensive business intelligence reports.` :
  `‚ùå **Unable to connect to the FalkorDB backend.**

üîß **Connection Requirements:**
‚Ä¢ Flask backend running on port 5000
‚Ä¢ FalkorDB running on port 6379
‚Ä¢ CORS properly configured for seamless communication
‚Ä¢ Environment variables set correctly (OPENAI_API_KEY, etc.)

‚ö†Ô∏è  **Note:** Even when offline, the system is configured for unlimited processing time and seamless data transfer once connected.`
}

What would you like to explore in your graph data?`;

    setResults([{
      id: 'welcome',
      query: 'System Status & Capabilities',
      result: welcomeMessage,
      followups: systemStatus ? [
        "What are the most critical business relationships in my graph?",
        "Analyze network vulnerabilities and risk patterns with comprehensive assessment",
        "Show me indirect connections that could impact strategic operations",
        "Identify key influencers and bridge entities with detailed analysis",
        "Perform a deep dive into graph topology and business implications"
      ] : [
        "How can I start the FalkorDB backend services?",
        "What environment variables need to be configured?",
        "How do I verify the system is ready for complex analysis?",
        "What ports and services need to be running?"
      ],
      timestamp: new Date().toISOString(),
      metadata: {
        system_status: connectionStatus?.status,
        analysis_type: 'system_initialization',
        total_agents: systemStatus ? 5 : 0,
        timeout_disabled: true,
        seamless_transfer_enabled: true,
        complex_analysis_ready: systemStatus,
        unlimited_processing: true,
        vector_search_available: connectionStatus?.vector_search_available || false
      }
    }]);
  }, []);

  return {
    query,
    setQuery,
    results,
    hasSearched,
    loading,
    resultsRef,
    performAdvancedSearch,
    handleFollowUpSelect,
    initializeWelcomeMessage
  };
};
