import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import ChatInterface from './ChatInterface';
import Navigation from './Navigation';
import GlassCard from './GlassCard';
import LoadingAnimation from './LoadingAnimation';
import GraphVisualization from './GraphVisualization';
import { useChat } from '../hooks/useChat';
import { apiClient } from '../utils/api';
import { cn } from '../utils/lib';
import './styles/globals.css';
import './styles/glassmorphism.css';

interface AppState {
  isInitialized: boolean;
  isLoading: boolean;
  error: string | null;
  currentView: 'chat' | 'research' | 'diagnostics';
  systemStatus: {
    chatbot_ready: boolean;
    active_sessions: number;
  } | null;
}

const App: React.FC = () => {
  const [appState, setAppState] = useState<AppState>({
    isInitialized: false,
    isLoading: true,
    error: null,
    currentView: 'chat',
    systemStatus: null
  });

  // State for graph visibility
  const [showGraph, setShowGraph] = useState(false);
  const [selectedMessage, setSelectedMessage] = useState<any>(null);

  const {
    session,
    messages,
    isProcessing,
    isConnected,
    currentThoughts,
    researchState,
    sendMessage,
    startDeepResearch,
    initializeSession
  } = useChat();

  // Initialize app
  useEffect(() => {
    const initializeApp = async () => {
      try {
        setAppState(prev => ({ ...prev, isLoading: true, error: null }));

        // Check system health
        const health = await apiClient.checkHealth();
        
        if (health.chatbot_ready) {
          // Initialize chat session
          await initializeSession();
          
          setAppState(prev => ({
            ...prev,
            isInitialized: true,
            isLoading: false,
            systemStatus: {
              chatbot_ready: health.chatbot_ready,
              active_sessions: 0
            }
          }));
        } else {
          throw new Error('Chatbot not ready. Please wait for initialization.');
        }
      } catch (error) {
        console.error('Failed to initialize app:', error);
        setAppState(prev => ({
          ...prev,
          isLoading: false,
          error: error instanceof Error ? error.message : 'Failed to initialize application'
        }));
      }
    };

    initializeApp();
  }, [initializeSession]);

  // Get system diagnostics
  const handleGetDiagnostics = async () => {
    try {
      const diagnostics = await apiClient.getDiagnostics();
      console.log('System Diagnostics:', diagnostics);
      // You could show this in a modal or dedicated view
    } catch (error) {
      console.error('Failed to get diagnostics:', error);
    }
  };

  // Loading state
  if (appState.isLoading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50 flex items-center justify-center">
        <motion.div
          initial={{ opacity: 0, scale: 0.9 }}
          animate={{ opacity: 1, scale: 1 }}
          transition={{ duration: 0.5 }}
          className="text-center"
        >
          <GlassCard className="p-8 max-w-md mx-auto">
            <LoadingAnimation />
            <h2 className="text-2xl font-semibold text-gray-800 mb-2">
              Privacy Q&A Expert
            </h2>
            <p className="text-gray-600 mb-4">
              Initializing deep research capabilities...
            </p>
            <div className="flex items-center justify-center space-x-2">
              <div className="flex space-x-1">
                {[0, 1, 2].map((i) => (
                  <motion.div
                    key={i}
                    className="w-2 h-2 bg-blue-500 rounded-full"
                    animate={{
                      scale: [1, 1.2, 1],
                      opacity: [0.5, 1, 0.5]
                    }}
                    transition={{
                      duration: 1,
                      repeat: Infinity,
                      delay: i * 0.2
                    }}
                  />
                ))}
              </div>
              <span className="text-sm text-gray-500 ml-3">
                Setting up AI agents...
              </span>
            </div>
          </GlassCard>
        </motion.div>
      </div>
    );
  }

  // Error state
  if (appState.error) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-red-50 via-white to-pink-50 flex items-center justify-center">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
        >
          <GlassCard className="p-8 max-w-md mx-auto text-center">
            <div className="text-red-500 mb-4">
              <svg className="w-16 h-16 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L4.082 15.5c-.77.833.192 2.5 1.732 2.5z" />
              </svg>
            </div>
            <h2 className="text-xl font-semibold text-gray-800 mb-2">
              Initialization Failed
            </h2>
            <p className="text-gray-600 mb-6">
              {appState.error}
            </p>
            <motion.button
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              onClick={() => window.location.reload()}
              className="glass-button px-6 py-2 bg-blue-500/20 text-blue-700 rounded-lg font-medium hover:bg-blue-500/30 transition-all duration-200"
            >
              Retry Initialization
            </motion.button>
          </GlassCard>
        </motion.div>
      </div>
    );
  }

  // Main application
  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50">
      {/* Background Effects */}
      <div className="fixed inset-0 overflow-hidden pointer-events-none">
        <div className="absolute top-20 left-20 w-64 h-64 bg-blue-300/20 rounded-full blur-3xl animate-pulse" />
        <div className="absolute bottom-20 right-20 w-96 h-96 bg-purple-300/20 rounded-full blur-3xl animate-pulse delay-1000" />
        <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-72 h-72 bg-pink-300/10 rounded-full blur-3xl animate-pulse delay-2000" />
      </div>

      {/* Header */}
      <motion.header
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.6 }}
        className="relative z-10"
      >
        <Navigation
          currentView={appState.currentView}
          onViewChange={(view) => setAppState(prev => ({ ...prev, currentView: view }))}
          isConnected={isConnected}
          systemStatus={appState.systemStatus}
          onDiagnostics={handleGetDiagnostics}
        />
      </motion.header>

      {/* Main Content */}
      <main className="relative z-10 container mx-auto px-4 py-8">
        <AnimatePresence mode="wait">
          {appState.currentView === 'chat' && (
            <motion.div
              key="chat"
              initial={{ opacity: 0, x: -20 }}
              animate={{ opacity: 1, x: 0 }}
              exit={{ opacity: 0, x: 20 }}
              transition={{ duration: 0.3 }}
              className="grid grid-cols-1 lg:grid-cols-12 gap-6 h-[calc(100vh-180px)]"
            >
              {/* Chat Column */}
              <div className={cn(
                "transition-all duration-300",
                showGraph ? "lg:col-span-7" : "lg:col-span-12"
              )}>
                <ChatInterface
                  session={session}
                  messages={messages}
                  isProcessing={isProcessing}
                  currentThoughts={currentThoughts}
                  researchState={researchState}
                  onSendMessage={sendMessage}
                  onStartResearch={startDeepResearch}
                  onShowGraph={(message) => {
                    setSelectedMessage(message);
                    setShowGraph(true);
                  }}
                  onHideGraph={() => setShowGraph(false)}
                />
              </div>

              {/* Graph Column */}
              <AnimatePresence>
                {showGraph && (
                  <motion.div
                    initial={{ opacity: 0, x: 20 }}
                    animate={{ opacity: 1, x: 0 }}
                    exit={{ opacity: 0, x: 20 }}
                    transition={{ duration: 0.3 }}
                    className="lg:col-span-5"
                  >
                    <GlassCard className="h-full p-4">
                      <div className="flex items-center justify-between mb-4">
                        <h3 className="text-lg font-semibold text-gray-800 flex items-center gap-2">
                          <span>ðŸ“Š</span>
                          <span>Knowledge Graph</span>
                        </h3>
                        <motion.button
                          whileHover={{ scale: 1.1 }}
                          whileTap={{ scale: 0.9 }}
                          onClick={() => setShowGraph(false)}
                          className="text-gray-500 hover:text-gray-700 transition-colors p-1"
                        >
                          <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                          </svg>
                        </motion.button>
                      </div>
                      
                      <div className="h-[calc(100%-60px)]">
                        {selectedMessage && (
                          <GraphVisualization 
                            message={selectedMessage.content}
                            metadata={selectedMessage.metadata}
                            messageType={selectedMessage.type}
                          />
                        )}
                      </div>
                    </GlassCard>
                  </motion.div>
                )}
              </AnimatePresence>
            </motion.div>
          )}

          {appState.currentView === 'research' && (
            <motion.div
              key="research"
              initial={{ opacity: 0, x: -20 }}
              animate={{ opacity: 1, x: 0 }}
              exit={{ opacity: 0, x: 20 }}
              transition={{ duration: 0.3 }}
              className="max-w-4xl mx-auto"
            >
              <GlassCard className="p-8">
                <h1 className="text-3xl font-bold text-gray-800 mb-6">
                  ðŸ”¬ Deep Research Laboratory
                </h1>
                <p className="text-gray-600 mb-8">
                  Conduct comprehensive, iterative research on complex privacy topics using 
                  advanced AI agents and multi-jurisdiction analysis.
                </p>
                
                <div className="grid md:grid-cols-2 gap-6">
                  <div>
                    <h3 className="text-lg font-semibold text-gray-800 mb-3">
                      Research Capabilities
                    </h3>
                    <ul className="space-y-2 text-gray-600">
                      <li className="flex items-center">
                        <span className="w-2 h-2 bg-blue-500 rounded-full mr-3"></span>
                        Multi-iteration deep research
                      </li>
                      <li className="flex items-center">
                        <span className="w-2 h-2 bg-green-500 rounded-full mr-3"></span>
                        Knowledge gap analysis
                      </li>
                      <li className="flex items-center">
                        <span className="w-2 h-2 bg-purple-500 rounded-full mr-3"></span>
                        Cross-jurisdiction comparison
                      </li>
                      <li className="flex items-center">
                        <span className="w-2 h-2 bg-orange-500 rounded-full mr-3"></span>
                        Comprehensive report generation
                      </li>
                    </ul>
                  </div>
                  
                  <div>
                    <h3 className="text-lg font-semibold text-gray-800 mb-3">
                      Supported Frameworks
                    </h3>
                    <div className="flex flex-wrap gap-2">
                      {['GDPR', 'CCPA', 'LGPD', 'PIPEDA', 'PDPA', 'Privacy Act'].map((framework) => (
                        <span
                          key={framework}
                          className="px-3 py-1 bg-blue-100/50 text-blue-700 rounded-full text-sm font-medium"
                        >
                          {framework}
                        </span>
                      ))}
                    </div>
                  </div>
                </div>

                {researchState && (
                  <motion.div
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    className="mt-8 p-6 bg-blue-50/50 rounded-xl"
                  >
                    <h3 className="text-lg font-semibold text-gray-800 mb-3">
                      Latest Research Results
                    </h3>
                    <div className="grid sm:grid-cols-3 gap-4 text-center">
                      <div>
                        <div className="text-2xl font-bold text-blue-600">
                          {researchState.iterations_completed || 0}
                        </div>
                        <div className="text-sm text-gray-600">Iterations</div>
                      </div>
                      <div>
                        <div className="text-2xl font-bold text-green-600">
                          {researchState.confidence || 'Unknown'}
                        </div>
                        <div className="text-sm text-gray-600">Confidence</div>
                      </div>
                      <div>
                        <div className="text-2xl font-bold text-purple-600">
                          {Object.keys(researchState.accumulated_knowledge || {}).length}
                        </div>
                        <div className="text-sm text-gray-600">Knowledge Areas</div>
                      </div>
                    </div>
                  </motion.div>
                )}
              </GlassCard>
            </motion.div>
          )}

          {appState.currentView === 'diagnostics' && (
            <motion.div
              key="diagnostics"
              initial={{ opacity: 0, x: -20 }}
              animate={{ opacity: 1, x: 0 }}
              exit={{ opacity: 0, x: 20 }}
              transition={{ duration: 0.3 }}
              className="max-w-4xl mx-auto"
            >
              <GlassCard className="p-8">
                <h1 className="text-3xl font-bold text-gray-800 mb-6">
                  ðŸ”§ System Diagnostics
                </h1>
                
                <div className="grid md:grid-cols-2 gap-6">
                  <div>
                    <h3 className="text-lg font-semibold text-gray-800 mb-3">
                      Connection Status
                    </h3>
                    <div className="space-y-3">
                      <div className="flex items-center justify-between p-3 bg-green-50/50 rounded-lg">
                        <span className="font-medium">WebSocket</span>
                        <span className={`px-2 py-1 rounded-full text-xs font-medium ${
                          isConnected 
                            ? 'bg-green-100 text-green-700' 
                            : 'bg-red-100 text-red-700'
                        }`}>
                          {isConnected ? 'Connected' : 'Disconnected'}
                        </span>
                      </div>
                      <div className="flex items-center justify-between p-3 bg-blue-50/50 rounded-lg">
                        <span className="font-medium">Session</span>
                        <span className="px-2 py-1 bg-blue-100 text-blue-700 rounded-full text-xs font-medium">
                          {session?.session_id ? 'Active' : 'Not Started'}
                        </span>
                      </div>
                    </div>
                  </div>

                  <div>
                    <h3 className="text-lg font-semibold text-gray-800 mb-3">
                      Session Info
                    </h3>
                    <div className="space-y-3">
                      <div className="p-3 bg-gray-50/50 rounded-lg">
                        <div className="text-sm text-gray-600">Session ID</div>
                        <div className="font-mono text-xs text-gray-800">
                          {session?.session_id || 'Not available'}
                        </div>
                      </div>
                      <div className="p-3 bg-gray-50/50 rounded-lg">
                        <div className="text-sm text-gray-600">Messages</div>
                        <div className="font-semibold text-gray-800">
                          {messages.length}
                        </div>
                      </div>
                    </div>
                  </div>
                </div>

                <motion.button
                  whileHover={{ scale: 1.02 }}
                  whileTap={{ scale: 0.98 }}
                  onClick={handleGetDiagnostics}
                  className="mt-6 w-full glass-button py-3 bg-blue-500/20 text-blue-700 rounded-lg font-medium hover:bg-blue-500/30 transition-all duration-200"
                >
                  Run Full Diagnostics
                </motion.button>
              </GlassCard>
            </motion.div>
          )}
        </AnimatePresence>
      </main>
    </div>
  );
};

export default App;
