import React, { useState, useEffect, useRef } from 'react';
import { 
  Search, 
  Database, 
  Activity, 
  ChevronRight, 
  TrendingUp, 
  Users, 
  BarChart3, 
  Network,
  Lightbulb,
  FileText,
  Clock,
  CheckCircle,
  AlertCircle,
  Loader2,
  ExternalLink,
  Brain,
  Zap,
  Target,
  Shield
} from 'lucide-react';

// API Configuration - Auto-detects port and environment
const getApiConfig = () => {
  // Check if we're running on a custom port
  const currentPort = window.location.port;
  const isDevelopment = process.env.NODE_ENV === 'development';
  
  // Use environment variable if set, otherwise default to localhost:5000
  const baseURL = process.env.REACT_APP_API_URL || 
    (isDevelopment ? 'http://localhost:5000' : window.location.origin);
  
  console.log(`Frontend running on port: ${currentPort || '80/443'}`);
  console.log(`API configured for: ${baseURL}`);
  
  return {
    baseURL,
    timeout: 45000, // Increased timeout for complex reasoning
    headers: {
      'Content-Type': 'application/json',
      'Accept': 'application/json',
      'X-Frontend-Port': currentPort || 'default',
    }
  };
};

const API_CONFIG = getApiConfig();

// Enhanced API utility with comprehensive error handling
const apiCall = async (endpoint, method = 'GET', data = null) => {
  try {
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), API_CONFIG.timeout);
    
    const config = {
      method,
      headers: API_CONFIG.headers,
      signal: controller.signal,
    };
    
    if (data) {
      config.body = JSON.stringify(data);
    }
    
    console.log(`API Call: ${method} ${API_CONFIG.baseURL}/api${endpoint}`);
    
    const response = await fetch(`${API_CONFIG.baseURL}/api${endpoint}`, config);
    clearTimeout(timeoutId);
    
    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`HTTP ${response.status}: ${errorText || response.statusText}`);
    }
    
    const result = await response.json();
    console.log(`API Response:`, result);
    return result;
  } catch (error) {
    if (error.name === 'AbortError') {
      throw new Error('Request timeout - complex analysis may take longer. Please try a simpler query first.');
    }
    console.error('API Error:', error);
    throw error;
  }
};

// Advanced Business Report Formatter with Reasoning Display
const BusinessReport = ({ data, query, timestamp, metadata }) => {
  const formatAdvancedInsight = (text) => {
    // Enhanced parsing for multi-agent reasoning results
    const sections = text.split('\n\n');
    const formattedSections = [];
    
    sections.forEach((section, index) => {
      const lowerSection = section.toLowerCase();
      
      // Executive Summary
      if (lowerSection.includes('summary') || lowerSection.includes('key findings') || lowerSection.includes('overview')) {
        formattedSections.push(
          <div key={index} className="mb-6">
            <h3 className="text-lg font-semibold text-gray-800 mb-3 flex items-center">
              <TrendingUp className="w-5 h-5 mr-2 text-blue-600" />
              Executive Summary
            </h3>
            <div className="bg-blue-50 border-l-4 border-blue-400 p-4 rounded-r-lg">
              <p className="text-gray-700 leading-relaxed">{section.replace(/^(Summary|Key Findings|Overview):\s*/i, '')}</p>
            </div>
          </div>
        );
      }
      // Strategic Analysis
      else if (lowerSection.includes('strategic') || lowerSection.includes('business impact') || lowerSection.includes('implications')) {
        formattedSections.push(
          <div key={index} className="mb-6">
            <h3 className="text-lg font-semibold text-gray-800 mb-3 flex items-center">
              <Target className="w-5 h-5 mr-2 text-purple-600" />
              Strategic Analysis
            </h3>
            <div className="bg-purple-50 border-l-4 border-purple-400 p-4 rounded-r-lg">
              <p className="text-gray-700 leading-relaxed">{section}</p>
            </div>
          </div>
        );
      }
      // Recommendations
      else if (lowerSection.includes('recommendation') || lowerSection.includes('action') || lowerSection.includes('next steps')) {
        formattedSections.push(
          <div key={index} className="mb-6">
            <h3 className="text-lg font-semibold text-gray-800 mb-3 flex items-center">
              <Lightbulb className="w-5 h-5 mr-2 text-amber-600" />
              Strategic Recommendations
            </h3>
            <div className="bg-amber-50 border-l-4 border-amber-400 p-4 rounded-r-lg">
              <p className="text-gray-700 leading-relaxed">{section}</p>
            </div>
          </div>
        );
      }
      // Risk Analysis
      else if (lowerSection.includes('risk') || lowerSection.includes('warning') || lowerSection.includes('concern')) {
        formattedSections.push(
          <div key={index} className="mb-6">
            <h3 className="text-lg font-semibold text-gray-800 mb-3 flex items-center">
              <Shield className="w-5 h-5 mr-2 text-red-600" />
              Risk Assessment
            </h3>
            <div className="bg-red-50 border-l-4 border-red-400 p-4 rounded-r-lg">
              <p className="text-gray-700 leading-relaxed">{section}</p>
            </div>
          </div>
        );
      }
      // Technical Details
      else if (lowerSection.includes('cypher') || lowerSection.includes('query') || lowerSection.includes('validation')) {
        formattedSections.push(
          <div key={index} className="mb-6">
            <h3 className="text-lg font-semibold text-gray-800 mb-3 flex items-center">
              <Brain className="w-5 h-5 mr-2 text-green-600" />
              Technical Analysis
            </h3>
            <div className="bg-green-50 border-l-4 border-green-400 p-4 rounded-r-lg">
              <p className="text-gray-700 leading-relaxed font-mono text-sm">{section}</p>
            </div>
          </div>
        );
      }
      // Default content
      else if (section.trim()) {
        formattedSections.push(
          <div key={index} className="mb-4">
            <p className="text-gray-700 leading-relaxed">{section}</p>
          </div>
        );
      }
    });
    
    return formattedSections;
  };

  return (
    <div className="bg-white/80 backdrop-blur-xl rounded-2xl border border-white/20 shadow-xl p-6 mb-6 business-report">
      {/* Enhanced Report Header */}
      <div className="flex items-start justify-between mb-6 pb-4 border-b border-gray-200">
        <div className="flex-1">
          <h2 className="text-xl font-bold text-gray-800 mb-2 flex items-center">
            <FileText className="w-6 h-6 mr-2 text-blue-600" />
            Advanced Graph Intelligence Report
          </h2>
          <p className="text-sm text-gray-600 mb-2">Query: "{query}"</p>
          <div className="flex items-center text-xs text-gray-500 space-x-4">
            <div className="flex items-center">
              <Clock className="w-4 h-4 mr-1" />
              {new Date(timestamp).toLocaleString()}
            </div>
            {metadata?.analysis_type && (
              <div className="flex items-center">
                <Brain className="w-4 h-4 mr-1" />
                {metadata.analysis_type}
              </div>
            )}
          </div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="bg-green-100 text-green-800 px-2 py-1 rounded-full text-xs font-medium flex items-center">
            <CheckCircle className="w-3 h-3 mr-1" />
            FalkorDB Validated
          </div>
          <div className="bg-blue-100 text-blue-800 px-2 py-1 rounded-full text-xs font-medium flex items-center">
            <Zap className="w-3 h-3 mr-1" />
            Multi-Agent Analysis
          </div>
        </div>
      </div>

      {/* Enhanced Report Content */}
      <div className="space-y-6">
        {formatAdvancedInsight(data)}
      </div>

      {/* Enhanced Report Footer */}
      <div className="mt-6 pt-4 border-t border-gray-200">
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-xs text-gray-500">
          <div className="flex items-center">
            <Database className="w-3 h-3 mr-1" />
            FalkorDB Engine
          </div>
          <div className="flex items-center">
            <Shield className="w-3 h-3 mr-1" />
            Query Validation
          </div>
          <div className="flex items-center">
            <Network className="w-3 h-3 mr-1" />
            Graph Analysis
          </div>
          <div className="flex items-center">
            <Brain className="w-3 h-3 mr-1" />
            AI Reasoning
          </div>
        </div>
      </div>
    </div>
  );
};

// Enhanced Follow-up Questions Component
const AdvancedFollowUpQuestions = ({ questions, onQuestionSelect, isLoading, metadata }) => {
  if (!questions || questions.length === 0) return null;
  
  // Categorize follow-up questions
  const categorizeQuestions = (questions) => {
    const categories = {
      strategic: [],
      operational: [],
      technical: [],
      risk: []
    };
    
    questions.forEach(question => {
      const lowerQ = question.toLowerCase();
      if (lowerQ.includes('strategic') || lowerQ.includes('business') || lowerQ.includes('impact')) {
        categories.strategic.push(question);
      } else if (lowerQ.includes('operational') || lowerQ.includes('process') || lowerQ.includes('efficiency')) {
        categories.operational.push(question);
      } else if (lowerQ.includes('technical') || lowerQ.includes('cypher') || lowerQ.includes('query')) {
        categories.technical.push(question);
      } else if (lowerQ.includes('risk') || lowerQ.includes('security') || lowerQ.includes('threat')) {
        categories.risk.push(question);
      } else {
        categories.strategic.push(question); // Default to strategic
      }
    });
    
    return categories;
  };
  
  const categorized = categorizeQuestions(questions);
  
  return (
    <div className="mb-6">
      <h3 className="text-sm font-medium text-gray-600 mb-3 flex items-center">
        <Lightbulb className="w-4 h-4 mr-2" />
        Intelligent Follow-up Analysis
        {metadata?.total_agents && (
          <span className="ml-2 text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded-full">
            {metadata.total_agents} AI Agents
          </span>
        )}
      </h3>
      
      <div className="grid gap-3">
        {Object.entries(categorized).map(([category, categoryQuestions]) => {
          if (categoryQuestions.length === 0) return null;
          
          const categoryIcons = {
            strategic: <Target className="w-4 h-4 text-purple-600" />,
            operational: <BarChart3 className="w-4 h-4 text-blue-600" />,
            technical: <Brain className="w-4 h-4 text-green-600" />,
            risk: <Shield className="w-4 h-4 text-red-600" />
          };
          
          return (
            <div key={category}>
              <div className="text-xs font-medium text-gray-500 mb-2 flex items-center">
                {categoryIcons[category]}
                <span className="ml-1 capitalize">{category} Analysis</span>
              </div>
              <div className="space-y-2">
                {categoryQuestions.slice(0, 2).map((question, index) => {
                  const cleanQuestion = question.replace(/^\d+\.\s*/, '').trim();
                  if (!cleanQuestion.includes('?')) return null;
                  
                  return (
                    <button
                      key={`${category}-${index}`}
                      onClick={() => onQuestionSelect(cleanQuestion)}
                      disabled={isLoading}
                      className="group text-left p-3 bg-white/60 hover:bg-white/80 border border-white/30 rounded-xl transition-all duration-200 backdrop-blur-sm hover:shadow-md disabled:opacity-50 disabled:cursor-not-allowed w-full"
                    >
                      <div className="flex items-center justify-between">
                        <span className="text-sm text-gray-700 group-hover:text-gray-900 pr-2">
                          {cleanQuestion}
                        </span>
                        <ChevronRight className="w-4 h-4 text-gray-400 group-hover:text-gray-600 flex-shrink-0" />
                      </div>
                    </button>
                  );
                })}
              </div>
            </div>
          );
        })}
      </div>
    </div>
  );
};

// Enhanced Connection Status Component
const ConnectionStatus = ({ status, onRetry }) => {
  const getStatusInfo = () => {
    if (!status) {
      return {
        color: 'gray',
        icon: AlertCircle,
        text: 'Initializing connection...',
        description: 'Setting up FalkorDB multi-agent system'
      };
    }
    
    if (status.status === 'connected') {
      return {
        color: 'green',
        icon: CheckCircle,
        text: 'FalkorDB Intelligence Active',
        description: `${status.database || 'Unknown'} • Multi-agent reasoning enabled`
      };
    }
    
    return {
      color: 'red',
      icon: AlertCircle,
      text: 'Connection failed',
      description: status.error || 'Unable to connect to FalkorDB backend'
    };
  };

  const { color, icon: Icon, text, description } = getStatusInfo();
  
  return (
    <div className={`flex items-center space-x-3 p-3 rounded-lg border transition-all duration-200 ${
      color === 'green' ? 'bg-green-50 border-green-200' :
      color === 'red' ? 'bg-red-50 border-red-200' :
      'bg-gray-50 border-gray-200'
    }`}>
      <Icon className={`w-5 h-5 ${
        color === 'green' ? 'text-green-600' :
        color === 'red' ? 'text-red-600' :
        'text-gray-600'
      }`} />
      <div className="flex-1">
        <div className={`text-sm font-medium ${
          color === 'green' ? 'text-green-800' :
          color === 'red' ? 'text-red-800' :
          'text-gray-800'
        }`}>
          {text}
        </div>
        <div className="text-xs text-gray-600">{description}</div>
      </div>
      {color === 'red' && onRetry && (
        <button
          onClick={onRetry}
          className="text-xs text-red-600 hover:text-red-800 underline transition-colors"
        >
          Retry
        </button>
      )}
    </div>
  );
};

// Main App Component
const FalkorDBApp = () => {
  const [query, setQuery] = useState('');
  const [results, setResults] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [connectionStatus, setConnectionStatus] = useState(null);
  const [hasSearched, setHasSearched] = useState(false);
  const [systemInfo, setSystemInfo] = useState(null);
  const inputRef = useRef(null);
  const resultsRef = useRef(null);

  // Initialize connection and system info
  useEffect(() => {
    const initializeSystem = async () => {
      console.log('Initializing FalkorDB Intelligence System...');
      try {
        // Test connection with enhanced error handling
        const [connectionResult, healthResult] = await Promise.all([
          apiCall('/connection/test').catch(err => ({ status: 'failed', error: err.message })),
          apiCall('/health').catch(err => ({ status: 'failed', error: err.message }))
        ]);
        
        console.log('Connection Result:', connectionResult);
        console.log('Health Result:', healthResult);
        
        setConnectionStatus(connectionResult);
        setSystemInfo(healthResult);
        
        // Get additional system information if connected
        if (connectionResult.status === 'connected') {
          try {
            const graphInfo = await apiCall('/graph/info');
            console.log('Graph Info:', graphInfo);
            setSystemInfo(prev => ({ ...prev, graphInfo }));
          } catch (error) {
            console.warn('Could not fetch graph info:', error.message);
          }
        }
        
        // Add welcome message with system status
        setResults([{
          id: 'welcome',
          query: 'System Status',
          result: `🚀 FalkorDB Intelligence System ${connectionResult.status === 'connected' ? 'Online' : 'Offline'}

${connectionResult.status === 'connected' ? 
  '✅ Multi-agent reasoning system is active and ready for complex graph analysis.\n\n🔧 Available Features:\n• Advanced query validation\n• Multi-hop relationship exploration\n• Business intelligence synthesis\n• Strategic recommendation engine\n• Risk assessment capabilities\n\n💡 Try asking complex questions about your graph data to see the full reasoning capabilities in action.' :
  '❌ Unable to connect to the FalkorDB backend.\n\nPlease ensure:\n• Flask backend is running on port 5000\n• FalkorDB is running on port 6379\n• CORS is properly configured\n• Environment variables are set correctly'
}

What would you like to explore in your graph data?`,
          followups: connectionResult.status === 'connected' ? [
            "What are the most critical business relationships in my graph?",
            "Analyze network vulnerabilities and risk patterns",
            "Show me indirect connections that could impact operations",
            "Identify key influencers and bridge entities in the network"
          ] : [],
          timestamp: new Date().toISOString(),
          metadata: {
            system_status: connectionResult.status,
            analysis_type: 'system_initialization',
            total_agents: connectionResult.status === 'connected' ? 5 : 0
          }
        }]);
      } catch (error) {
        console.error('System initialization failed:', error);
        setConnectionStatus({
          status: 'failed',
          error: error.message,
          timestamp: new Date().toISOString()
        });
      }
    };

    initializeSystem();
  }, []);

  // Enhanced search with full reasoning capabilities
  const handleAdvancedSearch = async (searchQuery = query) => {
    if (!searchQuery.trim() || isLoading) return;
    
    setIsLoading(true);
    setHasSearched(true);
    
    const searchId = `search_${Date.now()}`;
    
    try {
      console.log('Starting advanced search with full reasoning...');
      
      // Use the enhanced followups endpoint that leverages all agents
      const response = await apiCall('/search/followups', 'POST', {
        query: searchQuery,
        thread_id: 'default',
        enable_advanced_reasoning: true,
        max_agents: 5 // Use all available agents
      });
      
      if (response.error) {
        throw new Error(response.error);
      }
      
      const newResult = {
        id: searchId,
        query: searchQuery,
        result: response.result || 'No analysis results returned',
        followups: response.followups || [],
        timestamp: new Date().toISOString(),
        metadata: {
          analysis_type: 'advanced_multi_agent_reasoning',
          total_agents: 5,
          response_time: response.response_time,
          cypher_queries: response.cypher_queries,
          indirect_relationships: response.indirect_relationships
        }
      };
      
      setResults(prev => [newResult, ...prev]);
      setQuery('');
      
      // Smooth scroll to results
      setTimeout(() => {
        resultsRef.current?.scrollIntoView({ behavior: 'smooth' });
      }, 100);
      
    } catch (error) {
      console.error('Advanced search failed:', error);
      const errorResult = {
        id: searchId,
        query: searchQuery,
        result: `❌ Analysis Failed: ${error.message}

This could be due to:
• Backend connection issues (check if Flask is running on port 5000)
• FalkorDB connection problems (ensure it's running on port 6379)
• Complex query timeout (try a simpler question first)
• API configuration mismatch

Please check the browser console for detailed error information.`,
        followups: [],
        timestamp: new Date().toISOString(),
        isError: true,
        metadata: {
          error_type: 'system_error',
          error_details: error.message
        }
      };
      
      setResults(prev => [errorResult, ...prev]);
    } finally {
      setIsLoading(false);
    }
  };

  // Handle enter key
  const handleKeyPress = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleAdvancedSearch();
    }
  };

  // Handle follow-up selection
  const handleFollowUpSelect = (question) => {
    setQuery(question);
    handleAdvancedSearch(question);
  };

  // Retry connection
  const retryConnection = async () => {
    setConnectionStatus(null);
    try {
      const response = await apiCall('/connection/test');
      setConnectionStatus(response);
    } catch (error) {
      setConnectionStatus({
        status: 'failed',
        error: error.message,
        timestamp: new Date().toISOString()
      });
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-100">
      {/* Background Pattern */}
      <div className="absolute inset-0 bg-[url('data:image/svg+xml,%3Csvg width=\"60\" height=\"60\" viewBox=\"0 0 60 60\" xmlns=\"http://www.w3.org/2000/svg\"%3E%3Cg fill=\"none\" fill-rule=\"evenodd\"%3E%3Cg fill=\"%239C92AC\" fill-opacity=\"0.03\"%3E%3Ccircle cx=\"30\" cy=\"30\" r=\"1.5\"/%3E%3C/g%3E%3C/g%3E%3C/svg%3E')] opacity-40"></div>
      
      <div className="relative z-10">
        {/* Header */}
        <header className="w-full p-6">
          <div className="max-w-4xl mx-auto">
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-3">
                <div className="p-2 bg-white/60 backdrop-blur-sm rounded-xl">
                  <Database className="w-6 h-6 text-blue-600" />
                </div>
                <div>
                  <h1 className="text-xl font-bold text-gray-800">FalkorDB Intelligence</h1>
                  <p className="text-sm text-gray-600">
                    Advanced Graph Analytics • Port {window.location.port || '3001'}
                  </p>
                </div>
              </div>
              
              <div className="hidden md:block">
                <ConnectionStatus status={connectionStatus} onRetry={retryConnection} />
              </div>
            </div>
          </div>
        </header>

        {/* Main Content */}
        <main className="w-full px-6">
          <div className="max-w-4xl mx-auto">
            
            {/* Search Section */}
            <div className={`transition-all duration-700 ${hasSearched ? 'mb-8' : 'mt-20 mb-32'}`}>
              {!hasSearched && (
                <div className="text-center mb-12">
                  <h2 className="text-4xl md:text-5xl font-light text-gray-800 mb-4">
                    Advanced Graph Intelligence
                  </h2>
                  <p className="text-lg text-gray-600 max-w-2xl mx-auto">
                    Experience multi-agent AI reasoning for complex graph analysis. Ask sophisticated questions and get comprehensive business insights.
                  </p>
                </div>
              )}
              
              {/* Enhanced Search Box */}
              <div className="relative group">
                <div className="absolute inset-0 bg-gradient-to-r from-blue-400 to-purple-400 rounded-2xl blur-lg opacity-20 group-hover:opacity-30 transition-opacity"></div>
                <div className="relative bg-white/80 backdrop-blur-xl rounded-2xl border border-white/30 shadow-xl hover:shadow-2xl transition-all duration-300">
                  <div className="flex items-center p-4">
                    <Search className="w-6 h-6 text-gray-400 mr-4 flex-shrink-0" />
                    <input
                      ref={inputRef}
                      type="text"
                      value={query}
                      onChange={(e) => setQuery(e.target.value)}
                      onKeyPress={handleKeyPress}
                      placeholder="Ask complex questions about your graph data..."
                      className="flex-1 text-lg bg-transparent border-none outline-none text-gray-800 placeholder-gray-500"
                      disabled={isLoading}
                    />
                    {isLoading && (
                      <div className="flex items-center mr-2">
                        <Loader2 className="w-5 h-5 text-blue-500 animate-spin mr-2" />
                        <span className="text-sm text-gray-500">Reasoning...</span>
                      </div>
                    )}
                    <button
                      onClick={() => handleAdvancedSearch()}
                      disabled={!query.trim() || isLoading}
                      className="ml-2 px-6 py-2 bg-gradient-to-r from-blue-500 to-purple-500 hover:from-blue-600 hover:to-purple-600 disabled:from-gray-400 disabled:to-gray-400 text-white rounded-xl font-medium transition-all duration-200 disabled:cursor-not-allowed flex items-center"
                    >
                      {isLoading ? (
                        <>
                          <Brain className="w-4 h-4 mr-1" />
                          Analyzing...
                        </>
                      ) : (
                        <>
                          <Zap className="w-4 h-4 mr-1" />
                          Analyze
                        </>
                      )}
                    </button>
                  </div>
                </div>
              </div>
              
              {/* Mobile Connection Status */}
              <div className="md:hidden mt-4">
                <ConnectionStatus status={connectionStatus} onRetry={retryConnection} />
              </div>
            </div>

            {/* Results Section */}
            {results.length > 0 && (
              <div ref={resultsRef} className="space-y-8">
                {results.map((result) => (
                  <div key={result.id} className="space-y-4">
                    {/* Query Display */}
                    <div className="bg-white/60 backdrop-blur-sm rounded-xl border border-white/30 p-4">
                      <div className="flex items-center justify-between">
                        <div className="flex items-center space-x-2 text-sm text-gray-600">
                          <Clock className="w-4 h-4" />
                          <span>{new Date(result.timestamp).toLocaleString()}</span>
                          {result.metadata?.total_agents && (
                            <>
                              <span>•</span>
                              <Brain className="w-4 h-4" />
                              <span>{result.metadata.total_agents} AI Agents</span>
                            </>
                          )}
                        </div>
                      </div>
                      <h3 className="text-lg font-medium text-gray-800 mt-2">"{result.query}"</h3>
                    </div>
                    
                    {/* Results */}
                    {result.isError ? (
                      <div className="bg-red-50 border border-red-200 rounded-xl p-6">
                        <div className="flex items-center space-x-2 mb-3">
                          <AlertCircle className="w-5 h-5 text-red-600" />
                          <h3 className="font-medium text-red-800">System Error</h3>
                        </div>
                        <p className="text-red-700 whitespace-pre-wrap">{result.result}</p>
                      </div>
                    ) : (
                      <BusinessReport 
                        data={result.result}
                        query={result.query}
                        timestamp={result.timestamp}
                        metadata={result.metadata}
                      />
                    )}
                    
                    {/* Enhanced Follow-up Questions */}
                    <AdvancedFollowUpQuestions
                      questions={result.followups}
                      onQuestionSelect={handleFollowUpSelect}
                      isLoading={isLoading}
                      metadata={result.metadata}
                    />
                  </div>
                ))}
              </div>
            )}

            {/* Sample Questions (when no search performed) */}
            {!hasSearched && (
              <div className="mt-16 mb-8">
                <h3 className="text-center text-lg font-medium text-gray-700 mb-6">
                  Try these advanced analysis questions:
                </h3>
                <div className="grid md:grid-cols-2 gap-4 max-w-3xl mx-auto">
                  {[
                    "Perform a comprehensive risk assessment of our network topology",
                    "Analyze customer journey patterns and identify optimization opportunities",
                    "Find hidden connections that could impact our strategic initiatives",
                    "Evaluate the business impact of removing key relationship nodes"
                  ].map((sampleQuery, index) => (
                    <button
                      key={index}
                      onClick={() => {
                        setQuery(sampleQuery);
                        handleAdvancedSearch(sampleQuery);
                      }}
                      className="text-left p-4 bg-white/50 hover:bg-white/70 border border-white/30 rounded-xl transition-all duration-200 backdrop-blur-sm hover:shadow-md group"
                    >
                      <div className="flex items-center justify-between">
                        <span className="text-sm text-gray-700 group-hover:text-gray-900">{sampleQuery}</span>
                        <ChevronRight className="w-4 h-4 text-gray-400 group-hover:text-gray-600" />
                      </div>
                    </button>
                  ))}
                </div>
              </div>
            )}
          </div>
        </main>

        {/* Enhanced Footer */}
        <footer className="w-full mt-16 pb-8">
          <div className="max-w-4xl mx-auto px-6">
            <div className="text-center text-sm text-gray-500 space-y-2">
              <p>FalkorDB Intelligence • Multi-Agent Reasoning • Port {window.location.port || '3001'}</p>
              <div className="flex items-center justify-center space-x-6">
                <span className="flex items-center">
                  <CheckCircle className="w-4 h-4 mr-1 text-green-500" />
                  Query Validation
                </span>
                <span className="flex items-center">
                  <Brain className="w-4 h-4 mr-1 text-blue-500" />
                  AI Reasoning
                </span>
                <span className="flex items-center">
                  <Network className="w-4 h-4 mr-1 text-purple-500" />
                  Graph Intelligence
                </span>
              </div>
            </div>
          </div>
        </footer>
      </div>
    </div>
  );
};

export default FalkorDBApp;
